(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-regular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function () {
  loadCss(function () {
    const appCssContext = __webpack_require__("./ sync ^\\.\\/app\\.(css|scss|less|sass)$");

    global.registerWebpackModules(appCssContext);
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
  const application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

  __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

  loadModuleFn();
  application.loadAppCss();
};

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/admob/admob-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AD_SIZE = {
  SMART_BANNER: "SMART",
  LARGE_BANNER: "LARGE",
  BANNER: "BANNER",
  MEDIUM_RECTANGLE: "MEDIUM",
  FULL_BANNER: "FULL",
  LEADERBOARD: "LEADERBOARD",
  SKYSCRAPER: "SKYSCRAPER",
  FLUID: "FLUID"
};
exports.BANNER_DEFAULTS = {
  margins: {
    top: -1,
    bottom: -1
  },
  testing: false,
  size: "SMART",
  view: undefined
};
exports.rewardedVideoCallbacks = {
  onRewarded: function (reward) {
    return console.warn("onRewarded callback not set - the fallback implementation caught this reward: " + JSON.stringify(reward));
  },
  onLeftApplication: function () {},
  onClosed: function () {},
  onOpened: function () {},
  onStarted: function () {},
  onCompleted: function () {},
  onLoaded: function () {},
  onFailedToLoad: function (err) {
    return console.warn("onFailedToLoad not set - the fallback implementation caught this error: " + err);
  }
};

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/admob/admob.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var firebase_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/firebase-common.js");

var admob_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/admob/admob-common.js");

exports.AD_SIZE = admob_common_1.AD_SIZE;
var _bannerOptions = undefined;
var _rewardBasedVideoAdDelegate = undefined;

function showBanner(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof GADRequest === "undefined") {
        reject("Uncomment AdMob in the plugin's Podfile first");
        return;
      }

      if (firebase_common_1.firebase.admob.adView !== null && firebase_common_1.firebase.admob.adView !== undefined) {
        firebase_common_1.firebase.admob.adView.removeFromSuperview();
        firebase_common_1.firebase.admob.adView = null;
      }

      admob_common_1.BANNER_DEFAULTS.view = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).keyWindow.rootViewController.view;
      var settings = firebase_common_1.firebase.merge(arg, admob_common_1.BANNER_DEFAULTS);
      _bannerOptions = settings;
      var view = settings.view;

      var bannerType = _getBannerType(settings.size);

      var adWidth = bannerType.size.width === 0 ? view.frame.size.width : bannerType.size.width;
      var adHeight = bannerType.size.smartHeight ? bannerType.size.smartHeight : bannerType.size.height;
      var originX = (view.frame.size.width - adWidth) / 2;
      var originY = settings.margins.top > -1 ? settings.margins.top : settings.margins.bottom > -1 ? view.frame.size.height - adHeight - settings.margins.bottom : 0.0;
      var origin_1 = CGPointMake(originX, originY);
      firebase_common_1.firebase.admob.adView = GADBannerView.alloc().initWithAdSizeOrigin(bannerType, origin_1);
      firebase_common_1.firebase.admob.adView.adUnitID = settings.iosBannerId;
      var adRequest = GADRequest.request();

      if (settings.testing) {
        var testDevices = [];

        try {
          testDevices.push("Simulator");
        } catch (ignore) {}

        if (settings.iosTestDeviceIds) {
          testDevices = testDevices.concat(settings.iosTestDeviceIds);
        }

        adRequest.testDevices = testDevices;
      }

      if (settings.keywords !== undefined) {
        adRequest.keywords = settings.keywords;
      }

      firebase_common_1.firebase.admob.adView.rootViewController = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).keyWindow.rootViewController;
      firebase_common_1.firebase.admob.adView.loadRequest(adRequest);
      view.addSubview(firebase_common_1.firebase.admob.adView);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.admob.showBanner: " + ex);
      reject(ex);
    }
  });
}

exports.showBanner = showBanner;

function preloadInterstitial(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof GADRequest === "undefined") {
        reject("Uncomment AdMob in the plugin's Podfile first");
        return;
      }

      var settings = firebase_common_1.firebase.merge(arg, admob_common_1.BANNER_DEFAULTS);
      firebase_common_1.firebase.admob.interstitialView = GADInterstitial.alloc().initWithAdUnitID(settings.iosInterstitialId);
      var delegate_1 = GADInterstitialDelegateImpl.new().initWithCallback(function (ad, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      }, function () {
        arg.onAdClosed && arg.onAdClosed();
        CFRelease(delegate_1);
        delegate_1 = undefined;
      });
      CFRetain(delegate_1);
      firebase_common_1.firebase.admob.interstitialView.delegate = delegate_1;
      var adRequest = GADRequest.request();

      if (settings.testing) {
        var testDevices = [];

        try {
          testDevices.push("Simulator");
        } catch (ignore) {}

        if (settings.iosTestDeviceIds) {
          testDevices = testDevices.concat(settings.iosTestDeviceIds);
        }

        adRequest.testDevices = testDevices;
      }

      firebase_common_1.firebase.admob.interstitialView.loadRequest(adRequest);
    } catch (ex) {
      console.log("Error in firebase.admob.preloadInterstitial: " + ex);
      reject(ex);
    }
  });
}

exports.preloadInterstitial = preloadInterstitial;

function showInterstitial(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof GADRequest === "undefined") {
        reject("Uncomment AdMob in the plugin's Podfile first");
        return;
      }

      if (!arg) {
        if (firebase_common_1.firebase.admob.interstitialView) {
          firebase_common_1.firebase.admob.interstitialView.presentFromRootViewController(utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).keyWindow.rootViewController);
          resolve();
        } else {
          reject("Please call 'preloadInterstitial' first");
        }

        return;
      }

      var settings = firebase_common_1.firebase.merge(arg, admob_common_1.BANNER_DEFAULTS);
      firebase_common_1.firebase.admob.interstitialView = GADInterstitial.alloc().initWithAdUnitID(settings.iosInterstitialId);
      var delegate_2 = GADInterstitialDelegateImpl.new().initWithCallback(function (ad, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          firebase_common_1.firebase.admob.interstitialView.presentFromRootViewController(utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).keyWindow.rootViewController);
          resolve();
        }

        CFRelease(delegate_2);
        delegate_2 = undefined;
      });
      CFRetain(delegate_2);
      firebase_common_1.firebase.admob.interstitialView.delegate = delegate_2;
      var adRequest = GADRequest.request();

      if (settings.testing) {
        var testDevices = [];

        try {
          testDevices.push("Simulator");
        } catch (ignore) {}

        if (settings.iosTestDeviceIds) {
          testDevices = testDevices.concat(settings.iosTestDeviceIds);
        }

        adRequest.testDevices = testDevices;
      }

      firebase_common_1.firebase.admob.interstitialView.loadRequest(adRequest);
    } catch (ex) {
      console.log("Error in firebase.admob.showInterstitial: " + ex);
      reject(ex);
    }
  });
}

exports.showInterstitial = showInterstitial;

function preloadRewardedVideoAd(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof GADRequest === "undefined") {
        reject("Enable AdMob first - see the plugin documentation");
        return;
      }

      var onLoaded = function () {
        return resolve();
      };

      var onError = function (err) {
        return reject(err);
      };

      _rewardBasedVideoAdDelegate = GADRewardBasedVideoAdDelegateImpl.new().initWithCallback(onLoaded, onError);
      CFRetain(_rewardBasedVideoAdDelegate);
      firebase_common_1.firebase.admob.rewardedAdVideoView = GADRewardBasedVideoAd.sharedInstance();
      firebase_common_1.firebase.admob.rewardedAdVideoView.delegate = _rewardBasedVideoAdDelegate;
      var settings = firebase_common_1.firebase.merge(arg, admob_common_1.BANNER_DEFAULTS);
      var adRequest = GADRequest.request();

      if (settings.testing) {
        var testDevices = [];

        try {
          testDevices.push("Simulator");
        } catch (ignore) {}

        if (settings.iosTestDeviceIds) {
          testDevices = testDevices.concat(settings.iosTestDeviceIds);
        }

        adRequest.testDevices = testDevices;
      }

      firebase_common_1.firebase.admob.rewardedAdVideoView.loadRequestWithAdUnitID(adRequest, settings.iosAdPlacementId);
    } catch (ex) {
      console.log("Error in firebase.admob.preloadRewardedVideoAd: " + ex);
      reject(ex);
    }
  });
}

exports.preloadRewardedVideoAd = preloadRewardedVideoAd;

function showRewardedVideoAd(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof GADRequest === "undefined") {
        reject("Enable AdMob first - see the plugin documentation");
        return;
      }

      if (!firebase_common_1.firebase.admob.rewardedAdVideoView) {
        reject("Please call 'preloadRewardedVideoAd' first");
        return;
      }

      if (arg.onRewarded) {
        admob_common_1.rewardedVideoCallbacks.onRewarded = arg.onRewarded;
      }

      if (arg.onLeftApplication) {
        admob_common_1.rewardedVideoCallbacks.onLeftApplication = arg.onLeftApplication;
      }

      if (arg.onClosed) {
        admob_common_1.rewardedVideoCallbacks.onClosed = arg.onClosed;
      }

      if (arg.onOpened) {
        admob_common_1.rewardedVideoCallbacks.onOpened = arg.onOpened;
      }

      if (arg.onStarted) {
        admob_common_1.rewardedVideoCallbacks.onStarted = arg.onStarted;
      }

      if (arg.onCompleted) {
        admob_common_1.rewardedVideoCallbacks.onCompleted = arg.onCompleted;
      }

      firebase_common_1.firebase.admob.rewardedAdVideoView.presentFromRootViewController(utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).keyWindow.rootViewController);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.admob.showRewardedVideoAd: " + ex);
      reject(ex);
    }
  });
}

exports.showRewardedVideoAd = showRewardedVideoAd;

function hideBanner() {
  return new Promise(function (resolve, reject) {
    try {
      if (firebase_common_1.firebase.admob.adView !== null) {
        firebase_common_1.firebase.admob.adView.removeFromSuperview();
        firebase_common_1.firebase.admob.adView = null;
      }

      resolve();
    } catch (ex) {
      console.log("Error in firebase.admob.hideBanner: " + ex);
      reject(ex);
    }
  });
}

exports.hideBanner = hideBanner;

function _getBannerType(size) {
  if (size === admob_common_1.AD_SIZE.BANNER) {
    return {
      "size": {
        "width": 320,
        "height": 50
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.LARGE_BANNER) {
    return {
      "size": {
        "width": 320,
        "height": 100
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.MEDIUM_RECTANGLE) {
    return {
      "size": {
        "width": 300,
        "height": 250
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.FULL_BANNER) {
    return {
      "size": {
        "width": 468,
        "height": 60
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.LEADERBOARD) {
    return {
      "size": {
        "width": 728,
        "height": 90
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.SKYSCRAPER) {
    return {
      "size": {
        "width": 120,
        "height": 600
      },
      "flags": 0
    };
  } else if (size === admob_common_1.AD_SIZE.SMART_BANNER || size === admob_common_1.AD_SIZE.FLUID) {
    var orientation_1 = utils_1.ios.getter(UIDevice, UIDevice.currentDevice).orientation;
    var isIPad = platform_1.device.deviceType === enums_1.DeviceType.Tablet;

    if (orientation_1 === 1 || orientation_1 === 2) {
      return {
        "size": {
          "width": 0,
          "height": 0,
          "smartHeight": isIPad ? 90 : 50
        },
        "flags": 18
      };
    } else {
      return {
        "size": {
          "width": 0,
          "height": 0,
          "smartHeight": isIPad ? 90 : 32
        },
        "flags": 26
      };
    }
  } else {
    return {
      "size": {
        "width": -1,
        "height": -1
      },
      "flags": 0
    };
  }
}

var GADInterstitialDelegateImpl = function (_super) {
  __extends(GADInterstitialDelegateImpl, _super);

  function GADInterstitialDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GADInterstitialDelegateImpl.new = function () {
    if (GADInterstitialDelegateImpl.ObjCProtocols.length === 0 && typeof GADInterstitialDelegate !== "undefined") {
      GADInterstitialDelegateImpl.ObjCProtocols.push(GADInterstitialDelegate);
    }

    return _super.new.call(this);
  };

  GADInterstitialDelegateImpl.prototype.initWithCallback = function (callback, onAdCloseCallback) {
    if (onAdCloseCallback === void 0) {
      onAdCloseCallback = null;
    }

    this.callback = callback;
    this.onAdCloseCallback = onAdCloseCallback;
    return this;
  };

  GADInterstitialDelegateImpl.prototype.interstitialDidReceiveAd = function (ad) {
    this.callback(ad);
  };

  GADInterstitialDelegateImpl.prototype.interstitialDidDismissScreen = function (ad) {
    this.onAdCloseCallback();
  };

  GADInterstitialDelegateImpl.prototype.interstitialDidFailToReceiveAdWithError = function (ad, error) {
    this.callback(ad, error);
  };

  GADInterstitialDelegateImpl.ObjCProtocols = [];
  return GADInterstitialDelegateImpl;
}(NSObject);

var GADRewardBasedVideoAdDelegateImpl = function (_super) {
  __extends(GADRewardBasedVideoAdDelegateImpl, _super);

  function GADRewardBasedVideoAdDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GADRewardBasedVideoAdDelegateImpl.new = function () {
    if (GADRewardBasedVideoAdDelegateImpl.ObjCProtocols.length === 0 && typeof GADRewardBasedVideoAdDelegate !== "undefined") {
      GADRewardBasedVideoAdDelegateImpl.ObjCProtocols.push(GADRewardBasedVideoAdDelegate);
    }

    return _super.new.call(this);
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.initWithCallback = function (loaded, error) {
    this._loaded = loaded;
    this._error = error;
    return this;
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidClose = function (rewardBasedVideoAd) {
    firebase_common_1.firebase.admob.rewardedAdVideoView = undefined;
    admob_common_1.rewardedVideoCallbacks.onClosed();
    setTimeout(function () {
      CFRelease(_rewardBasedVideoAdDelegate);
      _rewardBasedVideoAdDelegate = undefined;
    });
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidCompletePlaying = function (rewardBasedVideoAd) {
    admob_common_1.rewardedVideoCallbacks.onCompleted();
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidFailToLoadWithError = function (rewardBasedVideoAd, error) {
    this._error(error.localizedDescription);
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidOpen = function (rewardBasedVideoAd) {
    admob_common_1.rewardedVideoCallbacks.onOpened();
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidReceiveAd = function (rewardBasedVideoAd) {
    this._loaded();
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidRewardUserWithReward = function (rewardBasedVideoAd, reward) {
    admob_common_1.rewardedVideoCallbacks.onRewarded({
      amount: reward.amount ? reward.amount.doubleValue : undefined,
      type: reward.type
    });
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdDidStartPlaying = function (rewardBasedVideoAd) {
    admob_common_1.rewardedVideoCallbacks.onStarted();
  };

  GADRewardBasedVideoAdDelegateImpl.prototype.rewardBasedVideoAdWillLeaveApplication = function (rewardBasedVideoAd) {
    admob_common_1.rewardedVideoCallbacks.onLeftApplication();
  };

  GADRewardBasedVideoAdDelegateImpl.ObjCProtocols = [];
  return GADRewardBasedVideoAdDelegateImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/analytics/analytics.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function logEvent(options) {
  return new Promise(function (resolve, reject) {
    try {
      if (options.key === undefined) {
        reject("Argument 'key' is missing");
        return;
      }

      var dic = NSMutableDictionary.new();

      if (options.parameters !== undefined) {
        for (var p in options.parameters) {
          var param = options.parameters[p];

          if (param.value !== undefined) {
            dic.setObjectForKey(param.value, param.key);
          }
        }
      }

      FIRAnalytics.logEventWithNameParameters(options.key, dic);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.analytics.logEvent: " + ex);
      reject(ex);
    }
  });
}

exports.logEvent = logEvent;

function logComplexEvent(options) {
  return new Promise(function (resolve, reject) {
    try {
      var dic = NSMutableDictionary.new();

      if (options.parameters !== undefined) {
        for (var p in options.parameters) {
          var param = options.parameters[p];

          if (param.type === "array" && param.value !== undefined) {
            var listArray = new Array();

            for (var val in param.value) {
              var value = param.value[val];

              if (value.parameters !== undefined) {
                var dicTemp = NSMutableDictionary.new();

                for (var i in value.parameters) {
                  var item = value.parameters[i];

                  if (item.type !== "array" && item.value !== undefined && item.key !== undefined) {
                    dicTemp.setObjectForKey(item.value, item.key);
                  }
                }

                listArray.push(dicTemp);
              }
            }

            dic.setObjectForKey(listArray, param.key);
          } else if (param.type === "string" || param.type === "double" || param.type === "float" || param.type === "int" || param.type === "long" || param.type === "boolean") {
            dic.setObjectForKey(param.value, param.key);
          }
        }
      }

      FIRAnalytics.logEventWithNameParameters(options.key, dic);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.analytics.logEvent: " + ex);
      reject(ex);
    }
  });
}

exports.logComplexEvent = logComplexEvent;

function setUserId(arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (arg.userId === undefined) {
        reject("Argument 'userId' is missing");
        return;
      }

      FIRAnalytics.setUserID(arg.userId);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.analytics.setUserId: " + ex);
      reject(ex);
    }
  });
}

exports.setUserId = setUserId;

function setUserProperty(options) {
  return new Promise(function (resolve, reject) {
    try {
      if (options.key === undefined) {
        reject("Argument 'key' is missing");
        return;
      }

      if (options.value === undefined) {
        reject("Argument 'value' is missing");
        return;
      }

      FIRAnalytics.setUserPropertyStringForName(options.value, options.key);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.analytics.setUserProperty: " + ex);
      reject(ex);
    }
  });
}

exports.setUserProperty = setUserProperty;

function setScreenName(options) {
  return new Promise(function (resolve, reject) {
    try {
      if (options.screenName === undefined) {
        reject("Argument 'screenName' is missing");
        return;
      }

      FIRAnalytics.setScreenNameScreenClass(options.screenName, null);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.analytics.setScreenName: " + ex);
      reject(ex);
    }
  });
}

exports.setScreenName = setScreenName;

function setAnalyticsCollectionEnabled(enabled) {
  FIRAnalytics.setAnalyticsCollectionEnabled(enabled);
}

exports.setAnalyticsCollectionEnabled = setAnalyticsCollectionEnabled;

function setSessionTimeoutDuration(seconds) {
  FIRAnalytics.setSessionTimeoutInterval(seconds);
}

exports.setSessionTimeoutDuration = setSessionTimeoutDuration;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/crashlytics/crashlytics.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function sendCrashLog(exception) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().recordError(exception);
  }
}

exports.sendCrashLog = sendCrashLog;

function log(msg, tag, priority) {
  if (isCrashlyticsAvailable()) {
    if (tag) {
      TNSCrashlyticsLoggerWrapper.log(tag + " - " + msg);
    } else {
      TNSCrashlyticsLoggerWrapper.log(msg);
    }
  }
}

exports.log = log;

function setString(key, value) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setObjectValueForKey(value, key);
  }
}

exports.setString = setString;

function setBool(key, value) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setBoolValueForKey(value, key);
  }
}

exports.setBool = setBool;

function setFloat(key, value) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setFloatValueForKey(value, key);
  }
}

exports.setFloat = setFloat;

function setInt(key, value) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setIntValueForKey(value, key);
  }
}

exports.setInt = setInt;

function setDouble(key, value) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setFloatValueForKey(value, key);
  }
}

exports.setDouble = setDouble;

function setUserId(id) {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().setUserIdentifier(id);
  }
}

exports.setUserId = setUserId;

function crash() {
  if (isCrashlyticsAvailable()) {
    Crashlytics.sharedInstance().crash();
  }
}

exports.crash = crash;

function isCrashlyticsAvailable() {
  if (typeof Crashlytics === "undefined") {
    console.log("Add 'crashlytics: true' to firebase.nativescript.json and remove the platforms folder");
    return false;
  }

  return true;
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/firebase-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var dialogs_1 = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");

var application_settings_1 = __webpack_require__("../node_modules/tns-core-modules/application-settings/application-settings.js");

var admob = __webpack_require__("../node_modules/nativescript-plugin-firebase/admob/admob.js");

var analytics = __webpack_require__("../node_modules/nativescript-plugin-firebase/analytics/analytics.js");

var crashlytics = __webpack_require__("../node_modules/nativescript-plugin-firebase/crashlytics/crashlytics.js");

var performance = __webpack_require__("../node_modules/nativescript-plugin-firebase/performance/performance.js");

var storage = __webpack_require__("../node_modules/nativescript-plugin-firebase/storage/storage.js");

var mlkit = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/index.js");

var FieldValue = function () {
  function FieldValue(type, value) {
    this.type = type;
    this.value = value;
  }

  FieldValue.serverTimestamp = function () {
    return "SERVER_TIMESTAMP";
  };

  FieldValue.delete = function () {
    return "DELETE_FIELD";
  };

  FieldValue.arrayUnion = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    return new FieldValue("ARRAY_UNION", elements);
  };

  FieldValue.arrayRemove = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    return new FieldValue("ARRAY_REMOVE", elements);
  };

  return FieldValue;
}();

exports.FieldValue = FieldValue;

var GeoPoint = function () {
  function GeoPoint(latitude, longitude) {
    this.latitude = latitude;
    this.longitude = longitude;
  }

  return GeoPoint;
}();

exports.GeoPoint = GeoPoint;
exports.firebase = {
  initialized: false,
  instance: null,
  firebaseRemoteConfig: null,
  currentAdditionalUserInfo: null,
  authStateListeners: [],
  _receivedNotificationCallback: null,
  _dynamicLinkCallback: null,
  admob: admob,
  analytics: analytics,
  crashlytics: crashlytics,
  performance: performance,
  storage: storage,
  mlkit: mlkit,
  firestore: {
    FieldValue: FieldValue,
    GeoPoint: function (latitude, longitude) {
      return new GeoPoint(latitude, longitude);
    }
  },
  invites: {
    MATCH_TYPE: {
      WEAK: 0,
      STRONG: 1
    }
  },
  dynamicLinks: {
    MATCH_CONFIDENCE: {
      WEAK: 0,
      STRONG: 1
    }
  },
  LoginType: {
    ANONYMOUS: "anonymous",
    PASSWORD: "password",
    PHONE: "phone",
    CUSTOM: "custom",
    FACEBOOK: "facebook",
    GOOGLE: "google",
    EMAIL_LINK: "emailLink"
  },
  LogComplexEventTypeParameter: {
    STRING: "string",
    INT: "int",
    FLOAT: "float",
    DOUBLE: "double",
    LONG: "long",
    ARRAY: "array",
    BOOLEAN: "boolean"
  },
  QueryOrderByType: {
    KEY: "key",
    VALUE: "value",
    CHILD: "child",
    PRIORITY: "priority"
  },
  QueryLimitType: {
    FIRST: "first",
    LAST: "last"
  },
  QueryRangeType: {
    START_AT: "startAt",
    END_AT: "endAt",
    EQUAL_TO: "equalTo"
  },
  addAuthStateListener: function (listener) {
    if (exports.firebase.authStateListeners.indexOf(listener) === -1) {
      exports.firebase.authStateListeners.push(listener);
    }

    return true;
  },
  removeAuthStateListener: function (listener) {
    var index = exports.firebase.authStateListeners.indexOf(listener);

    if (index >= 0) {
      exports.firebase.authStateListeners.splice(index, 1);
      return true;
    } else {
      return false;
    }
  },
  hasAuthStateListener: function (listener) {
    return exports.firebase.authStateListeners.indexOf(listener) >= 0;
  },
  notifyAuthStateListeners: function (data) {
    exports.firebase.authStateListeners.forEach(function (listener) {
      try {
        if (listener.thisArg) {
          listener.onAuthStateChanged.call(listener.thisArg, data);
        } else if (listener.onAuthStateChanged) {
          listener.onAuthStateChanged(data);
        } else {
          listener(data);
        }
      } catch (ex) {
        console.error("Firebase AuthStateListener failed to trigger", listener, ex);
      }
    });
  },
  rememberEmailForEmailLinkLogin: function (email) {
    application_settings_1.setString("FirebasePlugin.EmailLinkLogin", email);
  },
  getRememberedEmailForEmailLinkLogin: function () {
    return application_settings_1.getString("FirebasePlugin.EmailLinkLogin");
  },
  strongTypeify: function (value) {
    if (value === "true") {
      value = true;
    } else if (value === "false") {
      value = false;
    } else if (parseFloat(value) === value) {
      value = parseFloat(value);
    } else if (parseInt(value) === value) {
      value = parseInt(value);
    }

    return value;
  },
  requestPhoneAuthVerificationCode: function (onUserResponse, verificationPrompt) {
    dialogs_1.prompt(verificationPrompt || "Verification code").then(function (promptResult) {
      if (!promptResult.result) {
        onUserResponse(undefined);
      } else {
        onUserResponse(promptResult.text);
      }
    });
  },
  moveLoginOptionsToObjects: function (loginOptions) {
    if (loginOptions.email) {
      console.log("Please update your code: the 'email' property is deprecated and now expected at 'passwordOptions.email'");

      if (!loginOptions.passwordOptions) {
        loginOptions.passwordOptions = {};
      }

      if (!loginOptions.passwordOptions.email) {
        loginOptions.passwordOptions.email = loginOptions.email;
      }
    }

    if (loginOptions.password) {
      console.log("Please update your code: the 'password' property is deprecated and now expected at 'passwordOptions.password'");

      if (!loginOptions.passwordOptions) {
        loginOptions.passwordOptions = {};
      }

      if (!loginOptions.passwordOptions.password) {
        loginOptions.passwordOptions.password = loginOptions.password;
      }
    }

    if (loginOptions.token) {
      console.log("Please update your code: the 'token' property is deprecated and now expected at 'customOptions.token'");

      if (!loginOptions.customOptions) {
        loginOptions.customOptions = {};
      }

      if (!loginOptions.customOptions.token) {
        loginOptions.customOptions.token = loginOptions.token;
      }
    }

    if (loginOptions.tokenProviderFn) {
      console.log("Please update your code: the 'tokenProviderFn' property is deprecated and now expected at 'customOptions.tokenProviderFn'");

      if (!loginOptions.customOptions) {
        loginOptions.customOptions = {};
      }

      if (!loginOptions.customOptions.tokenProviderFn) {
        loginOptions.customOptions.tokenProviderFn = loginOptions.tokenProviderFn;
      }
    }

    if (loginOptions.scope) {
      console.log("Please update your code: the 'scope' property is deprecated and now expected at 'facebookOptions.scope'");

      if (!loginOptions.facebookOptions) {
        loginOptions.facebookOptions = {};
      }

      if (!loginOptions.facebookOptions.scope) {
        loginOptions.facebookOptions.scope = loginOptions.scope;
      }
    }
  },
  merge: function (obj1, obj2) {
    var result = {};

    for (var i in obj1) {
      if (i in obj2 && typeof obj1[i] === "object" && i !== null) {
        result[i] = exports.firebase.merge(obj1[i], obj2[i]);
      } else {
        result[i] = obj1[i];
      }
    }

    for (var i in obj2) {
      if (i in result) {
        continue;
      }

      result[i] = obj2[i];
    }

    return result;
  }
};

var DocumentSnapshot = function () {
  function DocumentSnapshot(id, exists, documentData, ref) {
    this.id = id;
    this.exists = exists;
    this.ref = ref;

    this.data = function () {
      return exists ? documentData : undefined;
    };
  }

  return DocumentSnapshot;
}();

exports.DocumentSnapshot = DocumentSnapshot;

function isDocumentReference(object) {
  return object && object.discriminator === "docRef";
}

exports.isDocumentReference = isDocumentReference;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/firebase.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var firebase_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/firebase-common.js");

var firebaseFunctions = __webpack_require__("../node_modules/nativescript-plugin-firebase/functions/functions.js");

var firebaseMessaging = __webpack_require__("../node_modules/nativescript-plugin-firebase/messaging/messaging.js");

var utils_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/utils.js");

firebase_common_1.firebase._gIDAuthentication = null;
firebase_common_1.firebase._cachedInvitation = null;
firebase_common_1.firebase._cachedDynamicLink = null;
firebase_common_1.firebase._configured = false;
var useExternalPushProvider = NSBundle.mainBundle.infoDictionary.objectForKey("UseExternalPushProvider") === true;
var initializeArguments;

var DocumentSnapshot = function (_super) {
  __extends(DocumentSnapshot, _super);

  function DocumentSnapshot(snapshot) {
    var _this = _super.call(this, snapshot.documentID, snapshot.exists, utils_1.firebaseUtils.toJsObject(snapshot.data()), firebase_common_1.firebase.firestore._getDocumentReference(snapshot.reference)) || this;

    _this.snapshot = snapshot;
    _this.metadata = {
      fromCache: _this.snapshot.metadata.fromCache,
      hasPendingWrites: _this.snapshot.metadata.pendingWrites
    };
    _this.ios = snapshot;
    return _this;
  }

  return DocumentSnapshot;
}(firebase_common_1.DocumentSnapshot);

firebase_common_1.firebase.authStateListener = null;
firebase_common_1.firebase.addOnMessageReceivedCallback = firebaseMessaging.addOnMessageReceivedCallback;
firebase_common_1.firebase.addOnPushTokenReceivedCallback = firebaseMessaging.addOnPushTokenReceivedCallback;
firebase_common_1.firebase.registerForPushNotifications = firebaseMessaging.registerForPushNotifications;
firebase_common_1.firebase.unregisterForPushNotifications = firebaseMessaging.unregisterForPushNotifications;
firebase_common_1.firebase.getCurrentPushToken = firebaseMessaging.getCurrentPushToken;
firebase_common_1.firebase.registerForInteractivePush = firebaseMessaging.registerForInteractivePush;
firebase_common_1.firebase.subscribeToTopic = firebaseMessaging.subscribeToTopic;
firebase_common_1.firebase.unsubscribeFromTopic = firebaseMessaging.unsubscribeFromTopic;
firebase_common_1.firebase.areNotificationsEnabled = firebaseMessaging.areNotificationsEnabled;
firebase_common_1.firebase.functions = firebaseFunctions;

firebase_common_1.firebase.addAppDelegateMethods = function (appDelegate) {
  appDelegate.prototype.applicationDidFinishLaunchingWithOptions = function (application, launchOptions) {
    if (!firebase_common_1.firebase._configured) {
      firebase_common_1.firebase._configured = true;

      if (typeof FIRApp !== "undefined") {
        FIRApp.configure();
      }
    }

    if (launchOptions) {
      var remoteNotification = launchOptions.objectForKey(UIApplicationLaunchOptionsRemoteNotificationKey);

      if (remoteNotification) {
        firebaseMessaging.handleRemoteNotification(application, remoteNotification);
      }
    }

    if (typeof FBSDKApplicationDelegate !== "undefined") {
      FBSDKApplicationDelegate.sharedInstance().applicationDidFinishLaunchingWithOptions(application, launchOptions);
    }

    return true;
  };

  if (typeof FBSDKApplicationDelegate !== "undefined" || typeof GIDSignIn !== "undefined" || typeof FIRInvites !== "undefined" || typeof FIRDynamicLink !== "undefined") {
    appDelegate.prototype.applicationOpenURLSourceApplicationAnnotation = function (application, url, sourceApplication, annotation) {
      var result = false;

      if (typeof FBSDKApplicationDelegate !== "undefined") {
        result = FBSDKApplicationDelegate.sharedInstance().applicationOpenURLSourceApplicationAnnotation(application, url, sourceApplication, annotation);
      }

      if (typeof GIDSignIn !== "undefined") {
        result = result || GIDSignIn.sharedInstance().handleURLSourceApplicationAnnotation(url, sourceApplication, annotation);
      }

      if (typeof FIRInvites !== "undefined") {
        var receivedInvite = FIRInvites.handleURLSourceApplicationAnnotation(url, sourceApplication, annotation);

        if (receivedInvite) {
          console.log("Deep link from " + sourceApplication + ", Invite ID: " + receivedInvite.inviteId + ", App URL: " + receivedInvite.deepLink);
          firebase_common_1.firebase._cachedInvitation = {
            deepLink: receivedInvite.deepLink,
            matchType: receivedInvite.matchType,
            invitationId: receivedInvite.inviteId
          };
          result = true;
        }
      }

      if (typeof FIRDynamicLink !== "undefined") {
        var dynamicLink = FIRDynamicLinks.dynamicLinks().dynamicLinkFromCustomSchemeURL(url);

        if (dynamicLink) {
          firebase_common_1.firebase._cachedDynamicLink = {
            url: dynamicLink.url.absoluteString,
            minimumAppVersion: dynamicLink.minimumAppVersion
          };
          result = true;
        }
      }

      return result;
    };
  }

  if (typeof FBSDKApplicationDelegate !== "undefined" || typeof GIDSignIn !== "undefined" || typeof FIRDynamicLink !== "undefined") {
    appDelegate.prototype.applicationOpenURLOptions = function (application, url, options) {
      var result = false;

      if (typeof FBSDKApplicationDelegate !== "undefined") {
        result = FBSDKApplicationDelegate.sharedInstance().applicationOpenURLSourceApplicationAnnotation(application, url, options.valueForKey(UIApplicationOpenURLOptionsSourceApplicationKey), options.valueForKey(UIApplicationOpenURLOptionsAnnotationKey));
      }

      if (typeof GIDSignIn !== "undefined") {
        result = result || GIDSignIn.sharedInstance().handleURLSourceApplicationAnnotation(url, options.valueForKey(UIApplicationOpenURLOptionsSourceApplicationKey), options.valueForKey(UIApplicationOpenURLOptionsAnnotationKey));
      }

      if (typeof FIRDynamicLink !== "undefined") {
        var dynamicLinks = FIRDynamicLinks.dynamicLinks();
        var dynamicLink = dynamicLinks.dynamicLinkFromCustomSchemeURL(url);

        if (dynamicLink && dynamicLink.url !== null) {
          if (firebase_common_1.firebase._dynamicLinkCallback) {
            firebase_common_1.firebase._dynamicLinkCallback({
              url: dynamicLink.url.absoluteString,
              minimumAppVersion: dynamicLink.minimumAppVersion
            });
          } else {
            firebase_common_1.firebase._cachedDynamicLink = {
              url: dynamicLink.url.absoluteString,
              minimumAppVersion: dynamicLink.minimumAppVersion
            };
          }

          result = true;
        }
      }

      return result;
    };
  }

  if (typeof FIRDynamicLink !== "undefined") {
    appDelegate.prototype.applicationContinueUserActivityRestorationHandler = function (application, userActivity, restorationHandler) {
      var result = false;

      if (userActivity.webpageURL) {
        var fAuth_1 = typeof FIRAuth !== "undefined" ? FIRAuth.auth() : undefined;

        if (fAuth_1 && fAuth_1.isSignInWithEmailLink(userActivity.webpageURL.absoluteString)) {
          var rememberedEmail_1 = firebase_common_1.firebase.getRememberedEmailForEmailLinkLogin();

          if (rememberedEmail_1 !== undefined) {
            if (fAuth_1.currentUser) {
              var onCompletionLink = function (result, error) {
                if (error) {
                  fAuth_1.signInWithEmailLinkCompletion(rememberedEmail_1, userActivity.webpageURL.absoluteString, function (authData, error) {
                    if (!error) {
                      firebase_common_1.firebase.notifyAuthStateListeners({
                        loggedIn: true,
                        user: toLoginResult(authData.user)
                      });
                    }
                  });
                } else {
                  firebase_common_1.firebase.notifyAuthStateListeners({
                    loggedIn: true,
                    user: toLoginResult(result.user)
                  });
                }
              };

              var fIRAuthCredential = FIREmailAuthProvider.credentialWithEmailLink(rememberedEmail_1, userActivity.webpageURL.absoluteString);
              fAuth_1.currentUser.linkAndRetrieveDataWithCredentialCompletion(fIRAuthCredential, onCompletionLink);
            } else {
              fAuth_1.signInWithEmailLinkCompletion(rememberedEmail_1, userActivity.webpageURL.absoluteString, function (authData, error) {
                if (error) {
                  console.log(error.localizedDescription);
                } else {
                  firebase_common_1.firebase.notifyAuthStateListeners({
                    loggedIn: true,
                    user: toLoginResult(authData.user)
                  });
                }
              });
            }
          }

          result = true;
        } else {
          result = FIRDynamicLinks.dynamicLinks().handleUniversalLinkCompletion(userActivity.webpageURL, function (dynamicLink, error) {
            if (dynamicLink.url !== null) {
              if (firebase_common_1.firebase._dynamicLinkCallback) {
                firebase_common_1.firebase._dynamicLinkCallback({
                  url: dynamicLink.url.absoluteString,
                  minimumAppVersion: dynamicLink.minimumAppVersion
                });
              } else {
                firebase_common_1.firebase._cachedDynamicLink = {
                  url: dynamicLink.url.absoluteString,
                  minimumAppVersion: dynamicLink.minimumAppVersion
                };
              }
            }
          });
        }
      }

      return result;
    };
  }

  if (typeof FIRMessaging !== "undefined" || useExternalPushProvider) {
    firebaseMessaging.addBackgroundRemoteNotificationHandler(appDelegate);
  }
};

firebase_common_1.firebase.fetchProvidersForEmail = function (email) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof email !== "string") {
        reject("A parameter representing an email address is required.");
        return;
      }

      FIRAuth.auth().fetchProvidersForEmailCompletion(email, function (providerNSArray, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(utils_1.firebaseUtils.toJsObject(providerNSArray));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.fetchProvidersForEmail: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.fetchSignInMethodsForEmail = function (email) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof email !== "string") {
        reject("A parameter representing an email address is required.");
        return;
      }

      FIRAuth.auth().fetchSignInMethodsForEmailCompletion(email, function (methodsNSArray, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(utils_1.firebaseUtils.toJsObject(methodsNSArray));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.fetchSignInMethodsForEmail: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.addOnDynamicLinkReceivedCallback = function (callback) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRDynamicLink === "undefined") {
        reject("Enable FIRInvites in Podfile first");
        return;
      }

      firebase_common_1.firebase._dynamicLinkCallback = callback;

      if (firebase_common_1.firebase._cachedDynamicLink !== null) {
        callback(firebase_common_1.firebase._cachedDynamicLink);
        firebase_common_1.firebase._cachedDynamicLink = null;
      }

      resolve();
    } catch (ex) {
      console.log("Error in firebase.addOnDynamicLinkReceivedCallback: " + ex);
      reject(ex);
    }
  });
};

if (typeof FIRMessaging !== "undefined" || useExternalPushProvider) {
  firebaseMessaging.prepAppDelegate();
}

function getAppDelegate() {
  if (application.ios.delegate === undefined) {
    var UIApplicationDelegateImpl = function (_super) {
      __extends(UIApplicationDelegateImpl, _super);

      function UIApplicationDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
      }

      UIApplicationDelegateImpl = __decorate([ObjCClass(UIApplicationDelegate)], UIApplicationDelegateImpl);
      return UIApplicationDelegateImpl;
    }(UIResponder);

    application.ios.delegate = UIApplicationDelegateImpl;
  }

  return application.ios.delegate;
}

firebase_common_1.firebase.addAppDelegateMethods(getAppDelegate());

firebase_common_1.firebase.getCallbackData = function (type, snapshot) {
  return {
    type: type,
    key: snapshot.key,
    value: utils_1.firebaseUtils.toJsObject(snapshot.value)
  };
};

firebase_common_1.firebase.init = function (arg) {
  return new Promise(function (resolve, reject) {
    if (firebase_common_1.firebase.initialized) {
      reject("Firebase already initialized");
      return;
    }

    firebase_common_1.firebase.initialized = true;

    try {
      try {
        if (typeof FIRServerValue !== "undefined") {
          firebase_common_1.firebase.ServerValue = {
            TIMESTAMP: FIRServerValue.timestamp()
          };
        }
      } catch (ignore) {}

      arg = arg || {};
      initializeArguments = arg;

      if (FIROptions.defaultOptions() !== null) {
        FIROptions.defaultOptions().deepLinkURLScheme = NSBundle.mainBundle.bundleIdentifier;
      }

      FIRAnalyticsConfiguration.sharedInstance().setAnalyticsCollectionEnabled(arg.analyticsCollectionEnabled !== false);

      if (!firebase_common_1.firebase._configured) {
        firebase_common_1.firebase._configured = true;

        if (typeof FIRApp !== "undefined") {
          FIRApp.configure();
        }
      }

      if (typeof FIRDatabase !== "undefined") {
        if (arg.persist) {
          FIRDatabase.database().persistenceEnabled = true;
        }
      }

      if (typeof FIRFirestore !== "undefined") {
        if (arg.persist === false) {
          var fIRFirestoreSettings = FIRFirestoreSettings.new();
          fIRFirestoreSettings.persistenceEnabled = false;
          FIRFirestore.firestore().settings = fIRFirestoreSettings;
        }
      }

      if (typeof FIRAuth !== "undefined") {
        if (arg.iOSEmulatorFlush) {
          try {
            FIRAuth.auth().signOut();
          } catch (signOutErr) {
            console.log('Sign out of Firebase error: ' + signOutErr);
          }
        }

        if (arg.onAuthStateChanged) {
          firebase_common_1.firebase.authStateListener = function (auth, user) {
            arg.onAuthStateChanged({
              loggedIn: user !== null,
              user: toLoginResult(user)
            });
          };

          FIRAuth.auth().addAuthStateDidChangeListener(firebase_common_1.firebase.authStateListener);
        }

        if (!firebase_common_1.firebase.authStateListener) {
          firebase_common_1.firebase.authStateListener = function (auth, user) {
            firebase_common_1.firebase.notifyAuthStateListeners({
              loggedIn: user !== null,
              user: toLoginResult(user)
            });
          };

          FIRAuth.auth().addAuthStateDidChangeListener(firebase_common_1.firebase.authStateListener);
        }
      }

      if (arg.onDynamicLinkCallback !== undefined) {
        firebase_common_1.firebase.addOnDynamicLinkReceivedCallback(arg.onDynamicLinkCallback);
      }

      if (typeof FBSDKAppEvents !== "undefined") {
        FBSDKAppEvents.activateApp();
      }

      if (typeof FIRMessaging !== "undefined") {
        firebaseMessaging.initFirebaseMessaging(arg);
      }

      if (arg.storageBucket) {
        if (typeof FIRStorage === "undefined") {
          reject("Uncomment Storage in the plugin's Podfile first");
          return;
        }

        firebase_common_1.firebase.storageBucket = FIRStorage.storage().referenceForURL(arg.storageBucket);
      }

      resolve(typeof FIRDatabase !== "undefined" ? FIRDatabase.database().reference() : undefined);
    } catch (ex) {
      console.log("Error in firebase.init: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.getRemoteConfig = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRRemoteConfig === "undefined") {
        reject("Uncomment RemoteConfig in the plugin's Podfile first");
        return;
      }

      if (arg.properties === undefined) {
        reject("Argument 'properties' is missing");
        return;
      }

      var firebaseRemoteConfig_1 = FIRRemoteConfig.remoteConfig();
      firebaseRemoteConfig_1.configSettings = new FIRRemoteConfigSettings({
        developerModeEnabled: arg.developerMode || false
      });
      var dic = NSMutableDictionary.new();

      for (var p in arg.properties) {
        var prop = arg.properties[p];

        if (prop.default !== undefined) {
          dic.setObjectForKey(prop.default, prop.key);
        }
      }

      firebaseRemoteConfig_1.setDefaults(dic);

      var onCompletion = function (remoteConfigFetchStatus, error) {
        if (remoteConfigFetchStatus === 1 || remoteConfigFetchStatus === 3) {
          var activated = firebaseRemoteConfig_1.activateFetched();
          var result = {
            lastFetch: firebaseRemoteConfig_1.lastFetchTime,
            throttled: remoteConfigFetchStatus === 3,
            properties: {}
          };

          for (var p in arg.properties) {
            var prop = arg.properties[p];
            var key = prop.key;
            var value = firebaseRemoteConfig_1.configValueForKey(key).stringValue;
            result.properties[key] = firebase_common_1.firebase.strongTypeify(value);
          }

          resolve(result);
        } else {
          reject(error.localizedDescription);
        }
      };

      var expirationDuration = arg.cacheExpirationSeconds || 43200;
      firebaseRemoteConfig_1.fetchWithExpirationDurationCompletionHandler(expirationDuration, onCompletion);
    } catch (ex) {
      console.log("Error in firebase.getRemoteConfig: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.getCurrentUser = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var fAuth = FIRAuth.auth();

      if (fAuth === null) {
        reject("Run init() first!");
        return;
      }

      var user = fAuth.currentUser;

      if (user) {
        resolve(toLoginResult(user));
      } else {
        reject();
      }
    } catch (ex) {
      console.log("Error in firebase.getCurrentUser: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.sendEmailVerification = function (actionCodeSettings) {
  return new Promise(function (resolve, reject) {
    try {
      var fAuth = FIRAuth.auth();

      if (fAuth === null) {
        reject("Run init() first!");
        return;
      }

      var user = fAuth.currentUser;

      if (user) {
        var onCompletion = function (error) {
          if (error) {
            reject(error.localizedDescription);
          } else {
            resolve(true);
          }
        };

        if (actionCodeSettings) {
          var firActionCodeSettings = FIRActionCodeSettings.new();

          if (actionCodeSettings.handleCodeInApp !== undefined) {
            firActionCodeSettings.handleCodeInApp = actionCodeSettings.handleCodeInApp;
          }

          if (actionCodeSettings.url) {
            firActionCodeSettings.URL = NSURL.URLWithString(actionCodeSettings.url);
          }

          if (actionCodeSettings.iOS) {
            if (actionCodeSettings.iOS.bundleId) {
              firActionCodeSettings.setIOSBundleID(actionCodeSettings.iOS.bundleId);
            }

            if (actionCodeSettings.iOS.dynamicLinkDomain) {
              firActionCodeSettings.dynamicLinkDomain = actionCodeSettings.iOS.dynamicLinkDomain;
            }
          }

          if (actionCodeSettings.android && actionCodeSettings.android.packageName) {
            firActionCodeSettings.setAndroidPackageNameInstallIfNotAvailableMinimumVersion(actionCodeSettings.android.packageName, actionCodeSettings.android.installApp, actionCodeSettings.android.minimumVersion || null);
          }

          user.sendEmailVerificationWithActionCodeSettingsCompletion(firActionCodeSettings, onCompletion);
        } else {
          user.sendEmailVerificationWithCompletion(onCompletion);
        }
      } else {
        reject("Log in first");
      }
    } catch (ex) {
      console.log("Error in firebase.sendEmailVerification: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.logout = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      FIRAuth.auth().signOut();
      firebase_common_1.firebase.currentAdditionalUserInfo = null;

      if (typeof GIDSignIn !== "undefined") {
        GIDSignIn.sharedInstance().disconnect();
      }

      if (typeof FBSDKLoginManager !== "undefined") {
        FBSDKLoginManager.alloc().logOut();
      }

      resolve();
    } catch (ex) {
      console.log("Error in firebase.logout: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.unlink = function (providerId) {
  return new Promise(function (resolve, reject) {
    try {
      var user = FIRAuth.auth().currentUser;

      if (!user) {
        reject("Not logged in");
        return;
      }

      user.unlinkFromProviderCompletion(providerId, function (user, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(user);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.logout: " + ex);
      reject(ex);
    }
  });
};

function toLoginResult(user, additionalUserInfo) {
  if (!user) {
    return null;
  }

  if (additionalUserInfo) {
    firebase_common_1.firebase.currentAdditionalUserInfo = additionalUserInfo;
  }

  var providers = [];

  if (user.providerData) {
    for (var i = 0, l = user.providerData.count; i < l; i++) {
      var firUserInfo = user.providerData.objectAtIndex(i);
      var pid = firUserInfo.valueForKey("providerID");

      if (pid === 'facebook.com' && typeof FBSDKAccessToken !== "undefined") {
        var fbCurrentAccessToken = FBSDKAccessToken.currentAccessToken();
        providers.push({
          id: pid,
          token: fbCurrentAccessToken ? fbCurrentAccessToken.tokenString : null
        });
      } else {
        providers.push({
          id: pid
        });
      }
    }
  }

  var loginResult = {
    uid: user.uid,
    anonymous: user.anonymous,
    isAnonymous: user.anonymous,
    providers: providers,
    photoURL: user.photoURL ? user.photoURL.absoluteString : null,
    email: user.email,
    emailVerified: user.emailVerified,
    displayName: user.displayName,
    phoneNumber: user.phoneNumber,
    refreshToken: user.refreshToken,
    metadata: {
      creationTimestamp: user.metadata.creationDate,
      lastSignInTimestamp: user.metadata.lastSignInDate
    },
    getIdToken: function (forceRefresh) {
      return new Promise(function (resolve, reject) {
        firebase_common_1.firebase.getAuthToken({
          forceRefresh: forceRefresh
        }).then(function (result) {
          return resolve(result.token);
        }).catch(reject);
      });
    },
    getIdTokenResult: function (forceRefresh) {
      return new Promise(function (resolve, reject) {
        firebase_common_1.firebase.getAuthToken({
          forceRefresh: forceRefresh
        }).then(function (result) {
          return resolve(result);
        }).catch(reject);
      });
    },
    sendEmailVerification: function (actionCodeSettings) {
      return firebase_common_1.firebase.sendEmailVerification(actionCodeSettings);
    }
  };

  if (firebase_common_1.firebase.currentAdditionalUserInfo) {
    loginResult.additionalUserInfo = {
      providerId: firebase_common_1.firebase.currentAdditionalUserInfo.providerID,
      username: firebase_common_1.firebase.currentAdditionalUserInfo.username,
      isNewUser: firebase_common_1.firebase.currentAdditionalUserInfo.newUser,
      profile: utils_1.firebaseUtils.toJsObject(firebase_common_1.firebase.currentAdditionalUserInfo.profile)
    };
  }

  return loginResult;
}

firebase_common_1.firebase.getAuthToken = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var fAuth = FIRAuth.auth();

      if (fAuth === null) {
        reject("Run init() first!");
        return;
      }

      var user = fAuth.currentUser;

      if (user) {
        user.getIDTokenResultForcingRefreshCompletion(arg.forceRefresh, function (result, error) {
          if (error) {
            reject(error.localizedDescription);
          } else {
            resolve({
              token: result.token,
              claims: utils_1.firebaseUtils.toJsObject(result.claims),
              signInProvider: result.signInProvider,
              expirationTime: utils_1.firebaseUtils.toJsObject(result.expirationDate),
              issuedAtTime: utils_1.firebaseUtils.toJsObject(result.issuedAtDate),
              authTime: utils_1.firebaseUtils.toJsObject(result.authDate)
            });
          }
        });
      } else {
        reject("Log in first");
      }
    } catch (ex) {
      console.log("Error in firebase.getAuthToken: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.login = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletionWithAuthResult_1 = function (authResult, error) {
        if (error) {
          if (typeof GIDSignIn !== "undefined") {
            GIDSignIn.sharedInstance().disconnect();
          }

          reject(error.localizedDescription);
        } else {
          resolve(toLoginResult(authResult && authResult.user, authResult && authResult.additionalUserInfo));
          firebase_common_1.firebase.notifyAuthStateListeners({
            loggedIn: true,
            user: toLoginResult(authResult.user)
          });
        }
      };

      var fAuth_2 = FIRAuth.auth();

      if (fAuth_2 === null) {
        reject("Run init() first!");
        return;
      }

      firebase_common_1.firebase.moveLoginOptionsToObjects(arg);

      if (arg.type === firebase_common_1.firebase.LoginType.ANONYMOUS) {
        fAuth_2.signInAnonymouslyWithCompletion(onCompletionWithAuthResult_1);
      } else if (arg.type === firebase_common_1.firebase.LoginType.PASSWORD) {
        if (!arg.passwordOptions || !arg.passwordOptions.email || !arg.passwordOptions.password) {
          reject("Auth type PASSWORD requires an 'passwordOptions.email' and 'passwordOptions.password' argument");
          return;
        }

        var fIRAuthCredential_1 = FIREmailAuthProvider.credentialWithEmailPassword(arg.passwordOptions.email, arg.passwordOptions.password);

        if (fAuth_2.currentUser) {
          var onCompletionLink = function (authData, error) {
            if (error) {
              log("--- linking error: " + error.localizedDescription);
              fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_1, onCompletionWithAuthResult_1);
            } else {
              onCompletionWithAuthResult_1(authData, error);
            }
          };

          fAuth_2.currentUser.linkAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_1, onCompletionLink);
        } else {
          fAuth_2.signInWithEmailPasswordCompletion(arg.passwordOptions.email, arg.passwordOptions.password, onCompletionWithAuthResult_1);
        }
      } else if (arg.type === firebase_common_1.firebase.LoginType.EMAIL_LINK) {
        if (!arg.emailLinkOptions || !arg.emailLinkOptions.email) {
          reject("Auth type EMAIL_LINK requires an 'emailLinkOptions.email' argument");
          return;
        }

        if (!arg.emailLinkOptions.url) {
          reject("Auth type EMAIL_LINK requires an 'emailLinkOptions.url' argument");
          return;
        }

        var firActionCodeSettings = FIRActionCodeSettings.new();
        firActionCodeSettings.URL = NSURL.URLWithString(arg.emailLinkOptions.url);
        firActionCodeSettings.handleCodeInApp = true;
        firActionCodeSettings.setIOSBundleID(arg.emailLinkOptions.iOS ? arg.emailLinkOptions.iOS.bundleId : NSBundle.mainBundle.bundleIdentifier);
        firActionCodeSettings.setAndroidPackageNameInstallIfNotAvailableMinimumVersion(arg.emailLinkOptions.android ? arg.emailLinkOptions.android.packageName : NSBundle.mainBundle.bundleIdentifier, arg.emailLinkOptions.android ? arg.emailLinkOptions.android.installApp || false : false, arg.emailLinkOptions.android ? arg.emailLinkOptions.android.minimumVersion || "1" : "1");
        fAuth_2.sendSignInLinkToEmailActionCodeSettingsCompletion(arg.emailLinkOptions.email, firActionCodeSettings, function (error) {
          if (error) {
            reject(error.localizedDescription);
            return;
          }

          firebase_common_1.firebase.rememberEmailForEmailLinkLogin(arg.emailLinkOptions.email);
          resolve();
        });
      } else if (arg.type === firebase_common_1.firebase.LoginType.PHONE) {
        if (!arg.phoneOptions || !arg.phoneOptions.phoneNumber) {
          reject("Auth type PHONE requires a 'phoneOptions.phoneNumber' argument");
          return;
        }

        FIRPhoneAuthProvider.provider().verifyPhoneNumberUIDelegateCompletion(arg.phoneOptions.phoneNumber, null, function (verificationID, error) {
          if (error) {
            reject(error.localizedDescription);
            return;
          }

          firebase_common_1.firebase.requestPhoneAuthVerificationCode(function (userResponse) {
            if (userResponse === undefined) {
              reject("Prompt was canceled");
              return;
            }

            var fIRAuthCredential = FIRPhoneAuthProvider.provider().credentialWithVerificationIDVerificationCode(verificationID, userResponse);

            if (fAuth_2.currentUser) {
              var onCompletionLink = function (authData, error) {
                if (error) {
                  fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential, onCompletionWithAuthResult_1);
                } else {
                  onCompletionWithAuthResult_1(authData, error);
                }
              };

              fAuth_2.currentUser.linkAndRetrieveDataWithCredentialCompletion(fIRAuthCredential, onCompletionLink);
            } else {
              fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential, onCompletionWithAuthResult_1);
            }
          }, arg.phoneOptions.verificationPrompt);
        });
      } else if (arg.type === firebase_common_1.firebase.LoginType.CUSTOM) {
        if (!arg.customOptions || !arg.customOptions.token && !arg.customOptions.tokenProviderFn) {
          reject("Auth type CUSTOM requires a 'customOptions.token' or 'customOptions.tokenProviderFn' argument");
          return;
        }

        if (arg.customOptions.token) {
          fAuth_2.signInAndRetrieveDataWithCustomTokenCompletion(arg.customOptions.token, onCompletionWithAuthResult_1);
        } else if (arg.customOptions.tokenProviderFn) {
          arg.customOptions.tokenProviderFn().then(function (token) {
            fAuth_2.signInAndRetrieveDataWithCustomTokenCompletion(token, onCompletionWithAuthResult_1);
          }, function (error) {
            reject(error);
          });
        }
      } else if (arg.type === firebase_common_1.firebase.LoginType.FACEBOOK) {
        if (typeof FBSDKLoginManager === "undefined") {
          reject("Facebook SDK not installed - see Podfile");
          return;
        }

        var onFacebookCompletion = function (fbSDKLoginManagerLoginResult, error) {
          if (error) {
            console.log("Facebook login error " + error);
            reject(error.localizedDescription);
          } else if (fbSDKLoginManagerLoginResult.isCancelled) {
            reject("login cancelled");
          } else {
            var fIRAuthCredential_2 = FIRFacebookAuthProvider.credentialWithAccessToken(FBSDKAccessToken.currentAccessToken().tokenString);

            if (fAuth_2.currentUser) {
              var onCompletionLink = function (authData, error) {
                if (error) {
                  log("--- linking error: " + error.localizedDescription);
                  fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_2, onCompletionWithAuthResult_1);
                } else {
                  onCompletionWithAuthResult_1(authData);
                }
              };

              fAuth_2.currentUser.linkAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_2, onCompletionLink);
            } else {
              fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_2, onCompletionWithAuthResult_1);
            }
          }
        };

        var fbSDKLoginManager = FBSDKLoginManager.new();
        var scope = ["public_profile", "email"];

        if (arg.facebookOptions && arg.facebookOptions.scope) {
          scope = arg.facebookOptions.scope;
        }

        fbSDKLoginManager.logInWithReadPermissionsFromViewControllerHandler(scope, null, onFacebookCompletion);
      } else if (arg.type === firebase_common_1.firebase.LoginType.GOOGLE) {
        if (typeof GIDSignIn === "undefined") {
          reject("Google Sign In not installed - see Podfile");
          return;
        }

        var sIn = GIDSignIn.sharedInstance();
        sIn.uiDelegate = arg.ios && arg.ios.controller ? arg.ios.controller : application.ios.rootController;
        sIn.clientID = FIRApp.defaultApp().options.clientID;

        if (arg.googleOptions && arg.googleOptions.hostedDomain) {
          sIn.hostedDomain = arg.googleOptions.hostedDomain;
        }

        var delegate_1 = GIDSignInDelegateImpl.new().initWithCallback(function (user, error) {
          if (error === null) {
            firebase_common_1.firebase._gIDAuthentication = user.authentication;
            var fIRAuthCredential_3 = FIRGoogleAuthProvider.credentialWithIDTokenAccessToken(firebase_common_1.firebase._gIDAuthentication.idToken, firebase_common_1.firebase._gIDAuthentication.accessToken);

            if (fAuth_2.currentUser) {
              var onCompletionLink = function (user, error) {
                if (error) {
                  fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_3, onCompletionWithAuthResult_1);
                } else {
                  onCompletionWithAuthResult_1(user);
                }
              };

              fAuth_2.currentUser.linkAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_3, onCompletionLink);
            } else {
              fAuth_2.signInAndRetrieveDataWithCredentialCompletion(fIRAuthCredential_3, onCompletionWithAuthResult_1);
            }
          } else {
            reject(error.localizedDescription);
          }

          CFRelease(delegate_1);
          delegate_1 = undefined;
        });
        CFRetain(delegate_1);
        sIn.delegate = delegate_1;
        sIn.signIn();
      } else {
        reject("Unsupported auth type: " + arg.type);
      }
    } catch (ex) {
      console.log("Error in firebase.login: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.reauthenticate = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var fAuth = FIRAuth.auth();

      if (fAuth === null) {
        reject("Run init() first!");
        return;
      }

      var user = fAuth.currentUser;

      if (user === null) {
        reject("no current user");
        return;
      }

      firebase_common_1.firebase.moveLoginOptionsToObjects(arg);
      var authCredential = null;

      if (arg.type === firebase_common_1.firebase.LoginType.PASSWORD) {
        if (!arg.passwordOptions || !arg.passwordOptions.email || !arg.passwordOptions.password) {
          reject("Auth type PASSWORD requires an 'passwordOptions.email' and 'passwordOptions.password' argument");
          return;
        }

        authCredential = FIREmailAuthProvider.credentialWithEmailPassword(arg.passwordOptions.email, arg.passwordOptions.password);
      } else if (arg.type === firebase_common_1.firebase.LoginType.GOOGLE) {
        if (!firebase_common_1.firebase._gIDAuthentication) {
          reject("Not currently logged in with Google");
          return;
        }

        authCredential = FIRGoogleAuthProvider.credentialWithIDTokenAccessToken(firebase_common_1.firebase._gIDAuthentication.idToken, firebase_common_1.firebase._gIDAuthentication.accessToken);
      } else if (arg.type === firebase_common_1.firebase.LoginType.FACEBOOK) {
        var currentAccessToken = FBSDKAccessToken.currentAccessToken();

        if (!currentAccessToken) {
          reject("Not currently logged in with Facebook");
          return;
        }

        authCredential = FIRFacebookAuthProvider.credentialWithAccessToken(currentAccessToken.tokenString);
      }

      if (authCredential === null) {
        reject("arg.type should be one of LoginType.PASSWORD | LoginType.GOOGLE | LoginType.FACEBOOK");
        return;
      }

      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      user.reauthenticateWithCredentialCompletion(authCredential, onCompletion);
    } catch (ex) {
      console.log("Error in firebase.reauthenticate: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.reloadUser = function () {
  return new Promise(function (resolve, reject) {
    try {
      var user = FIRAuth.auth().currentUser;

      if (user === null) {
        reject("no current user");
        return;
      }

      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      user.reloadWithCompletion(onCompletion);
    } catch (ex) {
      console.log("Error in firebase.reloadUser: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.sendPasswordResetEmail = function (email) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      FIRAuth.auth().sendPasswordResetWithEmailCompletion(email, onCompletion);
    } catch (ex) {
      console.log("Error in firebase.sendPasswordResetEmail: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.updateEmail = function (newEmail) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      var user = FIRAuth.auth().currentUser;

      if (user === null) {
        reject("no current user");
      } else {
        user.updateEmailCompletion(newEmail, onCompletion);
      }
    } catch (ex) {
      console.log("Error in firebase.updateEmail: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.updatePassword = function (newPassword) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      var user = FIRAuth.auth().currentUser;

      if (user === null) {
        reject("no current user");
      } else {
        user.updatePasswordCompletion(newPassword, onCompletion);
      }
    } catch (ex) {
      console.log("Error in firebase.updatePassword: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.createUser = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (authResult, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(toLoginResult(authResult.user, authResult.additionalUserInfo));
        }
      };

      if (!arg.email || !arg.password) {
        reject("Creating a user requires an email and password argument");
      } else {
        FIRAuth.auth().createUserWithEmailPasswordCompletion(arg.email, arg.password, onCompletion);
      }
    } catch (ex) {
      console.log("Error in firebase.createUser: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.deleteUser = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var user = FIRAuth.auth().currentUser;

      if (user === null) {
        reject("no current user");
        return;
      }

      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      user.deleteWithCompletion(onCompletion);
    } catch (ex) {
      console.log("Error in firebase.deleteUser: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.updateProfile = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      var fAuth = FIRAuth.auth();

      if (fAuth === null) {
        reject("Run init() first!");
        return;
      }

      if (!arg.displayName && !arg.photoURL) {
        reject("Updating a profile requires a displayName and / or a photoURL argument");
      } else {
        var user = fAuth.currentUser;

        if (user) {
          var changeRequest = user.profileChangeRequest();
          changeRequest.displayName = arg.displayName;
          changeRequest.photoURL = NSURL.URLWithString(arg.photoURL);
          changeRequest.commitChangesWithCompletion(onCompletion);
        } else {
          reject();
        }
      }
    } catch (ex) {
      console.log("Error in firebase.updateProfile: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase._addObservers = function (to, updateCallback) {
  var listeners = [];
  listeners.push(to.observeEventTypeWithBlock(0, function (snapshot) {
    updateCallback(firebase_common_1.firebase.getCallbackData('ChildAdded', snapshot));
  }));
  listeners.push(to.observeEventTypeWithBlock(1, function (snapshot) {
    updateCallback(firebase_common_1.firebase.getCallbackData('ChildRemoved', snapshot));
  }));
  listeners.push(to.observeEventTypeWithBlock(2, function (snapshot) {
    updateCallback(firebase_common_1.firebase.getCallbackData('ChildChanged', snapshot));
  }));
  listeners.push(to.observeEventTypeWithBlock(3, function (snapshot) {
    updateCallback(firebase_common_1.firebase.getCallbackData('ChildMoved', snapshot));
  }));
  return listeners;
};

firebase_common_1.firebase.keepInSync = function (path, switchOn) {
  return new Promise(function (resolve, reject) {
    try {
      var where = FIRDatabase.database().reference().childByAppendingPath(path);
      where.keepSynced(switchOn);
      resolve();
    } catch (ex) {
      console.log("Error in firebase.keepInSync: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.addChildEventListener = function (updateCallback, path) {
  return new Promise(function (resolve, reject) {
    try {
      var where = path === undefined ? FIRDatabase.database().reference() : FIRDatabase.database().reference().childByAppendingPath(path);
      resolve({
        path: path,
        listeners: firebase_common_1.firebase._addObservers(where, updateCallback)
      });
    } catch (ex) {
      console.log("Error in firebase.addChildEventListener: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.addValueEventListener = function (updateCallback, path) {
  return new Promise(function (resolve, reject) {
    try {
      var where = path === undefined ? FIRDatabase.database().reference() : FIRDatabase.database().reference().childByAppendingPath(path);
      var listener = where.observeEventTypeWithBlockWithCancelBlock(4, function (snapshot) {
        updateCallback(firebase_common_1.firebase.getCallbackData('ValueChanged', snapshot));
      }, function (firebaseError) {
        updateCallback({
          error: firebaseError.localizedDescription
        });
      });
      resolve({
        path: path,
        listeners: [listener]
      });
    } catch (ex) {
      console.log("Error in firebase.addChildEventListener: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.getValue = function (path) {
  return new Promise(function (resolve, reject) {
    try {
      var where = path === undefined ? FIRDatabase.database().reference() : FIRDatabase.database().reference().childByAppendingPath(path);
      where.observeSingleEventOfTypeWithBlockWithCancelBlock(4, function (snapshot) {
        resolve(firebase_common_1.firebase.getCallbackData('ValueChanged', snapshot));
      }, function (firebaseError) {
        reject(firebaseError.localizedDescription);
      });
    } catch (ex) {
      console.log("Error in firebase.getValue: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.removeEventListeners = function (listeners, path) {
  return new Promise(function (resolve, reject) {
    try {
      var where = path === undefined ? FIRDatabase.database().reference() : FIRDatabase.database().reference().childByAppendingPath(path);

      for (var i = 0; i < listeners.length; i++) {
        var listener = listeners[i];
        where.removeObserverWithHandle(listener);
      }

      resolve();
    } catch (ex) {
      console.log("Error in firebase.removeEventListeners: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.push = function (path, val) {
  return new Promise(function (resolve, reject) {
    try {
      var ref_1 = FIRDatabase.database().reference().childByAppendingPath(path).childByAutoId();
      ref_1.setValueWithCompletionBlock(val, function (error, dbRef) {
        error ? reject(error.localizedDescription) : resolve({
          key: ref_1.key
        });
      });
    } catch (ex) {
      console.log("Error in firebase.push: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.setValue = function (path, val) {
  return new Promise(function (resolve, reject) {
    try {
      FIRDatabase.database().reference().childByAppendingPath(path).setValueWithCompletionBlock(val, function (error, dbRef) {
        error ? reject(error.localizedDescription) : resolve();
      });
    } catch (ex) {
      console.log("Error in firebase.setValue: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.update = function (path, val) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof val === "object") {
        FIRDatabase.database().reference().childByAppendingPath(path).updateChildValuesWithCompletionBlock(val, function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      } else {
        var lastPartOfPath = path.lastIndexOf("/");
        var pathPrefix = path.substring(0, lastPartOfPath);
        var pathSuffix = path.substring(lastPartOfPath + 1);
        var updateObject = '{"' + pathSuffix + '" : "' + val + '"}';
        FIRDatabase.database().reference().childByAppendingPath(pathPrefix).updateChildValuesWithCompletionBlock(JSON.parse(updateObject), function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      }
    } catch (ex) {
      console.log("Error in firebase.update: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.query = function (updateCallback, path, options) {
  return new Promise(function (resolve, reject) {
    try {
      var where = path === undefined ? FIRDatabase.database().reference() : FIRDatabase.database().reference().childByAppendingPath(path);
      var query = void 0;

      if (options.orderBy.type === firebase_common_1.firebase.QueryOrderByType.KEY) {
        query = where.queryOrderedByKey();
      } else if (options.orderBy.type === firebase_common_1.firebase.QueryOrderByType.VALUE) {
        query = where.queryOrderedByValue();
      } else if (options.orderBy.type === firebase_common_1.firebase.QueryOrderByType.PRIORITY) {
        query = where.queryOrderedByPriority();
      } else if (options.orderBy.type === firebase_common_1.firebase.QueryOrderByType.CHILD) {
        if (options.orderBy.value === undefined || options.orderBy.value === null) {
          reject("When orderBy.type is 'child' you must set orderBy.value as well.");
          return;
        }

        query = where.queryOrderedByChild(options.orderBy.value);
      } else {
        reject("Invalid orderBy.type, use constants like firebase.QueryOrderByType.VALUE");
        return;
      }

      if (options.range && options.range.type) {
        if (options.range.type === firebase_common_1.firebase.QueryRangeType.START_AT) {
          query = query.queryStartingAtValue(options.range.value);
        } else if (options.range.type === firebase_common_1.firebase.QueryRangeType.END_AT) {
          query = query.queryEndingAtValue(options.range.value);
        } else if (options.range.type === firebase_common_1.firebase.QueryRangeType.EQUAL_TO) {
          query = query.queryEqualToValue(options.range.value);
        } else {
          reject("Invalid range.type, use constants like firebase.QueryRangeType.START_AT");
          return;
        }
      }

      if (options.ranges) {
        for (var i = 0; i < options.ranges.length; i++) {
          var range = options.ranges[i];

          if (range.value === undefined || range.value === null) {
            reject("Please set ranges[" + i + "].value");
            return;
          }

          if (range.type === firebase_common_1.firebase.QueryRangeType.START_AT) {
            query = query.queryStartingAtValue(range.value);
          } else if (range.type === firebase_common_1.firebase.QueryRangeType.END_AT) {
            query = query.queryEndingAtValue(range.value);
          } else if (range.type === firebase_common_1.firebase.QueryRangeType.EQUAL_TO) {
            query = query.queryEqualToValue(range.value);
          } else {
            reject("Invalid ranges[" + i + "].type, use constants like firebase.QueryRangeType.START_AT");
            return;
          }
        }
      }

      if (options.limit && options.limit.type) {
        if (options.limit.value === undefined || options.limit.value === null) {
          reject("Please set limit.value");
          return;
        }

        if (options.limit.type === firebase_common_1.firebase.QueryLimitType.FIRST) {
          query = query.queryLimitedToFirst(options.limit.value);
        } else if (options.limit.type === firebase_common_1.firebase.QueryLimitType.LAST) {
          query = query.queryLimitedToLast(options.limit.value);
        } else {
          reject("Invalid limit.type, use constants like firebase.queryOptions.limitType.FIRST");
          return;
        }
      }

      if (options.singleEvent) {
        query.observeSingleEventOfTypeWithBlock(4, function (snapshot) {
          var result = {
            type: "ValueChanged",
            key: snapshot.key,
            value: {},
            children: []
          };

          for (var i = 0; i < snapshot.children.allObjects.count; i++) {
            var snap = snapshot.children.allObjects.objectAtIndex(i);
            var val = utils_1.firebaseUtils.toJsObject(snap.value);
            result.value[snap.key] = val;
            result.children.push(val);
          }

          if (updateCallback) updateCallback(result);
          resolve(result);
        });
      } else {
        resolve({
          path: path,
          listeners: firebase_common_1.firebase._addObservers(query, updateCallback)
        });
      }
    } catch (ex) {
      console.log("Error in firebase.query: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.remove = function (path) {
  return new Promise(function (resolve, reject) {
    try {
      FIRDatabase.database().reference().childByAppendingPath(path).setValueWithCompletionBlock(null, function (error, dbRef) {
        error ? reject(error.localizedDescription) : resolve();
      });
    } catch (ex) {
      console.log("Error in firebase.remove: " + ex);
      reject(ex);
    }
  });
};

var OnDisconnect = function () {
  function OnDisconnect(dbRef, path) {
    this.dbRef = dbRef;
    this.path = path;
  }

  OnDisconnect.prototype.cancel = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        _this.dbRef.cancelDisconnectOperationsWithCompletionBlock(function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      } catch (ex) {
        console.log("Error in firebase.onDisconnect.cancel: " + ex);
        reject(ex);
      }
    });
  };

  OnDisconnect.prototype.remove = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        _this.dbRef.onDisconnectRemoveValueWithCompletionBlock(function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      } catch (ex) {
        console.log("Error in firebase.onDisconnect.remove: " + ex);
        reject(ex);
      }
    });
  };

  OnDisconnect.prototype.set = function (value) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        _this.dbRef.onDisconnectSetValueWithCompletionBlock(value, function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      } catch (ex) {
        console.log("Error in firebase.onDisconnect.set: " + ex);
        reject(ex);
      }
    });
  };

  OnDisconnect.prototype.setWithPriority = function (value, priority) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        _this.dbRef.onDisconnectSetValueAndPriorityWithCompletionBlock(value, priority, function (error, dbRef) {
          error ? reject(error.localizedDescription) : resolve();
        });
      } catch (ex) {
        console.log("Error in firebase.onDisconnect.setWithPriority: " + ex);
        reject(ex);
      }
    });
  };

  OnDisconnect.prototype.update = function (values) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        if (typeof values === "object") {
          _this.dbRef.onDisconnectUpdateChildValuesWithCompletionBlock(values, function (error, dbRef) {
            error ? reject(error.localizedDescription) : resolve();
          });
        } else {
          var lastPartOfPath = _this.path.lastIndexOf("/");

          var pathPrefix = _this.path.substring(0, lastPartOfPath);

          var pathSuffix = _this.path.substring(lastPartOfPath + 1);

          var updateObject = '{"' + pathSuffix + '" : "' + values + '"}';
          FIRDatabase.database().reference().childByAppendingPath(pathPrefix).updateChildValuesWithCompletionBlock(JSON.parse(updateObject), function (error, dbRef) {
            error ? reject(error.localizedDescription) : resolve();
          });
        }
      } catch (ex) {
        console.log("Error in firebase.onDisconnect.update: " + ex);
        reject(ex);
      }
    });
  };

  return OnDisconnect;
}();

firebase_common_1.firebase.onDisconnect = function (path) {
  if (!firebase_common_1.firebase.initialized) {
    console.error("Please run firebase.init() before firebase.onDisconnect()");
    throw new Error("FirebaseApp is not initialized. Make sure you run firebase.init() first");
  }

  var dbRef = FIRDatabase.database().reference().child(path);
  return new OnDisconnect(dbRef, path);
};

firebase_common_1.firebase.transaction = function (path, transactionUpdate, onComplete) {
  return new Promise(function (resolve, reject) {
    if (!firebase_common_1.firebase.initialized) {
      console.error("Please run firebase.init() before firebase.transaction()");
      throw new Error("FirebaseApp is not initialized. Make sure you run firebase.init() first");
    }

    var dbRef = FIRDatabase.database().reference().child(path);
    dbRef.runTransactionBlockAndCompletionBlock(function (mutableData) {
      var desiredValue = transactionUpdate(utils_1.firebaseUtils.toJsObject(mutableData.value));

      if (desiredValue === undefined) {
        return FIRTransactionResult.successWithValue(mutableData);
      } else {
        mutableData.value = desiredValue;
        return FIRTransactionResult.successWithValue(mutableData);
      }
    }, function (error, commited, snapshot) {
      error !== null ? reject(error.localizedDescription) : resolve({
        committed: commited,
        snapshot: nativeSnapshotToWebSnapshot(snapshot)
      });
    });
  });
};

function nativeSnapshotToWebSnapshot(snapshot) {
  function forEach(action) {
    var iterator = snapshot.children;
    var innerSnapshot;
    var datasnapshot;

    while (innerSnapshot = iterator.nextObject()) {
      datasnapshot = nativeSnapshotToWebSnapshot(innerSnapshot);

      if (action(datasnapshot)) {
        return true;
      }
    }

    return false;
  }

  return {
    key: snapshot.key,
    ref: snapshot.ref,
    child: function (path) {
      return nativeSnapshotToWebSnapshot(snapshot.childSnapshotForPath(path));
    },
    exists: function () {
      return snapshot.exists();
    },
    forEach: function (func) {
      return forEach(func);
    },
    getPriority: function () {
      return utils_1.firebaseUtils.toJsObject(snapshot.priority);
    },
    hasChild: function (path) {
      return snapshot.hasChild(path);
    },
    hasChildren: function () {
      return snapshot.hasChildren();
    },
    numChildren: function () {
      return snapshot.childrenCount;
    },
    toJSON: function () {
      return snapshot.valueInExportFormat();
    },
    val: function () {
      return utils_1.firebaseUtils.toJsObject(snapshot.value);
    }
  };
}

firebase_common_1.firebase.enableLogging = function (logging, persistent) {
  FIRDatabase.setLoggingEnabled(logging);
};

firebase_common_1.firebase.sendCrashLog = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      resolve();
    } catch (ex) {
      console.log("Error in firebase.sendCrashLog: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.invites.sendInvitation = function (arg) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRInvites === "undefined") {
        reject("Make sure 'Firebase/Invites' is in the plugin's Podfile");
        return;
      }

      if (!arg.message || !arg.title) {
        reject("The mandatory 'message' or 'title' argument is missing");
        return;
      }

      var inviteDialog = FIRInvites.inviteDialog();
      inviteDialog.performSelectorWithObject("setMessage:", arg.message);
      inviteDialog.performSelectorWithObject("setTitle:", arg.title);

      if (arg.deepLink) {
        inviteDialog.performSelectorWithObject("setDeepLink:", arg.deeplink);
      }

      if (arg.callToActionText) {
        inviteDialog.performSelectorWithObject("setCallToActionText:", arg.callToActionText);
      }

      if (arg.customImage) {
        inviteDialog.performSelectorWithObject("setCustomImage:", arg.customImage);
      }

      if (arg.androidClientID) {
        var targetApplication = FIRInvitesTargetApplication.new();
        targetApplication.androidClientID = arg.androidClientID;
        inviteDialog.performSelectorWithObject("setOtherPlatformsTargetApplication:", targetApplication);
      }

      var delegate_2 = FIRInviteDelegateImpl.new().initWithCallback(function (invitationIds, error) {
        if (error === null) {
          var ids = utils_1.firebaseUtils.toJsObject(invitationIds);
          resolve({
            count: invitationIds.count,
            invitationIds: ids
          });
        } else {
          reject(error.localizedDescription);
        }

        CFRelease(delegate_2);
        delegate_2 = undefined;
      });
      CFRetain(delegate_2);
      inviteDialog.performSelectorWithObject("setInviteDelegate:", delegate_2);
      inviteDialog.performSelector("open");
    } catch (ex) {
      console.log("Error in firebase.sendInvitation: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.invites.getInvitation = function () {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRInvites === "undefined") {
        reject("Make sure 'Firebase/Invites' is in the plugin's Podfile");
        return;
      }

      if (firebase_common_1.firebase._cachedInvitation !== null) {
        resolve(firebase_common_1.firebase._cachedInvitation);
        firebase_common_1.firebase.cachedInvitation = null;
      } else {
        reject("Not launched by invitation");
      }
    } catch (ex) {
      console.log("Error in firebase.getInvitation: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore.WriteBatch = function (nativeWriteBatch) {
  var FirestoreWriteBatch = function () {
    function FirestoreWriteBatch() {
      var _this = this;

      this.set = function (documentRef, data, options) {
        fixSpecialFields(data);
        nativeWriteBatch.setDataForDocumentMerge(data, documentRef.ios, options && options.merge);
        return _this;
      };

      this.update = function (documentRef, data) {
        fixSpecialFields(data);
        nativeWriteBatch.updateDataForDocument(data, documentRef.ios);
        return _this;
      };

      this.delete = function (documentRef) {
        nativeWriteBatch.deleteDocument(documentRef.ios);
        return _this;
      };
    }

    FirestoreWriteBatch.prototype.commit = function () {
      return new Promise(function (resolve, reject) {
        nativeWriteBatch.commitWithCompletion(function (error) {
          error ? reject(error.localizedDescription) : resolve();
        });
      });
    };

    return FirestoreWriteBatch;
  }();

  return new FirestoreWriteBatch();
};

firebase_common_1.firebase.firestore.batch = function () {
  return new firebase_common_1.firebase.firestore.WriteBatch(FIRFirestore.firestore().batch());
};

firebase_common_1.firebase.firestore.Transaction = function (nativeTransaction) {
  var FirestoreTransaction = function () {
    function FirestoreTransaction() {
      var _this = this;

      this.get = function (documentRef) {
        var docSnapshot = nativeTransaction.getDocumentError(documentRef.ios);
        return new DocumentSnapshot(docSnapshot);
      };

      this.set = function (documentRef, data, options) {
        fixSpecialFields(data);
        nativeTransaction.setDataForDocumentMerge(data, documentRef.ios, options && options.merge);
        return _this;
      };

      this.update = function (documentRef, data) {
        fixSpecialFields(data);
        nativeTransaction.updateDataForDocument(data, documentRef.ios);
        return _this;
      };

      this.delete = function (documentRef) {
        nativeTransaction.deleteDocument(documentRef.ios);
        return _this;
      };
    }

    return FirestoreTransaction;
  }();

  return new FirestoreTransaction();
};

firebase_common_1.firebase.firestore.runTransaction = function (updateFunction) {
  return new Promise(function (resolve, reject) {
    FIRFirestore.firestore().runTransactionWithBlockCompletion(function (nativeTransaction, err) {
      var tx = new firebase_common_1.firebase.firestore.Transaction(nativeTransaction);
      return updateFunction(tx);
    }, function (result, error) {
      return error ? reject(error.localizedDescription) : resolve();
    });
  });
};

firebase_common_1.firebase.firestore.settings = function (settings) {
  if (typeof FIRFirestore !== "undefined") {
    try {
      var fIRFirestoreSettings = FIRFirestoreSettings.new();
      if (initializeArguments.persist !== undefined) fIRFirestoreSettings.persistenceEnabled = initializeArguments.persist;
      if (settings.ssl !== undefined) fIRFirestoreSettings.sslEnabled = settings.ssl;
      if (settings.host !== undefined) fIRFirestoreSettings.host = settings.host;
      FIRFirestore.firestore().settings = fIRFirestoreSettings;
    } catch (err) {
      console.log("Error in firebase.firestore.settings: " + err);
    }
  }
};

firebase_common_1.firebase.firestore.collection = function (collectionPath) {
  try {
    if (typeof FIRFirestore === "undefined") {
      console.log("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
      return null;
    }

    if (!firebase_common_1.firebase.initialized) {
      console.log("Please run firebase.init() before firebase.firestore.collection()");
      return null;
    }

    return firebase_common_1.firebase.firestore._getCollectionReference(FIRFirestore.firestore().collectionWithPath(collectionPath));
  } catch (ex) {
    console.log("Error in firebase.firestore.collection: " + ex);
    return null;
  }
};

firebase_common_1.firebase.firestore.onDocumentSnapshot = function (docRef, optionsOrCallback, callbackOrOnError, onError) {
  var includeMetadataChanges = false;
  var onNextCallback;
  var onErrorCallback;

  if (typeof optionsOrCallback === "function") {
    onNextCallback = optionsOrCallback;
    onErrorCallback = callbackOrOnError;
  } else {
    onNextCallback = callbackOrOnError;
    onErrorCallback = onError;
  }

  if (optionsOrCallback.includeMetadataChanges === true) {
    includeMetadataChanges = true;
  }

  var listener = docRef.addSnapshotListenerWithIncludeMetadataChangesListener(includeMetadataChanges, function (snapshot, error) {
    if (error || !snapshot) {
      error && onErrorCallback && onErrorCallback(new Error(error.localizedDescription));
      return;
    }

    onNextCallback && onNextCallback(new DocumentSnapshot(snapshot));
  });

  if (listener.remove === undefined) {
    return function () {
      onNextCallback = function () {};
    };
  } else {
    return function () {
      return listener.remove();
    };
  }
};

firebase_common_1.firebase.firestore.onCollectionSnapshot = function (colRef, optionsOrCallback, callbackOrOnError, onError) {
  var includeMetadataChanges = false;
  var onNextCallback;
  var onErrorCallback;

  if (typeof optionsOrCallback === "function") {
    onNextCallback = optionsOrCallback;
    onErrorCallback = callbackOrOnError;
  } else {
    onNextCallback = callbackOrOnError;
    onErrorCallback = onError;
  }

  if (optionsOrCallback.includeMetadataChanges === true) {
    includeMetadataChanges = true;
  }

  var listener = colRef.addSnapshotListenerWithIncludeMetadataChangesListener(includeMetadataChanges, function (snapshot, error) {
    if (error || !snapshot) {
      error && onErrorCallback && onErrorCallback(new Error(error.localizedDescription));
      return;
    }

    onNextCallback && onNextCallback(new QuerySnapshot(snapshot));
  });

  if (listener.remove === undefined) {
    return function () {
      onNextCallback = function () {};
    };
  } else {
    return function () {
      return listener.remove();
    };
  }
};

firebase_common_1.firebase.firestore._getCollectionReference = function (colRef) {
  if (!colRef) {
    return null;
  }

  var collectionPath = colRef.path;
  return {
    id: colRef.collectionID,
    parent: firebase_common_1.firebase.firestore._getDocumentReference(colRef.parent),
    doc: function (documentPath) {
      return firebase_common_1.firebase.firestore.doc(collectionPath, documentPath);
    },
    add: function (document) {
      return firebase_common_1.firebase.firestore.add(collectionPath, document);
    },
    get: function () {
      return firebase_common_1.firebase.firestore.get(collectionPath);
    },
    where: function (fieldPath, opStr, value) {
      return firebase_common_1.firebase.firestore.where(collectionPath, fieldPath, opStr, value);
    },
    orderBy: function (fieldPath, directionStr) {
      return firebase_common_1.firebase.firestore.orderBy(collectionPath, fieldPath, directionStr, colRef);
    },
    limit: function (limit) {
      return firebase_common_1.firebase.firestore.limit(collectionPath, limit, colRef);
    },
    onSnapshot: function (optionsOrCallback, callbackOrOnError, onError) {
      return firebase_common_1.firebase.firestore.onCollectionSnapshot(colRef, optionsOrCallback, callbackOrOnError, onError);
    },
    startAfter: function (document) {
      return firebase_common_1.firebase.firestore.startAfter(collectionPath, document, colRef);
    },
    startAt: function (document) {
      return firebase_common_1.firebase.firestore.startAt(collectionPath, document, colRef);
    },
    endAt: function (document) {
      return firebase_common_1.firebase.firestore.endAt(collectionPath, document, colRef);
    },
    endBefore: function (document) {
      return firebase_common_1.firebase.firestore.endBefore(collectionPath, document, colRef);
    }
  };
};

firebase_common_1.firebase.firestore._getDocumentReference = function (docRef) {
  if (!docRef) {
    return null;
  }

  var collectionPath = docRef.parent.path;
  return {
    discriminator: "docRef",
    id: docRef.documentID,
    parent: firebase_common_1.firebase.firestore._getCollectionReference(docRef.parent),
    path: docRef.path,
    collection: function (cp) {
      return firebase_common_1.firebase.firestore.collection(collectionPath + "/" + docRef.documentID + "/" + cp);
    },
    set: function (data, options) {
      return firebase_common_1.firebase.firestore.set(collectionPath, docRef.documentID, data, options);
    },
    get: function () {
      return firebase_common_1.firebase.firestore.getDocument(collectionPath, docRef.documentID);
    },
    update: function (data) {
      return firebase_common_1.firebase.firestore.update(collectionPath, docRef.documentID, data);
    },
    delete: function () {
      return firebase_common_1.firebase.firestore.delete(collectionPath, docRef.documentID);
    },
    onSnapshot: function (optionsOrCallback, callbackOrOnError, onError) {
      return firebase_common_1.firebase.firestore.onDocumentSnapshot(docRef, optionsOrCallback, callbackOrOnError, onError);
    },
    ios: docRef
  };
};

firebase_common_1.firebase.firestore.doc = function (collectionPath, documentPath) {
  try {
    if (typeof FIRFirestore === "undefined") {
      console.log("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
      return null;
    }

    if (!firebase_common_1.firebase.initialized) {
      console.log("Please run firebase.init() before firebase.firestore.doc()");
      return null;
    }

    var fIRCollectionReference = FIRFirestore.firestore().collectionWithPath(collectionPath);
    var fIRDocumentReference = documentPath ? fIRCollectionReference.documentWithPath(documentPath) : fIRCollectionReference.documentWithAutoID();
    return firebase_common_1.firebase.firestore._getDocumentReference(fIRDocumentReference);
  } catch (ex) {
    console.log("Error in firebase.firestore.doc: " + ex);
    return null;
  }
};

firebase_common_1.firebase.firestore.docRef = function (documentPath) {
  if (typeof FIRFirestore === "undefined") {
    console.log("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
    return null;
  }

  return firebase_common_1.firebase.firestore._getDocumentReference(FIRFirestore.firestore().documentWithPath(documentPath));
};

firebase_common_1.firebase.firestore.add = function (collectionPath, document) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      fixSpecialFields(document);
      var defaultFirestore = FIRFirestore.firestore();
      var fIRDocumentReference_1 = defaultFirestore.collectionWithPath(collectionPath).addDocumentWithDataCompletion(document, function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(firebase_common_1.firebase.firestore._getDocumentReference(fIRDocumentReference_1));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.firestore.add: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore.set = function (collectionPath, documentPath, document, options) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      fixSpecialFields(document);
      var docRef = FIRFirestore.firestore().collectionWithPath(collectionPath).documentWithPath(documentPath);

      if (options && options.merge) {
        docRef.setDataMergeCompletion(document, true, function (error) {
          if (error) {
            reject(error.localizedDescription);
          } else {
            resolve();
          }
        });
      } else {
        docRef.setDataCompletion(document, function (error) {
          if (error) {
            reject(error.localizedDescription);
          } else {
            resolve();
          }
        });
      }
    } catch (ex) {
      console.log("Error in firebase.firestore.set: " + ex);
      reject(ex);
    }
  });
};

function fixSpecialFields(item) {
  for (var k in item) {
    if (item.hasOwnProperty(k)) {
      item[k] = fixSpecialField(item[k]);
    }
  }

  return item;
}

function fixSpecialField(item) {
  if (item === null) {
    return null;
  } else if (item === "SERVER_TIMESTAMP") {
    return FIRFieldValue.fieldValueForServerTimestamp();
  } else if (item === "DELETE_FIELD") {
    return FIRFieldValue.fieldValueForDelete();
  } else if (item instanceof firebase_common_1.FieldValue) {
    var fieldValue = item;

    if (fieldValue.type === "ARRAY_UNION") {
      return FIRFieldValue.fieldValueForArrayUnion(Array.isArray(fieldValue.value[0]) ? fieldValue.value[0] : fieldValue.value);
    } else if (fieldValue.type === "ARRAY_REMOVE") {
      return FIRFieldValue.fieldValueForArrayRemove(Array.isArray(fieldValue.value[0]) ? fieldValue.value[0] : fieldValue.value);
    } else {
      console.log("You found a bug! Please report an issue at https://github.com/EddyVerbruggen/nativescript-plugin-firebase/issues, mention fieldValue.type = '" + fieldValue.type + "'. Thanks!");
    }
  } else if (item instanceof firebase_common_1.GeoPoint) {
    var geo = item;
    return new FIRGeoPoint({
      latitude: geo.latitude,
      longitude: geo.longitude
    });
  } else if (firebase_common_1.isDocumentReference(item)) {
    return item.ios;
  } else if (typeof item === "object" && item.constructor === Object) {
    return fixSpecialFields(item);
  } else {
    return item;
  }
}

firebase_common_1.firebase.firestore.update = function (collectionPath, documentPath, document) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      fixSpecialFields(document);
      var docRef = FIRFirestore.firestore().collectionWithPath(collectionPath).documentWithPath(documentPath);
      docRef.updateDataCompletion(document, function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      });
    } catch (ex) {
      console.log("Error in firebase.firestore.update: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore.delete = function (collectionPath, documentPath) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      var docRef = FIRFirestore.firestore().collectionWithPath(collectionPath).documentWithPath(documentPath);
      docRef.deleteDocumentWithCompletion(function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      });
    } catch (ex) {
      console.log("Error in firebase.firestore.delete: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore.getCollection = function (collectionPath) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      var defaultFirestore = FIRFirestore.firestore();
      defaultFirestore.collectionWithPath(collectionPath).getDocumentsWithCompletion(function (snapshot, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(new QuerySnapshot(snapshot));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.firestore.getCollection: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore.get = function (collectionPath) {
  return firebase_common_1.firebase.firestore.getCollection(collectionPath);
};

firebase_common_1.firebase.firestore.getDocument = function (collectionPath, documentPath) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRFirestore === "undefined") {
        reject("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
        return;
      }

      FIRFirestore.firestore().collectionWithPath(collectionPath).documentWithPath(documentPath).getDocumentWithCompletion(function (snapshot, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(new DocumentSnapshot(snapshot));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.firestore.getDocument: " + ex);
      reject(ex);
    }
  });
};

firebase_common_1.firebase.firestore._getQuery = function (collectionPath, query) {
  return {
    get: function () {
      return new Promise(function (resolve, reject) {
        query.getDocumentsWithCompletion(function (snapshot, error) {
          if (error) {
            reject(error.localizedDescription);
          } else {
            resolve(new QuerySnapshot(snapshot));
          }
        });
      });
    },
    where: function (fp, os, v) {
      return firebase_common_1.firebase.firestore.where(collectionPath, fp, os, v, query);
    },
    orderBy: function (fp, directionStr) {
      return firebase_common_1.firebase.firestore.orderBy(collectionPath, fp, directionStr, query);
    },
    limit: function (limit) {
      return firebase_common_1.firebase.firestore.limit(collectionPath, limit, query);
    },
    onSnapshot: function (optionsOrCallback, callbackOrOnError, onError) {
      return firebase_common_1.firebase.firestore.onCollectionSnapshot(query, optionsOrCallback, callbackOrOnError, onError);
    },
    startAfter: function (document) {
      return firebase_common_1.firebase.firestore.startAfter(collectionPath, document, query);
    },
    startAt: function (document) {
      return firebase_common_1.firebase.firestore.startAt(collectionPath, document, query);
    },
    endAt: function (document) {
      return firebase_common_1.firebase.firestore.endAt(collectionPath, document, query);
    },
    endBefore: function (document) {
      return firebase_common_1.firebase.firestore.endBefore(collectionPath, document, query);
    }
  };
};

firebase_common_1.firebase.firestore.where = function (collectionPath, fieldPath, opStr, value, query) {
  try {
    if (typeof FIRFirestore === "undefined") {
      console.log("Make sure 'Firebase/Firestore' is in the plugin's Podfile");
      return null;
    }

    query = query || FIRFirestore.firestore().collectionWithPath(collectionPath);
    value = fixSpecialField(value);

    if (opStr === "<") {
      query = query.queryWhereFieldIsLessThan(fieldPath, value);
    } else if (opStr === "<=") {
      query = query.queryWhereFieldIsLessThanOrEqualTo(fieldPath, value);
    } else if (opStr === "==") {
      query = query.queryWhereFieldIsEqualTo(fieldPath, value);
    } else if (opStr === ">=") {
      query = query.queryWhereFieldIsGreaterThanOrEqualTo(fieldPath, value);
    } else if (opStr === ">") {
      query = query.queryWhereFieldIsGreaterThan(fieldPath, value);
    } else if (opStr === "array-contains") {
      query = query.queryWhereFieldArrayContains(fieldPath, value);
    } else {
      console.log("Illegal argument for opStr: " + opStr);
      return null;
    }

    return firebase_common_1.firebase.firestore._getQuery(collectionPath, query);
  } catch (ex) {
    console.log("Error in firebase.firestore.where: " + ex);
    return null;
  }
};

firebase_common_1.firebase.firestore.orderBy = function (collectionPath, fieldPath, direction, query) {
  query = query.queryOrderedByFieldDescending(fieldPath, direction === "desc");
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query);
};

firebase_common_1.firebase.firestore.limit = function (collectionPath, limit, query) {
  query = query.queryLimitedTo(limit);
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query);
};

firebase_common_1.firebase.firestore.startAt = function (collectionPath, document, query) {
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query.queryStartingAtDocument(document.ios));
};

firebase_common_1.firebase.firestore.startAfter = function (collectionPath, document, query) {
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query.queryStartingAfterDocument(document.ios));
};

firebase_common_1.firebase.firestore.endAt = function (collectionPath, document, query) {
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query.queryEndingAtDocument(document.ios));
};

firebase_common_1.firebase.firestore.endBefore = function (collectionPath, document, query) {
  return firebase_common_1.firebase.firestore._getQuery(collectionPath, query.queryEndingBeforeDocument(document.ios));
};

var FIRInviteDelegateImpl = function (_super) {
  __extends(FIRInviteDelegateImpl, _super);

  function FIRInviteDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FIRInviteDelegateImpl.new = function () {
    if (FIRInviteDelegateImpl.ObjCProtocols.length === 0 && typeof FIRInviteDelegate !== "undefined") {
      FIRInviteDelegateImpl.ObjCProtocols.push(FIRInviteDelegate);
    }

    return _super.new.call(this);
  };

  FIRInviteDelegateImpl.prototype.initWithCallback = function (callback) {
    this.callback = callback;
    return this;
  };

  FIRInviteDelegateImpl.prototype.inviteFinishedWithInvitationsError = function (invitationIds, error) {
    this.callback(invitationIds, error);
  };

  FIRInviteDelegateImpl.ObjCProtocols = [];
  return FIRInviteDelegateImpl;
}(NSObject);

var GIDSignInDelegateImpl = function (_super) {
  __extends(GIDSignInDelegateImpl, _super);

  function GIDSignInDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  GIDSignInDelegateImpl.new = function () {
    if (GIDSignInDelegateImpl.ObjCProtocols.length === 0 && typeof GIDSignInDelegate !== "undefined") {
      GIDSignInDelegateImpl.ObjCProtocols.push(GIDSignInDelegate);
    }

    return _super.new.call(this);
  };

  GIDSignInDelegateImpl.prototype.initWithCallback = function (callback) {
    this.callback = callback;
    return this;
  };

  GIDSignInDelegateImpl.prototype.signInDidSignInForUserWithError = function (signIn, user, error) {
    this.callback(user, error);
  };

  GIDSignInDelegateImpl.ObjCProtocols = [];
  return GIDSignInDelegateImpl;
}(NSObject);

function convertDocChangeType(type) {
  switch (type) {
    case 0:
      return 'added';

    case 1:
      return 'modified';

    case 2:
      return 'removed';

    default:
      throw new Error('Unknown DocumentChangeType');
  }
}

function convertDocument(qDoc) {
  return new DocumentSnapshot(qDoc);
}

var QuerySnapshot = function () {
  function QuerySnapshot(snapshot) {
    this.snapshot = snapshot;
    this.metadata = {
      fromCache: this.snapshot.metadata.fromCache,
      hasPendingWrites: this.snapshot.metadata.pendingWrites
    };
    this.docSnapshots = this.docs;
  }

  Object.defineProperty(QuerySnapshot.prototype, "docs", {
    get: function () {
      var _this = this;

      var getSnapshots = function () {
        var docSnapshots = [];

        for (var i = 0, l = _this.snapshot.documents.count; i < l; i++) {
          var document_1 = _this.snapshot.documents.objectAtIndex(i);

          docSnapshots.push(new DocumentSnapshot(document_1));
        }

        _this._docSnapshots = docSnapshots;
        return docSnapshots;
      };

      return this._docSnapshots || getSnapshots();
    },
    enumerable: true,
    configurable: true
  });

  QuerySnapshot.prototype.docChanges = function (options) {
    if (options) {
      console.info('No options support yet, for docChanges()');
    }

    var docChanges = [];
    var jChanges = this.snapshot.documentChanges;

    for (var i = 0; i < jChanges.count; i++) {
      var chg = jChanges[i];
      var type = convertDocChangeType(chg.type);
      var doc = convertDocument(chg.document);
      docChanges.push({
        doc: doc,
        newIndex: chg.newIndex,
        oldIndex: chg.oldIndex,
        type: type
      });
    }

    return docChanges;
  };

  QuerySnapshot.prototype.forEach = function (callback, thisArg) {
    this.docSnapshots.map(function (snapshot) {
      return callback(snapshot);
    });
  };

  return QuerySnapshot;
}();

exports.QuerySnapshot = QuerySnapshot;
module.exports = firebase_common_1.firebase;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/functions/functions.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/utils.js");

function httpsCallable(functionName) {
  var functions = FIRFunctions.functions();
  return function (data) {
    return new Promise(function (resolve, reject) {
      var callable = functions.HTTPSCallableWithName(functionName);

      var handleCompletion = function (result, err) {
        if (err) {
          reject(err.localizedDescription);
          return;
        }

        if (result) {
          resolve(utils_1.firebaseUtils.toJsObject(result.data));
        }
      };

      if (data) {
        callable.callWithObjectCompletion(data, handleCompletion);
      } else {
        callable.callWithCompletion(handleCompletion);
      }
    });
  };
}

exports.httpsCallable = httpsCallable;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/messaging/messaging.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var applicationSettings = __webpack_require__("../node_modules/tns-core-modules/application-settings/application-settings.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var utils_2 = __webpack_require__("../node_modules/nativescript-plugin-firebase/utils.js");

var firebase_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/firebase-common.js");

var _notificationActionTakenCallback;

var _pendingNotifications = [];
var _pendingActionTakenNotifications = [];

var _pushToken;

var _receivedPushTokenCallback;

var _receivedNotificationCallback;

var _registerForRemoteNotificationsRanThisSession = false;

var _userNotificationCenterDelegate;

var _messagingConnected = null;

var _firebaseRemoteMessageDelegate;

var _showNotifications = true;
var _showNotificationsWhenInForeground = false;
var NOTIFICATIONS_REGISTRATION_KEY = "Firebase-RegisterForRemoteNotifications";

function initFirebaseMessaging(options) {
  if (!options) {
    return;
  }

  _showNotifications = options.showNotifications === undefined ? _showNotifications : !!options.showNotifications;
  _showNotificationsWhenInForeground = options.showNotificationsWhenInForeground === undefined ? _showNotificationsWhenInForeground : !!options.showNotificationsWhenInForeground;

  if (options.onMessageReceivedCallback !== undefined) {
    addOnMessageReceivedCallback(options.onMessageReceivedCallback);
  }

  if (options.onPushTokenReceivedCallback !== undefined) {
    addOnPushTokenReceivedCallback(options.onPushTokenReceivedCallback);
  }
}

exports.initFirebaseMessaging = initFirebaseMessaging;

function addOnMessageReceivedCallback(callback) {
  return new Promise(function (resolve, reject) {
    try {
      applicationSettings.setBoolean(NOTIFICATIONS_REGISTRATION_KEY, true);
      _receivedNotificationCallback = callback;

      _registerForRemoteNotifications();

      _processPendingNotifications();

      resolve();
    } catch (ex) {
      console.log("Error in messaging.addOnMessageReceivedCallback: " + ex);
      reject(ex);
    }
  });
}

exports.addOnMessageReceivedCallback = addOnMessageReceivedCallback;

function getCurrentPushToken() {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRMessaging !== "undefined") {
        resolve(FIRMessaging.messaging().FCMToken);
      } else {
        resolve(_pushToken);
      }
    } catch (ex) {
      console.log("Error in messaging.getCurrentPushToken: " + ex);
      reject(ex);
    }
  });
}

exports.getCurrentPushToken = getCurrentPushToken;

function registerForPushNotifications(options) {
  return new Promise(function (resolve, reject) {
    try {
      initFirebaseMessaging(options);
      _registerForRemoteNotificationsRanThisSession = false;

      _registerForRemoteNotifications();

      resolve();
    } catch (ex) {
      console.log("Error in messaging.registerForPushNotifications: " + ex);
      reject(ex);
    }
  });
}

exports.registerForPushNotifications = registerForPushNotifications;

function unregisterForPushNotifications() {
  return new Promise(function (resolve, reject) {
    try {
      UIApplication.sharedApplication.unregisterForRemoteNotifications();
      resolve();
    } catch (ex) {
      console.log("Error in messaging.unregisterForPushNotifications: " + ex);
      reject(ex);
    }
  });
}

exports.unregisterForPushNotifications = unregisterForPushNotifications;

function handleRemoteNotification(app, userInfo) {
  var userInfoJSON = utils_2.firebaseUtils.toJsObject(userInfo);
  var aps = userInfo.objectForKey("aps");

  if (aps !== null) {
    var alrt = aps.objectForKey("alert");

    if (alrt !== null && alrt.objectForKey) {
      userInfoJSON.title = alrt.objectForKey("title");
      userInfoJSON.body = alrt.objectForKey("body");
    }
  }

  userInfoJSON.foreground = app.applicationState === 0;
  updateUserInfo(userInfoJSON);

  _pendingNotifications.push(userInfoJSON);

  if (_receivedNotificationCallback) {
    _processPendingNotifications();
  }
}

exports.handleRemoteNotification = handleRemoteNotification;

function addOnPushTokenReceivedCallback(callback) {
  return new Promise(function (resolve, reject) {
    try {
      _receivedPushTokenCallback = callback;

      if (_pushToken) {
        callback(_pushToken);
      }

      applicationSettings.setBoolean(NOTIFICATIONS_REGISTRATION_KEY, true);

      _registerForRemoteNotifications();

      _processPendingNotifications();

      resolve();
    } catch (ex) {
      console.log("Error in messaging.addOnPushTokenReceivedCallback: " + ex);
      reject(ex);
    }
  });
}

exports.addOnPushTokenReceivedCallback = addOnPushTokenReceivedCallback;

function addBackgroundRemoteNotificationHandler(appDelegate) {
  appDelegate.prototype.applicationDidRegisterForRemoteNotificationsWithDeviceToken = function (application, deviceToken) {
    if (typeof FIRMessaging !== "undefined") {
      FIRMessaging.messaging().APNSToken = deviceToken;
    } else {
      var token = deviceToken.description.replace(/[< >]/g, "");
      _pushToken = token;

      if (_receivedPushTokenCallback) {
        _receivedPushTokenCallback(token);
      }
    }
  };

  appDelegate.prototype.applicationDidReceiveRemoteNotificationFetchCompletionHandler = function (app, notification, completionHandler) {
    if (typeof FIRAuth !== "undefined") {
      if (firebase_common_1.firebase._configured && FIRAuth.auth().canHandleNotification(notification)) {
        completionHandler(1);
        return;
      }
    }

    completionHandler(0);
    handleRemoteNotification(app, notification);
  };
}

exports.addBackgroundRemoteNotificationHandler = addBackgroundRemoteNotificationHandler;

function registerForInteractivePush(model) {
  var nativeActions = [];
  model.iosSettings.interactiveSettings.actions.forEach(function (action) {
    var notificationActionOptions = action.options ? action.options.valueOf() : UNNotificationActionOptionNone;
    var actionType = action.type || "button";
    var nativeAction;

    if (actionType === "input") {
      nativeAction = UNTextInputNotificationAction.actionWithIdentifierTitleOptionsTextInputButtonTitleTextInputPlaceholder(action.identifier, action.title, notificationActionOptions, action.submitLabel || "Submit", action.placeholder);
    } else if (actionType === "button") {
      nativeAction = UNNotificationAction.actionWithIdentifierTitleOptions(action.identifier, action.title, notificationActionOptions);
    } else {
      console.log("Unsupported action type: " + action.type);
    }

    nativeActions.push(nativeAction);
  });
  var actions = NSArray.arrayWithArray(nativeActions);
  var nativeCategories = [];
  model.iosSettings.interactiveSettings.categories.forEach(function (category) {
    var nativeCategory = UNNotificationCategory.categoryWithIdentifierActionsIntentIdentifiersOptions(category.identifier, actions, null, null);
    nativeCategories.push(nativeCategory);
  });
  var center = utils_1.ios.getter(UNUserNotificationCenter, UNUserNotificationCenter.currentNotificationCenter);
  var nsSetCategories = new NSSet(nativeCategories);
  center.setNotificationCategories(nsSetCategories);

  if (model.onNotificationActionTakenCallback) {
    _addOnNotificationActionTakenCallback(model.onNotificationActionTakenCallback);
  }
}

exports.registerForInteractivePush = registerForInteractivePush;

function prepAppDelegate() {
  _addObserver("com.firebase.iid.notif.refresh-token", function (notification) {
    return exports.onTokenRefreshNotification(notification.object);
  });

  _addObserver(UIApplicationDidFinishLaunchingNotification, function (appNotification) {
    if (applicationSettings.getBoolean(NOTIFICATIONS_REGISTRATION_KEY, false)) {
      _registerForRemoteNotifications();
    }
  });

  _addObserver(UIApplicationDidBecomeActiveNotification, function (appNotification) {
    _processPendingNotifications();

    if (!_messagingConnected) {
      _messagingConnectWithCompletion();
    }
  });

  _addObserver(UIApplicationDidEnterBackgroundNotification, function (appNotification) {
    if (_messagingConnected) {
      FIRMessaging.messaging().disconnect();
    }
  });

  _addObserver(UIApplicationWillEnterForegroundNotification, function (appNotification) {
    if (_messagingConnected !== null) {
      FIRMessaging.messaging().connectWithCompletion(function (error) {
        if (!error) {
          _messagingConnected = true;
        }
      });
    }
  });
}

exports.prepAppDelegate = prepAppDelegate;

function subscribeToTopic(topicName) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRMessaging === "undefined") {
        reject("Enable FIRMessaging in Podfile first");
        return;
      }

      FIRMessaging.messaging().subscribeToTopicCompletion(topicName, function (error) {
        error ? reject(error.localizedDescription) : resolve();
      });
    } catch (ex) {
      console.log("Error in messaging.subscribeToTopic: " + ex);
      reject(ex);
    }
  });
}

exports.subscribeToTopic = subscribeToTopic;

function unsubscribeFromTopic(topicName) {
  return new Promise(function (resolve, reject) {
    try {
      if (typeof FIRMessaging === "undefined") {
        reject("Enable FIRMessaging in Podfile first");
        return;
      }

      FIRMessaging.messaging().unsubscribeFromTopicCompletion(topicName, function (error) {
        error ? reject(error.localizedDescription) : resolve();
      });
    } catch (ex) {
      console.log("Error in messaging.unsubscribeFromTopic: " + ex);
      reject(ex);
    }
  });
}

exports.unsubscribeFromTopic = unsubscribeFromTopic;

exports.onTokenRefreshNotification = function (token) {
  _pushToken = token;

  if (_receivedPushTokenCallback) {
    _receivedPushTokenCallback(token);
  }

  _messagingConnectWithCompletion();
};

var IosInteractivePushSettings = function () {
  function IosInteractivePushSettings() {}

  return IosInteractivePushSettings;
}();

exports.IosInteractivePushSettings = IosInteractivePushSettings;
var IosInteractiveNotificationActionOptions;

(function (IosInteractiveNotificationActionOptions) {
  IosInteractiveNotificationActionOptions[IosInteractiveNotificationActionOptions["authenticationRequired"] = 1] = "authenticationRequired";
  IosInteractiveNotificationActionOptions[IosInteractiveNotificationActionOptions["destructive"] = 2] = "destructive";
  IosInteractiveNotificationActionOptions[IosInteractiveNotificationActionOptions["foreground"] = 4] = "foreground";
})(IosInteractiveNotificationActionOptions = exports.IosInteractiveNotificationActionOptions || (exports.IosInteractiveNotificationActionOptions = {}));

var IosPushSettings = function () {
  function IosPushSettings() {}

  return IosPushSettings;
}();

exports.IosPushSettings = IosPushSettings;

var PushNotificationModel = function () {
  function PushNotificationModel() {}

  return PushNotificationModel;
}();

exports.PushNotificationModel = PushNotificationModel;

var NotificationActionResponse = function () {
  function NotificationActionResponse() {}

  return NotificationActionResponse;
}();

exports.NotificationActionResponse = NotificationActionResponse;

function areNotificationsEnabled() {
  var app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);
  return app.currentUserNotificationSettings.types > 0;
}

exports.areNotificationsEnabled = areNotificationsEnabled;

var updateUserInfo = function (userInfoJSON) {
  if (userInfoJSON.aps && userInfoJSON.aps.alert) {
    userInfoJSON.title = userInfoJSON.aps.alert.title;
    userInfoJSON.body = userInfoJSON.aps.alert.body;
  }

  if (!userInfoJSON.hasOwnProperty("data")) {
    userInfoJSON.data = {};
  }

  Object.keys(userInfoJSON).forEach(function (key) {
    if (key !== "data") userInfoJSON.data[key] = userInfoJSON[key];
  });
  userInfoJSON.aps = undefined;
};

function _registerForRemoteNotifications() {
  var app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);

  if (!app) {
    application.on("launch", function () {
      return _registerForRemoteNotifications();
    });
    return;
  }

  if (_registerForRemoteNotificationsRanThisSession) {
    return;
  }

  _registerForRemoteNotificationsRanThisSession = true;

  if (parseInt(platform_1.device.osVersion) >= 10) {
    var authorizationOptions = 4 | 2 | 1;
    var curNotCenter = utils_1.ios.getter(UNUserNotificationCenter, UNUserNotificationCenter.currentNotificationCenter);
    curNotCenter.requestAuthorizationWithOptionsCompletionHandler(authorizationOptions, function (granted, error) {
      if (!error) {
        if (app === null) {
          app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);
        }

        if (app !== null) {
          utils_2.firebaseUtils.invokeOnRunLoop(function () {
            return app.registerForRemoteNotifications();
          });
        }
      } else {
        console.log("Error requesting push notification auth: " + error);
      }
    });

    if (_showNotifications) {
      _userNotificationCenterDelegate = UNUserNotificationCenterDelegateImpl.new().initWithCallback(function (unnotification, actionIdentifier, inputText) {
        var userInfo = unnotification.request.content.userInfo;
        var userInfoJSON = utils_2.firebaseUtils.toJsObject(userInfo);
        updateUserInfo(userInfoJSON);

        if (actionIdentifier) {
          _pendingActionTakenNotifications.push({
            actionIdentifier: actionIdentifier,
            userInfoJSON: userInfoJSON,
            inputText: inputText
          });

          if (_notificationActionTakenCallback) {
            _processPendingActionTakenNotifications();
          }
        }

        userInfoJSON.foreground = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication).applicationState === 0;

        _pendingNotifications.push(userInfoJSON);

        if (_receivedNotificationCallback) {
          _processPendingNotifications();
        }
      });
      curNotCenter.delegate = _userNotificationCenterDelegate;
    }

    if (typeof FIRMessaging !== "undefined") {
      _firebaseRemoteMessageDelegate = FIRMessagingDelegateImpl.new().initWithCallback(function (appDataDictionary) {
        var userInfoJSON = utils_2.firebaseUtils.toJsObject(appDataDictionary);
        updateUserInfo(userInfoJSON);

        _pendingNotifications.push(userInfoJSON);

        var asJs = utils_2.firebaseUtils.toJsObject(appDataDictionary.objectForKey("notification"));

        if (asJs) {
          userInfoJSON.title = asJs.title;
          userInfoJSON.body = asJs.body;
        }

        var app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);

        if (app.applicationState === 0) {
          userInfoJSON.foreground = true;

          if (_receivedNotificationCallback) {
            _processPendingNotifications();
          }
        } else {
          userInfoJSON.foreground = false;
        }
      });
      FIRMessaging.messaging().delegate = _firebaseRemoteMessageDelegate;
    }
  } else {
    var notificationTypes = 4 | 1 | 2 | 1;
    var notificationSettings = UIUserNotificationSettings.settingsForTypesCategories(notificationTypes, null);
    utils_2.firebaseUtils.invokeOnRunLoop(function () {
      app.registerForRemoteNotifications();
    });
    app.registerUserNotificationSettings(notificationSettings);
  }
}

function _messagingConnectWithCompletion() {
  return new Promise(function (resolve, reject) {
    if (typeof FIRMessaging === "undefined") {
      resolve();
      return;
    }

    FIRMessaging.messaging().connectWithCompletion(function (error) {
      if (error) {
        return reject(error);
      }

      _messagingConnected = true;
      resolve();
    });
  });
}

function _addOnNotificationActionTakenCallback(callback) {
  return new Promise(function (resolve, reject) {
    try {
      _notificationActionTakenCallback = callback;

      _processPendingActionTakenNotifications();

      resolve();
    } catch (ex) {
      console.log("Error in messaging._addOnNotificationActionTakenCallback: " + ex);
      reject(ex);
    }
  });
}

function _processPendingNotifications() {
  var app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);

  if (!app) {
    application.on("launch", function () {
      return _processPendingNotifications();
    });
    return;
  }

  if (_receivedNotificationCallback) {
    for (var p in _pendingNotifications) {
      _receivedNotificationCallback(_pendingNotifications[p]);
    }

    _pendingNotifications = [];

    if (app.applicationState === 0) {
      app.applicationIconBadgeNumber = 0;
    }
  }
}

function _processPendingActionTakenNotifications() {
  var app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);

  if (!app) {
    application.on("launch", function () {
      return _processPendingNotifications();
    });
    return;
  }

  if (_notificationActionTakenCallback) {
    for (var p in _pendingActionTakenNotifications) {
      _notificationActionTakenCallback(_pendingActionTakenNotifications[p].actionIdentifier, _pendingActionTakenNotifications[p].userInfoJSON, _pendingActionTakenNotifications[p].inputText);
    }

    _pendingActionTakenNotifications = [];

    if (app.applicationState === 0) {
      app.applicationIconBadgeNumber = 0;
    }
  }
}

function _addObserver(eventName, callback) {
  var queue = utils_1.ios.getter(NSOperationQueue, NSOperationQueue.mainQueue);
  return utils_1.ios.getter(NSNotificationCenter, NSNotificationCenter.defaultCenter).addObserverForNameObjectQueueUsingBlock(eventName, null, queue, callback);
}

var UNUserNotificationCenterDelegateImpl = function (_super) {
  __extends(UNUserNotificationCenterDelegateImpl, _super);

  function UNUserNotificationCenterDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UNUserNotificationCenterDelegateImpl.new = function () {
    if (UNUserNotificationCenterDelegateImpl.ObjCProtocols.length === 0 && typeof UNUserNotificationCenterDelegate !== "undefined") {
      UNUserNotificationCenterDelegateImpl.ObjCProtocols.push(UNUserNotificationCenterDelegate);
    }

    return _super.new.call(this);
  };

  UNUserNotificationCenterDelegateImpl.prototype.initWithCallback = function (callback) {
    this.callback = callback;
    return this;
  };

  UNUserNotificationCenterDelegateImpl.prototype.userNotificationCenterWillPresentNotificationWithCompletionHandler = function (center, notification, completionHandler) {
    var userInfo = notification.request.content.userInfo;
    var userInfoJSON = utils_2.firebaseUtils.toJsObject(userInfo);

    if (_showNotificationsWhenInForeground || userInfoJSON["gcm.notification.showWhenInForeground"] === "true" || userInfoJSON["showWhenInForeground"] === true || userInfoJSON.aps && userInfoJSON.aps.showWhenInForeground === true) {
      completionHandler(4 | 2 | 1);
    } else {
      this.callback(notification);
      completionHandler(0);
    }
  };

  UNUserNotificationCenterDelegateImpl.prototype.userNotificationCenterDidReceiveNotificationResponseWithCompletionHandler = function (center, response, completionHandler) {
    if (response && response.actionIdentifier === UNNotificationDismissActionIdentifier) {
      completionHandler();
      return;
    }

    this.callback(response.notification, response.actionIdentifier, response.userText);
    completionHandler();
  };

  UNUserNotificationCenterDelegateImpl.ObjCProtocols = [];
  return UNUserNotificationCenterDelegateImpl;
}(NSObject);

var FIRMessagingDelegateImpl = function (_super) {
  __extends(FIRMessagingDelegateImpl, _super);

  function FIRMessagingDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FIRMessagingDelegateImpl.new = function () {
    if (FIRMessagingDelegateImpl.ObjCProtocols.length === 0 && typeof FIRMessagingDelegate !== "undefined") {
      FIRMessagingDelegateImpl.ObjCProtocols.push(FIRMessagingDelegate);
    }

    return _super.new.call(this);
  };

  FIRMessagingDelegateImpl.prototype.initWithCallback = function (callback) {
    this.callback = callback;
    return this;
  };

  FIRMessagingDelegateImpl.prototype.messagingDidReceiveMessage = function (messaging, remoteMessage) {
    this.callback(remoteMessage.appData);
  };

  FIRMessagingDelegateImpl.prototype.messagingDidReceiveRegistrationToken = function (messaging, fcmToken) {
    exports.onTokenRefreshNotification(fcmToken);
  };

  FIRMessagingDelegateImpl.ObjCProtocols = [];
  return FIRMessagingDelegateImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/barcodescanning/barcodescanning-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var mlkit_cameraview_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js");

var BarcodeFormat;

(function (BarcodeFormat) {
  BarcodeFormat[BarcodeFormat["CODE_128"] = 1] = "CODE_128";
  BarcodeFormat[BarcodeFormat["CODE_39"] = 2] = "CODE_39";
  BarcodeFormat[BarcodeFormat["CODE_93"] = 4] = "CODE_93";
  BarcodeFormat[BarcodeFormat["CODABAR"] = 8] = "CODABAR";
  BarcodeFormat[BarcodeFormat["DATA_MATRIX"] = 16] = "DATA_MATRIX";
  BarcodeFormat[BarcodeFormat["EAN_13"] = 32] = "EAN_13";
  BarcodeFormat[BarcodeFormat["EAN_8"] = 64] = "EAN_8";
  BarcodeFormat[BarcodeFormat["ITF"] = 128] = "ITF";
  BarcodeFormat[BarcodeFormat["QR_CODE"] = 256] = "QR_CODE";
  BarcodeFormat[BarcodeFormat["UPC_A"] = 512] = "UPC_A";
  BarcodeFormat[BarcodeFormat["UPC_E"] = 1024] = "UPC_E";
  BarcodeFormat[BarcodeFormat["PDF417"] = 2048] = "PDF417";
  BarcodeFormat[BarcodeFormat["AZTEC"] = 4096] = "AZTEC";
})(BarcodeFormat = exports.BarcodeFormat || (exports.BarcodeFormat = {}));

exports.formatsProperty = new properties_1.Property({
  name: "formats",
  defaultValue: null
});
exports.beepOnScanProperty = new properties_1.Property({
  name: "beepOnScan",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.reportDuplicatesProperty = new properties_1.Property({
  name: "reportDuplicates",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});

var MLKitBarcodeScanner = function (_super) {
  __extends(MLKitBarcodeScanner, _super);

  function MLKitBarcodeScanner() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitBarcodeScanner.prototype[exports.formatsProperty.setNative] = function (value) {
    this.formats = value;
  };

  MLKitBarcodeScanner.prototype[exports.beepOnScanProperty.setNative] = function (value) {
    this.beepOnScan = value;
  };

  MLKitBarcodeScanner.prototype[exports.reportDuplicatesProperty.setNative] = function (value) {
    this.reportDuplicates = value;
  };

  return MLKitBarcodeScanner;
}(mlkit_cameraview_1.MLKitCameraView);

exports.MLKitBarcodeScanner = MLKitBarcodeScanner;
exports.formatsProperty.register(MLKitBarcodeScanner);
exports.beepOnScanProperty.register(MLKitBarcodeScanner);
exports.reportDuplicatesProperty.register(MLKitBarcodeScanner);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/barcodescanning/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var barcodescanning_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/barcodescanning/barcodescanning-common.js");

exports.BarcodeFormat = barcodescanning_common_1.BarcodeFormat;

var MLKitBarcodeScanner = function (_super) {
  __extends(MLKitBarcodeScanner, _super);

  function MLKitBarcodeScanner() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitBarcodeScanner.prototype.createDetector = function () {
    var formats;

    if (this.formats) {
      formats = [];
      var requestedFormats = this.formats.split(",");
      requestedFormats.forEach(function (format) {
        return formats.push(barcodescanning_common_1.BarcodeFormat[format.trim().toUpperCase()]);
      });
    }

    if (this.beepOnScan) {
      AVAudioSession.sharedInstance().setCategoryModeOptionsError(AVAudioSessionCategoryPlayback, AVAudioSessionModeDefault, 1);
      var barcodeBundlePath = NSBundle.bundleWithIdentifier("org.nativescript.plugin.firebase.MLKit").bundlePath;
      this.player = new AVAudioPlayer({
        contentsOfURL: NSURL.fileURLWithPath(barcodeBundlePath + "/beep.caf")
      });
      this.player.numberOfLoops = 1;
      this.player.volume = 0.7;
      this.player.prepareToPlay();
    }

    return getBarcodeDetector(formats);
  };

  MLKitBarcodeScanner.prototype.createSuccessListener = function () {
    var _this = this;

    return function (barcodes, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (barcodes !== null) {
        var result = {
          barcodes: []
        };

        for (var i = 0, l = barcodes.count; i < l; i++) {
          var barcode = barcodes.objectAtIndex(i);
          result.barcodes.push({
            value: barcode.rawValue,
            format: barcodescanning_common_1.BarcodeFormat[barcode.format],
            ios: barcode,
            bounds: barcode.frame
          });
        }

        _this.notify({
          eventName: MLKitBarcodeScanner.scanResultEvent,
          object: _this,
          value: result
        });

        if (barcodes.count > 0 && _this.player) {
          _this.player.play();
        }
      }
    };
  };

  MLKitBarcodeScanner.prototype.rotateRecording = function () {
    return false;
  };

  return MLKitBarcodeScanner;
}(barcodescanning_common_1.MLKitBarcodeScanner);

exports.MLKitBarcodeScanner = MLKitBarcodeScanner;

function getBarcodeDetector(formats) {
  if (formats && formats.length > 0) {
    var barcodeFormats_1 = 0;
    formats.forEach(function (format) {
      return barcodeFormats_1 |= format;
    });
    return FIRVision.vision().barcodeDetectorWithOptions(FIRVisionBarcodeDetectorOptions.alloc().initWithFormats(barcodeFormats_1));
  } else {
    return FIRVision.vision().barcodeDetector();
  }
}

function scanBarcodesOnDevice(options) {
  return new Promise(function (resolve, reject) {
    try {
      var barcodeDetector = getBarcodeDetector(options.formats);
      barcodeDetector.detectInImageCompletion(getImage(options), function (barcodes, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (barcodes !== null) {
          var result = {
            barcodes: []
          };

          for (var i = 0, l = barcodes.count; i < l; i++) {
            var barcode = barcodes.objectAtIndex(i);
            result.barcodes.push({
              value: barcode.rawValue,
              format: barcodescanning_common_1.BarcodeFormat[barcode.format],
              ios: barcode,
              bounds: barcode.frame
            });
          }

          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.scanBarcodesOnDevice: " + ex);
      reject(ex);
    }
  });
}

exports.scanBarcodesOnDevice = scanBarcodesOnDevice;

function getImage(options) {
  var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
  return FIRVisionImage.alloc().initWithImage(image);
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/custommodel/custommodel-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var mlkit_cameraview_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js");

exports.localModelFileProperty = new properties_1.Property({
  name: "localModelFile",
  defaultValue: null
});
exports.labelsFileProperty = new properties_1.Property({
  name: "labelsFile",
  defaultValue: null
});
exports.modelInputShapeProperty = new properties_1.Property({
  name: "modelInputShape",
  defaultValue: null
});
exports.modelInputTypeProperty = new properties_1.Property({
  name: "modelInputType",
  defaultValue: null
});
exports.maxResultsProperty = new properties_1.Property({
  name: "maxResults",
  defaultValue: 5
});

var MLKitCustomModel = function (_super) {
  __extends(MLKitCustomModel, _super);

  function MLKitCustomModel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitCustomModel.prototype[exports.localModelFileProperty.setNative] = function (value) {
    this.localModelFile = value;
  };

  MLKitCustomModel.prototype[exports.labelsFileProperty.setNative] = function (value) {
    this.labelsFile = value;

    if (value.indexOf("~/") === 0) {
      this.labels = getLabelsFromAppFolder(value);
    } else {
      console.log("For the 'labelsFile' property, use the ~/ prefix for now..");
      return;
    }
  };

  MLKitCustomModel.prototype[exports.maxResultsProperty.setNative] = function (value) {
    this.maxResults = parseInt(value);
  };

  MLKitCustomModel.prototype[exports.modelInputShapeProperty.setNative] = function (value) {
    if (typeof value === "string") {
      this.modelInputShape = value.split(",").map(function (v) {
        return parseInt(v.trim());
      });
    }
  };

  MLKitCustomModel.prototype[exports.modelInputTypeProperty.setNative] = function (value) {
    this.modelInputType = value;
  };

  MLKitCustomModel.scanResultEvent = "scanResult";
  return MLKitCustomModel;
}(mlkit_cameraview_1.MLKitCameraView);

exports.MLKitCustomModel = MLKitCustomModel;
exports.localModelFileProperty.register(MLKitCustomModel);
exports.labelsFileProperty.register(MLKitCustomModel);
exports.maxResultsProperty.register(MLKitCustomModel);
exports.modelInputShapeProperty.register(MLKitCustomModel);
exports.modelInputTypeProperty.register(MLKitCustomModel);

function getLabelsFromAppFolder(labelsFile) {
  var labelsPath = fs.knownFolders.currentApp().path + labelsFile.substring(1);
  return getLabelsFromFile(labelsPath);
}

exports.getLabelsFromAppFolder = getLabelsFromAppFolder;

function getLabelsFromFile(labelsFile) {
  var fileContents = fs.File.fromPath(labelsFile).readTextSync();
  var lines = fileContents.split("\n");

  while (lines[lines.length - 1].trim() === "") {
    lines.pop();
  }

  return lines;
}

exports.getLabelsFromFile = getLabelsFromFile;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/custommodel/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var custommodel_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/custommodel/custommodel-common.js");

var MLKitCustomModel = function (_super) {
  __extends(MLKitCustomModel, _super);

  function MLKitCustomModel() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitCustomModel.prototype.createDetector = function () {
    this.modelInterpreter = getInterpreter(this.localModelFile);
    return this.modelInterpreter;
  };

  MLKitCustomModel.prototype.runDetector = function (image, onComplete) {
    var _this = this;

    var modelExpectsWidth = this.modelInputShape[1];
    var modelExpectsHeight = this.modelInputShape[2];
    var isQuantized = this.modelInputType !== "FLOAT32";

    if (!this.inputOutputOptions) {
      this.inputOutputOptions = FIRModelInputOutputOptions.new();
      var inputType = void 0;
      var arrIn_1 = NSMutableArray.new();
      this.modelInputShape.forEach(function (dim) {
        return arrIn_1.addObject(dim);
      });
      inputType = isQuantized ? 3 : 1;
      this.inputOutputOptions.setInputFormatForIndexTypeDimensionsError(0, inputType, arrIn_1);
      var arrOut = NSMutableArray.new();
      arrOut.addObject(1);
      arrOut.addObject(this.labels.length);
      this.inputOutputOptions.setOutputFormatForIndexTypeDimensionsError(0, inputType, arrOut);
    }

    var inputData;

    if (isQuantized) {
      inputData = TNSMLKitCameraView.scaledDataWithSizeByteCountIsQuantized(image, CGSizeMake(modelExpectsWidth, modelExpectsHeight), modelExpectsWidth * modelExpectsHeight * this.modelInputShape[3] * this.modelInputShape[0], isQuantized);
    } else {
      inputData = TNSMLKitCameraView.getInputDataWithRowsAndColumnsAndType(image, modelExpectsWidth, modelExpectsHeight, "Float32");
    }

    var inputs = FIRModelInputs.new();
    inputs.addInputError(inputData);
    this.modelInterpreter.runWithInputsOptionsCompletion(inputs, this.inputOutputOptions, function (outputs, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (outputs !== null) {
        var probabilities = outputs.outputAtIndexError(0)[0];

        if (_this.labels.length !== probabilities.count) {
          console.log("The number of labels (" + _this.labels.length + ") is not equal to the interpretation result (" + probabilities.count + ")!");
          onComplete();
        } else {
          var result = {
            result: getSortedResult(_this.labels, probabilities, _this.maxResults)
          };

          _this.notify({
            eventName: MLKitCustomModel.scanResultEvent,
            object: _this,
            value: result
          });
        }
      }

      onComplete();
    });
  };

  MLKitCustomModel.prototype.createSuccessListener = function () {
    var _this = this;

    return function (outputs, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (outputs !== null) {
        var result = {
          result: []
        };
        console.log(">>> outputs: " + outputs);

        _this.notify({
          eventName: MLKitCustomModel.scanResultEvent,
          object: _this,
          value: result
        });
      }
    };
  };

  MLKitCustomModel.prototype.rotateRecording = function () {
    return false;
  };

  return MLKitCustomModel;
}(custommodel_common_1.MLKitCustomModel);

exports.MLKitCustomModel = MLKitCustomModel;

function getInterpreter(localModelFile) {
  var localModelRegistrationSuccess = false;
  var cloudModelRegistrationSuccess = false;
  var localModelName;

  if (localModelFile) {
    localModelName = localModelFile.lastIndexOf("/") === -1 ? localModelFile : localModelFile.substring(localModelFile.lastIndexOf("/") + 1);

    if (FIRModelManager.modelManager().localModelWithName(localModelName)) {
      localModelRegistrationSuccess = true;
    } else {
      var localModelFilePath = void 0;

      if (localModelFile.indexOf("~/") === 0) {
        localModelFilePath = fs.knownFolders.currentApp().path + localModelFile.substring(1);
      } else {
        localModelFilePath = NSBundle.mainBundle.pathForResourceOfType(localModelFile.substring(0, localModelFile.lastIndexOf(".")), localModelFile.substring(localModelFile.lastIndexOf(".") + 1));
      }

      var localModelSource = FIRLocalModel.alloc().initWithNamePath(localModelName, localModelFilePath);
      localModelRegistrationSuccess = FIRModelManager.modelManager().registerLocalModel(localModelSource);
    }
  }

  if (!localModelRegistrationSuccess && !cloudModelRegistrationSuccess) {
    console.log("No (cloud or local) model was successfully loaded.");
    return null;
  }

  var fIRModelOptions = FIRModelOptions.alloc().initWithRemoteModelNameLocalModelName(null, localModelRegistrationSuccess ? localModelName : null);
  return FIRModelInterpreter.modelInterpreterWithOptions(fIRModelOptions);
}

function useCustomModel(options) {
  return new Promise(function (resolve, reject) {
    try {
      var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
      var isQuant = options.modelInput[0].type !== "FLOAT32";
      var inputData = void 0;

      if (isQuant) {
        inputData = TNSMLKitCameraView.scaledDataWithSizeByteCountIsQuantized(image, CGSizeMake(options.modelInput[0].shape[1], options.modelInput[0].shape[2]), options.modelInput[0].shape[1] * options.modelInput[0].shape[2] * options.modelInput[0].shape[3] * options.modelInput[0].shape[0], options.modelInput[0].type !== "FLOAT32");
      } else {
        inputData = TNSMLKitCameraView.getInputDataWithRowsAndColumnsAndType(image, options.modelInput[0].shape[1], options.modelInput[0].shape[2], "Float32");
      }

      var inputs = FIRModelInputs.new();
      inputs.addInputError(inputData);
      var inputOptions_1 = FIRModelInputOutputOptions.new();
      var inputType_1;
      options.modelInput.forEach(function (dimensionAndType, i) {
        var arrIn = NSMutableArray.new();
        dimensionAndType.shape.forEach(function (dim) {
          return arrIn.addObject(dim);
        });
        inputType_1 = dimensionAndType.type === "FLOAT32" ? 1 : 3;
        inputOptions_1.setInputFormatForIndexTypeDimensionsError(i, inputType_1, arrIn);
      });
      var labels_1;

      if (options.labelsFile.indexOf("~/") === 0) {
        labels_1 = custommodel_common_1.getLabelsFromAppFolder(options.labelsFile);
      } else {
        var labelsFile = NSBundle.mainBundle.pathForResourceOfType(options.labelsFile.substring(0, options.labelsFile.lastIndexOf(".")), options.labelsFile.substring(options.labelsFile.lastIndexOf(".") + 1));
        labels_1 = custommodel_common_1.getLabelsFromFile(labelsFile);
      }

      var arrOut = NSMutableArray.new();
      arrOut.addObject(1);
      arrOut.addObject(labels_1.length);
      inputOptions_1.setOutputFormatForIndexTypeDimensionsError(0, inputType_1, arrOut);
      var modelInterpreter = getInterpreter(options.localModelFile);
      modelInterpreter.runWithInputsOptionsCompletion(inputs, inputOptions_1, function (outputs, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (outputs !== null) {
          var probabilities = outputs.outputAtIndexError(0)[0];

          if (labels_1.length !== probabilities.count) {
            console.log("The number of labels in " + options.labelsFile + " (" + labels_1.length + ") is not equal to the interpretation result (" + probabilities.count + ")!");
            return;
          }

          var result = {
            result: getSortedResult(labels_1, probabilities, options.maxResults)
          };
          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.useCustomModel: " + ex);
      reject(ex);
    }
  });
}

exports.useCustomModel = useCustomModel;

function getSortedResult(labels, probabilities, maxResults) {
  if (maxResults === void 0) {
    maxResults = 5;
  }

  var result = [];
  labels.forEach(function (text, i) {
    return result.push({
      text: text,
      confidence: probabilities.objectAtIndex(i)
    });
  });
  result.sort(function (a, b) {
    return a.confidence < b.confidence ? 1 : a.confidence === b.confidence ? 0 : -1;
  });

  if (result.length > maxResults) {
    result.splice(maxResults);
  }

  var softmaxScale = 1.0 / 256.0;
  result.map(function (r) {
    return r.confidence = NSNumber.numberWithFloat(softmaxScale * r.confidence);
  });
  return result;
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/facedetection/facedetection-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var mlkit_cameraview_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js");

exports.minimumFaceSizeProperty = new properties_1.Property({
  name: "minimumFaceSize",
  defaultValue: 0.1
});
exports.enableFaceTrackingProperty = new properties_1.Property({
  name: "enableFaceTracking",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
var detectionModeConverter = view_base_1.makeParser(view_base_1.makeValidator("accurate", "fast"));
exports.detectionModeProperty = new properties_1.Property({
  name: "detectionMode",
  defaultValue: "fast",
  valueConverter: detectionModeConverter
});

var MLKitFaceDetection = function (_super) {
  __extends(MLKitFaceDetection, _super);

  function MLKitFaceDetection() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitFaceDetection.prototype[exports.minimumFaceSizeProperty.setNative] = function (value) {
    this.minimumFaceSize = value;
  };

  MLKitFaceDetection.prototype[exports.enableFaceTrackingProperty.setNative] = function (value) {
    this.enableFaceTracking = value;
  };

  MLKitFaceDetection.prototype[exports.detectionModeProperty.setNative] = function (value) {
    this.detectionMode = value;
  };

  MLKitFaceDetection.scanResultEvent = "scanResult";
  return MLKitFaceDetection;
}(mlkit_cameraview_1.MLKitCameraView);

exports.MLKitFaceDetection = MLKitFaceDetection;
exports.minimumFaceSizeProperty.register(MLKitFaceDetection);
exports.enableFaceTrackingProperty.register(MLKitFaceDetection);
exports.detectionModeProperty.register(MLKitFaceDetection);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/facedetection/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var facedetection_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/facedetection/facedetection-common.js");

var MLKitFaceDetection = function (_super) {
  __extends(MLKitFaceDetection, _super);

  function MLKitFaceDetection() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitFaceDetection.prototype.createDetector = function () {
    return getDetector({
      detectionMode: this.detectionMode,
      enableFaceTracking: this.enableFaceTracking,
      minimumFaceSize: this.minimumFaceSize
    });
  };

  MLKitFaceDetection.prototype.createSuccessListener = function () {
    var _this = this;

    return function (faces, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (faces !== null && faces.count > 0) {
        var result = {
          faces: []
        };

        for (var i = 0, l = faces.count; i < l; i++) {
          var face = faces.objectAtIndex(i);
          result.faces.push({
            smilingProbability: face.hasSmilingProbability ? face.smilingProbability : undefined,
            leftEyeOpenProbability: face.hasLeftEyeOpenProbability ? face.leftEyeOpenProbability : undefined,
            rightEyeOpenProbability: face.hasRightEyeOpenProbability ? face.rightEyeOpenProbability : undefined,
            trackingId: face.hasTrackingID ? face.trackingID : undefined,
            bounds: face.frame,
            headEulerAngleY: face.headEulerAngleY,
            headEulerAngleZ: face.headEulerAngleZ
          });
        }

        _this.notify({
          eventName: MLKitFaceDetection.scanResultEvent,
          object: _this,
          value: result
        });
      }
    };
  };

  MLKitFaceDetection.prototype.rotateRecording = function () {
    return false;
  };

  MLKitFaceDetection.prototype.getVisionOrientation = function (imageOrientation) {
    if (imageOrientation === 0 && !utils_1.ios.isLandscape()) {
      return 6;
    } else {
      return _super.prototype.getVisionOrientation.call(this, imageOrientation);
    }
  };

  return MLKitFaceDetection;
}(facedetection_common_1.MLKitFaceDetection);

exports.MLKitFaceDetection = MLKitFaceDetection;

function getDetector(options) {
  var firVision = FIRVision.vision();
  var firOptions = FIRVisionFaceDetectorOptions.new();
  firOptions.performanceMode = options.detectionMode === "accurate" ? 2 : 1;
  firOptions.landmarkMode = 2;
  firOptions.classificationMode = 2;
  firOptions.minFaceSize = options.minimumFaceSize;
  firOptions.trackingEnabled = options.enableFaceTracking === true;
  return firVision.faceDetectorWithOptions(firOptions);
}

function detectFacesOnDevice(options) {
  return new Promise(function (resolve, reject) {
    try {
      var faceDetector = getDetector(options);
      faceDetector.processImageCompletion(getImage(options), function (faces, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (faces !== null) {
          var result = {
            faces: []
          };

          for (var i = 0, l = faces.count; i < l; i++) {
            var face = faces.objectAtIndex(i);
            result.faces.push({
              smilingProbability: face.hasSmilingProbability ? face.smilingProbability : undefined,
              leftEyeOpenProbability: face.hasLeftEyeOpenProbability ? face.leftEyeOpenProbability : undefined,
              rightEyeOpenProbability: face.hasRightEyeOpenProbability ? face.rightEyeOpenProbability : undefined,
              trackingId: face.hasTrackingID ? face.trackingID : undefined,
              bounds: face.frame,
              headEulerAngleY: face.headEulerAngleY,
              headEulerAngleZ: face.headEulerAngleZ
            });
          }

          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.detectFaces: " + ex);
      reject(ex);
    }
  });
}

exports.detectFacesOnDevice = detectFacesOnDevice;

function getImage(options) {
  var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
  var newImage = UIImage.alloc().initWithCGImageScaleOrientation(image.CGImage, 1, 0);
  return FIRVisionImage.alloc().initWithImage(newImage);
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/imagelabeling/imagelabeling-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var mlkit_cameraview_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js");

exports.confidenceThresholdProperty = new properties_1.Property({
  name: "confidenceThreshold",
  defaultValue: 0.5
});

var MLKitImageLabeling = function (_super) {
  __extends(MLKitImageLabeling, _super);

  function MLKitImageLabeling() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitImageLabeling.prototype[exports.confidenceThresholdProperty.setNative] = function (value) {
    this.confidenceThreshold = parseFloat(value);
  };

  MLKitImageLabeling.scanResultEvent = "scanResult";
  return MLKitImageLabeling;
}(mlkit_cameraview_1.MLKitCameraView);

exports.MLKitImageLabeling = MLKitImageLabeling;
exports.confidenceThresholdProperty.register(MLKitImageLabeling);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/imagelabeling/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var imagelabeling_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/imagelabeling/imagelabeling-common.js");

var MLKitImageLabeling = function (_super) {
  __extends(MLKitImageLabeling, _super);

  function MLKitImageLabeling() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitImageLabeling.prototype.createDetector = function () {
    return getDetector(this.confidenceThreshold);
  };

  MLKitImageLabeling.prototype.createSuccessListener = function () {
    var _this = this;

    return function (labels, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (labels !== null && labels.count > 0) {
        var result = {
          labels: []
        };

        for (var i = 0, l = labels.count; i < l; i++) {
          var label = labels.objectAtIndex(i);
          result.labels.push({
            text: label.text,
            confidence: label.confidence
          });
        }

        _this.notify({
          eventName: MLKitImageLabeling.scanResultEvent,
          object: _this,
          value: result
        });
      }
    };
  };

  MLKitImageLabeling.prototype.rotateRecording = function () {
    return true;
  };

  return MLKitImageLabeling;
}(imagelabeling_common_1.MLKitImageLabeling);

exports.MLKitImageLabeling = MLKitImageLabeling;

function getDetector(confidenceThreshold) {
  var firVision = FIRVision.vision();
  var fIRVisionOnDeviceImageLabelerOptions = FIRVisionOnDeviceImageLabelerOptions.new();
  fIRVisionOnDeviceImageLabelerOptions.confidenceThreshold = confidenceThreshold || 0.5;
  return firVision.onDeviceImageLabelerWithOptions(fIRVisionOnDeviceImageLabelerOptions);
}

function labelImageOnDevice(options) {
  return new Promise(function (resolve, reject) {
    try {
      var labelDetector = getDetector(options.confidenceThreshold);
      labelDetector.processImageCompletion(getImage(options), function (labels, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (labels !== null) {
          var result = {
            labels: []
          };

          for (var i = 0, l = labels.count; i < l; i++) {
            var label = labels.objectAtIndex(i);
            result.labels.push({
              text: label.text,
              confidence: label.confidence
            });
          }

          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.labelImageOnDevice: " + ex);
      reject(ex);
    }
  });
}

exports.labelImageOnDevice = labelImageOnDevice;

function labelImageCloud(options) {
  return new Promise(function (resolve, reject) {
    try {
      var fIRVisionCloudImageLabelerOptions = FIRVisionCloudImageLabelerOptions.new();
      fIRVisionCloudImageLabelerOptions.confidenceThreshold = options.confidenceThreshold || 0.5;
      var firVision = FIRVision.vision();
      var labeler = firVision.cloudImageLabelerWithOptions(fIRVisionCloudImageLabelerOptions);
      labeler.processImageCompletion(getImage(options), function (labels, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (labels !== null) {
          var result = {
            labels: []
          };

          for (var i = 0, l = labels.count; i < l; i++) {
            var label = labels.objectAtIndex(i);
            result.labels.push({
              text: label.text,
              confidence: label.confidence
            });
          }

          console.log(">>> cloud image labeling result: " + JSON.stringify(result.labels));
          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.labelImageCloud: " + ex);
      reject(ex);
    }
  });
}

exports.labelImageCloud = labelImageCloud;

function getImage(options) {
  var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
  return FIRVisionImage.alloc().initWithImage(image);
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var textrecognition = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/textrecognition/index.js");

exports.textrecognition = textrecognition;

var barcodescanning = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/barcodescanning/index.js");

exports.barcodescanning = barcodescanning;

var facedetection = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/facedetection/index.js");

exports.facedetection = facedetection;

var imagelabeling = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/imagelabeling/index.js");

exports.imagelabeling = imagelabeling;

var landmarkrecognition = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/landmarkrecognition/index.js");

exports.landmarkrecognition = landmarkrecognition;

var custommodel = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/custommodel/index.js");

exports.custommodel = custommodel;

var naturallanguageidentification = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/naturallanguageidentification/index.js");

exports.naturallanguageidentification = naturallanguageidentification;

var smartreply = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/smartreply/index.js");

exports.smartreply = smartreply;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/landmarkrecognition/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

function getDetector(modelType, maxResults) {
  var firVision = FIRVision.vision();
  var fIRVisionCloudDetectorOptions = FIRVisionCloudDetectorOptions.alloc();
  fIRVisionCloudDetectorOptions.modelType = modelType === "latest" ? 1 : 0;
  fIRVisionCloudDetectorOptions.maxResults = maxResults || 10;
  return firVision.cloudLandmarkDetectorWithOptions(fIRVisionCloudDetectorOptions);
}

function recognizeLandmarksCloud(options) {
  return new Promise(function (resolve, reject) {
    try {
      var landmarkDetector = getDetector(options.modelType, options.maxResults);
      landmarkDetector.detectInImageCompletion(getImage(options), function (landmarks, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else if (landmarks !== null) {
          var result = {
            landmarks: []
          };

          for (var i = 0, l = landmarks.count; i < l; i++) {
            var landmark = landmarks.objectAtIndex(i);
            console.log(">> detected landmark: " + landmark);
            result.landmarks.push({
              name: landmark.landmark,
              confidence: landmark.confidence
            });
          }

          resolve(result);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.recognizeLandmarksCloud: " + ex);
      reject(ex);
    }
  });
}

exports.recognizeLandmarksCloud = recognizeLandmarksCloud;

function getImage(options) {
  var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
  return FIRVisionImage.alloc().initWithImage(image);
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

exports.processEveryNthFrameProperty = new properties_1.Property({
  name: "processEveryNthFrame",
  defaultValue: 10
});
exports.preferFrontCameraProperty = new properties_1.Property({
  name: "preferFrontCamera",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
exports.torchOnProperty = new properties_1.Property({
  name: "torchOn",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
exports.pauseProperty = new properties_1.Property({
  name: "pause",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});

var MLKitCameraView = function (_super) {
  __extends(MLKitCameraView, _super);

  function MLKitCameraView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitCameraView.prototype[exports.processEveryNthFrameProperty.setNative] = function (value) {
    this.processEveryNthFrame = value;
  };

  MLKitCameraView.prototype[exports.preferFrontCameraProperty.setNative] = function (value) {
    this.preferFrontCamera = value;
  };

  MLKitCameraView.prototype[exports.torchOnProperty.setNative] = function (value) {
    this.torchOn = value;
    this.updateTorch();
  };

  MLKitCameraView.prototype[exports.pauseProperty.setNative] = function (value) {
    this.pause = value;
    this.pause ? this.pauseScanning() : this.resumeScanning();
  };

  MLKitCameraView.prototype.updateTorch = function () {};

  ;

  MLKitCameraView.prototype.pauseScanning = function () {};

  ;

  MLKitCameraView.prototype.resumeScanning = function () {};

  MLKitCameraView.scanResultEvent = "scanResult";
  return MLKitCameraView;
}(content_view_1.ContentView);

exports.MLKitCameraView = MLKitCameraView;
exports.processEveryNthFrameProperty.register(MLKitCameraView);
exports.preferFrontCameraProperty.register(MLKitCameraView);
exports.torchOnProperty.register(MLKitCameraView);
exports.pauseProperty.register(MLKitCameraView);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var mlkit_cameraview_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview-common.js");

var MLKitCameraView = function (_super) {
  __extends(MLKitCameraView, _super);

  function MLKitCameraView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitCameraView.prototype.disposeNativeView = function () {
    _super.prototype.disposeNativeView.call(this);

    if (this.captureSession) {
      this.captureSession.stopRunning();
      this.captureSession = undefined;
    }

    this.captureDevice = undefined;
    this.previewLayer = undefined;
    this.cameraView = undefined;
    application.off("orientationChanged");
  };

  MLKitCameraView.prototype.createNativeView = function () {
    var v = _super.prototype.createNativeView.call(this);

    if (this.canUseCamera()) {
      this.initView();
    } else {
      console.log("There's no Camera on this device :(");
    }

    return v;
  };

  MLKitCameraView.prototype.canUseCamera = function () {
    try {
      return !!AVCaptureDeviceDiscoverySession && AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo) !== null && NSProcessInfo.processInfo.environment.objectForKey("SIMULATOR_DEVICE_NAME") === null;
    } catch (ignore) {
      return false;
    }
  };

  MLKitCameraView.prototype.initView = function () {
    var _this = this;

    this.captureDevice = AVCaptureDeviceDiscoverySession.discoverySessionWithDeviceTypesMediaTypePosition([AVCaptureDeviceTypeBuiltInWideAngleCamera], AVMediaTypeVideo, this.preferFrontCamera ? 2 : 1).devices.firstObject;

    if (this.torchOn) {
      this.updateTorch();
    }

    this.captureSession = AVCaptureSession.new();
    this.captureSession.sessionPreset = AVCaptureSessionPreset1280x720;

    try {
      var captureDeviceInput = AVCaptureDeviceInput.deviceInputWithDeviceError(this.captureDevice);
      this.captureSession.addInput(captureDeviceInput);
    } catch (e) {
      console.log("Error while trying to use the camera: " + e);
      return;
    }

    this.previewLayer = AVCaptureVideoPreviewLayer.layerWithSession(this.captureSession);
    this.previewLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;

    if (utils_1.ios.isLandscape()) {
      var deviceOrientation = UIDevice.currentDevice.orientation;
      this.previewLayer.connection.videoOrientation = deviceOrientation === 3 ? 3 : 4;
    } else {
      this.previewLayer.connection.videoOrientation = 1;
    }

    application.off("orientationChanged");
    application.on("orientationChanged", this.rotateOnOrientationChange.bind(this));
    setTimeout(function () {
      if (_this.ios) {
        _this.ios.layer.addSublayer(_this.previewLayer);
      }

      if (!_this.pause) {
        _this.captureSession.startRunning();
      }

      _this.cameraView = TNSMLKitCameraView.alloc().initWithCaptureSession(_this.captureSession);
      _this.cameraView.processEveryXFrames = _this.processEveryNthFrame;

      if (_this.rotateRecording()) {
        _this.cameraView.imageOrientation = 3;
      }

      _this.cameraView.delegate = TNSMLKitCameraViewDelegateImpl.createWithOwnerResultCallbackAndOptions(new WeakRef(_this), function (data) {}, {});
    }, 0);
  };

  MLKitCameraView.prototype.rotateOnOrientationChange = function (args) {
    if (this.previewLayer) {
      if (args.newValue === "landscape") {
        var deviceOrientation = UIDevice.currentDevice.orientation;
        this.previewLayer.connection.videoOrientation = deviceOrientation === 3 ? 3 : 4;
      } else if (args.newValue === "portrait") {
        this.previewLayer.connection.videoOrientation = 1;
      }
    }
  };

  MLKitCameraView.prototype.onLayout = function (left, top, right, bottom) {
    _super.prototype.onLayout.call(this, left, top, right, bottom);

    if (this.previewLayer && this.ios && this.canUseCamera()) {
      this.previewLayer.frame = this.ios.layer.bounds;
    }
  };

  MLKitCameraView.prototype.getVisionOrientation = function (imageOrientation) {
    if (imageOrientation === 0) {
      return 1;
    } else if (imageOrientation === 1) {
      return 3;
    } else if (imageOrientation === 2) {
      return 8;
    } else if (imageOrientation === 3) {
      return 6;
    } else if (imageOrientation === 4) {
      return 2;
    } else if (imageOrientation === 5) {
      return 4;
    } else if (imageOrientation === 6) {
      return 5;
    } else if (imageOrientation === 7) {
      return 7;
    } else {
      return 1;
    }
  };

  MLKitCameraView.prototype.updateTorch = function () {
    var device = this.captureDevice;

    if (device && device.hasTorch && device.lockForConfiguration()) {
      if (this.torchOn) {
        device.torchMode = 1;
        device.flashMode = 1;
      } else {
        device.torchMode = 0;
        device.flashMode = 0;
      }

      device.unlockForConfiguration();
    }
  };

  MLKitCameraView.prototype.pauseScanning = function () {
    if (this.captureSession && this.captureSession.running) {
      this.captureSession.stopRunning();
    }
  };

  ;

  MLKitCameraView.prototype.resumeScanning = function () {
    if (this.captureSession && !this.captureSession.running) {
      this.captureSession.startRunning();
    }
  };

  MLKitCameraView.prototype.runDetector = function (image, onComplete) {
    throw new Error("No custom detector implemented, so 'runDetector' can't do its thing");
  };

  return MLKitCameraView;
}(mlkit_cameraview_common_1.MLKitCameraView);

exports.MLKitCameraView = MLKitCameraView;

var TNSMLKitCameraViewDelegateImpl = function (_super) {
  __extends(TNSMLKitCameraViewDelegateImpl, _super);

  function TNSMLKitCameraViewDelegateImpl() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.detectorBusy = false;
    return _this;
  }

  TNSMLKitCameraViewDelegateImpl.createWithOwnerResultCallbackAndOptions = function (owner, callback, options) {
    if (TNSMLKitCameraViewDelegateImpl.ObjCProtocols.length === 0 && typeof TNSMLKitCameraViewDelegate !== "undefined") {
      TNSMLKitCameraViewDelegateImpl.ObjCProtocols.push(TNSMLKitCameraViewDelegate);
    }

    var delegate = TNSMLKitCameraViewDelegateImpl.new();
    delegate.owner = owner;
    delegate.options = options;
    delegate.resultCallback = callback;
    delegate.detector = owner.get().createDetector();
    delegate.onSuccessListener = owner.get().createSuccessListener();
    return delegate;
  };

  TNSMLKitCameraViewDelegateImpl.prototype.cameraDidOutputImage = function (image) {
    var _this = this;

    if (!image || this.detectorBusy) {
      return;
    }

    this.detectorBusy = true;

    var onComplete = function () {
      _this.detectorBusy = false;
    };

    if (this.detector.detectInImageCompletion) {
      this.detector.detectInImageCompletion(this.uiImageToFIRVisionImage(image), function (result, error) {
        _this.onSuccessListener(result, error);

        onComplete();
      });
    } else if (this.detector.processImageCompletion) {
      this.detector.processImageCompletion(this.uiImageToFIRVisionImage(image), function (result, error) {
        _this.onSuccessListener(result, error);

        onComplete();
      });
    } else {
      this.owner.get().runDetector(image, onComplete);
    }
  };

  TNSMLKitCameraViewDelegateImpl.prototype.uiImageToFIRVisionImage = function (image) {
    var fIRVisionImage = FIRVisionImage.alloc().initWithImage(image);
    var fIRVisionImageMetadata = FIRVisionImageMetadata.new();
    fIRVisionImageMetadata.orientation = this.owner.get().getVisionOrientation(image.imageOrientation);
    fIRVisionImage.metadata = fIRVisionImageMetadata;
    return fIRVisionImage;
  };

  TNSMLKitCameraViewDelegateImpl.ObjCProtocols = [];
  return TNSMLKitCameraViewDelegateImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/naturallanguageidentification/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function identifyNaturalLanguage(options) {
  return new Promise(function (resolve, reject) {
    try {
      var naturalLanguage = FIRNaturalLanguage.naturalLanguage();
      var languageId = naturalLanguage.languageIdentificationWithOptions(FIRLanguageIdentificationOptions.alloc().initWithConfidenceThreshold(options.confidenceThreshold || 0.5));
      languageId.identifyLanguageForTextCompletion(options.text, function (languageCode, error) {
        if (error !== null) {
          console.log("Failed with error: " + error.localizedDescription);
          reject(error.localizedDescription);
        } else if (languageCode !== null && languageCode !== "und") {
          console.log("Identified language: " + languageCode);
          resolve({
            languageCode: languageCode
          });
        } else {
          console.log("No language was identified");
          resolve();
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.identifyNaturalLanguage: " + ex);
      reject(ex);
    }
  });
}

exports.identifyNaturalLanguage = identifyNaturalLanguage;

function indentifyPossibleLanguages(options) {
  return new Promise(function (resolve, reject) {
    try {
      var naturalLanguage = FIRNaturalLanguage.naturalLanguage();
      var languageId = naturalLanguage.languageIdentificationWithOptions(FIRLanguageIdentificationOptions.alloc().initWithConfidenceThreshold(options.confidenceThreshold || 0.01));
      languageId.identifyPossibleLanguagesForTextCompletion(options.text, function (languages, error) {
        if (error !== null) {
          console.log("Failed with error: " + error.localizedDescription);
          reject(error.localizedDescription);
        } else if (languages.count === 1 && languages.objectAtIndex(0).languageCode === "und") {
          console.log("No language was identified");
          resolve([]);
        } else {
          var langs = [];

          for (var i = 0; i < languages.count; i++) {
            var l = languages.objectAtIndex(i);
            langs.push({
              languageCode: l.languageCode,
              confidence: l.confidence
            });
          }

          resolve(langs);
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.indentifyPossibleLanguages: " + ex);
      reject(ex);
    }
  });
}

exports.indentifyPossibleLanguages = indentifyPossibleLanguages;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/smartreply/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

function suggestReplies(options) {
  return new Promise(function (resolve, reject) {
    try {
      var naturalLanguage = FIRNaturalLanguage.naturalLanguage();
      var smartReply = naturalLanguage.smartReply();
      var conversation_1 = NSMutableArray.new();
      options.conversation.forEach(function (m) {
        return conversation_1.addObject(FIRTextMessage.alloc().initWithTextTimestampUserIDIsLocalUser(m.text, m.timestamp, m.userId, m.localUser));
      });
      smartReply.suggestRepliesForMessagesCompletion(conversation_1, function (result, error) {
        if (error) {
          reject(error.localizedDescription);
        } else if (!result) {
          reject("No results");
        } else if (result.status === 1) {
          reject("Unsupported language");
        } else if (result.status === 2) {
          reject("No reply");
        } else if (result.status === 0) {
          var suggestions = [];

          for (var i = 0; i < result.suggestions.count; i++) {
            var s = result.suggestions.objectAtIndex(i);
            suggestions.push(s.text);
          }

          resolve(suggestions);
        } else {
          reject();
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.suggestReplies: " + ex);
      reject(ex);
    }
  });
}

exports.suggestReplies = suggestReplies;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/textrecognition/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var textrecognition_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/textrecognition/textrecognition-common.js");

var MLKitTextRecognition = function (_super) {
  __extends(MLKitTextRecognition, _super);

  function MLKitTextRecognition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitTextRecognition.prototype.createDetector = function () {
    var firVision = FIRVision.vision();
    return firVision.onDeviceTextRecognizer();
  };

  MLKitTextRecognition.prototype.createSuccessListener = function () {
    var _this = this;

    return function (visionText, error) {
      if (error !== null) {
        console.log(error.localizedDescription);
      } else if (visionText !== null) {
        _this.notify({
          eventName: MLKitTextRecognition.scanResultEvent,
          object: _this,
          value: getResult(visionText)
        });
      }
    };
  };

  MLKitTextRecognition.prototype.rotateRecording = function () {
    return true;
  };

  return MLKitTextRecognition;
}(textrecognition_common_1.MLKitTextRecognition);

exports.MLKitTextRecognition = MLKitTextRecognition;

function getResult(visionText) {
  if (visionText === null) {
    return {};
  }

  var result = {
    text: visionText.text,
    blocks: [],
    ios: visionText
  };

  var _loop_1 = function (i, l) {
    var feature = visionText.blocks.objectAtIndex(i);
    var resultFeature = {
      text: feature.text,
      confidence: feature.confidence,
      bounds: feature.frame,
      lines: []
    };

    var addLineToResult = function (line) {
      var resultLine = {
        text: feature.text,
        confidence: line.confidence,
        bounds: line.frame,
        elements: []
      };

      for (var a = 0, m = line.elements.count; a < m; a++) {
        var element = line.elements.objectAtIndex(a);
        resultLine.elements.push({
          text: element.text,
          bounds: element.frame
        });
      }

      resultFeature.lines.push(resultLine);
    };

    if (feature instanceof FIRVisionTextBlock) {
      var textBlock = feature;

      for (var j = 0, k = textBlock.lines.count; j < k; j++) {
        addLineToResult(textBlock.lines.objectAtIndex(j));
      }
    }

    if (feature instanceof FIRVisionTextLine) {
      addLineToResult(feature);
    }

    result.blocks.push(resultFeature);
  };

  for (var i = 0, l = visionText.blocks.count; i < l; i++) {
    _loop_1(i, l);
  }

  return result;
}

function recognizeTextOnDevice(options) {
  return new Promise(function (resolve, reject) {
    try {
      var firVision = FIRVision.vision();
      var textDetector = firVision.onDeviceTextRecognizer();
      textDetector.processImageCompletion(getImage(options), function (visionText, error) {
        if (error !== null) {
          reject(error.localizedDescription);
        } else {
          resolve(getResult(visionText));
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.recognizeTextOnDevice: " + ex);
      reject(ex);
    }
  });
}

exports.recognizeTextOnDevice = recognizeTextOnDevice;

function recognizeTextCloud(options) {
  return new Promise(function (resolve, reject) {
    try {
      var fIRVisionCloudDetectorOptions = FIRVisionCloudTextRecognizerOptions.new();
      fIRVisionCloudDetectorOptions.modelType = 0;
      var firVision = FIRVision.vision();
      var textDetector = firVision.cloudTextRecognizerWithOptions(fIRVisionCloudDetectorOptions);
      textDetector.processImageCompletion(getImage(options), function (visionText, error) {
        console.log(">>> recognizeTextCloud error? " + error + ", visionText? " + visionText);

        if (error !== null) {
          reject(error.localizedDescription);
        } else if (visionText !== null) {
          resolve(getResult(visionText));
        } else {
          reject("Unknown error :'(");
        }
      });
    } catch (ex) {
      console.log("Error in firebase.mlkit.recognizeTextCloud: " + ex);
      reject(ex);
    }
  });
}

exports.recognizeTextCloud = recognizeTextCloud;

function getImage(options) {
  var image = options.image instanceof image_source_1.ImageSource ? options.image.ios : options.image.imageSource.ios;
  return FIRVisionImage.alloc().initWithImage(image);
}

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/mlkit/textrecognition/textrecognition-common.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var mlkit_cameraview_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/mlkit/mlkit-cameraview.js");

exports.reportDuplicatesProperty = new properties_1.Property({
  name: "reportDuplicates",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});

var MLKitTextRecognition = function (_super) {
  __extends(MLKitTextRecognition, _super);

  function MLKitTextRecognition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  MLKitTextRecognition.prototype[exports.reportDuplicatesProperty.setNative] = function (value) {
    this.reportDuplicates = value;
  };

  MLKitTextRecognition.scanResultEvent = "scanResult";
  return MLKitTextRecognition;
}(mlkit_cameraview_1.MLKitCameraView);

exports.MLKitTextRecognition = MLKitTextRecognition;
exports.reportDuplicatesProperty.register(MLKitTextRecognition);

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/performance/performance.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/utils.js");

function startTrace(name) {
  return new FirebaseTrace(FIRPerformance.startTraceWithName(name));
}

exports.startTrace = startTrace;

var FirebaseTrace = function () {
  function FirebaseTrace(nativeTrace) {
    this.nativeTrace = nativeTrace;
  }

  FirebaseTrace.prototype.setValue = function (attribute, value) {
    this.nativeTrace.setValueForAttribute(value, attribute);
  };

  FirebaseTrace.prototype.getValue = function (attribute) {
    return this.nativeTrace.valueForAttribute(attribute);
  };

  FirebaseTrace.prototype.getAttributes = function () {
    return utils_1.firebaseUtils.toJsObject(this.nativeTrace.attributes);
  };

  FirebaseTrace.prototype.removeAttribute = function (attribute) {
    this.nativeTrace.removeAttribute(attribute);
  };

  FirebaseTrace.prototype.incrementMetric = function (metric, by) {
    this.nativeTrace.incrementMetricByInt(metric, by);
  };

  FirebaseTrace.prototype.stop = function () {
    this.nativeTrace.stop();
  };

  return FirebaseTrace;
}();

exports.FirebaseTrace = FirebaseTrace;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/storage/storage.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var firebase_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/firebase-common.js");

function getStorageRef(reject, arg) {
  if (typeof FIRStorage === "undefined") {
    reject("Uncomment Storage in the plugin's Podfile first");
    return undefined;
  }

  if (!arg.remoteFullPath) {
    reject("remoteFullPath is mandatory");
    return undefined;
  }

  if (arg.bucket) {
    return FIRStorage.storage().referenceForURL(arg.bucket);
  } else if (firebase_common_1.firebase.storageBucket) {
    return firebase_common_1.firebase.storageBucket;
  } else {
    return FIRStorage.storage().reference();
  }
}

function uploadFile(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (metadata, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve({
            name: metadata.name,
            contentType: metadata.contentType,
            created: metadata.timeCreated,
            updated: metadata.updated,
            bucket: metadata.bucket,
            size: metadata.size
          });
        }
      };

      var storageRef = getStorageRef(reject, arg);

      if (!storageRef) {
        return;
      }

      var fIRStorageReference = storageRef.child(arg.remoteFullPath);
      var fIRStorageUploadTask = null;

      if (arg.localFile) {
        if (typeof arg.localFile !== "object") {
          reject("localFile argument must be a File object; use file-system module to create one");
          return;
        }

        fIRStorageUploadTask = fIRStorageReference.putFileMetadataCompletion(NSURL.fileURLWithPath(arg.localFile.path), null, onCompletion);
      } else if (arg.localFullPath) {
        fIRStorageUploadTask = fIRStorageReference.putFileMetadataCompletion(NSURL.fileURLWithPath(arg.localFullPath), null, onCompletion);
      } else {
        reject("One of localFile or localFullPath is required");
        return;
      }

      if (fIRStorageUploadTask !== null) {
        fIRStorageUploadTask.observeStatusHandler(2, function (snapshot) {
          if (!snapshot.error && typeof arg.onProgress === "function") {
            arg.onProgress({
              fractionCompleted: snapshot.progress.fractionCompleted,
              percentageCompleted: Math.round(snapshot.progress.fractionCompleted * 100)
            });
          }
        });
      }
    } catch (ex) {
      console.log("Error in firebase.uploadFile: " + ex);
      reject(ex);
    }
  });
}

exports.uploadFile = uploadFile;

function downloadFile(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (url, error) {
        console.log(">>> download complete, error: " + error);

        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(url.absoluteString);
        }
      };

      var storageRef = getStorageRef(reject, arg);

      if (!storageRef) {
        return;
      }

      var fIRStorageReference = storageRef.child(arg.remoteFullPath);
      var localFilePath = void 0;

      if (arg.localFile) {
        if (typeof arg.localFile !== "object") {
          reject("localFile argument must be a File object; use file-system module to create one");
          return;
        }

        localFilePath = arg.localFile.path;
      } else if (arg.localFullPath) {
        localFilePath = arg.localFullPath;
      } else {
        reject("One of localFile or localFullPath is required");
        return;
      }

      var localFileUrl = NSURL.fileURLWithPath(localFilePath);
      fIRStorageReference.writeToFileCompletion(localFileUrl, onCompletion);
    } catch (ex) {
      console.log("Error in firebase.downloadFile: " + ex);
      reject(ex);
    }
  });
}

exports.downloadFile = downloadFile;

function getDownloadUrl(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (url, error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve(url.absoluteString);
        }
      };

      var storageRef = getStorageRef(reject, arg);

      if (!storageRef) {
        return;
      }

      var fIRStorageReference = storageRef.child(arg.remoteFullPath);
      fIRStorageReference.downloadURLWithCompletion(onCompletion);
    } catch (ex) {
      console.log("Error in firebase.getDownloadUrl: " + ex);
      reject(ex);
    }
  });
}

exports.getDownloadUrl = getDownloadUrl;

function deleteFile(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var onCompletion = function (error) {
        if (error) {
          reject(error.localizedDescription);
        } else {
          resolve();
        }
      };

      var storageRef = getStorageRef(reject, arg);

      if (!storageRef) {
        return;
      }

      var fIRStorageFileRef = storageRef.child(arg.remoteFullPath);
      fIRStorageFileRef.deleteWithCompletion(onCompletion);
    } catch (ex) {
      console.log("Error in firebase.deleteFile: " + ex);
      reject(ex);
    }
  });
}

exports.deleteFile = deleteFile;

/***/ }),

/***/ "../node_modules/nativescript-plugin-firebase/utils.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var firebase_common_1 = __webpack_require__("../node_modules/nativescript-plugin-firebase/firebase-common.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var Utils = function () {
  function Utils() {
    this.invokeOnRunLoop = function () {
      var runloop = CFRunLoopGetMain();
      return function (func) {
        CFRunLoopPerformBlock(runloop, kCFRunLoopDefaultMode, func);
        CFRunLoopWakeUp(runloop);
      };
    }();
  }

  Utils.prototype.toJsObject = function (objCObj) {
    if (objCObj === null || typeof objCObj !== "object") {
      return objCObj;
    }

    var node,
        key,
        i,
        l,
        oKeyArr = objCObj.allKeys;

    if (oKeyArr === undefined && objCObj.count !== undefined) {
      node = [];

      for (i = 0, l = objCObj.count; i < l; i++) {
        key = objCObj.objectAtIndex(i);
        node.push(this.toJsObject(key));
      }
    } else if (oKeyArr !== undefined) {
      node = {};

      for (i = 0, l = oKeyArr.count; i < l; i++) {
        key = oKeyArr.objectAtIndex(i);
        var val = objCObj.valueForKey(key);

        if (val === null) {
          node[key] = null;
          continue;
        }

        node[key] = this.getValueForClass(val);
      }
    } else {
      node = this.getValueForClass(objCObj);
    }

    return node;
  };

  Utils.prototype.getValueForClass = function (val) {
    switch (types_1.getClass(val)) {
      case 'NSArray':
      case 'NSMutableArray':
        return this.toJsObject(val);

      case 'NSDictionary':
      case 'NSMutableDictionary':
        return this.toJsObject(val);

      case 'String':
        return String(val);

      case 'Boolean':
        return val;

      case 'Number':
      case 'NSDecimalNumber':
        return Number(String(val));

      case 'Date':
        return new Date(val);

      case 'FIRTimestamp':
        return val.dateValue();

      case 'FIRDocumentReference':
        var path = val.path;
        var lastSlashIndex = path.lastIndexOf("/");
        return firebase_common_1.firebase.firestore._getDocumentReference(val, path.substring(0, lastSlashIndex), path.substring(lastSlashIndex + 1));

      case 'FIRGeoPoint':
        return firebase_common_1.firebase.firestore.GeoPoint(val.latitude, val.longitude);

      default:
        console.log("Please report this at https://github.com/EddyVerbruggen/nativescript-plugin-firebase/issues: iOS toJsObject is missing a converter for class '" + types_1.getClass(val) + "'. Casting to String as a fallback.");
        return String(val);
    }
  };

  return Utils;
}();

exports.Utils = Utils;
exports.firebaseUtils = new Utils();

/***/ }),

/***/ "../node_modules/nativescript-vue/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * NativeScript-Vue v2.2.2
 * (Using Vue v2.5.22)
 * (c) 2017-2019 rigor789
 * Released under the MIT license.
 */


function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var fragment_transitions = __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.transitions.js");

var frame = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var layoutBase = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var contentView = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var view = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var xml = __webpack_require__("../node_modules/tns-core-modules/xml/xml.js");

var application = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

var application__default = _interopDefault(application);

var arrayMap = function (xs, f) {
  if (xs.map) {
    return xs.map(f);
  }

  var res = [];

  for (var i = 0; i < xs.length; i++) {
    var x = xs[i];

    if (hasOwn.call(xs, i)) {
      res.push(f(x, i, xs));
    }
  }

  return res;
};

var hasOwn = Object.prototype.hasOwnProperty;
var indexOf = [].indexOf;

var indexof = function (arr, obj) {
  if (indexOf) {
    return arr.indexOf(obj);
  }

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }

  return -1;
};

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

var hasOwn$1 = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var foreach = function forEach(obj, fn, ctx) {
  if (toString.call(fn) !== '[object Function]') {
    throw new TypeError('iterator must be a function');
  }

  var l = obj.length;

  if (l === +l) {
    for (var i = 0; i < l; i++) {
      fn.call(ctx, obj[i], i, obj);
    }
  } else {
    for (var k in obj) {
      if (hasOwn$1.call(obj, k)) {
        fn.call(ctx, obj[k], k, obj);
      }
    }
  }
};

var hasOwn$2 = Object.prototype.hasOwnProperty;

var arrayReduce = function (xs, f, acc) {
  var hasAcc = arguments.length >= 3;

  if (hasAcc && xs.reduce) {
    return xs.reduce(f, acc);
  }

  if (xs.reduce) {
    return xs.reduce(f);
  }

  for (var i = 0; i < xs.length; i++) {
    if (!hasOwn$2.call(xs, i)) {
      continue;
    }

    if (!hasAcc) {
      acc = xs[i];
      hasAcc = true;
      continue;
    }

    acc = f(acc, xs[i], i);
  }

  return acc;
};

var hasOwn$3 = Object.prototype.hasOwnProperty;
var toString$1 = Object.prototype.toString;

var isFunction = function (fn) {
  return typeof fn === 'function' && !(fn instanceof RegExp) || toString$1.call(fn) === '[object Function]';
};

var foreach$1 = function forEach(obj, fn) {
  if (!isFunction(fn)) {
    throw new TypeError('iterator must be a function');
  }

  var i,
      k,
      isString = typeof obj === 'string',
      l = obj.length,
      context = arguments.length > 2 ? arguments[2] : null;

  if (l === +l) {
    for (i = 0; i < l; i++) {
      if (context === null) {
        fn(isString ? obj.charAt(i) : obj[i], i, obj);
      } else {
        fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
      }
    }
  } else {
    for (k in obj) {
      if (hasOwn$3.call(obj, k)) {
        if (context === null) {
          fn(obj[k], k, obj);
        } else {
          fn.call(context, obj[k], k, obj);
        }
      }
    }
  }
};

var toString$2 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toString$2.call(value);
  var isArguments = str === '[object Arguments]';

  if (!isArguments) {
    isArguments = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toString$2.call(value.callee) === '[object Function]';
  }

  return isArguments;
}; // modified from https://github.com/es-shims/es5-shim


var has = Object.prototype.hasOwnProperty,
    toString$3 = Object.prototype.toString,
    hasDontEnumBug = !{
  'toString': null
}.propertyIsEnumerable('toString'),
    hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype'),
    dontEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];

var keysShim = function keys(object) {
  var isObject = object !== null && typeof object === 'object',
      isFunction = toString$3.call(object) === '[object Function]',
      isArguments$$1 = isArguments(object),
      theKeys = [];

  if (!isObject && !isFunction && !isArguments$$1) {
    throw new TypeError("Object.keys called on a non-object");
  }

  if (isArguments$$1) {
    foreach$1(object, function (value, index) {
      theKeys.push(index);
    });
  } else {
    var name,
        skipProto = hasProtoEnumBug && isFunction;

    for (name in object) {
      if (!(skipProto && name === 'prototype') && has.call(object, name)) {
        theKeys.push(name);
      }
    }
  }

  if (hasDontEnumBug) {
    var ctor = object.constructor,
        skipConstructor = ctor && ctor.prototype === object;
    foreach$1(dontEnums, function (dontEnum) {
      if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
        theKeys.push(dontEnum);
      }
    });
  }

  return theKeys;
};

keysShim.shim = function shimObjectKeys() {
  if (!Object.keys) {
    Object.keys = keysShim;
  }

  return Object.keys || keysShim;
};

var objectKeys = keysShim;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
  return module = {
    exports: {}
  }, fn(module, module.exports), module.exports;
}

var json3 = createCommonjsModule(function (module, exports) {
  (function (root) {
    // Detect the `define` function exposed by asynchronous module loaders. The
    // strict `define` check is necessary for compatibility with `r.js`.
    var isLoader = typeof undefined === "function"; // Use the `global` object exposed by Node (including Browserify via
    // `insert-module-globals`), Narwhal, and Ringo as the default context.
    // Rhino exports a `global` function instead.

    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;

    if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal)) {
      root = freeGlobal;
    } // Public: Initializes JSON 3 using the given `context` object, attaching the
    // `stringify` and `parse` functions to the specified `exports` object.


    function runInContext(context, exports) {
      context || (context = root["Object"]());
      exports || (exports = root["Object"]()); // Native constructor aliases.

      var Number = context["Number"] || root["Number"],
          String = context["String"] || root["String"],
          Object = context["Object"] || root["Object"],
          Date = context["Date"] || root["Date"],
          SyntaxError = context["SyntaxError"] || root["SyntaxError"],
          TypeError = context["TypeError"] || root["TypeError"],
          Math = context["Math"] || root["Math"],
          nativeJSON = context["JSON"] || root["JSON"]; // Delegate to the native `stringify` and `parse` implementations.

      if (typeof nativeJSON == "object" && nativeJSON) {
        exports.stringify = nativeJSON.stringify;
        exports.parse = nativeJSON.parse;
      } // Convenience aliases.


      var objectProto = Object.prototype,
          getClass = objectProto.toString,
          isProperty,
          forEach,
          undef; // Test the `Date#getUTC*` methods. Based on work by @Yaffle.

      var isExtended = new Date(-3509827334573292);

      try {
        // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
        // results for certain dates in Opera >= 10.53.
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
      } catch (exception) {} // Internal: Determines whether the native `JSON.stringify` and `parse`
      // implementations are spec-compliant. Based on work by Ken Snyder.


      function has(name) {
        if (has[name] !== undef) {
          // Return cached feature test result.
          return has[name];
        }

        var isSupported;

        if (name == "bug-string-char-index") {
          // IE <= 7 doesn't support accessing string characters using square
          // bracket notation. IE 8 only supports this for primitives.
          isSupported = "a"[0] != "a";
        } else if (name == "json") {
          // Indicates whether both `JSON.stringify` and `JSON.parse` are
          // supported.
          isSupported = has("json-stringify") && has("json-parse");
        } else {
          var value,
              serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

          if (name == "json-stringify") {
            var stringify = exports.stringify,
                stringifySupported = typeof stringify == "function" && isExtended;

            if (stringifySupported) {
              // A test function object with a custom `toJSON` method.
              (value = function () {
                return 1;
              }).toJSON = value;

              try {
                stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef && // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({
                  "a": [value, true, false, null, "\x00\b\n\f\r\t"]
                }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" && // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
              } catch (exception) {
                stringifySupported = false;
              }
            }

            isSupported = stringifySupported;
          } // Test `JSON.parse`.


          if (name == "json-parse") {
            var parse = exports.parse;

            if (typeof parse == "function") {
              try {
                // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
                // Conforming implementations should also coerce the initial argument to
                // a string prior to parsing.
                if (parse("0") === 0 && !parse(false)) {
                  // Simple parsing test.
                  value = parse(serialized);
                  var parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                  if (parseSupported) {
                    try {
                      // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                      parseSupported = !parse('"\t"');
                    } catch (exception) {}

                    if (parseSupported) {
                      try {
                        // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                        // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                        // certain octal literals.
                        parseSupported = parse("01") !== 1;
                      } catch (exception) {}
                    }

                    if (parseSupported) {
                      try {
                        // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                        // points. These environments, along with FF 3.1b1 and 2,
                        // also allow trailing commas in JSON objects and arrays.
                        parseSupported = parse("1.") !== 1;
                      } catch (exception) {}
                    }
                  }
                }
              } catch (exception) {
                parseSupported = false;
              }
            }

            isSupported = parseSupported;
          }
        }

        return has[name] = !!isSupported;
      }

      if (!has("json")) {
        // Common `[[Class]]` name aliases.
        var functionClass = "[object Function]",
            dateClass = "[object Date]",
            numberClass = "[object Number]",
            stringClass = "[object String]",
            arrayClass = "[object Array]",
            booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

        var charIndexBuggy = has("bug-string-char-index"); // Define additional utility methods if the `Date` methods are buggy.

        if (!isExtended) {
          var floor = Math.floor; // A mapping between the months of the year and the number of days between
          // January 1st and the first of the respective month.

          var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
          // first day of the given month.

          var getDay = function (year, month) {
            return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
          };
        } // Internal: Determines if a property is a direct property of the given
        // object. Delegates to the native `Object#hasOwnProperty` method.


        if (!(isProperty = objectProto.hasOwnProperty)) {
          isProperty = function (property) {
            var members = {},
                constructor;

            if ((members.__proto__ = null, members.__proto__ = {
              // The *proto* property cannot be set multiple times in recent
              // versions of Firefox and SeaMonkey.
              "toString": 1
            }, members).toString != getClass) {
              // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
              // supports the mutable *proto* property.
              isProperty = function (property) {
                // Capture and break the objectgs prototype chain (see section 8.6.2
                // of the ES 5.1 spec). The parenthesized expression prevents an
                // unsafe transformation by the Closure Compiler.
                var original = this.__proto__,
                    result = property in (this.__proto__ = null, this); // Restore the original prototype chain.

                this.__proto__ = original;
                return result;
              };
            } else {
              // Capture a reference to the top-level `Object` constructor.
              constructor = members.constructor; // Use the `constructor` property to simulate `Object#hasOwnProperty` in
              // other environments.

              isProperty = function (property) {
                var parent = (this.constructor || constructor).prototype;
                return property in this && !(property in parent && this[property] === parent[property]);
              };
            }

            members = null;
            return isProperty.call(this, property);
          };
        } // Internal: A set of primitive types used by `isHostType`.


        var PrimitiveTypes = {
          "boolean": 1,
          "number": 1,
          "string": 1,
          "undefined": 1
        }; // Internal: Determines if the given object `property` value is a
        // non-primitive.

        var isHostType = function (object, property) {
          var type = typeof object[property];
          return type == "object" ? !!object[property] : !PrimitiveTypes[type];
        }; // Internal: Normalizes the `for...in` iteration algorithm across
        // environments. Each enumerated key is yielded to a `callback` function.


        forEach = function (object, callback) {
          var size = 0,
              Properties,
              members,
              property; // Tests for bugs in the current environment's `for...in` algorithm. The
          // `valueOf` property inherits the non-enumerable flag from
          // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

          (Properties = function () {
            this.valueOf = 0;
          }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

          members = new Properties();

          for (property in members) {
            // Ignore all properties inherited from `Object.prototype`.
            if (isProperty.call(members, property)) {
              size++;
            }
          }

          Properties = members = null; // Normalize the iteration algorithm.

          if (!size) {
            // A list of non-enumerable properties inherited from `Object.prototype`.
            members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
            // properties.

            forEach = function (object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  length;
              var hasProperty = !isFunction && typeof object.constructor != "function" && isHostType(object, "hasOwnProperty") ? object.hasOwnProperty : isProperty;

              for (property in object) {
                // Gecko <= 1.0 enumerates the `prototype` property of functions under
                // certain conditions; IE does not.
                if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                  callback(property);
                }
              } // Manually invoke the callback for each non-enumerable property.


              for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property)) {}
            };
          } else if (size == 2) {
            // Safari <= 2.0.4 enumerates shadowed properties twice.
            forEach = function (object, callback) {
              // Create a set of iterated properties.
              var members = {},
                  isFunction = getClass.call(object) == functionClass,
                  property;

              for (property in object) {
                // Store each property name to prevent double enumeration. The
                // `prototype` property of functions is not enumerated due to cross-
                // environment inconsistencies.
                if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                  callback(property);
                }
              }
            };
          } else {
            // No bugs detected; use the standard `for...in` algorithm.
            forEach = function (object, callback) {
              var isFunction = getClass.call(object) == functionClass,
                  property,
                  isConstructor;

              for (property in object) {
                if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                  callback(property);
                }
              } // Manually invoke the callback for the `constructor` property due to
              // cross-environment inconsistencies.


              if (isConstructor || isProperty.call(object, property = "constructor")) {
                callback(property);
              }
            };
          }

          return forEach(object, callback);
        }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
        // `filter` argument may specify either a function that alters how object and
        // array members are serialized, or an array of strings and numbers that
        // indicates which properties should be serialized. The optional `width`
        // argument may be either a string or number that specifies the indentation
        // level of the output.


        if (!has("json-stringify")) {
          // Internal: A map of control characters and their escaped equivalents.
          var Escapes = {
            92: "\\\\",
            34: '\\"',
            8: "\\b",
            12: "\\f",
            10: "\\n",
            13: "\\r",
            9: "\\t"
          }; // Internal: Converts `value` into a zero-padded string such that its
          // length is at least equal to `width`. The `width` must be <= 6.

          var leadingZeroes = "000000";

          var toPaddedString = function (width, value) {
            // The `|| 0` expression is necessary to work around a bug in
            // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
            return (leadingZeroes + (value || 0)).slice(-width);
          }; // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.


          var unicodePrefix = "\\u00";

          var quote = function (value) {
            var result = '"',
                index = 0,
                length = value.length,
                useCharIndex = !charIndexBuggy || length > 10;
            var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);

            for (; index < length; index++) {
              var charCode = value.charCodeAt(index); // If the character is a control character, append its Unicode or
              // shorthand escape sequence; otherwise, append the character as-is.

              switch (charCode) {
                case 8:
                case 9:
                case 10:
                case 12:
                case 13:
                case 34:
                case 92:
                  result += Escapes[charCode];
                  break;

                default:
                  if (charCode < 32) {
                    result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                    break;
                  }

                  result += useCharIndex ? symbols[index] : value.charAt(index);
              }
            }

            return result + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
            var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;

            try {
              // Necessary for host object support.
              value = object[property];
            } catch (exception) {}

            if (typeof value == "object" && value) {
              className = getClass.call(value);

              if (className == dateClass && !isProperty.call(value, "toJSON")) {
                if (value > -1 / 0 && value < 1 / 0) {
                  // Dates are serialized according to the `Date#toJSON` method
                  // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                  // for the ISO 8601 date time string format.
                  if (getDay) {
                    // Manually compute the year, month, date, hours, minutes,
                    // seconds, and milliseconds if the `getUTC*` methods are
                    // buggy. Adapted from @Yaffle's `date-shim` project.
                    date = floor(value / 864e5);

                    for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) {}

                    for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) {}

                    date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
                    // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                    // to compute `A modulo B`, as the `%` operator does not
                    // correspond to the `modulo` operation for negative numbers.

                    time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
                    // decomposing the time within the day. See section 15.9.1.10.

                    hours = floor(time / 36e5) % 24;
                    minutes = floor(time / 6e4) % 60;
                    seconds = floor(time / 1e3) % 60;
                    milliseconds = time % 1e3;
                  } else {
                    year = value.getUTCFullYear();
                    month = value.getUTCMonth();
                    date = value.getUTCDate();
                    hours = value.getUTCHours();
                    minutes = value.getUTCMinutes();
                    seconds = value.getUTCSeconds();
                    milliseconds = value.getUTCMilliseconds();
                  } // Serialize extended years correctly.


                  value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
                } else {
                  value = null;
                }
              } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
                // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
                // ignores all `toJSON` methods on these objects unless they are
                // defined directly on an instance.
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            }

            if (value === null) {
              return "null";
            }

            className = getClass.call(value);

            if (className == booleanClass) {
              // Booleans are represented literally.
              return "" + value;
            } else if (className == numberClass) {
              // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
              // `"null"`.
              return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
            } else if (className == stringClass) {
              // Strings are double-quoted and escaped.
              return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undef ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                forEach(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undef) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });
                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (typeof filter == "function" || typeof filter == "object" && filter) {
              if ((className = getClass.call(filter)) == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length; value = filter[index++], (className = getClass.call(value), className == stringClass || className == numberClass) && (properties[value] = 1)) {}
              }
            }

            if (width) {
              if ((className = getClass.call(width)) == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") {}
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        } // Public: Parses a JSON source string.


        if (!has("json-parse")) {
          var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
          // equivalents.

          var Unescapes = {
            92: "\\",
            34: '"',
            47: "/",
            98: "\b",
            116: "\t",
            110: "\n",
            102: "\f",
            114: "\r"
          }; // Internal: Stores the parser state.

          var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

          var abort = function () {
            Index = Source = null;
            throw SyntaxError();
          }; // Internal: Returns the next token, or `"$"` if the parser has reached
          // the end of the source string. A token may be a string, number, `null`
          // literal, or Boolean literal.


          var lex = function () {
            var source = Source,
                length = source.length,
                value,
                begin,
                position,
                isSigned,
                charCode;

            while (Index < length) {
              charCode = source.charCodeAt(Index);

              switch (charCode) {
                case 9:
                case 10:
                case 13:
                case 32:
                  // Skip whitespace tokens, including tabs, carriage returns, line
                  // feeds, and space characters.
                  Index++;
                  break;

                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                  // the current position.
                  value = charIndexBuggy ? source.charAt(Index) : source[Index];
                  Index++;
                  return value;

                case 34:
                  // `"` delimits a JSON string; advance to the next character and
                  // begin parsing the string. String tokens are prefixed with the
                  // sentinel `@` character to distinguish them from punctuators and
                  // end-of-string tokens.
                  for (value = "@", Index++; Index < length;) {
                    charCode = source.charCodeAt(Index);

                    if (charCode < 32) {
                      // Unescaped ASCII control characters (those with a code unit
                      // less than the space character) are not permitted.
                      abort();
                    } else if (charCode == 92) {
                      // A reverse solidus (`\`) marks the beginning of an escaped
                      // control character (including `"`, `\`, and `/`) or Unicode
                      // escape sequence.
                      charCode = source.charCodeAt(++Index);

                      switch (charCode) {
                        case 92:
                        case 34:
                        case 47:
                        case 98:
                        case 116:
                        case 110:
                        case 102:
                        case 114:
                          // Revive escaped control characters.
                          value += Unescapes[charCode];
                          Index++;
                          break;

                        case 117:
                          // `\u` marks the beginning of a Unicode escape sequence.
                          // Advance to the first character and validate the
                          // four-digit code point.
                          begin = ++Index;

                          for (position = Index + 4; Index < position; Index++) {
                            charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                            // insensitive) that form a single hexadecimal value.

                            if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                              // Invalid Unicode escape sequence.
                              abort();
                            }
                          } // Revive the escaped character.


                          value += fromCharCode("0x" + source.slice(begin, Index));
                          break;

                        default:
                          // Invalid escape sequence.
                          abort();
                      }
                    } else {
                      if (charCode == 34) {
                        // An unescaped double-quote character marks the end of the
                        // string.
                        break;
                      }

                      charCode = source.charCodeAt(Index);
                      begin = Index; // Optimize for the common case where a string is valid.

                      while (charCode >= 32 && charCode != 92 && charCode != 34) {
                        charCode = source.charCodeAt(++Index);
                      } // Append the string as-is.


                      value += source.slice(begin, Index);
                    }
                  }

                  if (source.charCodeAt(Index) == 34) {
                    // Advance to the next character and return the revived string.
                    Index++;
                    return value;
                  } // Unterminated string.


                  abort();

                default:
                  // Parse numbers and literals.
                  begin = Index; // Advance past the negative sign, if one is specified.

                  if (charCode == 45) {
                    isSigned = true;
                    charCode = source.charCodeAt(++Index);
                  } // Parse an integer or floating-point value.


                  if (charCode >= 48 && charCode <= 57) {
                    // Leading zeroes are interpreted as octal literals.
                    if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                      // Illegal octal literal.
                      abort();
                    }

                    isSigned = false; // Parse the integer component.

                    for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) {} // Floats cannot contain a leading decimal point; however, this
                    // case is already accounted for by the parser.


                    if (source.charCodeAt(Index) == 46) {
                      position = ++Index; // Parse the decimal component.

                      for (; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal trailing decimal.
                        abort();
                      }

                      Index = position;
                    } // Parse exponents. The `e` denoting the exponent is
                    // case-insensitive.


                    charCode = source.charCodeAt(Index);

                    if (charCode == 101 || charCode == 69) {
                      charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                      // specified.

                      if (charCode == 43 || charCode == 45) {
                        Index++;
                      } // Parse the exponential component.


                      for (position = Index; position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) {}

                      if (position == Index) {
                        // Illegal empty exponent.
                        abort();
                      }

                      Index = position;
                    } // Coerce the parsed value to a JavaScript number.


                    return +source.slice(begin, Index);
                  } // A negative sign may only precede numbers.


                  if (isSigned) {
                    abort();
                  } // `true`, `false`, and `null` literals.


                  if (source.slice(Index, Index + 4) == "true") {
                    Index += 4;
                    return true;
                  } else if (source.slice(Index, Index + 5) == "false") {
                    Index += 5;
                    return false;
                  } else if (source.slice(Index, Index + 4) == "null") {
                    Index += 4;
                    return null;
                  } // Unrecognized token.


                  abort();
              }
            } // Return the sentinel `$` character if the parser has reached the end
            // of the source string.


            return "$";
          }; // Internal: Parses a JSON `value` token.


          var get = function (value) {
            var results, hasMembers;

            if (value == "$") {
              // Unexpected end of input.
              abort();
            }

            if (typeof value == "string") {
              if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
                // Remove the sentinel `@` character.
                return value.slice(1);
              } // Parse object and array literals.


              if (value == "[") {
                // Parses a JSON array, returning a new JavaScript array.
                results = [];

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing square bracket marks the end of the array literal.

                  if (value == "]") {
                    break;
                  } // If the array literal contains elements, the current token
                  // should be a comma separating the previous element from the
                  // next.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "]") {
                        // Unexpected trailing `,` in array literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each array element.
                      abort();
                    }
                  } // Elisions and leading commas are not permitted.


                  if (value == ",") {
                    abort();
                  }

                  results.push(get(value));
                }

                return results;
              } else if (value == "{") {
                // Parses a JSON object, returning a new JavaScript object.
                results = {};

                for (;; hasMembers || (hasMembers = true)) {
                  value = lex(); // A closing curly brace marks the end of the object literal.

                  if (value == "}") {
                    break;
                  } // If the object literal contains members, the current token
                  // should be a comma separator.


                  if (hasMembers) {
                    if (value == ",") {
                      value = lex();

                      if (value == "}") {
                        // Unexpected trailing `,` in object literal.
                        abort();
                      }
                    } else {
                      // A `,` must separate each object member.
                      abort();
                    }
                  } // Leading commas are not permitted, object property names must be
                  // double-quoted strings, and a `:` must separate each property
                  // name and value.


                  if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                    abort();
                  }

                  results[value.slice(1)] = get(lex());
                }

                return results;
              } // Unexpected token encountered.


              abort();
            }

            return value;
          }; // Internal: Updates a traversed object member.


          var update = function (source, property, callback) {
            var element = walk(source, property, callback);

            if (element === undef) {
              delete source[property];
            } else {
              source[property] = element;
            }
          }; // Internal: Recursively traverses a parsed JSON object, invoking the
          // `callback` function for each value. This is an implementation of the
          // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


          var walk = function (source, property, callback) {
            var value = source[property],
                length;

            if (typeof value == "object" && value) {
              // `forEach` can't be used to traverse an array in Opera <= 8.54
              // because its `Object#hasOwnProperty` implementation returns `false`
              // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
              if (getClass.call(value) == arrayClass) {
                for (length = value.length; length--;) {
                  update(value, length, callback);
                }
              } else {
                forEach(value, function (property) {
                  update(value, property, callback);
                });
              }
            }

            return callback.call(source, property, value);
          }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


          exports.parse = function (source, callback) {
            var result, value;
            Index = 0;
            Source = "" + source;
            result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

            if (lex() != "$") {
              abort();
            } // Reset the parser state.


            Index = Source = null;
            return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
          };
        }
      }

      exports["runInContext"] = runInContext;
      return exports;
    }

    if (exports && !exports.nodeType && !isLoader) {
      // Export for CommonJS environments.
      runInContext(root, exports);
    } else {
      // Export for web browsers and JavaScript engines.
      var nativeJSON = root.JSON;
      var JSON3 = runInContext(root, root["JSON3"] = {
        // Public: Restores the original value of the global `JSON` object and
        // returns a reference to the `JSON3` object.
        "noConflict": function () {
          root.JSON = nativeJSON;
          return JSON3;
        }
      });
      root.JSON = {
        "parse": JSON3.parse,
        "stringify": JSON3.stringify
      };
    }
  })(commonjsGlobal);
});
/**
 * Module dependencies.
 */

/**
 * Make sure `Object.keys` work for `undefined`
 * values that are still there, like `document.all`.
 * http://lists.w3.org/Archives/Public/public-html/2009Jun/0546.html
 *
 * @api private
 */

function objectKeys$1(val) {
  if (Object.keys) {
    return Object.keys(val);
  }

  return objectKeys(val);
}
/**
 * Module exports.
 */


var utilInspect = inspect;
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 * @license MIT (© Joyent)
 */

/* legacy: obj, showHidden, depth, colors*/

function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) {
    ctx.depth = arguments[2];
  }

  if (arguments.length >= 4) {
    ctx.colors = arguments[3];
  }

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    _extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) {
    ctx.showHidden = false;
  }

  if (isUndefined(ctx.depth)) {
    ctx.depth = 2;
  }

  if (isUndefined(ctx.colors)) {
    ctx.colors = false;
  }

  if (isUndefined(ctx.customInspect)) {
    ctx.customInspect = true;
  }

  if (ctx.colors) {
    ctx.stylize = stylizeWithColor;
  }

  return formatValue(ctx, obj, ctx.depth);
} // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics


inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeNoColor(str, styleType) {
  return str;
}

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

function isUndefined(arg) {
  return arg === void 0;
}

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function isFunction$1(arg) {
  return typeof arg === 'function';
}

function isString(arg) {
  return typeof arg === 'string';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isNull(arg) {
  return arg === null;
}

function hasOwn$4(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function arrayToHash(array) {
  var hash = {};
  foreach(array, function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwn$4(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  foreach(keys, function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction$1(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = objectKeys$1(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden && Object.getOwnPropertyNames) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (indexof(keys, 'message') >= 0 || indexof(keys, 'description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction$1(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isarray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction$1(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = arrayMap(keys, function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = {
    value: value[key]
  };

  if (Object.getOwnPropertyDescriptor) {
    desc = Object.getOwnPropertyDescriptor(value, key) || desc;
  }

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwn$4(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (indexof(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = arrayMap(str.split('\n'), function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + arrayMap(str.split('\n'), function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = json3.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) {
    return ctx.stylize('undefined', 'undefined');
  }

  if (isString(value)) {
    var simple = '\'' + json3.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) {
    return ctx.stylize('' + value, 'number');
  }

  if (isBoolean(value)) {
    return ctx.stylize('' + value, 'boolean');
  } // For some reason typeof null is "object", so special case here.


  if (isNull(value)) {
    return ctx.stylize('null', 'null');
  }
}

function reduceToSingleString(output, base, braces) {
  var length = arrayReduce(output, function (prev, cur) {
    if (cur.indexOf('\n') >= 0) ;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function _extend(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) {
    return origin;
  }

  var keys = objectKeys$1(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
}
/*  */


var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject$1(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp$1(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString$4(val) {
  return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn$5(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Generate a string containing static keys from compiler modules.
 */


function genStaticKeys(modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || []);
  }, []).join(',');
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject$1(a);
  var isObjectB = isObject$1(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
/*  */

/**
 * Check if a string starts with $ or _
 */


function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = /[^\w.$]/;

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge; // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {}
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer = false;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: 'development' !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: 'development' !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;
{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */

var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject$1(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn$5(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if (customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn$5(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */

function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn$5(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && 'development' !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn$5(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn$5(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn$5(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn$5(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if (warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn$5(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn$5(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn$5(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if (isObject$1(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean$1(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean$1() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  if (vm) {
    var cur = vm;

    while (cur = cur.$parent) {
      var hooks = cur.$options.errorCaptured;

      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;

            if (capture) {
              return;
            }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }

  globalHandleError(err, vm, info);
}

function globalHandleError(err, vm, info) {
  logError(err, vm, info);
}

function logError(err, vm, info) {
  {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */

  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).


var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false; // Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.

/* istanbul ignore if */

if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) || // PhantomJS
MessageChannel.toString() === '[object MessageChannelConstructor]')) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;

  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
} // Determine microtask defer implementation.

/* istanbul ignore next, $flow-disable-line */


if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  microTimerFunc = function () {
    p.then(flushCallbacks); // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;

    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/*  */


var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject$1(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$1 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has$1 = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has$1[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if (has$1[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has$1[id] == null) {
    has$1[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString(); // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
      warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject$1(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) ;
}
/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn$5(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn$5(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn$5(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject$1(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }

      if (renderCompleted) {
        contexts.length = 0;
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        contexts.length = 0;
      }
    });
    var reject = once(function (reason) {
      warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject$1(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject("timeout (" + res.timeout + "ms)");
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);

      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }

    return vm;
  };
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  var slots = {};

  if (!children) {
    return slots;
  }

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};

  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }

  return res;
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined

  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren

  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);
var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp$1(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;
    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

function updateAttrs(oldVnode, vnode) {
  if (!oldVnode.data.attrs && !vnode.data.attrs) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (attrs.__ob__) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      elm.setAttribute(key, cur);
    }
  }

  for (key in oldAttrs) {
    if (attrs[key] == null) {
      elm.setAttribute(key);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');
var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject$1(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (!data.staticClass && !data.class && (!oldData || !oldData.staticClass && !oldData.class)) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (transitionClass) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var class_ = {
  create: updateClass,
  update: updateClass
};
var target$1;

function add$1(event, handler, once, capture) {
  if (capture) {
    console.log('bubble phase not supported');
    return;
  }

  if (once) {
    var oldHandler = handler;

    handler = function () {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      var res = oldHandler.call.apply(oldHandler, [null].concat(args));

      if (res !== null) {
        remove$2(event, null, null, target$1);
      }
    };
  }

  target$1.addEventListener(event, handler);
}

function remove$2(event, handler, capture, _target) {
  if (_target === void 0) _target = target$1;

  _target.removeEventListener(event);
}

function updateDOMListeners(oldVnode, vnode) {
  if (!oldVnode.data.on && !vnode.data.on) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
var normalize = cached(camelize);

function createStyle(oldVnode, vnode) {
  // console.log(`\t\t ===> createStyle(${oldVnode}, ${vnode})`)
  if (!vnode.data.staticStyle) {
    updateStyle(oldVnode, vnode);
    return;
  }

  var elm = vnode.elm;
  var staticStyle = vnode.data.staticStyle;

  for (var name in staticStyle) {
    if (staticStyle[name]) {
      elm.setStyle(normalize(name), staticStyle[name]);
    }
  }

  updateStyle(oldVnode, vnode);
}

function updateStyle(oldVnode, vnode) {
  if (!oldVnode.data.style && !vnode.data.style) {
    return;
  }

  var cur, name;
  var elm = vnode.elm;
  var oldStyle = oldVnode.data.style || {};
  var style = vnode.data.style || {};
  var needClone = style.__ob__; // handle array syntax

  if (Array.isArray(style)) {
    style = vnode.data.style = toObject$1(style);
  } // clone the style for future updates,
  // in case the user mutates the style object in-place.


  if (needClone) {
    style = vnode.data.style = extend({}, style);
  }

  for (name in oldStyle) {
    if (!style[name]) {
      elm.setStyle(normalize(name), '');
    }
  }

  for (name in style) {
    cur = style[name];
    elm.setStyle(normalize(name), cur);
  }
}

function toObject$1(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}

var style = {
  create: createStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) ;
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) ;
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject$1(duration) ? duration.enter : duration);

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject$1(duration) ? duration.leave : duration);

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
};
var platformModules = [attrs, class_, events, style, transition];
var actionBar = {
  template: "\n    <NativeActionBar ~actionBar v-bind=\"$attrs\" v-on=\"$listeners\">\n      <slot />\n    </NativeActionBar>\n  "
};

var ref$1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var isAndroid$1 = ref$1.isAndroid;
var android = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (isAndroid$1) {
      return children;
    }
  }
};
var frames = new Map();

function setFrame(id, frame$$1) {
  return frames.set(id, frame$$1);
}

function getFrame(id) {
  return frames.get(id);
}

function deleteFrame(id) {
  return frames.delete(id);
}

var hmrChecking = false;

var isHMRChecking = function () {
  return hmrChecking;
};

var resetHMRChecking = function () {
  hmrChecking = false;
};

if (false) {}

var idCounter = 1;
var frame$1 = {
  props: {
    id: {
      default: 'default'
    },
    transition: {
      type: [String, Object],
      required: false,
      default: null
    },
    'ios:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    'android:transition': {
      type: [String, Object],
      required: false,
      default: null
    },
    // injected by the template compiler
    hasRouterView: {
      default: false
    }
  },
  data: function data() {
    return {
      properties: {}
    };
  },
  created: function created() {
    var properties = {};

    if (getFrame(this.$props.id)) {
      properties.id = this.$props.id + idCounter++;
    }

    this.properties = Object.assign({}, this.$attrs, this.$props, properties);
    setFrame(this.properties.id, this);
  },
  destroyed: function destroyed() {
    deleteFrame(this.properties.id);
  },
  render: function render(h) {
    return h('NativeFrame', {
      attrs: this.properties,
      on: this.$listeners
    }, this.$slots.default);
  },
  methods: {
    _getFrame: function _getFrame() {
      return this.$el.nativeView;
    },
    _ensureTransitionObject: function _ensureTransitionObject(transition) {
      if (typeof transition === 'string') {
        return {
          name: transition
        };
      }

      return transition;
    },
    _composeTransition: function _composeTransition(entry) {
      var platformEntryProp = "transition" + (platform.isAndroid ? 'Android' : 'iOS');
      var entryProp = entry[platformEntryProp] ? platformEntryProp : 'transition';
      var platformProp = (platform.isAndroid ? 'android' : 'ios') + ":transition";
      var prop = this[platformProp] ? platformProp : 'transition';

      if (entry[entryProp]) {
        entry[entryProp] = this._ensureTransitionObject(entry[entryProp]);
      } else if (this[prop]) {
        entry[entryProp] = this._ensureTransitionObject(this[prop]);
      }

      return entry;
    },
    notifyPageMounted: function notifyPageMounted(pageVm) {
      var this$1 = this;
      var options = {
        create: function () {
          return pageVm.$el.nativeView;
        }
      };
      this.$nextTick(function () {
        if (isHMRChecking()) {
          this$1.replace(options);
        } else {
          this$1.navigate(options);
        }
      });
    },
    replace: function replace(entry) {
      var frame$$1 = this._getFrame();

      var page = entry.create();

      entry.create = function () {
        return page;
      };

      var backstackEntry = {
        entry: entry,
        resolvedPage: page,
        navDepth: undefined,
        fragmentTag: undefined
      }; // TODO: this should be in a specific NS Frame method

      if (platform.isIOS) {
        var viewController = backstackEntry.resolvedPage.ios;

        if (!viewController) {
          throw new Error('Required page does not have a viewController created.');
        }

        viewController['_transition'] = {
          name: 'non-animated'
        };
        viewController['_delegate'] = null;
        frame$$1._ios.controller.delegate = null;
        viewController['_entry'] = backstackEntry;

        if (utils.ios.MajorVersion > 10) {
          // Reset back button title before pushing view controller to prevent
          // displaying default 'back' title (when NavigationButton custom title is set).
          var barButtonItem = UIBarButtonItem.alloc().initWithTitleStyleTargetAction('', UIBarButtonItemStyle.Plain, null, null);
          viewController.navigationItem.backBarButtonItem = barButtonItem;
        }

        var newControllers = NSMutableArray.alloc().initWithArray(frame$$1._ios.controller.viewControllers);

        if (newControllers.count === 0) {
          throw new Error('Wrong controllers count.');
        } // the code below fixes a phantom animation that appears on the Back button in this case


        viewController.navigationItem.hidesBackButton = frame$$1.backStack.length === 0; // swap the top entry with the new one

        var skippedNavController = newControllers.lastObject;
        skippedNavController.isBackstackSkipped = true;
        newControllers.removeLastObject();
        newControllers.addObject(viewController); // replace the controllers instead of pushing directly

        frame$$1._ios.controller.setViewControllersAnimated(newControllers, false);
      } else {
        var frameId = frame$$1._android.frameId;
        frame$$1._isBack = false;
        backstackEntry.frameId = frameId;

        var manager = frame$$1._getFragmentManager();

        var currentEntry = frame$$1._currentEntry;
        var newFragmentTag = "fragment" + frameId + "[-1]";
        var newFragment = frame$$1.createFragment(backstackEntry, newFragmentTag);
        var animated = false;
        var navigationTransition = null;
        var transaction = manager.beginTransaction();

        fragment_transitions._setAndroidFragmentTransitions(animated, navigationTransition, currentEntry, backstackEntry, transaction, frameId);

        transaction.remove(currentEntry.fragment);
        transaction.replace(frame$$1.containerViewId, newFragment, newFragmentTag);
        transaction.commitAllowingStateLoss();
      }

      resetHMRChecking();
    },
    navigate: function navigate(entry, back) {
      var this$1 = this;
      if (back === void 0) back = false;

      var frame$$1 = this._getFrame();

      if (back) {
        return frame$$1.goBack(entry);
      } // resolve the page from the entry and attach a navigatedTo listener
      // to fire the frame events


      var page = entry.create();
      page.once('navigatedTo', function () {
        this$1.$emit('navigated', entry);
      });

      var handler = function (args) {
        if (args.isBackNavigation) {
          page.off('navigatedFrom', handler);
          this$1.$emit('navigatedBack', entry);
        }
      };

      page.on('navigatedFrom', handler);

      entry.create = function () {
        return page;
      };

      this._composeTransition(entry);

      frame$$1.navigate(entry);
    },
    back: function back(backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      this.navigate(backstackEntry, true);
    }
  }
};

var ref$2 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var isIOS$1 = ref$2.isIOS;
var ios = {
  functional: true,
  render: function render(h, ref) {
    var children = ref.children;

    if (isIOS$1) {
      return children;
    }
  }
};
var VUE_VIEW = '__vueVNodeRef__';
var tid = 0;
var vTemplate = {
  props: {
    name: {
      type: String
    },
    if: {
      type: String
    }
  },
  mounted: function mounted() {
    if (!this.$scopedSlots.default) {
      return;
    }

    this.$templates = this.$el.parentNode.$templates = this.$parent.$templates = this.$parent.$templates || new TemplateBag();
    this.$templates.registerTemplate(this.$props.name || (this.$props.if ? "v-template-" + tid++ : 'default'), this.$props.if, this.$scopedSlots.default);
  },
  render: function render(h) {}
};

var TemplateBag = function TemplateBag() {
  this._templateMap = new Map();
};

var prototypeAccessors$1 = {
  selectorFn: {
    configurable: true
  }
};

TemplateBag.prototype.registerTemplate = function registerTemplate(name, condition, scopedFn) {
  this._templateMap.set(name, {
    scopedFn: scopedFn,
    conditionFn: this.getConditionFn(condition),
    keyedTemplate: new VueKeyedTemplate(name, scopedFn)
  });
};

prototypeAccessors$1.selectorFn.get = function () {
  var self = this;
  return function templateSelectorFn(item) {
    var iterator = self._templateMap.entries();

    var curr;

    while (curr = iterator.next().value) {
      var name = curr[0];
      var conditionFn = curr[1].conditionFn;

      try {
        if (conditionFn(item)) {
          return name;
        }
      } catch (err) {}
    }

    return 'default';
  };
};

TemplateBag.prototype.getConditionFn = function getConditionFn(condition) {
  return new Function('ctx', "with(ctx) { return !!(" + condition + ") }");
};

TemplateBag.prototype.getKeyedTemplate = function getKeyedTemplate(name) {
  return this._templateMap.get(name).keyedTemplate;
};

TemplateBag.prototype.patchTemplate = function patchTemplate(name, context, oldVnode) {
  var vnode = this._templateMap.get(name).scopedFn(context);

  var nativeView = patch(oldVnode, vnode).nativeView;
  nativeView[VUE_VIEW] = vnode;
  return nativeView;
};

TemplateBag.prototype.getAvailable = function getAvailable() {
  return Array.from(this._templateMap.keys());
};

TemplateBag.prototype.getKeyedTemplates = function getKeyedTemplates() {
  return Array.from(this._templateMap.values()).map(function (ref) {
    var keyedTemplate = ref.keyedTemplate;
    return keyedTemplate;
  });
};

Object.defineProperties(TemplateBag.prototype, prototypeAccessors$1);

var VueKeyedTemplate = function VueKeyedTemplate(key, scopedFn) {
  this._key = key;
  this._scopedFn = scopedFn;
};

var prototypeAccessors$1$1 = {
  key: {
    configurable: true
  }
};

prototypeAccessors$1$1.key.get = function () {
  return this._key;
};

VueKeyedTemplate.prototype.createView = function createView() {
  // we are returning null because we don't have the data here
  // the view will be created in the `patchTemplate` method above.
  // see https://github.com/nativescript-vue/nativescript-vue/issues/229#issuecomment-390330474
  return null;
};

Object.defineProperties(VueKeyedTemplate.prototype, prototypeAccessors$1$1);
var listView = {
  props: {
    items: {
      type: Array,
      required: true
    },
    '+alias': {
      type: String,
      default: 'item'
    },
    '+index': {
      type: String
    }
  },
  template: "\n    <NativeListView\n      ref=\"listView\"\n      :items=\"items\"\n      v-bind=\"$attrs\"\n      v-on=\"listeners\"\n      @itemTap=\"onItemTap\"\n      @itemLoading=\"onItemLoading\"\n    >\n      <slot />\n    </NativeListView>\n  ",
  watch: {
    items: {
      handler: function handler(newVal) {
        this.$refs.listView.setAttribute('items', newVal);
        this.refresh();
      },
      deep: true
    }
  },
  created: function created() {
    // we need to remove the itemTap handler from a clone of the $listeners
    // object because we are emitting the event ourselves with added data.
    var listeners = extend({}, this.$listeners);
    delete listeners.itemTap;
    this.listeners = listeners;
    this.getItemContext = getItemContext.bind(this);
  },
  mounted: function mounted() {
    var this$1 = this;

    if (!this.$templates) {
      return;
    }

    this.$refs.listView.setAttribute('_itemTemplatesInternal', this.$templates.getKeyedTemplates());
    this.$refs.listView.setAttribute('_itemTemplateSelector', function (item, index) {
      return this$1.$templates.selectorFn(this$1.getItemContext(item, index));
    });
  },
  methods: {
    onItemTap: function onItemTap(args) {
      this.$emit('itemTap', extend({
        item: this.items[args.index]
      }, args));
    },
    onItemLoading: function onItemLoading(args) {
      if (!this.$templates) {
        return;
      }

      var index = args.index;
      var items = args.object.items;
      var currentItem = typeof items.getItem === 'function' ? items.getItem(index) : items[index];

      var name = args.object._itemTemplateSelector(currentItem, index, items);

      var context = this.getItemContext(currentItem, index);
      var oldVnode = args.view && args.view[VUE_VIEW];
      args.view = this.$templates.patchTemplate(name, context, oldVnode);
    },
    refresh: function refresh() {
      this.$refs.listView.nativeView.refresh();
    }
  }
};

function getItemContext(item, index, alias, index_alias) {
  var obj;
  if (alias === void 0) alias = this.$props['+alias'];
  if (index_alias === void 0) index_alias = this.$props['+index'];
  return obj = {}, obj[alias] = item, obj[index_alias || '$index'] = index, obj.$even = index % 2 === 0, obj.$odd = index % 2 !== 0, obj;
}

function getFrameInstance(frame$$1) {
  // get the frame that we need to navigate
  // this can be a frame id (String)
  // a Vue ref to a frame
  // a Frame ViewNode
  // or a Frame instance
  if (isObject$1(frame$$1) && isDef(frame$$1.$el)) {
    frame$$1 = frame$$1.$el.nativeView;
  } else if (isPrimitive(frame$$1)) {
    frame$$1 = frame.getFrameById(frame$$1);
  } else if (isDef(frame$$1.nativeView)) {
    frame$$1 = frame$$1.nativeView;
  } // finally get the component instance for this frame


  return getFrame(frame$$1.id);
}

function findParentNavigationEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'NavigationEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var NavigatorPlugin = {
  install: function install(Vue) {
    Vue.prototype.$navigateBack = function (options, backstackEntry) {
      if (backstackEntry === void 0) backstackEntry = null;
      var navEntry = findParentNavigationEntry(this);
      var defaultOptions = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      options = Object.assign({}, defaultOptions, options);
      var frame$$1 = getFrameInstance(options.frame);
      frame$$1.back(backstackEntry);
    };

    Vue.prototype.$navigateTo = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        frame: 'default'
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var frame$$1 = getFrameInstance(options.frame);
        var navEntryInstance = new Vue({
          name: 'NavigationEntry',
          parent: this$1.$root,
          frame: frame$$1,
          props: {
            frame: {
              default: frame$$1.id
            }
          },
          render: function (h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var page = navEntryInstance.$mount().$el.nativeView;

        var handler = function (args) {
          if (args.isBackNavigation) {
            page.off('navigatedFrom', handler);
            navEntryInstance.$destroy();
          }
        };

        page.on('navigatedFrom', handler); // ensure that the navEntryInstance vue instance is destroyed when the
        // page is disposed (clearHistory: true for example)

        var dispose = page.disposeNativeView;

        page.disposeNativeView = function () {
          var args = [],
              len = arguments.length;

          while (len--) args[len] = arguments[len];

          navEntryInstance.$destroy();
          dispose.call(page, args);
        };

        frame$$1.navigate(Object.assign({}, options, {
          create: function () {
            return page;
          }
        }));
        resolve(page);
      });
    };
  }
};
var PAGE_REF = '__vuePageRef__';
var page = {
  render: function render(h) {
    return h('NativePage', {
      attrs: this.$attrs,
      on: this.$listeners
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$el.nativeView[PAGE_REF] = this;
    var frame$$1 = null;

    if (isHMRChecking() && !platform.isAndroid) {
      var navEntry = findParentNavigationEntry(this);
      var options = {
        frame: navEntry ? navEntry.$options.frame : 'default'
      };
      frame$$1 = getFrameInstance(options.frame);
    } else {
      frame$$1 = this._findParentFrame();
    }

    if (frame$$1) {
      frame$$1.notifyPageMounted(this);
    }

    var handler = function (e) {
      if (e.isBackNavigation) {
        this$1.$el.nativeView.off('navigatedFrom', handler);
        this$1.$parent.$destroy();
      }
    };

    this.$el.nativeView.on('navigatedFrom', handler); // ensure that the parent vue instance is destroyed when the
    // page is disposed (clearHistory: true for example)

    var dispose = this.$el.nativeView.disposeNativeView;

    this.$el.nativeView.disposeNativeView = function () {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len];

      this$1.$parent.$destroy();
      dispose.call(this$1.$el.nativeView, args);
    };
  },
  methods: {
    _findParentFrame: function _findParentFrame() {
      var frame$$1 = this.$parent;

      while (frame$$1 && frame$$1.$options.name !== 'Frame') {
        frame$$1 = frame$$1.$parent;
      }

      return frame$$1;
    }
  }
};
var tabView = {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  render: function render(h) {
    return h('NativeTabView', {
      on: this.$listeners,
      attrs: this.$attrs
    }, this.$slots.default);
  },
  methods: {
    registerTab: function registerTab(tabView) {
      var items = this.$el.nativeView.items || [];
      this.$el.setAttribute('items', items.concat([tabView]));
    }
  }
};
var tabViewItem = {
  template: "<NativeTabViewItem><slot /></NativeTabViewItem>",
  mounted: function mounted() {
    if (this.$el.childNodes.length > 1) {
      warn('TabViewItem should contain only 1 root element', this);
    }

    var _nativeView = this.$el.nativeView;
    _nativeView.view = this.$el.childNodes[0].nativeView;
    this.$parent.registerTab(_nativeView);
  }
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if (children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if (mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
var elementMap = {};
var nativeRegExp = /Native/gi;
var dashRegExp = /-/g;
var defaultViewMeta = {
  skipAddToDom: false,
  isUnaryTag: false,
  tagNamespace: '',
  canBeLeftOpenTag: false,
  model: null,
  component: null
};

function normalizeElementName(elementName) {
  return "native" + elementName.replace(nativeRegExp, '').replace(dashRegExp, '').toLowerCase();
}

function registerElement(elementName, resolver, meta) {
  var normalizedName = normalizeElementName(elementName);
  meta = Object.assign({}, defaultViewMeta, meta);

  if (elementMap[normalizedName]) {
    throw new Error("Element for " + elementName + " already registered.");
  }

  if (!meta.component) {
    // if no Vue component is passed, wrap the simpler vue component
    // which bind the events and attributes to the NS one
    meta.component = {
      functional: true,
      model: meta.model,
      render: function (h, ref) {
        var data = ref.data;
        var children = ref.children;
        return h(normalizedName, data, children);
      }
    };
  }

  meta.component.name = elementName;
  var entry = {
    resolver: resolver,
    meta: meta
  };
  elementMap[normalizedName] = entry;
}

function getElementMap() {
  return elementMap;
}

function getViewClass(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var entry = elementMap[normalizedName];

  if (!entry) {
    throw new TypeError("No known component for element " + elementName + ".");
  }

  try {
    return entry.resolver();
  } catch (e) {
    throw new TypeError("Could not load view for: " + elementName + ". " + e);
  }
}

function getViewMeta(elementName) {
  var normalizedName = normalizeElementName(elementName);
  var meta = defaultViewMeta;
  var entry = elementMap[normalizedName];

  if (entry && entry.meta) {
    meta = entry.meta;
  }

  return meta;
}

function isKnownView(elementName) {
  return elementMap[normalizeElementName(elementName)];
}

registerElement('ActionBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").ActionBar;
}, {
  removeChild: function removeChild(parent, child) {
    try {
      parent.nativeView._removeView(child.nativeView);
    } catch (e) {// ignore exception - child is likely already removed/replaced
      // fixes #76
    }
  },
  component: actionBar
});
registerElement('ActionItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").ActionItem;
});
registerElement('android', null, {
  component: android
});
registerElement('ios', null, {
  component: ios
});
registerElement('ListView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view.js").ListView;
}, {
  component: listView
});
registerElement('NavigationButton', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js").NavigationButton;
});
registerElement('TabView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js").TabView;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  },
  component: tabView
});
registerElement('TabViewItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js").TabViewItem;
}, {
  skipAddToDom: true,
  component: tabViewItem
});
registerElement('transition', null, {
  component: Transition
});
registerElement('v-template', null, {
  component: vTemplate
}); // NS components which uses the automatic registerElement Vue wrapper
// as they do not need any special logic

registerElement('Label', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js").Label;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('DatePicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker.js").DatePicker;
}, {
  model: {
    prop: 'date',
    event: 'dateChange'
  }
});
registerElement('AbsoluteLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js").AbsoluteLayout;
});
registerElement('ActivityIndicator', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js").ActivityIndicator;
});
registerElement('Border', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/border/border.js").Border;
});
registerElement('Button', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js").Button;
});
registerElement('ContentView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js").ContentView;
});
registerElement('DockLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js").DockLayout;
});
registerElement('GridLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js").GridLayout;
});
registerElement('HtmlView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view.js").HtmlView;
});
registerElement('Image', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js").Image;
});
registerElement('img', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js").Image;
});
registerElement('ListPicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker.js").ListPicker;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('Page', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/page/page.js").Page;
}, {
  skipAddToDom: true,
  component: page
});
registerElement('Placeholder', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
});
registerElement('Progress', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress.js").Progress;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('ProxyViewContainer', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}); // registerElement(
//   'Repeater',
//   () => require('tns-core-modules/ui/repeater').Repeater
// )

registerElement('ScrollView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js").ScrollView;
});
registerElement('SearchBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar.js").SearchBar;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('SegmentedBar', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js").SegmentedBar;
}, {
  model: {
    prop: 'selectedIndex',
    event: 'selectedIndexChange'
  }
});
registerElement('SegmentedBarItem', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js").SegmentedBarItem;
});
registerElement('Slider', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider.js").Slider;
}, {
  model: {
    prop: 'value',
    event: 'valueChange'
  }
});
registerElement('StackLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js").StackLayout;
});
registerElement('FlexboxLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js").FlexboxLayout;
});
registerElement('Switch', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch.js").Switch;
}, {
  model: {
    prop: 'checked',
    event: 'checkedChange'
  }
});
registerElement('TextField', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TextView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/text-view/text-view.js").TextView;
}, {
  model: {
    prop: 'text',
    event: 'textChange'
  }
});
registerElement('TimePicker', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker.js").TimePicker;
}, {
  model: {
    prop: 'time',
    event: 'timeChange'
  }
});
registerElement('WebView', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view.js").WebView;
});
registerElement('WrapLayout', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js").WrapLayout;
});
registerElement('FormattedString', function () {
  return __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js").FormattedString;
});
registerElement('Span', function () {
  return __webpack_require__("../node_modules/tns-core-modules/text/span.js").Span;
});
registerElement('DetachedContainer', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('DetachedText', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
}, {
  skipAddToDom: true
});
registerElement('Comment', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js").Placeholder;
});
registerElement('Document', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js").ProxyViewContainer;
}, {
  skipAddToDom: true
});
registerElement('Frame', function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js").Frame;
}, {
  insertChild: function insertChild(parentNode, childNode, atIndex) {// if (normalizeElementName(childNode.tagName) === 'nativepage') {
    // parentNode.nativeView.navigate({ create: () => childNode.nativeView })
    // }
  },
  component: frame$1
});
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject$1 = function isPlainObject(o) {
  var ctor, prot;

  if (isObjectObject(o) === false) {
    return false;
  } // If has modified constructor


  ctor = o.constructor;

  if (typeof ctor !== 'function') {
    return false;
  } // If has modified prototype


  prot = ctor.prototype;

  if (isObjectObject(prot) === false) {
    return false;
  } // If constructor does not have an Object-specific method


  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  } // Most likely a plain Object


  return true;
};

var isExtendable = function isExtendable(val) {
  return isPlainObject$1(val) || typeof val === 'function' || Array.isArray(val);
};
/*!
 * assign-symbols <https://github.com/jonschlinkert/assign-symbols>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */


var assignSymbols = function (receiver, objects) {
  var arguments$1 = arguments;

  if (receiver === null || typeof receiver === 'undefined') {
    throw new TypeError('expected first argument to be an object.');
  }

  if (typeof objects === 'undefined' || typeof Symbol === 'undefined') {
    return receiver;
  }

  if (typeof Object.getOwnPropertySymbols !== 'function') {
    return receiver;
  }

  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var target = Object(receiver);
  var len = arguments.length,
      i = 0;

  while (++i < len) {
    var provider = Object(arguments$1[i]);
    var names = Object.getOwnPropertySymbols(provider);

    for (var j = 0; j < names.length; j++) {
      var key = names[j];

      if (isEnumerable.call(provider, key)) {
        target[key] = provider[key];
      }
    }
  }

  return target;
};

var extendShallow = Object.assign || function (obj
/*, objects*/
) {
  var arguments$1 = arguments;

  if (obj === null || typeof obj === 'undefined') {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  if (!isObject$2(obj)) {
    obj = {};
  }

  for (var i = 1; i < arguments.length; i++) {
    var val = arguments$1[i];

    if (isString$1(val)) {
      val = toObject$2(val);
    }

    if (isObject$2(val)) {
      assign(obj, val);
      assignSymbols(obj, val);
    }
  }

  return obj;
};

function assign(a, b) {
  for (var key in b) {
    if (hasOwn$6(b, key)) {
      a[key] = b[key];
    }
  }
}

function isString$1(val) {
  return val && typeof val === 'string';
}

function toObject$2(str) {
  var obj = {};

  for (var i in str) {
    obj[i] = str[i];
  }

  return obj;
}

function isObject$2(val) {
  return val && typeof val === 'object' || isExtendable(val);
}
/**
 * Returns true if the given `key` is an own property of `obj`.
 */


function hasOwn$6(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var splitString = function (str, options, fn) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  if (typeof options === 'function') {
    fn = options;
    options = null;
  } // allow separator to be defined as a string


  if (typeof options === 'string') {
    options = {
      sep: options
    };
  }

  var opts = extendShallow({
    sep: '.'
  }, options);
  var quotes = opts.quotes || ['"', "'", '`'];
  var brackets;

  if (opts.brackets === true) {
    brackets = {
      '<': '>',
      '(': ')',
      '[': ']',
      '{': '}'
    };
  } else if (opts.brackets) {
    brackets = opts.brackets;
  }

  var tokens = [];
  var stack = [];
  var arr = [''];
  var sep = opts.sep;
  var len = str.length;
  var idx = -1;
  var closeIdx;

  function expected() {
    if (brackets && stack.length) {
      return brackets[stack[stack.length - 1]];
    }
  }

  while (++idx < len) {
    var ch = str[idx];
    var next = str[idx + 1];
    var tok = {
      val: ch,
      idx: idx,
      arr: arr,
      str: str
    };
    tokens.push(tok);

    if (ch === '\\') {
      tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next;
      tok.escaped = true;

      if (typeof fn === 'function') {
        fn(tok);
      }

      arr[arr.length - 1] += tok.val;
      idx++;
      continue;
    }

    if (brackets && brackets[ch]) {
      stack.push(ch);
      var e = expected();
      var i = idx + 1;

      if (str.indexOf(e, i + 1) !== -1) {
        while (stack.length && i < len) {
          var s = str[++i];

          if (s === '\\') {
            s++;
            continue;
          }

          if (quotes.indexOf(s) !== -1) {
            i = getClosingQuote(str, s, i + 1);
            continue;
          }

          e = expected();

          if (stack.length && str.indexOf(e, i + 1) === -1) {
            break;
          }

          if (brackets[s]) {
            stack.push(s);
            continue;
          }

          if (e === s) {
            stack.pop();
          }
        }
      }

      closeIdx = i;

      if (closeIdx === -1) {
        arr[arr.length - 1] += ch;
        continue;
      }

      ch = str.slice(idx, closeIdx + 1);
      tok.val = ch;
      tok.idx = idx = closeIdx;
    }

    if (quotes.indexOf(ch) !== -1) {
      closeIdx = getClosingQuote(str, ch, idx + 1);

      if (closeIdx === -1) {
        arr[arr.length - 1] += ch;
        continue;
      }

      if (keepQuotes(ch, opts) === true) {
        ch = str.slice(idx, closeIdx + 1);
      } else {
        ch = str.slice(idx + 1, closeIdx);
      }

      tok.val = ch;
      tok.idx = idx = closeIdx;
    }

    if (typeof fn === 'function') {
      fn(tok, tokens);
      ch = tok.val;
      idx = tok.idx;
    }

    if (tok.val === sep && tok.split !== false) {
      arr.push('');
      continue;
    }

    arr[arr.length - 1] += tok.val;
  }

  return arr;
};

function getClosingQuote(str, ch, i, brackets) {
  var idx = str.indexOf(ch, i);

  if (str.charAt(idx - 1) === '\\') {
    return getClosingQuote(str, ch, idx + 1);
  }

  return idx;
}

function keepQuotes(ch, opts) {
  if (opts.keepDoubleQuotes === true && ch === '"') {
    return true;
  }

  if (opts.keepSingleQuotes === true && ch === "'") {
    return true;
  }

  return opts.keepQuotes;
}

function keepEscaping(opts, str, idx) {
  if (typeof opts.keepEscaping === 'function') {
    return opts.keepEscaping(str, idx);
  }

  return opts.keepEscaping === true || str[idx + 1] === '\\';
}
/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */


var isExtendable$1 = function isExtendable(val) {
  return typeof val !== 'undefined' && val !== null && (typeof val === 'object' || typeof val === 'function');
};

var extendShallow$1 = function extend(o
/*, objects*/
) {
  var arguments$1 = arguments;

  if (!isExtendable$1(o)) {
    o = {};
  }

  var len = arguments.length;

  for (var i = 1; i < len; i++) {
    var obj = arguments$1[i];

    if (isExtendable$1(obj)) {
      assign$1(o, obj);
    }
  }

  return o;
};

function assign$1(a, b) {
  for (var key in b) {
    if (hasOwn$7(b, key)) {
      a[key] = b[key];
    }
  }
}
/**
 * Returns true if the given `key` is an own property of `obj`.
 */


function hasOwn$7(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

var setValue = function (obj, prop, val) {
  if (!isExtendable$1(obj)) {
    return obj;
  }

  if (Array.isArray(prop)) {
    prop = [].concat.apply([], prop).join('.');
  }

  if (typeof prop !== 'string') {
    return obj;
  }

  var keys = splitString(prop, {
    sep: '.',
    brackets: true
  });
  var len = keys.length;
  var idx = -1;
  var current = obj;

  while (++idx < len) {
    var key = keys[idx];

    if (idx !== len - 1) {
      if (!isExtendable$1(current[key])) {
        current[key] = {};
      }

      current = current[key];
      continue;
    }

    if (isPlainObject$1(current[key]) && isPlainObject$1(val)) {
      current[key] = extendShallow$1({}, current[key], val);
    } else {
      current[key] = val;
    }
  }

  return obj;
};

function isView(view$$1) {
  return view$$1 instanceof view.View;
}

function isLayout(view$$1) {
  return view$$1 instanceof layoutBase.LayoutBase;
}

function isContentView(view$$1) {
  return view$$1 instanceof contentView.ContentView;
}

function insertChild(parentNode, childNode, atIndex) {
  if (atIndex === void 0) atIndex = -1;

  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.insertChild === 'function') {
    return parentNode.meta.insertChild(parentNode, childNode, atIndex);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    if (childView.parent === parentView) {
      var index = parentView.getChildIndex(childView);

      if (index !== -1) {
        parentView.removeChild(childView);
      }
    }

    if (atIndex !== -1) {
      parentView.insertChild(childView, atIndex);
    } else {
      parentView.addChild(childView);
    }
  } else if (isContentView(parentView)) {
    if (childNode.nodeType === 8) {
      parentView._addView(childView, atIndex);
    } else {
      parentView.content = childView;
    }
  } else if (parentView && parentView._addChildFromBuilder) {
    parentView._addChildFromBuilder(childNode._nativeView.constructor.name, childView);
  }
}

function removeChild(parentNode, childNode) {
  if (!parentNode) {
    return;
  }

  if (parentNode.meta && typeof parentNode.meta.removeChild === 'function') {
    return parentNode.meta.removeChild(parentNode, childNode);
  }

  if (childNode.meta.skipAddToDom) {
    return;
  }

  var parentView = parentNode.nativeView;
  var childView = childNode.nativeView;

  if (isLayout(parentView)) {
    parentView.removeChild(childView);
  } else if (isContentView(parentView)) {
    if (parentView.content === childView) {
      parentView.content = null;
    }

    if (childNode.nodeType === 8) {
      parentView._removeView(childView);
    }
  } else if (isView(parentView)) {
    parentView._removeView(childView);
  }
}

var XML_ATTRIBUTES = Object.freeze(['style', 'rows', 'columns', 'fontAttributes']);

var ViewNode = function ViewNode() {
  this.nodeType = null;
  this._tagName = null;
  this.parentNode = null;
  this.childNodes = [];
  this.prevSibling = null;
  this.nextSibling = null;
  this._ownerDocument = null;
  this._nativeView = null;
  this._meta = null;
  /* istanbul ignore next
   * make vue happy :)
   */

  this.hasAttribute = this.removeAttribute = function () {
    return false;
  };
};

var prototypeAccessors$2 = {
  tagName: {
    configurable: true
  },
  firstChild: {
    configurable: true
  },
  lastChild: {
    configurable: true
  },
  nativeView: {
    configurable: true
  },
  meta: {
    configurable: true
  },
  ownerDocument: {
    configurable: true
  }
};
/* istanbul ignore next */

ViewNode.prototype.toString = function toString() {
  return this.constructor.name + "(" + this.tagName + ")";
};

prototypeAccessors$2.tagName.set = function (name) {
  this._tagName = normalizeElementName(name);
};

prototypeAccessors$2.tagName.get = function () {
  return this._tagName;
};

prototypeAccessors$2.firstChild.get = function () {
  return this.childNodes.length ? this.childNodes[0] : null;
};

prototypeAccessors$2.lastChild.get = function () {
  return this.childNodes.length ? this.childNodes[this.childNodes.length - 1] : null;
};

prototypeAccessors$2.nativeView.get = function () {
  return this._nativeView;
};

prototypeAccessors$2.nativeView.set = function (view$$1) {
  if (this._nativeView) {
    throw new Error("Can't override native view.");
  }

  this._nativeView = view$$1;
};

prototypeAccessors$2.meta.get = function () {
  if (this._meta) {
    return this._meta;
  }

  return this._meta = getViewMeta(this.tagName);
};
/* istanbul ignore next */


prototypeAccessors$2.ownerDocument.get = function () {
  if (this._ownerDocument) {
    return this._ownerDocument;
  }

  var el = this;

  while ((el = el.parentNode).nodeType !== 9) {// do nothing
  }

  return this._ownerDocument = el;
};

ViewNode.prototype.getAttribute = function getAttribute(key) {
  return this.nativeView[key];
};
/* istanbul ignore next */


ViewNode.prototype.setAttribute = function setAttribute(key, value) {
  var nv = this.nativeView;

  try {
    if (XML_ATTRIBUTES.indexOf(key) !== -1) {
      nv[key] = value;
    } else {
      // detect expandable attrs for boolean values
      // See https://vuejs.org/v2/guide/components-props.html#Passing-a-Boolean
      if (types.isBoolean(nv[key]) && value === '') {
        value = true;
      }

      if (platform.isAndroid && key.startsWith('android:')) {
        setValue(nv, key.substr(8), value);
      } else if (platform.isIOS && key.startsWith('ios:')) {
        setValue(nv, key.substr(4), value);
      } else if (key.endsWith('.decode')) {
        setValue(nv, key.slice(0, -7), xml.XmlParser._dereferenceEntities(value));
      } else {
        setValue(nv, key, value);
      }
    }
  } catch (e) {// ignore
  }
};
/* istanbul ignore next */


ViewNode.prototype.setStyle = function setStyle(property, value) {
  if (!(value = value.trim()).length) {
    return;
  }

  if (property.endsWith('Align')) {
    // NativeScript uses Alignment instead of Align, this ensures that text-align works
    property += 'ment';
  }

  this.nativeView.style[property] = value;
};
/* istanbul ignore next */


ViewNode.prototype.setText = function setText(text) {
  if (this.nodeType === 3) {
    this.parentNode.setText(text);
  } else {
    this.setAttribute('text', text);
  }
};
/* istanbul ignore next */


ViewNode.prototype.addEventListener = function addEventListener(event, handler) {
  this.nativeView.on(event, handler);
};
/* istanbul ignore next */


ViewNode.prototype.removeEventListener = function removeEventListener(event) {
  this.nativeView.off(event);
};

ViewNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
  if (!childNode) {
    throw new Error("Can't insert child.");
  } // in some rare cases insertBefore is called with a null referenceNode
  // this makes sure that it get's appended as the last child


  if (!referenceNode) {
    return this.appendChild(childNode);
  }

  if (referenceNode.parentNode !== this) {
    throw new Error("Can't insert child, because the reference node has a different parent.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't insert child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  var index = this.childNodes.indexOf(referenceNode);
  childNode.parentNode = this;
  childNode.nextSibling = referenceNode;
  childNode.prevSibling = this.childNodes[index - 1];
  referenceNode.prevSibling = childNode;
  this.childNodes.splice(index, 0, childNode);
  insertChild(this, childNode, index);
};

ViewNode.prototype.appendChild = function appendChild(childNode) {
  if (!childNode) {
    throw new Error("Can't append child.");
  }

  if (childNode.parentNode && childNode.parentNode !== this) {
    throw new Error("Can't append child, because it already has a different parent.");
  }

  if (childNode.parentNode === this) ;
  childNode.parentNode = this;

  if (this.lastChild) {
    childNode.prevSibling = this.lastChild;
    this.lastChild.nextSibling = childNode;
  }

  this.childNodes.push(childNode);
  insertChild(this, childNode, this.childNodes.length - 1);
};

ViewNode.prototype.removeChild = function removeChild$$1(childNode) {
  if (!childNode) {
    throw new Error("Can't remove child.");
  }

  if (!childNode.parentNode) {
    throw new Error("Can't remove child, because it has no parent.");
  }

  if (childNode.parentNode !== this) {
    throw new Error("Can't remove child, because it has a different parent.");
  }

  childNode.parentNode = null;

  if (childNode.prevSibling) {
    childNode.prevSibling.nextSibling = childNode.nextSibling;
  }

  if (childNode.nextSibling) {
    childNode.nextSibling.prevSibling = childNode.prevSibling;
  } // reset the prevSibling and nextSibling. If not, a keep-alived component will
  // still have a filled nextSibling attribute so vue will not
  // insert the node again to the parent. See #220


  childNode.prevSibling = null;
  childNode.nextSibling = null;
  this.childNodes = this.childNodes.filter(function (node) {
    return node !== childNode;
  });
  removeChild(this, childNode);
};

Object.defineProperties(ViewNode.prototype, prototypeAccessors$2);
var VUE_ELEMENT_REF = '__vue_element_ref__';

var ElementNode =
/*@__PURE__*/
function (ViewNode$$1) {
  function ElementNode(tagName) {
    ViewNode$$1.call(this);
    this.nodeType = 1;
    this.tagName = tagName;
    var viewClass = getViewClass(tagName);
    this._nativeView = new viewClass();
    this._nativeView[VUE_ELEMENT_REF] = this;
  }

  if (ViewNode$$1) ElementNode.__proto__ = ViewNode$$1;
  ElementNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  ElementNode.prototype.constructor = ElementNode;

  ElementNode.prototype.appendChild = function appendChild(childNode) {
    ViewNode$$1.prototype.appendChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.insertBefore = function insertBefore(childNode, referenceNode) {
    ViewNode$$1.prototype.insertBefore.call(this, childNode, referenceNode);

    if (childNode.nodeType === 3) {
      this.setText(childNode.text);
    }
  };

  ElementNode.prototype.removeChild = function removeChild(childNode) {
    ViewNode$$1.prototype.removeChild.call(this, childNode);

    if (childNode.nodeType === 3) {
      this.setText('');
    }
  };

  return ElementNode;
}(ViewNode);

var CommentNode =
/*@__PURE__*/
function (ElementNode$$1) {
  function CommentNode(text) {
    ElementNode$$1.call(this, 'comment');
    this.nodeType = 8;
    this.text = text;
  }

  if (ElementNode$$1) CommentNode.__proto__ = ElementNode$$1;
  CommentNode.prototype = Object.create(ElementNode$$1 && ElementNode$$1.prototype);
  CommentNode.prototype.constructor = CommentNode;
  return CommentNode;
}(ElementNode);

var TextNode =
/*@__PURE__*/
function (ViewNode$$1) {
  function TextNode(text) {
    ViewNode$$1.call(this);
    this.nodeType = 3;
    this.text = text;
    this._meta = {
      skipAddToDom: true
    };
  }

  if (ViewNode$$1) TextNode.__proto__ = ViewNode$$1;
  TextNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  TextNode.prototype.constructor = TextNode;

  TextNode.prototype.setText = function setText(text) {
    this.text = text;
    this.parentNode.setText(text);
  };

  return TextNode;
}(ViewNode);

var DocumentNode =
/*@__PURE__*/
function (ViewNode$$1) {
  function DocumentNode() {
    ViewNode$$1.call(this);
    this.nodeType = 9;
    this.documentElement = new ElementNode('document'); // make static methods accessible via this

    this.createComment = this.constructor.createComment;
    this.createElement = this.constructor.createElement;
    this.createElementNS = this.constructor.createElementNS;
    this.createTextNode = this.constructor.createTextNode;
  }

  if (ViewNode$$1) DocumentNode.__proto__ = ViewNode$$1;
  DocumentNode.prototype = Object.create(ViewNode$$1 && ViewNode$$1.prototype);
  DocumentNode.prototype.constructor = DocumentNode;

  DocumentNode.createComment = function createComment(text) {
    return new CommentNode(text);
  };

  DocumentNode.createElement = function createElement(tagName) {
    return new ElementNode(tagName);
  };

  DocumentNode.createElementNS = function createElementNS(namespace, tagName) {
    return new ElementNode(namespace + ':' + tagName);
  };

  DocumentNode.createTextNode = function createTextNode(text) {
    return new TextNode(text);
  };

  return DocumentNode;
}(ViewNode);

var isReservedTag$1 = makeMap('template', true);

var _Vue;

function setVue(Vue$$1) {
  _Vue = Vue$$1;
}

var canBeLeftOpenTag = function (el) {
  return getViewMeta(el).canBeLeftOpenTag;
};

var isUnaryTag = function (el) {
  return getViewMeta(el).isUnaryTag;
};

function mustUseProp$1() {// console.log('mustUseProp')
}

function getTagNamespace$1(el) {
  return getViewMeta(el).tagNamespace;
}

function isUnknownElement$1(el) {
  return !isKnownView(el);
}

var VUE_VERSION = '2.5.22';
var NS_VUE_VERSION = '2.2.2';
var infoTrace = once(function () {
  console.log("NativeScript-Vue has \"Vue.config.silent\" set to true, to see output logs set it to false.");
});

function trace(message) {
  if (_Vue && _Vue.config.silent) {
    return infoTrace();
  }

  console.log("{NSVue (Vue: " + VUE_VERSION + " | NSVue: " + NS_VUE_VERSION + ")} -> " + message);
}

var namespaceMap$1 = {};

function createElement(tagName, vnode) {
  trace("CreateElement(" + tagName + ")");
  return DocumentNode.createElement(tagName);
}

function createElementNS(namespace, tagName) {
  trace("CreateElementNS(" + namespace + "#" + tagName + ")");
  return DocumentNode.createElementNS(namespace, tagName);
}

function createTextNode(text) {
  trace("CreateTextNode(" + text + ")");
  return DocumentNode.createTextNode(text);
}

function createComment(text) {
  trace("CreateComment(" + text + ")");
  return DocumentNode.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  trace("InsertBefore(" + parentNode + ", " + newNode + ", " + referenceNode + ")");
  return parentNode.insertBefore(newNode, referenceNode);
}

function removeChild$1(node, child) {
  trace("RemoveChild(" + node + ", " + child + ")");
  return node.removeChild(child);
}

function appendChild(node, child) {
  trace("AppendChild(" + node + ", " + child + ")");
  return node.appendChild(child);
}

function parentNode(node) {
  trace("ParentNode(" + node + ") -> " + node.parentNode);
  return node.parentNode;
}

function nextSibling(node) {
  trace("NextSibling(" + node + ") -> " + node.nextSibling);
  return node.nextSibling;
}

function tagName(elementNode) {
  trace("TagName(" + elementNode + ") -> " + elementNode.tagName);
  return elementNode.tagName;
}

function setTextContent(node, text) {
  trace("SetTextContent(" + node + ", " + text + ")");
  node.setText(text);
}

function setAttribute(node, key, val) {
  trace("SetAttribute(" + node + ", " + key + ", " + val + ")");
  node.setAttribute(key, val);
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  namespaceMap: namespaceMap$1,
  createElement: createElement,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild$1,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute,
  setStyleScope: setStyleScope
});
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
var he = {
  decode: decode
};

function decode(html) {
  // todo?
  return html;
}
/*  */


var isUnaryTag$1 = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr'); // Elements that you can, intentionally, leave open
// (and which close themselves)

var canBeLeftOpenTag$1 = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'); // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content

var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');
/**
 * Not type-checking this file because it's mostly vendor code.
 */
// Regular Expressions for parsing tags and attributes

var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/; // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset

var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp("^<" + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp("^<\\/" + qnameCapture + "[^>]*>");
var doctype = /^<!DOCTYPE [^>]+>/i; // #7298: escape - to avoid being pased as HTML comment when inlined in page

var comment = /^<!\--/;
var conditionalComment = /^<!\[/; // Special Elements (can contain anything)

var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};
var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g; // #5992

var isIgnoreNewlineTag = makeMap('pre,textarea', true);

var shouldIgnoreFirstNewline = function (tag, html) {
  return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
};

function decodeAttr(value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) {
    return decodingMap[match];
  });
}

function parseHTML(html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag = options.isUnaryTag || no;
  var canBeLeftOpenTag = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;

  while (html) {
    last = html; // Make sure we're not in a plaintext content element like script/style

    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');

      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd));
            }

            advance(commentEnd + 3);
            continue;
          }
        } // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment


        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue;
          }
        } // Doctype:


        var doctypeMatch = html.match(doctype);

        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue;
        } // End tag:


        var endTagMatch = html.match(endTag);

        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue;
        } // Start tag:


        var startTagMatch = parseStartTag();

        if (startTagMatch) {
          handleStartTag(startTagMatch);

          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }

          continue;
        }
      }

      var text = void 0,
          rest = void 0,
          next = void 0;

      if (textEnd >= 0) {
        rest = html.slice(textEnd);

        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);

          if (next < 0) {
            break;
          }

          textEnd += next;
          rest = html.slice(textEnd);
        }

        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;

        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text.replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
          .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }

        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }

        if (options.chars) {
          options.chars(text);
        }

        return '';
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);

      if (!stack.length && options.warn) {
        options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
      }

      break;
    }
  } // Clean up any remaining tags


  parseEndTag();

  function advance(n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag() {
    var start = html.match(startTagOpen);

    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;

      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }

      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match;
      }
    }
  }

  function handleStartTag(match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }

      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag(tagName) || !!unarySlash;
    var l = match.attrs.length;
    var attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
    }

    if (!unary) {
      stack.push({
        tag: tagName,
        lowerCasedTag: tagName.toLowerCase(),
        attrs: attrs
      });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag(tagName, start, end) {
    var pos, lowerCasedTagName;

    if (start == null) {
      start = index;
    }

    if (end == null) {
      end = index;
    } // Find the closest opened tag of the same type


    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();

      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break;
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName && options.warn) {
          options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
        }

        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      } // Remove the open elements from the stack


      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }

      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}
/*  */


var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters(exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);

    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) {
        inSingle = false;
      }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) {
        inDouble = false;
      }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) {
        inTemplateString = false;
      }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) {
        inRegex = false;
      }
    } else if (c === 0x7C && // pipe
    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22:
          inDouble = true;
          break;
        // "

        case 0x27:
          inSingle = true;
          break;
        // '

        case 0x60:
          inTemplateString = true;
          break;
        // `

        case 0x28:
          paren++;
          break;
        // (

        case 0x29:
          paren--;
          break;
        // )

        case 0x5B:
          square++;
          break;
        // [

        case 0x5D:
          square--;
          break;
        // ]

        case 0x7B:
          curly++;
          break;
        // {

        case 0x7D:
          curly--;
          break;
        // }
      }

      if (c === 0x2f) {
        // /
        var j = i - 1;
        var p = void 0; // find first non-whitespace prev char

        for (; j >= 0; j--) {
          p = exp.charAt(j);

          if (p !== ' ') {
            break;
          }
        }

        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter() {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression;
}

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');

  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args);
  }
}
/*  */


var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
});

function parseText(text, delimiters) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;

  if (!tagRE.test(text)) {
    return;
  }

  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;

  while (match = tagRE.exec(text)) {
    index = match.index; // push text token

    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    } // tag token


    var exp = parseFilters(match[1].trim());
    tokens.push("_s(" + exp + ")");
    rawTokens.push({
      '@binding': exp
    });
    lastIndex = index + match[0].length;
  }

  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }

  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  };
}
/*  */

/**
 * Cross-platform code generation for component v-model
 */


function genComponentModel(el, value, modifiers) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;
  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;

  if (trim) {
    valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
  }

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var assignment = genAssignmentCode(value, valueExpression);
  el.model = {
    value: "(" + value + ")",
    expression: JSON.stringify(value),
    callback: "function (" + baseValueExpression + ") {" + assignment + "}"
  };
}
/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */


function genAssignmentCode(value, assignment) {
  var res = parseModel(value);

  if (res.key === null) {
    return value + "=" + assignment;
  } else {
    return "$set(" + res.exp + ", " + res.key + ", " + assignment + ")";
  }
}
/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */


var len, str, chr, index$1, expressionPos, expressionEndPos;

function parseModel(val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');

    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      };
    } else {
      return {
        exp: val,
        key: null
      };
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */

    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  };
}

function next() {
  return str.charCodeAt(++index$1);
}

function eof() {
  return index$1 >= len;
}

function isStringStart(chr) {
  return chr === 0x22 || chr === 0x27;
}

function parseBracket(chr) {
  var inBracket = 1;
  expressionPos = index$1;

  while (!eof()) {
    chr = next();

    if (isStringStart(chr)) {
      parseString(chr);
      continue;
    }

    if (chr === 0x5B) {
      inBracket++;
    }

    if (chr === 0x5D) {
      inBracket--;
    }

    if (inBracket === 0) {
      expressionEndPos = index$1;
      break;
    }
  }
}

function parseString(chr) {
  var stringQuote = chr;

  while (!eof()) {
    chr = next();

    if (chr === stringQuote) {
      break;
    }
  }
}
/*  */


function baseWarn(msg) {
  console.error("[Vue compiler]: " + msg);
}

function pluckModuleFunction(modules, key) {
  return modules ? modules.map(function (m) {
    return m[key];
  }).filter(function (_) {
    return _;
  }) : [];
}

function addProp(el, name, value) {
  (el.props || (el.props = [])).push({
    name: name,
    value: value
  });
  el.plain = false;
}

function addAttr(el, name, value) {
  (el.attrs || (el.attrs = [])).push({
    name: name,
    value: value
  });
  el.plain = false;
} // add a raw attr (use this in preTransforms)


function addRawAttr(el, name, value) {
  el.attrsMap[name] = value;
  el.attrsList.push({
    name: name,
    value: value
  });
}

function addDirective(el, name, rawName, value, arg, modifiers) {
  (el.directives || (el.directives = [])).push({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    modifiers: modifiers
  });
  el.plain = false;
}

function addHandler(el, name, value, modifiers, important, warn) {
  modifiers = modifiers || emptyObject; // warn prevent and passive modifier

  /* istanbul ignore if */

  if (warn && modifiers.prevent && modifiers.passive) {
    warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
  } // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.


  if (name === 'click') {
    if (modifiers.right) {
      name = 'contextmenu';
      delete modifiers.right;
    } else if (modifiers.middle) {
      name = 'mouseup';
    }
  } // check capture modifier


  if (modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }

  if (modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */


  if (modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }

  var events;

  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = {
    value: value.trim()
  };

  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */

  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getBindingAttr(el, name, getStatic) {
  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);

  if (dynamicValue != null) {
    return parseFilters(dynamicValue);
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);

    if (staticValue != null) {
      return JSON.stringify(staticValue);
    }
  }
} // note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.


function getAndRemoveAttr(el, name, removeFromMap) {
  var val;

  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;

    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break;
      }
    }
  }

  if (removeFromMap) {
    delete el.attrsMap[name];
  }

  return val;
}
/*  */


var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;
var decodeHTMLCached = cached(he.decode); // configurable state

var warn$1;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

function createASTElement(tag, attrs, parent) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    parent: parent,
    children: []
  };
}
/**
 * Convert HTML string to AST.
 */


function parse(template, options) {
  warn$1 = options.warn || baseWarn;
  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;
  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce(msg) {
    if (!warned) {
      warned = true;
      warn$1(msg);
    }
  }

  function closeElement(element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }

    if (platformIsPreTag(element.tag)) {
      inPre = false;
    } // apply post-transforms


    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  parseHTML(template, {
    warn: warn$1,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    start: function start(tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag); // handle IE svg bug

      /* istanbul ignore if */

      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);

      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$1('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
      } // apply pre-transforms


      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);

        if (element.pre) {
          inVPre = true;
        }
      }

      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }

      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element); // element-scope stuff

        processElement(element, options);
      }

      function checkRootConstraints(el) {
        {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
          }

          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
          }
        }
      } // tree management


      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else {
          warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
        }
      }

      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) {
          // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';
          (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },
    end: function end() {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];

      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      } // pop stack


      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      closeElement(element);
    },
    chars: function chars(text) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce('Component template requires a root element, rather than just text.');
          } else if (text = text.trim()) {
            warnOnce("text \"" + text + "\" outside root element will be ignored.");
          }
        }
        return;
      } // IE textarea placeholder bug

      /* istanbul ignore if */


      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
        return;
      }

      var children = currentParent.children;
      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text) // only preserve whitespace if its not right after a starting tag
      : preserveWhitespace && children.length ? ' ' : '';

      if (text) {
        var res;

        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    },
    comment: function comment(text) {
      currentParent.children.push({
        type: 3,
        text: text,
        isComment: true
      });
    }
  });
  return root;
}

function processPre(el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs(el) {
  var l = el.attrsList.length;

  if (l) {
    var attrs = el.attrs = new Array(l);

    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement(element, options) {
  processKey(element); // determine whether this is a plain element after
  // removing structural attributes

  element.plain = !element.key && !element.attrsList.length;
  processRef(element);
  processSlot(element);
  processComponent(element);

  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }

  processAttrs(element);
}

function processKey(el) {
  var exp = getBindingAttr(el, 'key');

  if (exp) {
    {
      if (el.tag === 'template') {
        warn$1("<template> cannot be keyed. Place the key on real elements instead.");
      }

      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;

        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$1("Do not use v-for index as key on <transition-group> children, " + "this is the same as not using keys.");
        }
      }
    }
    el.key = exp;
  }
}

function processRef(el) {
  var ref = getBindingAttr(el, 'ref');

  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor(el) {
  var exp;

  if (exp = getAndRemoveAttr(el, 'v-for')) {
    var res = parseFor(exp);

    if (res) {
      extend(el, res);
    } else {
      warn$1("Invalid v-for expression: " + exp);
    }
  }
}

function parseFor(exp) {
  var inMatch = exp.match(forAliasRE);

  if (!inMatch) {
    return;
  }

  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);

  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();

    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }

  return res;
}

function processIf(el) {
  var exp = getAndRemoveAttr(el, 'v-if');

  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }

    var elseif = getAndRemoveAttr(el, 'v-else-if');

    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions(el, parent) {
  var prev = findPrevElement(parent.children);

  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$1("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
  }
}

function findPrevElement(children) {
  var i = children.length;

  while (i--) {
    if (children[i].type === 1) {
      return children[i];
    } else {
      if (children[i].text !== ' ') {
        warn$1("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
      }

      children.pop();
    }
  }
}

function addIfCondition(el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }

  el.ifConditions.push(condition);
}

function processOnce(el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');

  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot(el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');

    if (el.key) {
      warn$1("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
    }
  } else {
    var slotScope;

    if (el.tag === 'template') {
      slotScope = getAndRemoveAttr(el, 'scope');
      /* istanbul ignore if */

      if (slotScope) {
        warn$1("the \"scope\" attribute for scoped slots have been deprecated and " + "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " + "can also be used on plain elements in addition to <template> to " + "denote scoped slots.", true);
      }

      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
    } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {
      /* istanbul ignore if */
      if (el.attrsMap['v-for']) {
        warn$1("Ambiguous combined usage of slot-scope and v-for on <" + el.tag + "> " + "(v-for takes higher priority). Use a wrapper <template> for the " + "scoped slot to make it clearer.", true);
      }

      el.slotScope = slotScope;
    }

    var slotTarget = getBindingAttr(el, 'slot');

    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget; // preserve slot as an attribute for native shadow DOM compat
      // only for non-scoped slots.

      if (el.tag !== 'template' && !el.slotScope) {
        addAttr(el, 'slot', slotTarget);
      }
    }
  }
}

function processComponent(el) {
  var binding;

  if (binding = getBindingAttr(el, 'is')) {
    el.component = binding;
  }

  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs(el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;

  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;

    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true; // modifiers

      modifiers = parseModifiers(name);

      if (modifiers) {
        name = name.replace(modifierRE, '');
      }

      if (bindRE.test(name)) {
        // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;

        if (value.trim().length === 0) {
          warn$1("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"");
        }

        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);

            if (name === 'innerHtml') {
              name = 'innerHTML';
            }
          }

          if (modifiers.camel) {
            name = camelize(name);
          }

          if (modifiers.sync) {
            addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
          }
        }

        if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) {
        // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$1);
      } else {
        // normal directives
        name = name.replace(dirRE, ''); // parse arg

        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];

        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }

        addDirective(el, name, rawName, value, arg, modifiers);

        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);

        if (res) {
          warn$1(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
        }
      }
      addAttr(el, name, JSON.stringify(value)); // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation

      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true');
      }
    }
  }
}

function checkInFor(el) {
  var parent = el;

  while (parent) {
    if (parent.for !== undefined) {
      return true;
    }

    parent = parent.parent;
  }

  return false;
}

function parseModifiers(name) {
  var match = name.match(modifierRE);

  if (match) {
    var ret = {};
    match.forEach(function (m) {
      ret[m.slice(1)] = true;
    });
    return ret;
  }
}

function makeAttrsMap(attrs) {
  var map = {};

  for (var i = 0, l = attrs.length; i < l; i++) {
    if (map[attrs[i].name] && !isIE && !isEdge) {
      warn$1('duplicate attribute: ' + attrs[i].name);
    }

    map[attrs[i].name] = attrs[i].value;
  }

  return map;
} // for script (e.g. type="x/template") or style, do not decode content


function isTextTag(el) {
  return el.tag === 'script' || el.tag === 'style';
}

function isForbiddenTag(el) {
  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;
/* istanbul ignore next */

function guardIESVGBug(attrs) {
  var res = [];

  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];

    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }

  return res;
}

function checkForAliasModel(el, value) {
  var _el = el;

  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
    }

    _el = _el.parent;
  }
}
/*  */


var isStaticKey;
var isPlatformReservedTag;
var genStaticKeysCached = cached(genStaticKeys$1);
/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

function optimize(root, options) {
  if (!root) {
    return;
  }

  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no; // first pass: mark all non-static nodes.

  markStatic(root); // second pass: mark static roots.

  markStaticRoots(root, false);
}

function genStaticKeys$1(keys) {
  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
}

function markStatic(node) {
  node.static = isStatic(node);

  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
      return;
    }

    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic(child);

      if (!child.static) {
        node.static = false;
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic(block);

        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots(node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    } // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.


    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
      node.staticRoot = true;
      return;
    } else {
      node.staticRoot = false;
    }

    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }

    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic(node) {
  if (node.type === 2) {
    // expression
    return false;
  }

  if (node.type === 3) {
    // text
    return true;
  }

  return !!(node.pre || !node.hasBindings && // no dynamic bindings
  !node.if && !node.for && // not v-if or v-for or v-else
  !isBuiltInTag(node.tag) && // not a built-in
  isPlatformReservedTag(node.tag) && // not a component
  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
}

function isDirectChildOfTemplateFor(node) {
  while (node.parent) {
    node = node.parent;

    if (node.tag !== 'template') {
      return false;
    }

    if (node.for) {
      return true;
    }
  }

  return false;
}
/*  */


var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/; // KeyboardEvent.keyCode aliases

var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
}; // KeyboardEvent.key aliases

var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
}; // #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once

var genGuard = function (condition) {
  return "if(" + condition + ")return null;";
};

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers(events, isNative) {
  var res = isNative ? 'nativeOn:{' : 'on:{';

  for (var name in events) {
    res += "\"" + name + "\":" + genHandler(name, events[name]) + ",";
  }

  return res.slice(0, -1) + '}';
}

function genHandler(name, handler) {
  if (!handler) {
    return 'function(){}';
  }

  if (Array.isArray(handler)) {
    return "[" + handler.map(function (handler) {
      return genHandler(name, handler);
    }).join(',') + "]";
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value;
    }

    return "function($event){" + handler.value + "}"; // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];

    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key]; // left/right

        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = handler.modifiers;
        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {
          return !modifiers[keyModifier];
        }).map(function (keyModifier) {
          return "$event." + keyModifier + "Key";
        }).join('||'));
      } else {
        keys.push(key);
      }
    }

    if (keys.length) {
      code += genKeyFilter(keys);
    } // Make sure modifiers like prevent and stop get executed after key filtering


    if (genModifierCode) {
      code += genModifierCode;
    }

    var handlerCode = isMethodPath ? "return " + handler.value + "($event)" : isFunctionExpression ? "return (" + handler.value + ")($event)" : handler.value;
    return "function($event){" + code + handlerCode + "}";
  }
}

function genKeyFilter(keys) {
  return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
}

function genFilterCode(key) {
  var keyVal = parseInt(key, 10);

  if (keyVal) {
    return "$event.keyCode!==" + keyVal;
  }

  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return "_k($event.keyCode," + JSON.stringify(key) + "," + JSON.stringify(keyCode) + "," + "$event.key," + "" + JSON.stringify(keyName) + ")";
}
/*  */


function on(el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }

  el.wrapListeners = function (code) {
    return "_g(" + code + "," + dir.value + ")";
  };
}
/*  */


function bind$1(el, dir) {
  el.wrapData = function (code) {
    return "_b(" + code + ",'" + el.tag + "'," + dir.value + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")";
  };
}
/*  */


var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};
/*  */

var CodegenState = function CodegenState(options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;

  this.maybeComponent = function (el) {
    return !(isReservedTag(el.tag) && !el.component);
  };

  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};

function generate(ast, options) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: "with(this){return " + code + "}",
    staticRenderFns: state.staticRenderFns
  };
}

function genElement(el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state);
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state);
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state);
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0';
  } else if (el.tag === 'slot') {
    return genSlot(el, state);
  } else {
    // component or element
    var code;

    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;

      if (!el.plain || el.pre && state.maybeComponent(el)) {
        data = genData(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
    } // module transforms


    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }

    return code;
  }
} // hoist static sub-trees out


function genStatic(el, state) {
  el.staticProcessed = true; // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.

  var originalPreState = state.pre;

  if (el.pre) {
    state.pre = el.pre;
  }

  state.staticRenderFns.push("with(this){return " + genElement(el, state) + "}");
  state.pre = originalPreState;
  return "_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
} // v-once


function genOnce(el, state) {
  el.onceProcessed = true;

  if (el.if && !el.ifProcessed) {
    return genIf(el, state);
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;

    while (parent) {
      if (parent.for) {
        key = parent.key;
        break;
      }

      parent = parent.parent;
    }

    if (!key) {
      state.warn("v-once can only be used inside v-for that is keyed. ");
      return genElement(el, state);
    }

    return "_o(" + genElement(el, state) + "," + state.onceId++ + "," + key + ")";
  } else {
    return genStatic(el, state);
  }
}

function genIf(el, state, altGen, altEmpty) {
  el.ifProcessed = true; // avoid recursion

  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);
}

function genIfConditions(conditions, state, altGen, altEmpty) {
  if (!conditions.length) {
    return altEmpty || '_e()';
  }

  var condition = conditions.shift();

  if (condition.exp) {
    return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions, state, altGen, altEmpty);
  } else {
    return "" + genTernaryExp(condition.block);
  } // v-if with v-once should generate code like (a)?_m(0):_m(1)


  function genTernaryExp(el) {
    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);
  }
}

function genFor(el, state, altGen, altHelper) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

  if (state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
    state.warn("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true
    /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion

  return (altHelper || '_l') + "((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + (altGen || genElement)(el, state) + '})';
}

function genData(el, state) {
  var data = '{'; // directives first.
  // directives may mutate the el's other properties before they are generated.

  var dirs = genDirectives(el, state);

  if (dirs) {
    data += dirs + ',';
  } // key


  if (el.key) {
    data += "key:" + el.key + ",";
  } // ref


  if (el.ref) {
    data += "ref:" + el.ref + ",";
  }

  if (el.refInFor) {
    data += "refInFor:true,";
  } // pre


  if (el.pre) {
    data += "pre:true,";
  } // record original tag name for components using "is" attribute


  if (el.component) {
    data += "tag:\"" + el.tag + "\",";
  } // module data generation functions


  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  } // attributes


  if (el.attrs) {
    data += "attrs:{" + genProps(el.attrs) + "},";
  } // DOM props


  if (el.props) {
    data += "domProps:{" + genProps(el.props) + "},";
  } // event handlers


  if (el.events) {
    data += genHandlers(el.events, false) + ",";
  }

  if (el.nativeEvents) {
    data += genHandlers(el.nativeEvents, true) + ",";
  } // slot target
  // only for non-scoped slots


  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + el.slotTarget + ",";
  } // scoped slots


  if (el.scopedSlots) {
    data += genScopedSlots(el.scopedSlots, state) + ",";
  } // component v-model


  if (el.model) {
    data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
  } // inline-template


  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);

    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }

  data = data.replace(/,$/, '') + '}'; // v-bind data wrap

  if (el.wrapData) {
    data = el.wrapData(data);
  } // v-on data wrap


  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }

  return data;
}

function genDirectives(el, state) {
  var dirs = el.directives;

  if (!dirs) {
    return;
  }

  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;

  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];

    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }

    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
    }
  }

  if (hasRuntime) {
    return res.slice(0, -1) + ']';
  }
}

function genInlineTemplate(el, state) {
  var ast = el.children[0];

  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn('Inline-template components must have exactly one child element.');
  }

  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
      return "function(){" + code + "}";
    }).join(',') + "]}";
  }
}

function genScopedSlots(slots, state) {
  return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
    return genScopedSlot(key, slots[key], state);
  }).join(',') + "])";
}

function genScopedSlot(key, el, state) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el, state);
  }

  var fn = "function(" + String(el.slotScope) + "){" + "return " + (el.tag === 'template' ? el.if ? "(" + el.if + ")?" + (genChildren(el, state) || 'undefined') + ":undefined" : genChildren(el, state) || 'undefined' : genElement(el, state)) + "}";
  return "{key:" + key + ",fn:" + fn + "}";
}

function genForScopedSlot(key, el, state) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
  var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
  el.forProcessed = true; // avoid recursion

  return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el, state) + '})';
}

function genChildren(el, state, checkSkip, altGenElement, altGenNode) {
  var children = el.children;

  if (children.length) {
    var el$1 = children[0]; // optimize single v-for

    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
      var normalizationType = checkSkip ? state.maybeComponent(el$1) ? ",1" : ",0" : "";
      return "" + (altGenElement || genElement)(el$1, state) + normalizationType;
    }

    var normalizationType$1 = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;
    var gen = altGenNode || genNode;
    return "[" + children.map(function (c) {
      return gen(c, state);
    }).join(',') + "]" + (normalizationType$1 ? "," + normalizationType$1 : '');
  }
} // determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed


function getNormalizationType(children, maybeComponent) {
  var res = 0;

  for (var i = 0; i < children.length; i++) {
    var el = children[i];

    if (el.type !== 1) {
      continue;
    }

    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return needsNormalization(c.block);
    })) {
      res = 2;
      break;
    }

    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
      return maybeComponent(c.block);
    })) {
      res = 1;
    }
  }

  return res;
}

function needsNormalization(el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
}

function genNode(node, state) {
  if (node.type === 1) {
    return genElement(node, state);
  } else if (node.type === 3 && node.isComment) {
    return genComment(node);
  } else {
    return genText(node);
  }
}

function genText(text) {
  return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
  : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
}

function genComment(comment) {
  return "_e(" + JSON.stringify(comment.text) + ")";
}

function genSlot(el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? "," + children : '');
  var attrs = el.attrs && "{" + el.attrs.map(function (a) {
    return camelize(a.name) + ":" + a.value;
  }).join(',') + "}";
  var bind$$1 = el.attrsMap['v-bind'];

  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }

  if (attrs) {
    res += "," + attrs;
  }

  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }

  return res + ')';
} // componentName is el.component, take it as argument to shun flow's pessimistic refinement


function genComponent(componentName, el, state) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return "_c(" + componentName + "," + genData(el, state) + (children ? "," + children : '') + ")";
}

function genProps(props) {
  var res = '';

  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    /* istanbul ignore if */

    {
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
  }

  return res.slice(0, -1);
} // #3895, #4268


function transformSpecialNewlines(text) {
  return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
}
/*  */
// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed


var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b'); // these unary operators should not be used as property/method names

var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)'); // strip strings in expressions

var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g; // detect problematic expressions in a template

function detectErrors(ast) {
  var errors = [];

  if (ast) {
    checkNode(ast, errors);
  }

  return errors;
}

function checkNode(node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];

        if (value) {
          if (name === 'v-for') {
            checkFor(node, "v-for=\"" + value + "\"", errors);
          } else if (onRE.test(name)) {
            checkEvent(value, name + "=\"" + value + "\"", errors);
          } else {
            checkExpression(value, name + "=\"" + value + "\"", errors);
          }
        }
      }
    }

    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent(exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);

  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
  }

  checkExpression(exp, text, errors);
}

function checkFor(node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier(ident, type, text, errors) {
  if (typeof ident === 'string') {
    try {
      new Function("var " + ident + "=_");
    } catch (e) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }
}

function checkExpression(exp, text, errors) {
  try {
    new Function("return " + exp);
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);

    if (keywordMatch) {
      errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\"\n  Raw expression: " + text.trim());
    } else {
      errors.push("invalid expression: " + e.message + " in\n\n" + "    " + exp + "\n\n" + "  Raw expression: " + text.trim() + "\n");
    }
  }
}
/*  */


function createFunction(code, errors) {
  try {
    return new Function(code);
  } catch (err) {
    errors.push({
      err: err,
      code: code
    });
    return noop;
  }
}

function createCompileToFunctionFn(compile) {
  var cache = Object.create(null);
  return function compileToFunctions(template, options, vm) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;
    /* istanbul ignore if */

    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
        }
      }
    } // check cache

    var key = options.delimiters ? String(options.delimiters) + template : template;

    if (cache[key]) {
      return cache[key];
    } // compile


    var compiled = compile(template, options); // check compilation errors/tips

    {
      if (compiled.errors && compiled.errors.length) {
        warn$$1("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
          return "- " + e;
        }).join('\n') + '\n', vm);
      }

      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) {
          return tip(msg, vm);
        });
      }
    } // turn code into functions

    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors);
    }); // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use

    /* istanbul ignore if */

    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
          var err = ref.err;
          var code = ref.code;
          return err.toString() + " in\n\n" + code + "\n";
        }).join('\n'), vm);
      }
    }
    return cache[key] = res;
  };
}
/*  */


function createCompilerCreator(baseCompile) {
  return function createCompiler(baseOptions) {
    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      finalOptions.warn = function (msg, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        } // merge custom directives


        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);
        } // copy other options


        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    };
  };
}
/*  */
// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.


var createCompiler = createCompilerCreator(function baseCompile(template, options) {
  var ast = parse(template.trim(), options);

  if (options.optimize !== false) {
    optimize(ast, options);
  }

  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  };
});

function transformNode(el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');

  if (staticClass) {
    var expression = parseText(staticClass, options.delimiters);

    if (expression) {
      warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
    }
  }

  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }

  var classBinding = getBindingAttr(el, 'class', false
  /* getStatic */
  );

  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1(el) {
  var data = '';

  if (el.staticClass) {
    data += "staticClass:" + el.staticClass + ",";
  }

  if (el.classBinding) {
    data += "class:" + el.classBinding + ",";
  }

  return data;
}

var class_$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};
var normalize$1 = cached(camelize);

function transformNode$1(el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  var ref = parseStaticStyle(staticStyle, options);
  var dynamic = ref.dynamic;
  var styleResult = ref.styleResult;

  if (dynamic) {
    warn("style=\"" + String(staticStyle) + "\": " + 'Interpolation inside attributes has been deprecated. ' + 'Use v-bind or the colon shorthand instead.');
  }

  if (!dynamic && styleResult) {
    el.staticStyle = styleResult;
  }

  var styleBinding = getBindingAttr(el, 'style', false
  /* getStatic */
  );

  if (styleBinding) {
    el.styleBinding = styleBinding;
  } else if (dynamic) {
    el.styleBinding = styleResult;
  }
}

function genData$2(el) {
  var data = '';

  if (el.staticStyle) {
    data += "staticStyle:" + el.staticStyle + ",";
  }

  if (el.styleBinding) {
    data += "style:" + el.styleBinding + ",";
  }

  return data;
}

function parseStaticStyle(staticStyle, options) {
  // "width: 200px; height: 200px;" -> {width: 200, height: 200}
  // "width: 200px; height: {{y}}" -> {width: 200, height: y}
  var dynamic = false;
  var styleResult = '';

  if (staticStyle) {
    var styleList = staticStyle.trim().split(';').map(function (style) {
      var result = style.trim().split(':');

      if (result.length !== 2) {
        return;
      }

      var key = normalize$1(result[0].trim());
      var value = result[1].trim();
      var dynamicValue = parseText(value, options.delimiters);

      if (dynamicValue) {
        dynamic = true;
        return key + ':' + dynamicValue;
      }

      return key + ':' + JSON.stringify(value);
    }).filter(function (result) {
      return result;
    });

    if (styleList.length) {
      styleResult = '{' + styleList.join(',') + '}';
    }
  }

  return {
    dynamic: dynamic,
    styleResult: styleResult
  };
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

function preTransformNode(el) {
  var vfor;

  if (normalizeElementName(el.tag) === 'nativelistview') {
    vfor = getAndRemoveAttr(el, 'v-for');
    delete el.attrsMap['v-for'];

    if (vfor) {
      warn("The v-for directive is not supported on a " + el.tag + ", " + 'Use the "for" attribute instead. For example, instead of ' + "<" + el.tag + " v-for=\"" + vfor + "\"> use <" + el.tag + " for=\"" + vfor + "\">.");
    }
  }

  var exp = getAndRemoveAttr(el, 'for') || vfor;

  if (!exp) {
    return;
  }

  var res = parseFor(exp);

  if (!res) {
    {
      warn("Invalid for expression: " + exp);
    }
    return;
  }

  addRawAttr(el, ':items', res.for);
  addRawAttr(el, '+alias', res.alias);

  if (res.iterator1) {
    addRawAttr(el, '+index', res.iterator1);
  }
}

var for_ = {
  preTransformNode: preTransformNode
};

function preTransformNode$1(el) {
  if (el.tag !== 'router-view') {
    return;
  }

  if (normalizeElementName(el.parent.tag) === 'nativeframe') {
    addAttr(el.parent, 'hasRouterView', 'true');
  }
}

var router = {
  preTransformNode: preTransformNode$1
};

function preTransformNode$2(el) {
  if (el.parent && el.parent.tag === 'v-template') {
    var alias = el.parent.parent.attrsMap['+alias'] || 'item';
    var index = el.parent.parent.attrsMap['+index'] || '$index';
    el.slotScope = buildScopeString(alias, index);
  }
}

var vTemplate$1 = {
  preTransformNode: preTransformNode$2
};

function buildScopeString(alias, index) {
  return "{ " + alias + ", " + index + ", $even, $odd }";
} // transforms ~test -> v-view:test


function transformNode$2(el) {
  var attr = Object.keys(el.attrsMap).find(function (attr) {
    return attr.startsWith('~');
  });

  if (attr) {
    var attrName = attr.substr(1);
    var ref = attrName.split('.');
    var arg = ref[0];
    var modifiers = ref.slice(1);
    modifiers = modifiers.reduce(function (mods, mod) {
      mods[mod] = true;
      return mods;
    }, {});
    getAndRemoveAttr(el, attr);
    addDirective(el, 'view', "v-view:" + attrName, '', arg, modifiers);
  }
}

var view$1 = {
  transformNode: transformNode$2
};
var modules$1 = [class_$1, style$1, vTemplate$1, for_, router, view$1];

function model(el, dir) {
  if (el.type === 1 && isKnownView(el.tag)) {
    genDefaultModel(el, dir.value, dir.modifiers);
  } else {
    genComponentModel(el, dir.value, dir.modifiers);
  }
}

function genDefaultModel(el, value, modifiers) {
  var ref = modifiers || {};
  var trim = ref.trim;
  var number = ref.number;
  var ref$1 = getViewMeta(el.tag).model;
  var prop = ref$1.prop;
  var event = ref$1.event;
  var valueExpression = "$event.value" + (trim ? '.trim()' : '');

  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  addAttr(el, prop, "(" + value + ")");
  addHandler(el, event, code, null, true);
}

var directives$1 = {
  model: model
};
var baseOptions = {
  modules: modules$1,
  directives: directives$1,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp$1,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag$1,
  getTagNamespace: getTagNamespace$1,
  preserveWhitespace: false,
  staticKeys: genStaticKeys(modules$1)
};
var ref$3 = createCompiler(baseOptions);
var compile = ref$3.compile;
var compileToFunctions = ref$3.compileToFunctions;
/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;
{
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.

    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn$5(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn$5(props, key)) {
      warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if (getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn$5(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
      /* istanbul ignore next */
      return Object.getOwnPropertyDescriptor(inject, key).enumerable;
    }) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn$5(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject$1(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);

    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if (!isObject$1(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject$1(value)) {
      warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);

        if (!(key in hash) && !(camelizedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + camelizedKey] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic$1(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic$1(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic$1(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$4;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn$5(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    return resolveSlots(children, parent);
  }; // support for compiled functional template


  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement$1(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject$1(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject$1(data.style)) {
    traverse(data.style);
  }

  if (isObject$1(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement$1(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement$1(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


var uid$2 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$2++; // a flag to avoid this being observed

    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    {
      initProxy(vm);
    } // expose real self

    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if (!(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp$1(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;
  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.5.22'; // recursively search for possible transition defined inside the component root

function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalVisibility = el.__vOriginalVisibility = el.getAttribute('visibility') === 'none' ? '' : el.getAttribute('visibility');

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.setAttribute('visibility', originalVisibility);
      });
    } else {
      el.setAttribute('visibility', value ? originalVisibility : 'collapsed');
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.setAttribute('visibility', el.__vOriginalVisibility);
        });
      } else {
        leave(vnode, function () {
          el.setAttribute('visibility', 'collapsed');
        });
      }
    } else {
      el.setAttribute('visibility', value ? el.__vOriginalVisibility : 'collapsed');
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.setAttribute('visibility', el.__vOriginalVisibility);
    }
  }
};
var view$2 = {
  inserted: function inserted(el, ref) {
    var arg = ref.arg;
    var modifiers = ref.modifiers;
    var parent = el.parentNode.nativeView;

    if (parent) {
      if (modifiers.array) {
        parent[arg] = (parent[arg] || []).push(el.nativeView);
      } else {
        parent[arg] = el.nativeView;
      }
    }
  }
};
var platformDirectives = {
  show: show,
  view: view$2
};
Vue.config.mustUseProp = mustUseProp$1;
Vue.config.isReservedTag = isReservedTag$1;
Vue.config.isUnknownElement = isUnknownElement$1;
Vue.$document = Vue.prototype.$document = new DocumentNode();
Vue.compile = compileToFunctions;
Vue.registerElement = registerElement;
Object.assign(Vue.options.directives, platformDirectives);
Vue.prototype.__patch__ = patch;

Vue.prototype.$mount = function (el, hydrating) {
  var options = this.$options; // resolve template/el and convert to render function

  if (!options.render) {
    var template = options.template;

    if (template && typeof template !== 'string') {
      warn('invalid template option: ' + template, this);
      return this;
    }

    if (template) {
      var ref = compileToFunctions(template, {
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;
    }
  }

  return mountComponent(this, el, hydrating);
};

Vue.prototype.$start = function () {
  var self = this;
  var AppConstructor = Vue.extend(this.$options); // register NS components into Vue

  Object.values(getElementMap()).forEach(function (entry) {
    Vue.component(entry.meta.component.name, entry.meta.component);
  });
  application.on(application.launchEvent, function (args) {
    if (self.$el) {
      self.$destroy();
      self = new AppConstructor();
    }

    self.$mount();
    args.root = self.$el.nativeView;
  });
  application.run();
}; // Define a `nativeView` getter in every NS vue instance


Object.defineProperty(Vue.prototype, 'nativeView', {
  get: function get() {
    return this.$el.nativeView;
  }
});

function _findParentModalEntry(vm) {
  if (!vm) {
    return false;
  }

  var entry = vm.$parent;

  while (entry && entry.$options.name !== 'ModalEntry') {
    entry = entry.$parent;
  }

  return entry;
}

var ModalPlugin = {
  install: function install(Vue) {
    Vue.mixin({
      created: function created() {
        var self = this;
        this.$modal = {
          close: function close(data) {
            var entry = _findParentModalEntry(self);

            if (entry) {
              entry.closeCb(data);
            }
          }
        };
      }
    });

    Vue.prototype.$showModal = function (component, options) {
      var this$1 = this;
      var defaultOptions = {
        fullscreen: false
      }; // build options object with defaults

      options = Object.assign({}, defaultOptions, options);
      return new Promise(function (resolve) {
        var resolved = false;

        var closeCb = function (data) {
          if (resolved) {
            return;
          }

          resolved = true;
          resolve(data);
          modalPage.closeModal(); // emitted to show up in devtools
          // for debugging purposes

          navEntryInstance.$emit('modal:close', data);
          navEntryInstance.$destroy();
        };

        var navEntryInstance = new Vue({
          name: 'ModalEntry',
          parent: this$1.$root,
          methods: {
            closeCb: closeCb
          },
          render: function (h) {
            return h(component, {
              props: options.props
            });
          }
        });
        var modalPage = navEntryInstance.$mount().$el.nativeView;
        this$1.$el.nativeView.showModal(modalPage, null, closeCb, options.fullscreen);
      });
    };
  }
}; // This is required because some of the third party plugins rely on this
// and cause errors since there is no process variable in {N}.

global.process = global.process || {};
global.process.env = global.process.env || {};
Vue.config.silent = true;
setVue(Vue);
Vue.use(ModalPlugin);
Vue.use(NavigatorPlugin);
var newLineRegExp = /\\n/g;

console.log = function (log, inspect, Vue$$1) {
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    return log.call.apply(log, [this].concat(Array.prototype.map.call(args, function (arg) {
      return inspect(arg, {
        depth: 2,
        colors: Vue$$1.config.debug,
        showHidden: true
      }).replace(newLineRegExp, '\n');
    })));
  };
}(console.log, utilInspect, Vue);

console.keys = function (object) {
  console.log(Object.keys(object));
}; // this fixes the issue of resuming the application
// however this might not be the desired functionality
// Todo: figure out if there is a better way to fix application resume.
// application.on(application.exitEvent, () => {
//   const frame = topmost()
//   if (frame) {
//     frame.eachChildView(child => {
//       const vm = child[VUE_VM_REF]
//
//       if (vm) {
//         console.log('DESTROYING ON APPEXITEVENT...')
//         vm.$destroy()
//       }
//       frame._removeView(child)
//     })
//   }
// })


global.__onLiveSyncCore = function () {
  var frame$$1 = frame.topmost();

  if (frame$$1) {
    if (frame$$1.currentPage && frame$$1.currentPage.modal) {
      frame$$1.currentPage.modal.closeModal();
    }

    if (frame$$1.currentPage) {
      frame$$1.currentPage.addCssFile(application__default.getCssFileName());
    }
  }
}; // Fix a rollup problem which does not define
// module.export.default = Vue
// so a `import Vue from 'nativescript-vue'` will
// fail from a Typescript file


Vue.default = Vue;
module.exports = Vue;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application-settings/application-settings-common.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.checkKey = function (key) {
  if (typeof key !== "string") {
    throw new Error("key: '" + key + "' must be a string");
  }
};

exports.ensureValidValue = function (value, valueType) {
  if (typeof value !== valueType) {
    throw new Error("value: '" + value + "' must be a " + valueType);
  }
};

/***/ }),

/***/ "../node_modules/tns-core-modules/application-settings/application-settings.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Common = __webpack_require__("../node_modules/tns-core-modules/application-settings/application-settings-common.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var userDefaults = utils.ios.getter(NSUserDefaults, NSUserDefaults.standardUserDefaults);

exports.hasKey = function (key) {
  Common.checkKey(key);
  return userDefaults.objectForKey(key) !== null;
};

exports.getBoolean = function (key, defaultValue) {
  Common.checkKey(key);

  if (exports.hasKey(key)) {
    return userDefaults.boolForKey(key);
  }

  return defaultValue;
};

exports.getString = function (key, defaultValue) {
  Common.checkKey(key);

  if (exports.hasKey(key)) {
    return userDefaults.stringForKey(key);
  }

  return defaultValue;
};

exports.getNumber = function (key, defaultValue) {
  Common.checkKey(key);

  if (exports.hasKey(key)) {
    return userDefaults.doubleForKey(key);
  }

  return defaultValue;
};

exports.setBoolean = function (key, value) {
  Common.checkKey(key);
  Common.ensureValidValue(value, "boolean");
  userDefaults.setBoolForKey(value, key);
};

exports.setString = function (key, value) {
  Common.checkKey(key);
  Common.ensureValidValue(value, "string");
  userDefaults.setObjectForKey(value, key);
};

exports.setNumber = function (key, value) {
  Common.checkKey(key);
  Common.ensureValidValue(value, "number");
  userDefaults.setDoubleForKey(value, key);
};

exports.remove = function (key) {
  Common.checkKey(key);
  userDefaults.removeObjectForKey(key);
};

exports.clear = function () {
  userDefaults.removePersistentDomainForName(utils.ios.getter(NSBundle, NSBundle.mainBundle).bundleIdentifier);
};

exports.flush = function () {
  return userDefaults.synchronize();
};

function getAllKeys() {
  return utils.ios.collections.nsArrayToJSArray(userDefaults.dictionaryRepresentation().allKeys);
}

exports.getAllKeys = getAllKeys;

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application-common.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var events = new observable_1.Observable();
var launched = false;

function setLaunched() {
  launched = true;
  events.off("launch", setLaunched);
}

events.on("launch", setLaunched);

if (profiling_1.level() > 0) {
  events.on("displayed", function () {
    var duration = profiling_1.uptime();
    var end = profiling_1.time();
    var start = end - duration;
    profiling_1.trace("Displayed in " + duration.toFixed(2) + "ms", start, end);
  });
}

function hasLaunched() {
  return launched;
}

exports.hasLaunched = hasLaunched;
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.displayedEvent = "displayed";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.discardedErrorEvent = "discardedError";
exports.orientationChangedEvent = "orientationChanged";
var cssFile = "./app.css";
var resources = {};

function getResources() {
  return resources;
}

exports.getResources = getResources;

function setResources(res) {
  resources = res;
}

exports.setResources = setResources;
exports.android = undefined;
exports.ios = undefined;
exports.on = events.on.bind(events);
exports.off = events.off.bind(events);
exports.notify = events.notify.bind(events);
exports.hasListeners = events.hasListeners.bind(events);
var app;

function setApplication(instance) {
  app = instance;
}

exports.setApplication = setApplication;

function livesync(rootView, context) {
  events.notify({
    eventName: "livesync",
    object: app
  });
  var liveSyncCore = global.__onLiveSyncCore;
  var reapplyAppStyles = false;
  var reapplyLocalStyles = false;

  if (context && context.path) {
    var extensions = ["css", "scss"];
    var appStylesFullFileName = getCssFileName();
    var appStylesFileName_1 = appStylesFullFileName.substring(0, appStylesFullFileName.lastIndexOf(".") + 1);
    reapplyAppStyles = extensions.some(function (ext) {
      return context.path === appStylesFileName_1.concat(ext);
    });

    if (!reapplyAppStyles) {
      reapplyLocalStyles = extensions.some(function (ext) {
        return context.path.endsWith(ext);
      });
    }
  }

  if (reapplyAppStyles && rootView) {
    rootView._onCssStateChange();
  } else if (liveSyncCore) {
    reapplyLocalStyles ? liveSyncCore(context) : liveSyncCore();
  }
}

exports.livesync = livesync;

function setCssFileName(cssFileName) {
  cssFile = cssFileName;
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssFile: cssFileName
  });
}

exports.setCssFileName = setCssFileName;

function getCssFileName() {
  return cssFile;
}

exports.getCssFileName = getCssFileName;

function loadAppCss() {
  try {
    events.notify({
      eventName: "loadAppCss",
      object: app,
      cssFile: getCssFileName()
    });
  } catch (e) {
    throw new Error("The file " + getCssFileName() + " couldn't be loaded! " + "You may need to register it inside ./app/vendor.ts.");
  }
}

exports.loadAppCss = loadAppCss;

function addCss(cssText) {
  events.notify({
    eventName: "cssChanged",
    object: app,
    cssText: cssText
  });
}

exports.addCss = addCss;

global.__onUncaughtError = function (error) {
  events.notify({
    eventName: exports.uncaughtErrorEvent,
    object: app,
    android: error,
    ios: error,
    error: error
  });
};

global.__onDiscardedError = function (error) {
  events.notify({
    eventName: exports.discardedErrorEvent,
    object: app,
    error: error
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/application/application.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var application_common_1 = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/application/application-common.js"));

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var Responder = UIResponder.extend({
  get window() {
    return iosApp ? iosApp.window : undefined;
  },

  set window(setWindow) {}

}, {
  protocols: [UIApplicationDelegate]
});

var NotificationObserver = function (_super) {
  __extends(NotificationObserver, _super);

  function NotificationObserver() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NotificationObserver.initWithCallback = function (onReceiveCallback) {
    var observer = _super.new.call(this);

    observer._onReceiveCallback = onReceiveCallback;
    return observer;
  };

  NotificationObserver.prototype.onReceive = function (notification) {
    this._onReceiveCallback(notification);
  };

  NotificationObserver.ObjCExposedMethods = {
    "onReceive": {
      returns: interop.types.void,
      params: [NSNotification]
    }
  };
  return NotificationObserver;
}(NSObject);

var displayedOnce = false;
var displayedLinkTarget;
var displayedLink;

var CADisplayLinkTarget = function (_super) {
  __extends(CADisplayLinkTarget, _super);

  function CADisplayLinkTarget() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CADisplayLinkTarget.prototype.onDisplayed = function (link) {
    link.invalidate();
    var ios = utils.ios.getter(UIApplication, UIApplication.sharedApplication);
    var object = iosApp;
    displayedOnce = true;
    application_common_1.notify({
      eventName: application_common_1.displayedEvent,
      object: object,
      ios: ios
    });
    displayedLinkTarget = null;
    displayedLink = null;
  };

  CADisplayLinkTarget.ObjCExposedMethods = {
    "onDisplayed": {
      returns: interop.types.void,
      params: [CADisplayLink]
    }
  };
  return CADisplayLinkTarget;
}(NSObject);

var IOSApplication = function () {
  function IOSApplication() {
    this._currentOrientation = utils.ios.getter(UIDevice, UIDevice.currentDevice).orientation;
    this._observers = new Array();
    this.addNotificationObserver(UIApplicationDidFinishLaunchingNotification, this.didFinishLaunchingWithOptions.bind(this));
    this.addNotificationObserver(UIApplicationDidBecomeActiveNotification, this.didBecomeActive.bind(this));
    this.addNotificationObserver(UIApplicationDidEnterBackgroundNotification, this.didEnterBackground.bind(this));
    this.addNotificationObserver(UIApplicationWillTerminateNotification, this.willTerminate.bind(this));
    this.addNotificationObserver(UIApplicationDidReceiveMemoryWarningNotification, this.didReceiveMemoryWarning.bind(this));
    this.addNotificationObserver(UIDeviceOrientationDidChangeNotification, this.orientationDidChange.bind(this));
  }

  Object.defineProperty(IOSApplication.prototype, "rootController", {
    get: function () {
      return this._window.rootViewController;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IOSApplication.prototype, "nativeApp", {
    get: function () {
      return utils.ios.getter(UIApplication, UIApplication.sharedApplication);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IOSApplication.prototype, "window", {
    get: function () {
      return this._window;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IOSApplication.prototype, "delegate", {
    get: function () {
      return this._delegate;
    },
    set: function (value) {
      if (this._delegate !== value) {
        this._delegate = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IOSApplication.prototype, "rootView", {
    get: function () {
      return this._rootView;
    },
    enumerable: true,
    configurable: true
  });

  IOSApplication.prototype.addNotificationObserver = function (notificationName, onReceiveCallback) {
    var observer = NotificationObserver.initWithCallback(onReceiveCallback);
    utils.ios.getter(NSNotificationCenter, NSNotificationCenter.defaultCenter).addObserverSelectorNameObject(observer, "onReceive", notificationName, null);

    this._observers.push(observer);

    return observer;
  };

  IOSApplication.prototype.removeNotificationObserver = function (observer, notificationName) {
    var index = this._observers.indexOf(observer);

    if (index >= 0) {
      this._observers.splice(index, 1);

      utils.ios.getter(NSNotificationCenter, NSNotificationCenter.defaultCenter).removeObserverNameObject(observer, notificationName, null);
    }
  };

  IOSApplication.prototype.didFinishLaunchingWithOptions = function (notification) {
    if (!displayedOnce && profiling_1.level() >= profiling_1.Level.lifecycle) {
      displayedLinkTarget = CADisplayLinkTarget.new();
      displayedLink = CADisplayLink.displayLinkWithTargetSelector(displayedLinkTarget, "onDisplayed");
      displayedLink.addToRunLoopForMode(NSRunLoop.mainRunLoop, NSDefaultRunLoopMode);
      displayedLink.addToRunLoopForMode(NSRunLoop.mainRunLoop, UITrackingRunLoopMode);
    }

    this._window = UIWindow.alloc().initWithFrame(utils.ios.getter(UIScreen, UIScreen.mainScreen).bounds);
    this._window.backgroundColor = utils.ios.getter(UIColor, UIColor.whiteColor);
    this.notifyAppStarted(notification);
  };

  IOSApplication.prototype.notifyAppStarted = function (notification) {
    var args = {
      eventName: application_common_1.launchEvent,
      object: this,
      ios: notification && notification.userInfo && notification.userInfo.objectForKey("UIApplicationLaunchOptionsLocalNotificationKey") || null
    };
    application_common_1.notify(args);
    application_common_1.notify({
      eventName: "loadAppCss",
      object: this,
      cssFile: application_common_1.getCssFileName()
    });

    if (this._window) {
      this.setWindowContent(args.root);
    } else {
      this._window = UIApplication.sharedApplication.delegate.window;
    }
  };

  IOSApplication.prototype.didBecomeActive = function (notification) {
    var ios = utils.ios.getter(UIApplication, UIApplication.sharedApplication);
    var object = this;
    application_common_1.notify({
      eventName: application_common_1.resumeEvent,
      object: object,
      ios: ios
    });
    var rootView = this._rootView;

    if (rootView && !rootView.isLoaded) {
      rootView.callLoaded();
    }
  };

  IOSApplication.prototype.didEnterBackground = function (notification) {
    application_common_1.notify({
      eventName: application_common_1.suspendEvent,
      object: this,
      ios: utils.ios.getter(UIApplication, UIApplication.sharedApplication)
    });
    var rootView = this._rootView;

    if (rootView && rootView.isLoaded) {
      rootView.callUnloaded();
    }
  };

  IOSApplication.prototype.willTerminate = function (notification) {
    application_common_1.notify({
      eventName: application_common_1.exitEvent,
      object: this,
      ios: utils.ios.getter(UIApplication, UIApplication.sharedApplication)
    });
    var rootView = this._rootView;

    if (rootView && rootView.isLoaded) {
      rootView.callUnloaded();
    }
  };

  IOSApplication.prototype.didReceiveMemoryWarning = function (notification) {
    application_common_1.notify({
      eventName: application_common_1.lowMemoryEvent,
      object: this,
      ios: utils.ios.getter(UIApplication, UIApplication.sharedApplication)
    });
  };

  IOSApplication.prototype.orientationDidChange = function (notification) {
    var orientation = utils.ios.getter(UIDevice, UIDevice.currentDevice).orientation;

    if (this._currentOrientation !== orientation) {
      this._currentOrientation = orientation;
      var newValue = void 0;

      switch (orientation) {
        case 4:
        case 3:
          newValue = "landscape";
          break;

        case 1:
        case 2:
          newValue = "portrait";
          break;

        default:
          newValue = "unknown";
          break;
      }

      application_common_1.notify({
        eventName: application_common_1.orientationChangedEvent,
        ios: this,
        newValue: newValue,
        object: this
      });
    }
  };

  IOSApplication.prototype._onLivesync = function (context) {
    if (this._rootView && !this._rootView._onLivesync(context)) {
      this.setWindowContent();
    }
  };

  IOSApplication.prototype.setWindowContent = function (view) {
    if (this._rootView) {
      this._rootView._onRootViewReset();
    }

    var rootView = createRootView(view);
    var controller = getViewController(rootView);
    this._rootView = rootView;

    if (createRootFrame.value) {
      rootView._setupUI({});
    } else {
      rootView._setupAsRootView({});
    }

    setViewControllerView(rootView);
    var haveController = this._window.rootViewController !== null;
    this._window.rootViewController = controller;

    if (!haveController) {
      this._window.makeKeyAndVisible();
    }
  };

  __decorate([profiling_1.profile], IOSApplication.prototype, "didFinishLaunchingWithOptions", null);

  __decorate([profiling_1.profile], IOSApplication.prototype, "didBecomeActive", null);

  return IOSApplication;
}();

var iosApp = new IOSApplication();
exports.ios = iosApp;
application_common_1.setApplication(iosApp);

global.__onLiveSyncCore = function (context) {
  iosApp._onLivesync(context);
};

var mainEntry;

function createRootView(v) {
  var rootView = v;

  if (!rootView) {
    if (!mainEntry) {
      throw new Error("Main entry is missing. App cannot be started. Verify app bootstrap.");
    } else {
      if (createRootFrame.value) {
        var frame = rootView = new frame_1.Frame();
        frame.navigate(mainEntry);
      } else {
        rootView = builder_1.createViewFromEntry(mainEntry);
      }
    }
  }

  return rootView;
}

function getMainEntry() {
  return mainEntry;
}

exports.getMainEntry = getMainEntry;

function getRootView() {
  return iosApp.rootView;
}

exports.getRootView = getRootView;
var createRootFrame = {
  value: true
};
var started = false;

function _start(entry) {
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;
  started = true;

  if (!iosApp.nativeApp) {
    UIApplicationMain(0, null, null, iosApp && iosApp.delegate ? NSStringFromClass(iosApp.delegate) : NSStringFromClass(Responder));
  } else {
    var rootView = createRootView();

    if (rootView) {
      var window_1 = iosApp.nativeApp.keyWindow || iosApp.nativeApp.windows.count > 0 && iosApp.nativeApp.windows[0];

      if (window_1) {
        var rootController = window_1.rootViewController;

        if (rootController) {
          var controller = getViewController(rootView);

          rootView._setupAsRootView({});

          var embedderDelegate = NativeScriptEmbedder.sharedInstance().delegate;

          if (embedderDelegate) {
            embedderDelegate.presentNativeScriptApp(controller);
          } else {
            var visibleVC = utils.ios.getVisibleViewController(rootController);
            visibleVC.presentViewControllerAnimatedCompletion(controller, true, null);
          }

          iosApp.notifyAppStarted();
        }
      }
    }
  }
}

function start(entry) {
  console.log("application.start() is deprecated; use application.run() instead");

  _start(entry);
}

exports.start = start;

function run(entry) {
  createRootFrame.value = false;

  _start(entry);
}

exports.run = run;

function _resetRootView(entry) {
  createRootFrame.value = false;
  mainEntry = typeof entry === "string" ? {
    moduleName: entry
  } : entry;
  iosApp.setWindowContent();
}

exports._resetRootView = _resetRootView;

function getNativeApplication() {
  return iosApp.nativeApp;
}

exports.getNativeApplication = getNativeApplication;

function getViewController(view) {
  var viewController = view.viewController || view.ios;

  if (viewController instanceof UIViewController) {
    return viewController;
  } else {
    viewController = view_1.ios.UILayoutViewController.initWithOwner(new WeakRef(view));
    view.viewController = viewController;
    return viewController;
  }
}

function setViewControllerView(view) {
  var viewController = view.viewController || view.ios;
  var nativeView = view.ios || view.nativeViewProtected;

  if (!nativeView || !viewController) {
    throw new Error("Root should be either UIViewController or UIView");
  }

  if (viewController instanceof view_1.ios.UILayoutViewController) {
    viewController.view.addSubview(nativeView);
  }
}

global.__onLiveSync = function __onLiveSync(context) {
  if (!started) {
    return;
  }

  var rootView = getRootView();
  application_common_1.livesync(rootView, context);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/bundle-entry-points.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {if (true) {
  __webpack_require__("../node_modules/tns-core-modules/globals/globals.js");

  global.registerModule("text/formatted-string", function () {
    return __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js");
  });
  global.registerModule("text/span", function () {
    return __webpack_require__("../node_modules/tns-core-modules/text/span.js");
  });
  global.registerModule("ui/action-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js");
  });
  global.registerModule("ui/activity-indicator", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js");
  });
  global.registerModule("ui/border", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/border/border.js");
  });
  global.registerModule("ui/button", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js");
  });
  global.registerModule("ui/content-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");
  });
  global.registerModule("ui/date-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker.js");
  });
  global.registerModule("ui/frame", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");
  });
  global.registerModule("ui/html-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view.js");
  });
  global.registerModule("ui/image", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/image/image.js");
  });
  global.registerModule("ui/label", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");
  });
  global.registerModule("ui/layouts/absolute-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js");
  });
  global.registerModule("ui/layouts/dock-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js");
  });
  global.registerModule("ui/layouts/grid-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js");
  });
  global.registerModule("ui/layouts/stack-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");
  });
  global.registerModule("ui/layouts/flexbox-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js");
  });
  global.registerModule("ui/layouts/wrap-layout", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js");
  });
  global.registerModule("ui/list-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker.js");
  });
  global.registerModule("ui/page", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/page/page.js");
  });
  global.registerModule("ui/placeholder", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/placeholder/placeholder.js");
  });
  global.registerModule("ui/progress", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress.js");
  });
  global.registerModule("ui/proxy-view-container", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js");
  });
  global.registerModule("ui/repeater", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/repeater/repeater.js");
  });
  global.registerModule("ui/scroll-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js");
  });
  global.registerModule("ui/search-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar.js");
  });
  global.registerModule("ui/segmented-bar", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js");
  });
  global.registerModule("ui/slider", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider.js");
  });
  global.registerModule("ui/switch", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch.js");
  });
  global.registerModule("ui/tab-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view.js");
  });
  global.registerModule("ui/web-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view.js");
  });
  global.registerModule("ui/text-field", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js");
  });
  global.registerModule("ui/text-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/text-view/text-view.js");
  });
  global.registerModule("ui/time-picker", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker.js");
  });
  global.registerModule("ui/list-view", function () {
    return __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view.js");
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var knownColors = __webpack_require__("../node_modules/tns-core-modules/color/known-colors.js");

var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;

var Color = function () {
  function Color() {
    if (arguments.length === 1) {
      var arg = arguments[0];

      if (types.isString(arg)) {
        if (isRgbOrRgba(arg)) {
          this._argb = argbFromRgbOrRgba(arg);
        } else if (knownColors.isKnownName(arg)) {
          var hex = knownColors.getKnownColor(arg);
          this._name = arg;
          this._argb = this._argbFromString(hex);
        } else if (HEX_REGEX.test(arg)) {
          var hex = this._normalizeHex(arg);

          this._argb = this._argbFromString(hex);
        } else {
          throw new Error("Invalid color: " + arg);
        }
      } else if (types.isNumber(arg)) {
        this._argb = arg >>> 0;
      } else {
        throw new Error("Expected 1 or 4 constructor parameters.");
      }
    } else if (arguments.length === 4) {
      this._argb = (arguments[0] & 0xFF) * 0x01000000 + (arguments[1] & 0xFF) * 0x00010000 + (arguments[2] & 0xFF) * 0x00000100 + (arguments[3] & 0xFF) * 0x00000001;
    } else {
      throw new Error("Expected 1 or 4 constructor parameters.");
    }
  }

  Object.defineProperty(Color.prototype, "a", {
    get: function () {
      return this._argb / 0x01000000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "r", {
    get: function () {
      return this._argb / 0x00010000 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "g", {
    get: function () {
      return this._argb / 0x00000100 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "b", {
    get: function () {
      return this._argb / 0x00000001 & 0xFF;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "argb", {
    get: function () {
      return this._argb;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "hex", {
    get: function () {
      if (this.a === 0xFF) {
        return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      } else {
        return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "name", {
    get: function () {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "ios", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Color.prototype, "android", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });

  Color.prototype._argbFromString = function (hex) {
    if (hex.charAt(0) === "#") {
      hex = hex.substr(1);
    }

    if (hex.length === 3) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    } else if (hex.length === 4) {
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
    }

    var intVal = parseInt(hex, 16);

    if (hex.length === 6) {
      intVal = (intVal & 0x00FFFFFF) + 0xFF000000;
    }

    return intVal;
  };

  Color.prototype.equals = function (value) {
    return value && this.argb === value.argb;
  };

  Color.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.equals(value2);
  };

  Color.isValid = function (value) {
    if (types.isNullOrUndefined(value) || value instanceof Color) {
      return true;
    }

    if (!types.isString(value)) {
      return false;
    }

    if (knownColors.isKnownName(value)) {
      return true;
    }

    return HEX_REGEX.test(value) || isRgbOrRgba(value);
  };

  Color.prototype._componentToHex = function (component) {
    var hex = component.toString(16);

    if (hex.length === 1) {
      hex = "0" + hex;
    }

    return hex;
  };

  Color.prototype._normalizeHex = function (hexStr) {
    if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
      hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
    }

    return hexStr;
  };

  Color.prototype.toString = function () {
    return this.hex;
  };

  return Color;
}();

exports.Color = Color;

function isRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}

function argbFromRgbOrRgba(value) {
  var toLower = value.toLowerCase();
  var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
  var r = 255;
  var g = 255;
  var b = 255;
  var a = 255;

  if (parts[0]) {
    r = parseInt(parts[0].trim());
  }

  if (parts[1]) {
    g = parseInt(parts[1].trim());
  }

  if (parts[2]) {
    b = parseInt(parts[2].trim());
  }

  if (parts[3]) {
    a = Math.round(parseFloat(parts[3].trim()) * 255);
  }

  return (a & 0xFF) * 0x01000000 + (r & 0xFF) * 0x00010000 + (g & 0xFF) * 0x00000100 + (b & 0xFF) * 0x00000001;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/color/color.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/tns-core-modules/color/color-common.js");

var Color = function (_super) {
  __extends(Color, _super);

  function Color() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Color.prototype, "ios", {
    get: function () {
      if (!this._ios) {
        this._ios = UIColor.alloc().initWithRedGreenBlueAlpha(this.r / 255, this.g / 255, this.b / 255, this.a / 255);
      }

      return this._ios;
    },
    enumerable: true,
    configurable: true
  });
  return Color;
}(common.Color);

exports.Color = Color;

/***/ }),

/***/ "../node_modules/tns-core-modules/color/known-colors.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.RebeccaPurple = "#663399";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};

(function () {
  var name;
  var underscore = "_";

  for (var p in exports) {
    name = p;

    if (name.charAt(0) !== underscore) {
      _allColors[name.toLowerCase()] = exports[p];
    }
  }
})();

function isKnownName(name) {
  if (!name) {
    return undefined;
  }

  return name.toLowerCase() in _allColors;
}

exports.isKnownName = isKnownName;

function getKnownColor(name) {
  if (!name) {
    return undefined;
  }

  return _allColors[name.toLowerCase()];
}

exports.getKnownColor = getKnownColor;

/***/ }),

/***/ "../node_modules/tns-core-modules/console/console.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Console = function () {
  function Console() {}

  Console.prototype.time = function (reportName) {};

  Console.prototype.timeEnd = function (reportName) {};

  Console.prototype.assert = function (test, message) {};

  Console.prototype.info = function (message) {};

  Console.prototype.warn = function (message) {};

  Console.prototype.error = function (message) {};

  Console.prototype.log = function (message) {};

  Console.prototype.trace = function () {};

  Console.prototype.dir = function (obj) {};

  return Console;
}();

exports.Console = Console;

/***/ }),

/***/ "../node_modules/tns-core-modules/css-value/index.js":
/***/ (function(module, exports) {

exports.parse = parse;

function parse(str) {
  return new Parser(str).parse();
}

function Parser(str) {
  this.str = str;
}

Parser.prototype.skip = function (m) {
  this.str = this.str.slice(m[0].length);
};

Parser.prototype.comma = function () {
  var m = /^, */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'comma',
    string: ','
  };
};

Parser.prototype.ident = function () {
  var m = /^([\w-]+) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'ident',
    string: m[1]
  };
};

Parser.prototype.int = function () {
  var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = ~~m[2];
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.float = function () {
  var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = parseFloat(m[2]);
  var u = m[3];
  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  };
};

Parser.prototype.number = function () {
  return this.float() || this.int();
};

Parser.prototype.double = function () {
  var m = /^"([^"]*)" */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: '"',
    string: '"' + m[1] + '"',
    value: m[1]
  };
};

Parser.prototype.single = function () {
  var m = /^'([^']*)' */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: "'",
    string: "'" + m[1] + "'",
    value: m[1]
  };
};

Parser.prototype.string = function () {
  return this.single() || this.double();
};

Parser.prototype.value = function () {
  return this.number() || this.ident() || this.string() || this.comma();
};

Parser.prototype.parse = function () {
  var vals = [];

  while (this.str.length) {
    var obj = this.value();
    if (!obj) throw new Error('failed to parse near `' + this.str.slice(0, 10) + '...`');
    vals.push(obj);
  }

  return vals;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/css/index.js":
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__("../node_modules/tns-core-modules/css/lib/parse/index.js");

/***/ }),

/***/ "../node_modules/tns-core-modules/css/lib/parse/index.js":
/***/ (function(module, exports) {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;

module.exports = function (css, options) {
  options = options || {};
  /**
   * Positional.
   */

  var lineno = 1;
  var column = 1;
  /**
   * Update lineno and column based on `str`.
   */

  function updatePosition(str) {
    var lines = str.match(/\n/g);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf('\n');
    column = ~i ? str.length - i : column + str.length;
  }
  /**
   * Mark position and patch `node.position`.
   */


  function position() {
    var start = {
      line: lineno,
      column: column
    };
    return function (node) {
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }
  /**
   * Store position information for a node
   */


  function Position(start) {
    this.start = start;
    this.end = {
      line: lineno,
      column: column
    };
    this.source = options.source;
  }
  /**
   * Non-enumerable source string
   */


  Position.prototype.content = css;
  /**
   * Error `msg`.
   */

  var errorsList = [];

  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = css;

    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }
  /**
   * Parse stylesheet.
   */


  function stylesheet() {
    var rulesList = rules();
    return {
      type: 'stylesheet',
      stylesheet: {
        rules: rulesList,
        parsingErrors: errorsList
      }
    };
  }
  /**
   * Opening brace.
   */


  function open() {
    return match(/^{\s*/);
  }
  /**
   * Closing brace.
   */


  function close() {
    return match(/^}/);
  }
  /**
   * Parse ruleset.
   */


  function rules() {
    var node;
    var rules = [];
    whitespace();
    comments(rules);

    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
      if (node !== false) {
        rules.push(node);
        comments(rules);
      }
    }

    return rules;
  }
  /**
   * Match `re` and return captures.
   */


  function match(re) {
    var m = re.exec(css);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    css = css.slice(str.length);
    return m;
  }
  /**
   * Parse whitespace.
   */


  function whitespace() {
    match(/^\s*/);
  }
  /**
   * Parse comments;
   */


  function comments(rules) {
    var c;
    rules = rules || [];

    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }

    return rules;
  }
  /**
   * Parse comment.
   */


  function comment() {
    var pos = position();
    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;
    var i = 2;

    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;

    i += 2;

    if ("" === css.charAt(i - 1)) {
      return error('End of comment missing');
    }

    var str = css.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    css = css.slice(i);
    column += 2;
    return pos({
      type: 'comment',
      comment: str
    });
  }
  /**
   * Parse selector.
   */


  function selector() {
    var m = match(/^([^{]+)/);
    if (!m) return;
    /* @fix Remove all comments from selectors
     * http://ostermiller.org/findcomment.html */

    return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '').replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function (m) {
      return m.replace(/,/g, '\u200C');
    }).split(/\s*(?![^(]*\)),\s*/).map(function (s) {
      return s.replace(/\u200C/g, ',');
    });
  }
  /**
   * Parse declaration.
   */


  function declaration() {
    var pos = position(); // prop

    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
    if (!prop) return;
    prop = trim(prop[0]); // :

    if (!match(/^:\s*/)) return error("property missing ':'"); // val

    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
    var ret = pos({
      type: 'declaration',
      property: prop.replace(commentre, ''),
      value: val ? trim(val[0]).replace(commentre, '') : ''
    }); // ;

    match(/^[;\s]*/);
    return ret;
  }
  /**
   * Parse declarations.
   */


  function declarations() {
    var decls = [];
    if (!open()) return error("missing '{'");
    comments(decls); // declarations

    var decl;

    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }

    if (!close()) return error("missing '}'");
    return decls;
  }
  /**
   * Parse keyframe.
   */


  function keyframe() {
    var m;
    var vals = [];
    var pos = position();

    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
      vals.push(m[1]);
      match(/^,\s*/);
    }

    if (!vals.length) return;
    return pos({
      type: 'keyframe',
      values: vals,
      declarations: declarations()
    });
  }
  /**
   * Parse keyframes.
   */


  function atkeyframes() {
    var pos = position();
    var m = match(/^@([-\w]+)?keyframes\s*/);
    if (!m) return;
    var vendor = m[1]; // identifier

    var m = match(/^([-\w]+)\s*/);
    if (!m) return error("@keyframes missing name");
    var name = m[1];
    if (!open()) return error("@keyframes missing '{'");
    var frame;
    var frames = comments();

    while (frame = keyframe()) {
      frames.push(frame);
      frames = frames.concat(comments());
    }

    if (!close()) return error("@keyframes missing '}'");
    return pos({
      type: 'keyframes',
      name: name,
      vendor: vendor,
      keyframes: frames
    });
  }
  /**
   * Parse supports.
   */


  function atsupports() {
    var pos = position();
    var m = match(/^@supports *([^{]+)/);
    if (!m) return;
    var supports = trim(m[1]);
    if (!open()) return error("@supports missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@supports missing '}'");
    return pos({
      type: 'supports',
      supports: supports,
      rules: style
    });
  }
  /**
   * Parse host.
   */


  function athost() {
    var pos = position();
    var m = match(/^@host\s*/);
    if (!m) return;
    if (!open()) return error("@host missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@host missing '}'");
    return pos({
      type: 'host',
      rules: style
    });
  }
  /**
   * Parse media.
   */


  function atmedia() {
    var pos = position();
    var m = match(/^@media *([^{]+)/);
    if (!m) return;
    var media = trim(m[1]);
    if (!open()) return error("@media missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@media missing '}'");
    return pos({
      type: 'media',
      media: media,
      rules: style
    });
  }
  /**
   * Parse custom-media.
   */


  function atcustommedia() {
    var pos = position();
    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
    if (!m) return;
    return pos({
      type: 'custom-media',
      name: trim(m[1]),
      media: trim(m[2])
    });
  }
  /**
   * Parse paged media.
   */


  function atpage() {
    var pos = position();
    var m = match(/^@page */);
    if (!m) return;
    var sel = selector() || [];
    if (!open()) return error("@page missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@page missing '}'");
    return pos({
      type: 'page',
      selectors: sel,
      declarations: decls
    });
  }
  /**
   * Parse document.
   */


  function atdocument() {
    var pos = position();
    var m = match(/^@([-\w]+)?document *([^{]+)/);
    if (!m) return;
    var vendor = trim(m[1]);
    var doc = trim(m[2]);
    if (!open()) return error("@document missing '{'");
    var style = comments().concat(rules());
    if (!close()) return error("@document missing '}'");
    return pos({
      type: 'document',
      document: doc,
      vendor: vendor,
      rules: style
    });
  }
  /**
   * Parse font-face.
   */


  function atfontface() {
    var pos = position();
    var m = match(/^@font-face\s*/);
    if (!m) return;
    if (!open()) return error("@font-face missing '{'");
    var decls = comments(); // declarations

    var decl;

    while (decl = declaration()) {
      decls.push(decl);
      decls = decls.concat(comments());
    }

    if (!close()) return error("@font-face missing '}'");
    return pos({
      type: 'font-face',
      declarations: decls
    });
  }
  /**
   * Parse import
   */


  var atimport = _compileAtrule('import');
  /**
   * Parse charset
   */


  var atcharset = _compileAtrule('charset');
  /**
   * Parse namespace
   */


  var atnamespace = _compileAtrule('namespace');
  /**
   * Parse non-block at-rules
   */


  function _compileAtrule(name) {
    var re = new RegExp('^@' + name + '\\s*([^;]+);');
    return function () {
      var pos = position();
      var m = match(re);
      if (!m) return;
      var ret = {
        type: name
      };
      ret[name] = m[1].trim();
      return pos(ret);
    };
  }
  /**
   * Parse at rule.
   */


  function atrule() {
    if (css[0] != '@') return;
    return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
  }
  /**
   * Parse rule.
   */


  function rule() {
    var pos = position();
    var sel = selector();
    if (!sel) return error('selector missing');
    comments();
    return pos({
      type: 'rule',
      selectors: sel,
      declarations: declarations()
    });
  }

  return addParent(stylesheet());
};
/**
 * Trim `str`.
 */


function trim(str) {
  return str ? str.replace(/^\s+|\s+$/g, '') : '';
}
/**
 * Adds non-enumerable parent node reference to each node.
 */


function addParent(obj, parent) {
  var isNode = obj && typeof obj.type === 'string';
  var childParent = isNode ? obj : parent;

  for (var k in obj) {
    var value = obj[k];

    if (Array.isArray(value)) {
      value.forEach(function (v) {
        addParent(v, childParent);
      });
    } else if (value && typeof value === 'object') {
      addParent(value, childParent);
    }
  }

  if (isNode) {
    Object.defineProperty(obj, 'parent', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: parent || null
    });
  }

  return obj;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/css/parser.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var urlRegEx = /\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy;

function parseURL(text, start) {
  if (start === void 0) {
    start = 0;
  }

  urlRegEx.lastIndex = start;
  var result = urlRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = urlRegEx.lastIndex;
  var value = result[2] || result[3];
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseURL = parseURL;
var hexColorRegEx = /\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy;

function parseHexColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  hexColorRegEx.lastIndex = start;
  var result = hexColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = hexColorRegEx.lastIndex;
  var hex = result[1];
  var argb;

  if (hex.length === 8) {
    argb = parseInt("0x" + hex);
  } else if (hex.length === 6) {
    argb = parseInt("0xFF" + hex);
  } else if (hex.length === 3) {
    argb = parseInt("0xFF" + hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]);
  }

  return {
    start: start,
    end: end,
    value: argb
  };
}

exports.parseHexColor = parseHexColor;

function rgbaToArgbNumber(r, g, b, a) {
  if (a === void 0) {
    a = 1;
  }

  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
    return Math.round(a * 0xFF) * 0x01000000 + r * 0x010000 + g * 0x000100 + b * 0x000001;
  } else {
    return null;
  }
}

var rgbColorRegEx = /\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy;

function parseRGBColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbColorRegEx.lastIndex = start;
  var result = rgbColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbColorRegEx.lastIndex;
  var value = result[1] && rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBColor = parseRGBColor;
var rgbaColorRegEx = /\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy;

function parseRGBAColor(text, start) {
  if (start === void 0) {
    start = 0;
  }

  rgbaColorRegEx.lastIndex = start;
  var result = rgbaColorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = rgbaColorRegEx.lastIndex;
  var value = rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]), parseFloat(result[5]));
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseRGBAColor = parseRGBAColor;
var colors;

(function (colors) {
  colors[colors["transparent"] = 0] = "transparent";
  colors[colors["aliceblue"] = 4293982463] = "aliceblue";
  colors[colors["antiquewhite"] = 4294634455] = "antiquewhite";
  colors[colors["aqua"] = 4278255615] = "aqua";
  colors[colors["aquamarine"] = 4286578644] = "aquamarine";
  colors[colors["azure"] = 4293984255] = "azure";
  colors[colors["beige"] = 4294309340] = "beige";
  colors[colors["bisque"] = 4294960324] = "bisque";
  colors[colors["black"] = 4278190080] = "black";
  colors[colors["blanchedalmond"] = 4294962125] = "blanchedalmond";
  colors[colors["blue"] = 4278190335] = "blue";
  colors[colors["blueviolet"] = 4287245282] = "blueviolet";
  colors[colors["brown"] = 4289014314] = "brown";
  colors[colors["burlywood"] = 4292786311] = "burlywood";
  colors[colors["cadetblue"] = 4284456608] = "cadetblue";
  colors[colors["chartreuse"] = 4286578432] = "chartreuse";
  colors[colors["chocolate"] = 4291979550] = "chocolate";
  colors[colors["coral"] = 4294934352] = "coral";
  colors[colors["cornflowerblue"] = 4284782061] = "cornflowerblue";
  colors[colors["cornsilk"] = 4294965468] = "cornsilk";
  colors[colors["crimson"] = 4292613180] = "crimson";
  colors[colors["cyan"] = 4278255615] = "cyan";
  colors[colors["darkblue"] = 4278190219] = "darkblue";
  colors[colors["darkcyan"] = 4278225803] = "darkcyan";
  colors[colors["darkgoldenrod"] = 4290283019] = "darkgoldenrod";
  colors[colors["darkgray"] = 4289309097] = "darkgray";
  colors[colors["darkgreen"] = 4278215680] = "darkgreen";
  colors[colors["darkgrey"] = 4289309097] = "darkgrey";
  colors[colors["darkkhaki"] = 4290623339] = "darkkhaki";
  colors[colors["darkmagenta"] = 4287299723] = "darkmagenta";
  colors[colors["darkolivegreen"] = 4283788079] = "darkolivegreen";
  colors[colors["darkorange"] = 4294937600] = "darkorange";
  colors[colors["darkorchid"] = 4288230092] = "darkorchid";
  colors[colors["darkred"] = 4287299584] = "darkred";
  colors[colors["darksalmon"] = 4293498490] = "darksalmon";
  colors[colors["darkseagreen"] = 4287609999] = "darkseagreen";
  colors[colors["darkslateblue"] = 4282924427] = "darkslateblue";
  colors[colors["darkslategray"] = 4281290575] = "darkslategray";
  colors[colors["darkslategrey"] = 4281290575] = "darkslategrey";
  colors[colors["darkturquoise"] = 4278243025] = "darkturquoise";
  colors[colors["darkviolet"] = 4287889619] = "darkviolet";
  colors[colors["deeppink"] = 4294907027] = "deeppink";
  colors[colors["deepskyblue"] = 4278239231] = "deepskyblue";
  colors[colors["dimgray"] = 4285098345] = "dimgray";
  colors[colors["dimgrey"] = 4285098345] = "dimgrey";
  colors[colors["dodgerblue"] = 4280193279] = "dodgerblue";
  colors[colors["firebrick"] = 4289864226] = "firebrick";
  colors[colors["floralwhite"] = 4294966000] = "floralwhite";
  colors[colors["forestgreen"] = 4280453922] = "forestgreen";
  colors[colors["fuchsia"] = 4294902015] = "fuchsia";
  colors[colors["gainsboro"] = 4292664540] = "gainsboro";
  colors[colors["ghostwhite"] = 4294506751] = "ghostwhite";
  colors[colors["gold"] = 4294956800] = "gold";
  colors[colors["goldenrod"] = 4292519200] = "goldenrod";
  colors[colors["gray"] = 4286611584] = "gray";
  colors[colors["green"] = 4278222848] = "green";
  colors[colors["greenyellow"] = 4289593135] = "greenyellow";
  colors[colors["grey"] = 4286611584] = "grey";
  colors[colors["honeydew"] = 4293984240] = "honeydew";
  colors[colors["hotpink"] = 4294928820] = "hotpink";
  colors[colors["indianred"] = 4291648604] = "indianred";
  colors[colors["indigo"] = 4283105410] = "indigo";
  colors[colors["ivory"] = 4294967280] = "ivory";
  colors[colors["khaki"] = 4293977740] = "khaki";
  colors[colors["lavender"] = 4293322490] = "lavender";
  colors[colors["lavenderblush"] = 4294963445] = "lavenderblush";
  colors[colors["lawngreen"] = 4286381056] = "lawngreen";
  colors[colors["lemonchiffon"] = 4294965965] = "lemonchiffon";
  colors[colors["lightblue"] = 4289583334] = "lightblue";
  colors[colors["lightcoral"] = 4293951616] = "lightcoral";
  colors[colors["lightcyan"] = 4292935679] = "lightcyan";
  colors[colors["lightgoldenrodyellow"] = 4294638290] = "lightgoldenrodyellow";
  colors[colors["lightgray"] = 4292072403] = "lightgray";
  colors[colors["lightgreen"] = 4287688336] = "lightgreen";
  colors[colors["lightgrey"] = 4292072403] = "lightgrey";
  colors[colors["lightpink"] = 4294948545] = "lightpink";
  colors[colors["lightsalmon"] = 4294942842] = "lightsalmon";
  colors[colors["lightseagreen"] = 4280332970] = "lightseagreen";
  colors[colors["lightskyblue"] = 4287090426] = "lightskyblue";
  colors[colors["lightslategray"] = 4286023833] = "lightslategray";
  colors[colors["lightslategrey"] = 4286023833] = "lightslategrey";
  colors[colors["lightsteelblue"] = 4289774814] = "lightsteelblue";
  colors[colors["lightyellow"] = 4294967264] = "lightyellow";
  colors[colors["lime"] = 4278255360] = "lime";
  colors[colors["limegreen"] = 4281519410] = "limegreen";
  colors[colors["linen"] = 4294635750] = "linen";
  colors[colors["magenta"] = 4294902015] = "magenta";
  colors[colors["maroon"] = 4286578688] = "maroon";
  colors[colors["mediumaquamarine"] = 4284927402] = "mediumaquamarine";
  colors[colors["mediumblue"] = 4278190285] = "mediumblue";
  colors[colors["mediumorchid"] = 4290401747] = "mediumorchid";
  colors[colors["mediumpurple"] = 4287852763] = "mediumpurple";
  colors[colors["mediumseagreen"] = 4282168177] = "mediumseagreen";
  colors[colors["mediumslateblue"] = 4286277870] = "mediumslateblue";
  colors[colors["mediumspringgreen"] = 4278254234] = "mediumspringgreen";
  colors[colors["mediumturquoise"] = 4282962380] = "mediumturquoise";
  colors[colors["mediumvioletred"] = 4291237253] = "mediumvioletred";
  colors[colors["midnightblue"] = 4279834992] = "midnightblue";
  colors[colors["mintcream"] = 4294311930] = "mintcream";
  colors[colors["mistyrose"] = 4294960353] = "mistyrose";
  colors[colors["moccasin"] = 4294960309] = "moccasin";
  colors[colors["navajowhite"] = 4294958765] = "navajowhite";
  colors[colors["navy"] = 4278190208] = "navy";
  colors[colors["oldlace"] = 4294833638] = "oldlace";
  colors[colors["olive"] = 4286611456] = "olive";
  colors[colors["olivedrab"] = 4285238819] = "olivedrab";
  colors[colors["orange"] = 4294944000] = "orange";
  colors[colors["orangered"] = 4294919424] = "orangered";
  colors[colors["orchid"] = 4292505814] = "orchid";
  colors[colors["palegoldenrod"] = 4293847210] = "palegoldenrod";
  colors[colors["palegreen"] = 4288215960] = "palegreen";
  colors[colors["paleturquoise"] = 4289720046] = "paleturquoise";
  colors[colors["palevioletred"] = 4292571283] = "palevioletred";
  colors[colors["papayawhip"] = 4294963157] = "papayawhip";
  colors[colors["peachpuff"] = 4294957753] = "peachpuff";
  colors[colors["peru"] = 4291659071] = "peru";
  colors[colors["pink"] = 4294951115] = "pink";
  colors[colors["plum"] = 4292714717] = "plum";
  colors[colors["powderblue"] = 4289781990] = "powderblue";
  colors[colors["purple"] = 4286578816] = "purple";
  colors[colors["rebeccapurple"] = 4284887961] = "rebeccapurple";
  colors[colors["red"] = 4294901760] = "red";
  colors[colors["rosybrown"] = 4290547599] = "rosybrown";
  colors[colors["royalblue"] = 4282477025] = "royalblue";
  colors[colors["saddlebrown"] = 4287317267] = "saddlebrown";
  colors[colors["salmon"] = 4294606962] = "salmon";
  colors[colors["sandybrown"] = 4294222944] = "sandybrown";
  colors[colors["seagreen"] = 4281240407] = "seagreen";
  colors[colors["seashell"] = 4294964718] = "seashell";
  colors[colors["sienna"] = 4288696877] = "sienna";
  colors[colors["silver"] = 4290822336] = "silver";
  colors[colors["skyblue"] = 4287090411] = "skyblue";
  colors[colors["slateblue"] = 4285160141] = "slateblue";
  colors[colors["slategray"] = 4285563024] = "slategray";
  colors[colors["slategrey"] = 4285563024] = "slategrey";
  colors[colors["snow"] = 4294966010] = "snow";
  colors[colors["springgreen"] = 4278255487] = "springgreen";
  colors[colors["steelblue"] = 4282811060] = "steelblue";
  colors[colors["tan"] = 4291998860] = "tan";
  colors[colors["teal"] = 4278222976] = "teal";
  colors[colors["thistle"] = 4292394968] = "thistle";
  colors[colors["tomato"] = 4294927175] = "tomato";
  colors[colors["turquoise"] = 4282441936] = "turquoise";
  colors[colors["violet"] = 4293821166] = "violet";
  colors[colors["wheat"] = 4294303411] = "wheat";
  colors[colors["white"] = 4294967295] = "white";
  colors[colors["whitesmoke"] = 4294309365] = "whitesmoke";
  colors[colors["yellow"] = 4294967040] = "yellow";
  colors[colors["yellowgreen"] = 4288335154] = "yellowgreen";
})(colors = exports.colors || (exports.colors = {}));

;

function parseColorKeyword(value, start, keyword) {
  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && keyword.value in colors) {
    var end = keyword.end;
    var value_1 = colors[keyword.value];
    return {
      start: start,
      end: end,
      value: value_1
    };
  }

  return null;
}

exports.parseColorKeyword = parseColorKeyword;

function parseColor(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  return parseHexColor(value, start) || parseColorKeyword(value, start, keyword) || parseRGBColor(value, start) || parseRGBAColor(value, start);
}

exports.parseColor = parseColor;
var keywordRegEx = /\s*([a-z][\w\-]*)\s*/giy;

function parseKeyword(text, start) {
  if (start === void 0) {
    start = 0;
  }

  keywordRegEx.lastIndex = start;
  var result = keywordRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = keywordRegEx.lastIndex;
  var value = result[1];
  return {
    start: start,
    end: end,
    value: value
  };
}

var backgroundRepeatKeywords = new Set(["repeat", "repeat-x", "repeat-y", "no-repeat"]);

function parseRepeat(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  if (keyword && backgroundRepeatKeywords.has(keyword.value)) {
    var end = keyword.end;
    var value_2 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_2
    };
  }

  return null;
}

exports.parseRepeat = parseRepeat;
var unitRegEx = /\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy;

function parseUnit(text, start) {
  if (start === void 0) {
    start = 0;
  }

  unitRegEx.lastIndex = start;
  var result = unitRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = unitRegEx.lastIndex;
  var value = parseFloat(result[1]);
  var unit = result[2] || "dip";
  return {
    start: start,
    end: end,
    value: {
      value: value,
      unit: unit
    }
  };
}

exports.parseUnit = parseUnit;

function parsePercentageOrLength(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var unitResult = parseUnit(text, start);

  if (unitResult) {
    var start_1 = unitResult.start,
        end = unitResult.end;
    var value = unitResult.value;

    if (value.unit === "%") {
      value.value /= 100;
    } else if (!value.unit) {
      value.unit = "dip";
    } else if (value.unit === "px" || value.unit === "dip") {} else {
      return null;
    }

    return {
      start: start_1,
      end: end,
      value: value
    };
  }

  return null;
}

exports.parsePercentageOrLength = parsePercentageOrLength;
var angleUnitsToRadMap = {
  "deg": function (start, end, deg) {
    return {
      start: start,
      end: end,
      value: deg / 180 * Math.PI
    };
  },
  "rad": function (start, end, rad) {
    return {
      start: start,
      end: end,
      value: rad
    };
  },
  "grad": function (start, end, grad) {
    return {
      start: start,
      end: end,
      value: grad / 200 * Math.PI
    };
  },
  "turn": function (start, end, turn) {
    return {
      start: start,
      end: end,
      value: turn * Math.PI * 2
    };
  }
};

function parseAngle(value, start) {
  if (start === void 0) {
    start = 0;
  }

  var angleResult = parseUnit(value, start);

  if (angleResult) {
    var start_2 = angleResult.start,
        end = angleResult.end,
        value_3 = angleResult.value;
    return (angleUnitsToRadMap[value_3.unit] || function (_, __, ___) {
      return null;
    })(start_2, end, value_3.value);
  }

  return null;
}

exports.parseAngle = parseAngle;
var backgroundSizeKeywords = new Set(["auto", "contain", "cover"]);

function parseBackgroundSize(value, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(value, start);
  }

  var end = start;

  if (keyword && backgroundSizeKeywords.has(keyword.value)) {
    end = keyword.end;
    var value_4 = keyword.value;
    return {
      start: start,
      end: end,
      value: value_4
    };
  }

  var firstLength = parsePercentageOrLength(value, end);

  if (firstLength) {
    end = firstLength.end;
    var secondLength = parsePercentageOrLength(value, firstLength.end);

    if (secondLength) {
      end = secondLength.end;
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: secondLength.value
        }
      };
    } else {
      return {
        start: start,
        end: end,
        value: {
          x: firstLength.value,
          y: "auto"
        }
      };
    }
  }

  return null;
}

exports.parseBackgroundSize = parseBackgroundSize;
var backgroundPositionKeywords = Object.freeze(new Set(["left", "right", "top", "bottom", "center"]));
var backgroundPositionKeywordsDirection = {
  "left": "x",
  "right": "x",
  "center": "center",
  "top": "y",
  "bottom": "y"
};

function parseBackgroundPosition(text, start, keyword) {
  if (start === void 0) {
    start = 0;
  }

  if (keyword === void 0) {
    keyword = parseKeyword(text, start);
  }

  function formatH(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  function formatV(align, offset) {
    if (align.value === "center") {
      return "center";
    }

    if (offset && offset.value.value !== 0) {
      return {
        align: align.value,
        offset: offset.value
      };
    }

    return align.value;
  }

  var end = start;

  if (keyword && backgroundPositionKeywords.has(keyword.value)) {
    end = keyword.end;
    var firstDirection = backgroundPositionKeywordsDirection[keyword.value];
    var firstLength = firstDirection !== "center" && parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
    }

    var secondKeyword = parseKeyword(text, end);

    if (secondKeyword && backgroundPositionKeywords.has(secondKeyword.value)) {
      end = secondKeyword.end;
      var secondDirection = backgroundPositionKeywordsDirection[secondKeyword.end];

      if (firstDirection === secondDirection && firstDirection !== "center") {
        return null;
      }

      var secondLength = secondDirection !== "center" && parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
      }

      if (firstDirection === secondDirection && secondDirection === "center" || firstDirection === "x" || secondDirection === "y") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: formatV(secondKeyword, secondLength)
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(secondKeyword, secondLength),
            y: formatV(keyword, firstLength)
          }
        };
      }
    } else {
      if (firstDirection === "center") {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: "center"
          }
        };
      } else if (firstDirection === "x") {
        return {
          start: start,
          end: end,
          value: {
            x: formatH(keyword, firstLength),
            y: "center"
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: "center",
            y: formatV(keyword, firstLength)
          }
        };
      }
    }
  } else {
    var firstLength = parsePercentageOrLength(text, end);

    if (firstLength) {
      end = firstLength.end;
      var secondLength = parsePercentageOrLength(text, end);

      if (secondLength) {
        end = secondLength.end;
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: {
              align: "top",
              offset: secondLength.value
            }
          }
        };
      } else {
        return {
          start: start,
          end: end,
          value: {
            x: {
              align: "left",
              offset: firstLength.value
            },
            y: "center"
          }
        };
      }
    } else {
      return null;
    }
  }
}

exports.parseBackgroundPosition = parseBackgroundPosition;
var directionRegEx = /\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy;
var sideDirections = {
  top: Math.PI * 0 / 2,
  right: Math.PI * 1 / 2,
  bottom: Math.PI * 2 / 2,
  left: Math.PI * 3 / 2
};
var cornerDirections = {
  top: {
    right: Math.PI * 1 / 4,
    left: Math.PI * 7 / 4
  },
  right: {
    top: Math.PI * 1 / 4,
    bottom: Math.PI * 3 / 4
  },
  bottom: {
    right: Math.PI * 3 / 4,
    left: Math.PI * 5 / 4
  },
  left: {
    top: Math.PI * 7 / 4,
    bottom: Math.PI * 5 / 4
  }
};

function parseDirection(text, start) {
  if (start === void 0) {
    start = 0;
  }

  directionRegEx.lastIndex = start;
  var result = directionRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = directionRegEx.lastIndex;
  var firstDirection = result[1];

  if (result[2]) {
    var secondDirection = result[2];
    var value = cornerDirections[firstDirection][secondDirection];
    return value === undefined ? null : {
      start: start,
      end: end,
      value: value
    };
  } else {
    return {
      start: start,
      end: end,
      value: sideDirections[firstDirection]
    };
  }
}

var openingBracketRegEx = /\s*\(\s*/gy;
var closingBracketRegEx = /\s*\)\s*/gy;
var closingBracketOrCommaRegEx = /\s*(\)|,)\s*/gy;

function parseArgumentsList(text, start, argument) {
  openingBracketRegEx.lastIndex = start;
  var openingBracket = openingBracketRegEx.exec(text);

  if (!openingBracket) {
    return null;
  }

  var end = openingBracketRegEx.lastIndex;
  var value = [];
  closingBracketRegEx.lastIndex = end;
  var closingBracket = closingBracketRegEx.exec(text);

  if (closingBracket) {
    return {
      start: start,
      end: end,
      value: value
    };
  }

  for (var index = 0; true; index++) {
    var arg = argument(text, end, index);

    if (!arg) {
      return null;
    }

    end = arg.end;
    value.push(arg);
    closingBracketOrCommaRegEx.lastIndex = end;
    var closingBracketOrComma = closingBracketOrCommaRegEx.exec(text);

    if (closingBracketOrComma) {
      end = closingBracketOrCommaRegEx.lastIndex;

      if (closingBracketOrComma[1] === ",") {
        continue;
      } else if (closingBracketOrComma[1] === ")") {
        return {
          start: start,
          end: end,
          value: value
        };
      }
    } else {
      return null;
    }
  }
}

function parseColorStop(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var color = parseColor(text, start);

  if (!color) {
    return null;
  }

  var end = color.end;
  var offset = parsePercentageOrLength(text, end);

  if (offset) {
    end = offset.end;
    return {
      start: start,
      end: end,
      value: {
        argb: color.value,
        offset: offset.value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      argb: color.value
    }
  };
}

exports.parseColorStop = parseColorStop;
var linearGradientStartRegEx = /\s*linear-gradient\s*/gy;

function parseLinearGradient(text, start) {
  if (start === void 0) {
    start = 0;
  }

  linearGradientStartRegEx.lastIndex = start;
  var lgs = linearGradientStartRegEx.exec(text);

  if (!lgs) {
    return null;
  }

  var end = linearGradientStartRegEx.lastIndex;
  var angle = Math.PI;
  var colors = [];
  var parsedArgs = parseArgumentsList(text, end, function (text, start, index) {
    if (index === 0) {
      var angleArg = parseAngle(text, start) || parseDirection(text, start);

      if (angleArg) {
        angle = angleArg.value;
        return angleArg;
      }
    }

    var colorStop = parseColorStop(text, start);

    if (colorStop) {
      colors.push(colorStop.value);
      return colorStop;
    }

    return null;
  });

  if (!parsedArgs) {
    return null;
  }

  end = parsedArgs.end;
  return {
    start: start,
    end: end,
    value: {
      angle: angle,
      colors: colors
    }
  };
}

exports.parseLinearGradient = parseLinearGradient;
var slashRegEx = /\s*(\/)\s*/gy;

function parseSlash(text, start) {
  slashRegEx.lastIndex = start;
  var slash = slashRegEx.exec(text);

  if (!slash) {
    return null;
  }

  var end = slashRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: "/"
  };
}

function parseBackground(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var value = {};
  var end = start;

  while (end < text.length) {
    var keyword = parseKeyword(text, end);
    var color = parseColor(text, end, keyword);

    if (color) {
      value.color = color.value;
      end = color.end;
      continue;
    }

    var repeat = parseRepeat(text, end, keyword);

    if (repeat) {
      value.repeat = repeat.value;
      end = repeat.end;
      continue;
    }

    var position = parseBackgroundPosition(text, end, keyword);

    if (position) {
      position.value.text = text.substring(position.start, position.end);
      value.position = position.value;
      end = position.end;
      var slash = parseSlash(text, end);

      if (slash) {
        end = slash.end;
        var size = parseBackgroundSize(text, end);

        if (!size) {
          return null;
        }

        value.size = size.value;
        end = size.end;
      }

      continue;
    }

    var url = parseURL(text, end);

    if (url) {
      value.image = url.value;
      end = url.end;
      continue;
    }

    var gradient = parseLinearGradient(text, end);

    if (gradient) {
      value.image = gradient.value;
      end = gradient.end;
      continue;
    }

    return null;
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseBackground = parseBackground;
var universalSelectorRegEx = /\*/gy;

function parseUniversalSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  universalSelectorRegEx.lastIndex = start;
  var result = universalSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = universalSelectorRegEx.lastIndex;
  return {
    start: start,
    end: end,
    value: {
      type: "*"
    }
  };
}

exports.parseUniversalSelector = parseUniversalSelector;
var simpleIdentifierSelectorRegEx = /(#|\.|:|\b)([_-\w][_-\w\d]*)/gy;

function parseSimpleIdentifierSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  simpleIdentifierSelectorRegEx.lastIndex = start;
  var result = simpleIdentifierSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = simpleIdentifierSelectorRegEx.lastIndex;
  var type = result[1];
  var identifier = result[2];
  var value = {
    type: type,
    identifier: identifier
  };
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleIdentifierSelector = parseSimpleIdentifierSelector;
var attributeSelectorRegEx = /\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy;

function parseAttributeSelector(text, start) {
  attributeSelectorRegEx.lastIndex = start;
  var result = attributeSelectorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = attributeSelectorRegEx.lastIndex;
  var property = result[1];

  if (result[2]) {
    var test_1 = result[2];
    var value = result[3] || result[4] || result[5];
    return {
      start: start,
      end: end,
      value: {
        type: "[]",
        property: property,
        test: test_1,
        value: value
      }
    };
  }

  return {
    start: start,
    end: end,
    value: {
      type: "[]",
      property: property
    }
  };
}

exports.parseAttributeSelector = parseAttributeSelector;

function parseSimpleSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  return parseUniversalSelector(text, start) || parseSimpleIdentifierSelector(text, start) || parseAttributeSelector(text, start);
}

exports.parseSimpleSelector = parseSimpleSelector;

function parseSimpleSelectorSequence(text, start) {
  var simpleSelector = parseSimpleSelector(text, start);

  if (!simpleSelector) {
    return null;
  }

  var end = simpleSelector.end;
  var value = [];

  while (simpleSelector) {
    value.push(simpleSelector.value);
    end = simpleSelector.end;
    simpleSelector = parseSimpleSelector(text, end);
  }

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSimpleSelectorSequence = parseSimpleSelectorSequence;
var combinatorRegEx = /\s*(\+|~|>)?\s*/gy;

function parseCombinator(text, start) {
  if (start === void 0) {
    start = 0;
  }

  combinatorRegEx.lastIndex = start;
  var result = combinatorRegEx.exec(text);

  if (!result) {
    return null;
  }

  var end = combinatorRegEx.lastIndex;
  var value = result[1] || " ";
  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseCombinator = parseCombinator;
var whiteSpaceRegEx = /\s*/gy;

function parseSelector(text, start) {
  if (start === void 0) {
    start = 0;
  }

  var end = start;
  whiteSpaceRegEx.lastIndex = end;
  var leadingWhiteSpace = whiteSpaceRegEx.exec(text);

  if (leadingWhiteSpace) {
    end = whiteSpaceRegEx.lastIndex;
  }

  var value = [];
  var combinator;
  var expectSimpleSelector = true;
  var pair;

  do {
    var simpleSelectorSequence = parseSimpleSelectorSequence(text, end);

    if (!simpleSelectorSequence) {
      if (expectSimpleSelector) {
        return null;
      } else {
        break;
      }
    }

    end = simpleSelectorSequence.end;

    if (combinator) {
      pair[1] = combinator.value;
    }

    pair = [simpleSelectorSequence.value, undefined];
    value.push(pair);
    combinator = parseCombinator(text, end);

    if (combinator) {
      end = combinator.end;
    }

    expectSimpleSelector = combinator && combinator.value !== " ";
  } while (combinator);

  return {
    start: start,
    end: end,
    value: value
  };
}

exports.parseSelector = parseSelector;
var whitespaceRegEx = /[\s\t\n\r\f]*/gym;
var singleQuoteStringRegEx = /'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gym;
var doubleQuoteStringRegEx = /"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gym;
var commentRegEx = /(\/\*(?:[^\*]|\*[^\/])*\*\/)/gym;
var numberRegEx = /[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gym;
var nameRegEx = /-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gym;

var CSS3Parser = function () {
  function CSS3Parser(text) {
    this.text = text;
    this.nextInputCodePointIndex = 0;
  }

  CSS3Parser.prototype.tokenize = function () {
    var tokens = [];
    var inputToken;

    do {
      inputToken = this.consumeAToken();
      tokens.push(inputToken);
    } while (inputToken);

    return tokens;
  };

  CSS3Parser.prototype.consumeAToken = function () {
    if (this.reconsumedInputToken) {
      var result = this.reconsumedInputToken;
      this.reconsumedInputToken = null;
      return result;
    }

    var char = this.text[this.nextInputCodePointIndex];

    switch (char) {
      case "\"":
        return this.consumeAStringToken();

      case "'":
        return this.consumeAStringToken();

      case "(":
      case ")":
      case ",":
      case ":":
      case ";":
      case "[":
      case "]":
      case "{":
      case "}":
        this.nextInputCodePointIndex++;
        return char;

      case "#":
        return this.consumeAHashToken() || this.consumeADelimToken();

      case " ":
      case "\t":
      case "\n":
      case "\r":
      case "\f":
        return this.consumeAWhitespace();

      case "@":
        return this.consumeAtKeyword() || this.consumeADelimToken();

      case "\\":
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        return this.consumeANumericToken();

      case "u":
      case "U":
        if (this.text[this.nextInputCodePointIndex + 1] === "+") {
          var thirdChar = this.text[this.nextInputCodePointIndex + 2];

          if (thirdChar >= "0" && thirdChar <= "9" || thirdChar === "?") {
            throw new Error("Unicode tokens not supported!");
          }
        }

        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();

      case "$":
      case "*":
      case "^":
      case "|":
      case "~":
        return this.consumeAMatchToken() || this.consumeADelimToken();

      case "-":
        return this.consumeANumericToken() || this.consumeAnIdentLikeToken() || this.consumeCDC() || this.consumeADelimToken();

      case "+":
      case ".":
        return this.consumeANumericToken() || this.consumeADelimToken();

      case "/":
        return this.consumeAComment() || this.consumeADelimToken();

      case "<":
        return this.consumeCDO() || this.consumeADelimToken();

      case undefined:
        return undefined;

      default:
        return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
    }
  };

  CSS3Parser.prototype.consumeADelimToken = function () {
    return {
      type: 2,
      text: this.text[this.nextInputCodePointIndex++]
    };
  };

  CSS3Parser.prototype.consumeAWhitespace = function () {
    whitespaceRegEx.lastIndex = this.nextInputCodePointIndex;
    whitespaceRegEx.exec(this.text);
    this.nextInputCodePointIndex = whitespaceRegEx.lastIndex;
    return " ";
  };

  CSS3Parser.prototype.consumeAHashToken = function () {
    this.nextInputCodePointIndex++;
    var hashName = this.consumeAName();

    if (hashName) {
      return {
        type: 12,
        text: "#" + hashName.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeCDO = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 4) === "<!--") {
      this.nextInputCodePointIndex += 4;
      return "<!--";
    }

    return null;
  };

  CSS3Parser.prototype.consumeCDC = function () {
    if (this.text.substr(this.nextInputCodePointIndex, 3) === "-->") {
      this.nextInputCodePointIndex += 3;
      return "-->";
    }

    return null;
  };

  CSS3Parser.prototype.consumeAMatchToken = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "=") {
      var token = this.text.substr(this.nextInputCodePointIndex, 2);
      this.nextInputCodePointIndex += 2;
      return token;
    }

    return null;
  };

  CSS3Parser.prototype.consumeANumericToken = function () {
    numberRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = numberRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = numberRegEx.lastIndex;

    if (this.text[this.nextInputCodePointIndex] === "%") {
      return {
        type: 4,
        text: result[0]
      };
    }

    var name = this.consumeAName();

    if (name) {
      return {
        type: 5,
        text: result[0] + name.text
      };
    }

    return {
      type: 3,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAnIdentLikeToken = function () {
    var name = this.consumeAName();

    if (!name) {
      return null;
    }

    if (this.text[this.nextInputCodePointIndex] === "(") {
      this.nextInputCodePointIndex++;

      if (name.text.toLowerCase() === "url") {
        return this.consumeAURLToken();
      }

      return {
        type: 8,
        name: name.text,
        text: name.text + "("
      };
    }

    return name;
  };

  CSS3Parser.prototype.consumeAStringToken = function () {
    var char = this.text[this.nextInputCodePointIndex];
    var result;

    if (char === "'") {
      singleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = singleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = singleQuoteStringRegEx.lastIndex;
    } else if (char === "\"") {
      doubleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
      result = doubleQuoteStringRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = doubleQuoteStringRegEx.lastIndex;
    }

    return {
      type: 1,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAURLToken = function () {
    var start = this.nextInputCodePointIndex - 3 - 1;
    var urlToken = {
      type: 7,
      text: undefined
    };
    this.consumeAWhitespace();

    if (this.nextInputCodePointIndex >= this.text.length) {
      return urlToken;
    }

    var nextInputCodePoint = this.text[this.nextInputCodePointIndex];

    if (nextInputCodePoint === "\"" || nextInputCodePoint === "'") {
      var stringToken = this.consumeAStringToken();
      urlToken.text = stringToken.text;
      this.consumeAWhitespace();

      if (this.text[this.nextInputCodePointIndex] === ")" || this.nextInputCodePointIndex >= this.text.length) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        urlToken.text = this.text.substring(start, end);
        return urlToken;
      } else {
        return null;
      }
    }

    while (this.nextInputCodePointIndex < this.text.length) {
      var char = this.text[this.nextInputCodePointIndex++];

      switch (char) {
        case ")":
          return urlToken;

        case " ":
        case "\t":
        case "\n":
        case "\r":
        case "\f":
          this.consumeAWhitespace();

          if (this.text[this.nextInputCodePointIndex] === ")") {
            this.nextInputCodePointIndex++;
            return urlToken;
          } else {
            return null;
          }

        case "\"":
        case "\'":
          return null;

        case "\\":
          throw new Error("Escaping not yet supported!");

        default:
          urlToken.text += char;
      }
    }

    return urlToken;
  };

  CSS3Parser.prototype.consumeAName = function () {
    nameRegEx.lastIndex = this.nextInputCodePointIndex;
    var result = nameRegEx.exec(this.text);

    if (!result) {
      return null;
    }

    this.nextInputCodePointIndex = nameRegEx.lastIndex;
    return {
      type: 6,
      text: result[0]
    };
  };

  CSS3Parser.prototype.consumeAtKeyword = function () {
    this.nextInputCodePointIndex++;
    var name = this.consumeAName();

    if (name) {
      return {
        type: 11,
        text: name.text
      };
    }

    this.nextInputCodePointIndex--;
    return null;
  };

  CSS3Parser.prototype.consumeAComment = function () {
    if (this.text[this.nextInputCodePointIndex + 1] === "*") {
      commentRegEx.lastIndex = this.nextInputCodePointIndex;
      var result = commentRegEx.exec(this.text);

      if (!result) {
        return null;
      }

      this.nextInputCodePointIndex = commentRegEx.lastIndex;
      return this.consumeAToken();
    }

    return null;
  };

  CSS3Parser.prototype.reconsumeTheCurrentInputToken = function (currentInputToken) {
    this.reconsumedInputToken = currentInputToken;
  };

  CSS3Parser.prototype.parseAStylesheet = function () {
    this.topLevelFlag = true;
    var stylesheet = {
      rules: this.consumeAListOfRules()
    };
    return stylesheet;
  };

  CSS3Parser.prototype.consumeAListOfRules = function () {
    var rules = [];
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      switch (inputToken) {
        case " ":
          continue;

        case "<!--":
        case "-->":
          if (this.topLevelFlag) {
            continue;
          }

          this.reconsumeTheCurrentInputToken(inputToken);
          var atRule = this.consumeAnAtRule();

          if (atRule) {
            rules.push(atRule);
          }

          continue;
      }

      if (inputToken.type === 11) {
        this.reconsumeTheCurrentInputToken(inputToken);
        var atRule = this.consumeAnAtRule();

        if (atRule) {
          rules.push(atRule);
        }

        continue;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var qualifiedRule = this.consumeAQualifiedRule();

      if (qualifiedRule) {
        rules.push(qualifiedRule);
      }
    }

    return rules;
  };

  CSS3Parser.prototype.consumeAnAtRule = function () {
    var inputToken = this.consumeAToken();
    var atRule = {
      type: "at-rule",
      name: inputToken.text,
      prelude: [],
      block: undefined
    };

    while (inputToken = this.consumeAToken()) {
      if (inputToken === ";") {
        return atRule;
      } else if (inputToken === "{") {
        atRule.block = this.consumeASimpleBlock(inputToken);
        return atRule;
      } else if (inputToken.type === 9 && inputToken.associatedToken === "{") {
        atRule.block = inputToken;
        return atRule;
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var component = this.consumeAComponentValue();

      if (component) {
        atRule.prelude.push(component);
      }
    }

    return atRule;
  };

  CSS3Parser.prototype.consumeAQualifiedRule = function () {
    var qualifiedRule = {
      type: "qualified-rule",
      prelude: [],
      block: undefined
    };
    var inputToken;

    while (inputToken = this.consumeAToken()) {
      if (inputToken === "{") {
        var block = this.consumeASimpleBlock(inputToken);
        qualifiedRule.block = block;
        return qualifiedRule;
      } else if (inputToken.type === 9) {
        var simpleBlock = inputToken;

        if (simpleBlock.associatedToken === "{") {
          qualifiedRule.block = simpleBlock;
          return qualifiedRule;
        }
      }

      this.reconsumeTheCurrentInputToken(inputToken);
      var componentValue = this.consumeAComponentValue();

      if (componentValue) {
        qualifiedRule.prelude.push(componentValue);
      }
    }

    return null;
  };

  CSS3Parser.prototype.consumeAComponentValue = function () {
    var inputToken = this.consumeAToken();

    switch (inputToken) {
      case "{":
      case "[":
      case "(":
        this.nextInputCodePointIndex++;
        return this.consumeASimpleBlock(inputToken);
    }

    if (typeof inputToken === "object" && inputToken.type === 8) {
      return this.consumeAFunction(inputToken.name);
    }

    return inputToken;
  };

  CSS3Parser.prototype.consumeASimpleBlock = function (associatedToken) {
    var endianToken = {
      "[": "]",
      "{": "}",
      "(": ")"
    }[associatedToken];
    var start = this.nextInputCodePointIndex - 1;
    var block = {
      type: 9,
      text: undefined,
      associatedToken: associatedToken,
      values: []
    };
    var nextInputToken;

    while (nextInputToken = this.text[this.nextInputCodePointIndex]) {
      if (nextInputToken === endianToken) {
        this.nextInputCodePointIndex++;
        var end = this.nextInputCodePointIndex;
        block.text = this.text.substring(start, end);
        return block;
      }

      var value = this.consumeAComponentValue();

      if (value) {
        block.values.push(value);
      }
    }

    block.text = this.text.substring(start);
    return block;
  };

  CSS3Parser.prototype.consumeAFunction = function (name) {
    var start = this.nextInputCodePointIndex;
    var funcToken = {
      type: 14,
      name: name,
      text: undefined,
      components: []
    };

    do {
      if (this.nextInputCodePointIndex >= this.text.length) {
        funcToken.text = name + "(" + this.text.substring(start);
        return funcToken;
      }

      var nextInputToken = this.text[this.nextInputCodePointIndex];

      switch (nextInputToken) {
        case ")":
          this.nextInputCodePointIndex++;
          var end = this.nextInputCodePointIndex;
          funcToken.text = name + "(" + this.text.substring(start, end);
          return funcToken;

        default:
          var component = this.consumeAComponentValue();

          if (component) {
            funcToken.components.push(component);
          }

      }
    } while (true);
  };

  return CSS3Parser;
}();

exports.CSS3Parser = CSS3Parser;

var CSSNativeScript = function () {
  function CSSNativeScript() {}

  CSSNativeScript.prototype.parseStylesheet = function (stylesheet) {
    return {
      type: "stylesheet",
      stylesheet: {
        rules: this.parseRules(stylesheet.rules)
      }
    };
  };

  CSSNativeScript.prototype.parseRules = function (rules) {
    var _this = this;

    return rules.map(function (rule) {
      return _this.parseRule(rule);
    });
  };

  CSSNativeScript.prototype.parseRule = function (rule) {
    if (rule.type === "at-rule") {
      return this.parseAtRule(rule);
    } else if (rule.type === "qualified-rule") {
      return this.parseQualifiedRule(rule);
    }
  };

  CSSNativeScript.prototype.parseAtRule = function (rule) {
    if (rule.name === "import") {
      return {
        import: rule.prelude.map(function (m) {
          return typeof m === "string" ? m : m.text;
        }).join("").trim(),
        type: "import"
      };
    }

    return;
  };

  CSSNativeScript.prototype.parseQualifiedRule = function (rule) {
    return {
      type: "rule",
      selectors: this.preludeToSelectorsStringArray(rule.prelude),
      declarations: this.ruleBlockToDeclarations(rule.block.values)
    };
  };

  CSSNativeScript.prototype.ruleBlockToDeclarations = function (declarationsInputTokens) {
    var declarations = [];
    var property = "";
    var value = "";
    var reading = "property";

    for (var i = 0; i < declarationsInputTokens.length; i++) {
      var inputToken = declarationsInputTokens[i];

      if (reading === "property") {
        if (inputToken === ":") {
          reading = "value";
        } else if (typeof inputToken === "string") {
          property += inputToken;
        } else {
          property += inputToken.text;
        }
      } else {
        if (inputToken === ";") {
          property = property.trim();
          value = value.trim();
          declarations.push({
            type: "declaration",
            property: property,
            value: value
          });
          property = "";
          value = "";
          reading = "property";
        } else if (typeof inputToken === "string") {
          value += inputToken;
        } else {
          value += inputToken.text;
        }
      }
    }

    property = property.trim();
    value = value.trim();

    if (property || value) {
      declarations.push({
        type: "declaration",
        property: property,
        value: value
      });
    }

    return declarations;
  };

  CSSNativeScript.prototype.preludeToSelectorsStringArray = function (prelude) {
    var selectors = [];
    var selector = "";
    prelude.forEach(function (inputToken) {
      if (typeof inputToken === "string") {
        if (inputToken === ",") {
          if (selector) {
            selectors.push(selector.trim());
          }

          selector = "";
        } else {
          selector += inputToken;
        }
      } else if (typeof inputToken === "object") {
        selector += inputToken.text;
      }
    });

    if (selector) {
      selectors.push(selector.trim());
    }

    return selectors;
  };

  return CSSNativeScript;
}();

exports.CSSNativeScript = CSSNativeScript;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable-array/observable-array.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var ChangeType = function () {
  function ChangeType() {}

  ChangeType.Add = "add";
  ChangeType.Delete = "delete";
  ChangeType.Update = "update";
  ChangeType.Splice = "splice";
  return ChangeType;
}();

exports.ChangeType = ChangeType;
var CHANGE = "change";

var ObservableArray = function (_super) {
  __extends(ObservableArray, _super);

  function ObservableArray() {
    var _this = _super.call(this) || this;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      _this._array = arguments[0].slice();
    } else {
      _this._array = Array.apply(null, arguments);
    }

    _this._addArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Add,
      index: null,
      removed: new Array(),
      addedCount: 1
    };
    _this._deleteArgs = {
      eventName: CHANGE,
      object: _this,
      action: ChangeType.Delete,
      index: null,
      removed: null,
      addedCount: 0
    };
    return _this;
  }

  ObservableArray.prototype.getItem = function (index) {
    return this._array[index];
  };

  ObservableArray.prototype.setItem = function (index, value) {
    var oldValue = this._array[index];
    this._array[index] = value;
    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Update,
      index: index,
      removed: [oldValue],
      addedCount: 1
    });
  };

  Object.defineProperty(ObservableArray.prototype, "length", {
    get: function () {
      return this._array.length;
    },
    set: function (value) {
      if (types.isNumber(value) && this._array && this._array.length !== value) {
        this.splice(value, this._array.length - value);
      }
    },
    enumerable: true,
    configurable: true
  });

  ObservableArray.prototype.toString = function () {
    return this._array.toString();
  };

  ObservableArray.prototype.toLocaleString = function () {
    return this._array.toLocaleString();
  };

  ObservableArray.prototype.concat = function () {
    this._addArgs.index = this._array.length;

    var result = this._array.concat.apply(this._array, arguments);

    return result;
  };

  ObservableArray.prototype.join = function (separator) {
    return this._array.join(separator);
  };

  ObservableArray.prototype.pop = function () {
    this._deleteArgs.index = this._array.length - 1;

    var result = this._array.pop();

    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.push = function () {
    this._addArgs.index = this._array.length;

    if (arguments.length === 1 && Array.isArray(arguments[0])) {
      var source = arguments[0];

      for (var i = 0, l = source.length; i < l; i++) {
        this._array.push(source[i]);
      }
    } else {
      this._array.push.apply(this._array, arguments);
    }

    this._addArgs.addedCount = this._array.length - this._addArgs.index;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return this._array.length;
  };

  ObservableArray.prototype._notifyLengthChange = function () {
    var lengthChangedData = this._createPropertyChangeData("length", this._array.length);

    this.notify(lengthChangedData);
  };

  ObservableArray.prototype.reverse = function () {
    return this._array.reverse();
  };

  ObservableArray.prototype.shift = function () {
    var result = this._array.shift();

    this._deleteArgs.index = 0;
    this._deleteArgs.removed = [result];
    this.notify(this._deleteArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.slice = function (start, end) {
    return this._array.slice(start, end);
  };

  ObservableArray.prototype.sort = function (compareFn) {
    return this._array.sort(compareFn);
  };

  ObservableArray.prototype.splice = function (start, deleteCount) {
    var length = this._array.length;

    var result = this._array.splice.apply(this._array, arguments);

    this.notify({
      eventName: CHANGE,
      object: this,
      action: ChangeType.Splice,
      index: start,
      removed: result,
      addedCount: this._array.length > length ? this._array.length - length : 0
    });

    if (this._array.length !== length) {
      this._notifyLengthChange();
    }

    return result;
  };

  ObservableArray.prototype.unshift = function () {
    var length = this._array.length;

    var result = this._array.unshift.apply(this._array, arguments);

    this._addArgs.index = 0;
    this._addArgs.addedCount = result - length;
    this.notify(this._addArgs);

    this._notifyLengthChange();

    return result;
  };

  ObservableArray.prototype.indexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : 0;

    for (var i = index, l = this._array.length; i < l; i++) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.lastIndexOf = function (searchElement, fromIndex) {
    var index = fromIndex ? fromIndex : this._array.length - 1;

    for (var i = index; i >= 0; i--) {
      if (this._array[i] === searchElement) {
        return i;
      }
    }

    return -1;
  };

  ObservableArray.prototype.every = function (callbackfn, thisArg) {
    return this._array.every(callbackfn, thisArg);
  };

  ObservableArray.prototype.some = function (callbackfn, thisArg) {
    return this._array.some(callbackfn, thisArg);
  };

  ObservableArray.prototype.forEach = function (callbackfn, thisArg) {
    this._array.forEach(callbackfn, thisArg);
  };

  ObservableArray.prototype.map = function (callbackfn, thisArg) {
    return this._array.map(callbackfn, thisArg);
  };

  ObservableArray.prototype.filter = function (callbackfn, thisArg) {
    return this._array.filter(callbackfn, thisArg);
  };

  ObservableArray.prototype.reduce = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduce(callbackfn, initialValue) : this._array.reduce(callbackfn);
  };

  ObservableArray.prototype.reduceRight = function (callbackfn, initialValue) {
    return initialValue !== undefined ? this._array.reduceRight(callbackfn, initialValue) : this._array.reduceRight(callbackfn);
  };

  ObservableArray.changeEvent = CHANGE;
  return ObservableArray;
}(observable.Observable);

exports.ObservableArray = ObservableArray;

/***/ }),

/***/ "../node_modules/tns-core-modules/data/observable/observable.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _wrappedIndex = 0;

var WrappedValue = function () {
  function WrappedValue(wrapped) {
    this.wrapped = wrapped;
  }

  WrappedValue.unwrap = function (value) {
    return value instanceof WrappedValue ? value.wrapped : value;
  };

  WrappedValue.wrap = function (value) {
    var w = _wrappedValues[_wrappedIndex++ % 5];
    w.wrapped = value;
    return w;
  };

  return WrappedValue;
}();

exports.WrappedValue = WrappedValue;
var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];

var Observable = function () {
  function Observable() {
    this._observers = {};
  }

  Observable.prototype.get = function (name) {
    return this[name];
  };

  Observable.prototype.set = function (name, value) {
    var oldValue = this[name];

    if (this[name] === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this[name] = newValue;
    this.notifyPropertyChange(name, newValue, oldValue);
  };

  Observable.prototype.on = function (eventNames, callback, thisArg) {
    this.addEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.once = function (event, callback, thisArg) {
    var list = this._getEventList(event, true);

    list.push({
      callback: callback,
      thisArg: thisArg,
      once: true
    });
  };

  Observable.prototype.off = function (eventNames, callback, thisArg) {
    this.removeEventListener(eventNames, callback, thisArg);
  };

  Observable.prototype.addEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_1 = events[i].trim();

      var list = this._getEventList(event_1, true);

      list.push({
        callback: callback,
        thisArg: thisArg
      });
    }
  };

  Observable.prototype.removeEventListener = function (eventNames, callback, thisArg) {
    if (typeof eventNames !== "string") {
      throw new TypeError("Events name(s) must be string.");
    }

    if (callback && typeof callback !== "function") {
      throw new TypeError("callback must be function.");
    }

    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_2 = events[i].trim();

      if (callback) {
        var list = this._getEventList(event_2, false);

        if (list) {
          var index_1 = this._indexOfListener(list, callback, thisArg);

          if (index_1 >= 0) {
            list.splice(index_1, 1);
          }

          if (list.length === 0) {
            delete this._observers[event_2];
          }
        }
      } else {
        this._observers[event_2] = undefined;
        delete this._observers[event_2];
      }
    }
  };

  Observable.prototype.notify = function (data) {
    var observers = this._observers[data.eventName];

    if (!observers) {
      return;
    }

    for (var i = observers.length - 1; i >= 0; i--) {
      var entry = observers[i];

      if (entry.once) {
        observers.splice(i, 1);
      }

      if (entry.thisArg) {
        entry.callback.apply(entry.thisArg, [data]);
      } else {
        entry.callback(data);
      }
    }
  };

  Observable.prototype.notifyPropertyChange = function (name, value, oldValue) {
    this.notify(this._createPropertyChangeData(name, value, oldValue));
  };

  Observable.prototype.hasListeners = function (eventName) {
    return eventName in this._observers;
  };

  Observable.prototype._createPropertyChangeData = function (propertyName, value, oldValue) {
    return {
      eventName: Observable.propertyChangeEvent,
      object: this,
      propertyName: propertyName,
      value: value,
      oldValue: oldValue
    };
  };

  Observable.prototype._emit = function (eventNames) {
    var events = eventNames.split(",");

    for (var i = 0, l = events.length; i < l; i++) {
      var event_3 = events[i].trim();
      this.notify({
        eventName: event_3,
        object: this
      });
    }
  };

  Observable.prototype._getEventList = function (eventName, createIfNeeded) {
    if (!eventName) {
      throw new TypeError("EventName must be valid string.");
    }

    var list = this._observers[eventName];

    if (!list && createIfNeeded) {
      list = [];
      this._observers[eventName] = list;
    }

    return list;
  };

  Observable.prototype._indexOfListener = function (list, callback, thisArg) {
    for (var i = 0; i < list.length; i++) {
      var entry = list[i];

      if (thisArg) {
        if (entry.callback === callback && entry.thisArg === thisArg) {
          return i;
        }
      } else {
        if (entry.callback === callback) {
          return i;
        }
      }
    }

    return -1;
  };

  Observable.propertyChangeEvent = "propertyChange";
  return Observable;
}();

exports.Observable = Observable;

var ObservableFromObject = function (_super) {
  __extends(ObservableFromObject, _super);

  function ObservableFromObject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._map = {};
    return _this;
  }

  ObservableFromObject.prototype.get = function (name) {
    return this._map[name];
  };

  ObservableFromObject.prototype.set = function (name, value) {
    var currentValue = this._map[name];

    if (currentValue === value) {
      return;
    }

    var newValue = WrappedValue.unwrap(value);
    this._map[name] = newValue;
    this.notifyPropertyChange(name, newValue, currentValue);
  };

  return ObservableFromObject;
}(Observable);

function defineNewProperty(target, propertyName) {
  Object.defineProperty(target, propertyName, {
    get: function () {
      return target._map[propertyName];
    },
    set: function (value) {
      target.set(propertyName, value);
    },
    enumerable: true,
    configurable: true
  });
}

function addPropertiesFromObject(observable, source, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }

  Object.keys(source).forEach(function (prop) {
    var value = source[prop];

    if (recursive && !Array.isArray(value) && value && typeof value === "object" && !(value instanceof Observable)) {
      value = fromObjectRecursive(value);
    }

    defineNewProperty(observable, prop);
    observable.set(prop, value);
  });
}

function fromObject(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, false);
  return observable;
}

exports.fromObject = fromObject;

function fromObjectRecursive(source) {
  var observable = new ObservableFromObject();
  addPropertiesFromObject(observable, source, true);
  return observable;
}

exports.fromObjectRecursive = fromObjectRecursive;

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/debugger.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var network;

function getNetwork() {
  return network;
}

exports.getNetwork = getNetwork;

function setNetwork(newNetwork) {
  network = newNetwork;
}

exports.setNetwork = setNetwork;
var dom;

function getDOM() {
  return dom;
}

exports.getDOM = getDOM;

function setDOM(newDOM) {
  dom = newDOM;
}

exports.setDOM = setDOM;
var css;

function getCSS() {
  return css;
}

exports.getCSS = getCSS;

function setCSS(newCSS) {
  css = newCSS;
}

exports.setCSS = setCSS;
var NetworkAgent;

(function (NetworkAgent) {
  function responseReceived(requestId, result, headers) {
    var requestIdStr = requestId.toString();
    var mimeType = headers["Content-Type"] || headers["content-type"] || "application/octet-stream";
    var contentLengthHeader = headers["Content-Length"] || headers["content-length"];
    var contentLength = parseInt(contentLengthHeader, 10);

    if (isNaN(contentLength)) {
      contentLength = 0;
    }

    var response = {
      url: result.url || "",
      status: result.statusCode,
      statusText: result.statusText || "",
      headers: headers,
      mimeType: mimeType,
      fromDiskCache: false,
      connectionReused: true,
      connectionId: 0,
      encodedDataLength: contentLength,
      securityState: "info"
    };
    var responseData = {
      requestId: requestIdStr,
      type: mimeTypeToType(response.mimeType),
      response: response,
      timestamp: getTimeStamp()
    };

    global.__inspector.responseReceived(responseData);

    global.__inspector.loadingFinished({
      requestId: requestIdStr,
      timestamp: getTimeStamp(),
      encodedDataLength: contentLength
    });

    var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
    var data;

    if (!hasTextContent) {
      if (responseData.type === "Image") {
        var bitmap = result.responseAsImage;

        if (bitmap) {
          var outputStream = new java.io.ByteArrayOutputStream();
          bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
          var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
          data = base64Image;
        }
      }
    } else {
      data = result.responseAsString;
    }

    var successfulRequestData = {
      requestId: requestIdStr,
      data: data,
      hasTextContent: hasTextContent
    };

    global.__inspector.dataForRequestId(successfulRequestData);
  }

  NetworkAgent.responseReceived = responseReceived;

  function requestWillBeSent(requestId, options) {
    var request = {
      url: options.url,
      method: options.method,
      headers: options.headers || {},
      postData: options.content ? options.content.toString() : "",
      initialPriority: "Medium",
      referrerPolicy: "no-referrer-when-downgrade"
    };
    var requestData = {
      requestId: requestId.toString(),
      url: request.url,
      request: request,
      timestamp: getTimeStamp(),
      type: "Document",
      wallTime: 0
    };

    global.__inspector.requestWillBeSent(requestData);
  }

  NetworkAgent.requestWillBeSent = requestWillBeSent;

  function getTimeStamp() {
    var d = new Date();
    return Math.round(d.getTime() / 1000);
  }

  function mimeTypeToType(mimeType) {
    var type = "Document";

    if (mimeType) {
      if (mimeType.indexOf("image") === 0) {
        type = "Image";
      } else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
        type = "Script";
      }
    }

    return type;
  }
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/debugger/dom-node.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var registeredDomNodes = {};
var ELEMENT_NODE_TYPE = 1;
var ROOT_NODE_TYPE = 9;
var propertyBlacklist = ["effectivePaddingLeft", "effectivePaddingBottom", "effectivePaddingRight", "effectivePaddingTop", "effectiveBorderTopWidth", "effectiveBorderRightWidth", "effectiveBorderBottomWidth", "effectiveBorderLeftWidth", "effectiveMinWidth", "effectiveMinHeight", "effectiveWidth", "effectiveHeight", "effectiveMarginLeft", "effectiveMarginTop", "effectiveMarginRight", "effectiveMarginBottom", "nodeName", "nodeType", "decodeWidth", "decodeHeight", "ng-reflect-items", "domNode", "touchListenerIsSet", "bindingContext", "nativeView"];

function lazy(action) {
  var _value;

  return function () {
    return _value || (_value = action());
  };
}

var percentLengthToStringLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js").PercentLength.convertToString;
});
var getSetPropertiesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getSetProperties;
});
var getComputedCssValuesLazy = lazy(function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js").getComputedCssValues;
});

function registerInspectorEvents(inspector) {
  inspectorFrontendInstance = inspector;
}

exports.registerInspectorEvents = registerInspectorEvents;
var inspectorFrontendInstance;

function notifyInspector(callback) {
  if (inspectorFrontendInstance) {
    callback(inspectorFrontendInstance);
  }
}

function valueToString(value) {
  if (typeof value === "undefined" || value === null) {
    return "";
  } else if (typeof value === "object" && value.unit) {
    return percentLengthToStringLazy()(value);
  } else {
    return value + "";
  }
}

function propertyFilter(_a) {
  var name = _a[0],
      value = _a[1];

  if (name[0] === "_") {
    return false;
  }

  if (value !== null && typeof value === "object") {
    return false;
  }

  if (propertyBlacklist.indexOf(name) >= 0) {
    return false;
  }

  return true;
}

function registerNode(domNode) {
  registeredDomNodes[domNode.nodeId] = domNode;
}

function unregisterNode(domNode) {
  delete registeredDomNodes[domNode.nodeId];
}

function getNodeById(id) {
  return registeredDomNodes[id];
}

exports.getNodeById = getNodeById;

var DOMNode = function () {
  function DOMNode(view) {
    this.nodeValue = "";
    this.attributes = [];
    this.viewRef = new WeakRef(view);
    this.nodeType = view.typeName === "Frame" ? ROOT_NODE_TYPE : ELEMENT_NODE_TYPE;
    this.nodeId = view._domId;
    this.nodeName = view.typeName;
    this.localName = this.nodeName;
    this.loadAttributes();
    registerNode(this);
  }

  DOMNode.prototype.loadAttributes = function () {
    var _this = this;

    this.attributes = [];
    getSetPropertiesLazy()(this.viewRef.get()).filter(propertyFilter).forEach(function (pair) {
      return _this.attributes.push(pair[0], pair[1] + "");
    });
  };

  Object.defineProperty(DOMNode.prototype, "children", {
    get: function () {
      var view = this.viewRef.get();

      if (!view) {
        return [];
      }

      var res = [];
      view.eachChild(function (child) {
        child.ensureDomNode();
        res.push(child.domNode);
        return true;
      });
      return res;
    },
    enumerable: true,
    configurable: true
  });

  DOMNode.prototype.onChildAdded = function (childView) {
    var _this = this;

    notifyInspector(function (ins) {
      var view = _this.viewRef.get();

      var previousChild;
      view.eachChild(function (child) {
        if (child === childView) {
          return false;
        }

        previousChild = child;
        return true;
      });
      var index = !!previousChild ? previousChild._domId : 0;
      childView.ensureDomNode();
      ins.childNodeInserted(_this.nodeId, index, childView.domNode);
    });
  };

  DOMNode.prototype.onChildRemoved = function (view) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.childNodeRemoved(_this.nodeId, view._domId);
    });
  };

  DOMNode.prototype.attributeModified = function (name, value) {
    var _this = this;

    notifyInspector(function (ins) {
      if (propertyBlacklist.indexOf(name) < 0) {
        ins.attributeModified(_this.nodeId, name, valueToString(value));
      }
    });
  };

  DOMNode.prototype.attributeRemoved = function (name) {
    var _this = this;

    notifyInspector(function (ins) {
      ins.attributeRemoved(_this.nodeId, name);
    });
  };

  DOMNode.prototype.getComputedProperties = function () {
    var view = this.viewRef.get();

    if (!view) {
      return [];
    }

    var result = getComputedCssValuesLazy()(view).filter(function (pair) {
      return pair[0][0] !== "_";
    }).map(function (pair) {
      return {
        name: pair[0],
        value: valueToString(pair[1])
      };
    });
    return result;
  };

  DOMNode.prototype.dispose = function () {
    unregisterNode(this);
    this.viewRef.clear();
  };

  DOMNode.prototype.toObject = function () {
    return {
      nodeId: this.nodeId,
      nodeType: this.nodeType,
      nodeName: this.nodeName,
      localName: this.localName,
      nodeValue: this.nodeValue,
      children: this.children.map(function (c) {
        return c.toObject();
      }),
      attributes: this.attributes,
      backendNodeId: 0
    };
  };

  return DOMNode;
}();

exports.DOMNode = DOMNode;

/***/ }),

/***/ "../node_modules/tns-core-modules/fetch/fetch.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {(function () {
  'use strict';

  exports.XMLHttpRequest = global.XMLHttpRequest;
  exports.FormData = global.FormData;

  if (!exports.XMLHttpRequest) {
    var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

    exports.XMLHttpRequest = xhr.XMLHttpRequest;
    exports.FormData = xhr.FormData;
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = name.toString();
    }

    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }

    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = value.toString();
    }

    return value;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];

    if (!list) {
      list = [];
      this.map[name] = list;
    }

    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }

    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };

      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    reader.readAsArrayBuffer(blob);
    return fileReaderReady(reader);
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    reader.readAsText(blob);
    return fileReaderReady(reader);
  }

  var support = {
    blob: 'FileReader' in exports && 'Blob' in exports && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in exports
  };

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;

      if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (!body) {
        this._bodyText = '';
      } else {
        throw new Error('unsupported BodyInit type');
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        return this.blob().then(readBlobAsArrayBuffer);
      };

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };
    } else {
      this.text = function () {
        var rejected = consumed(this);
        return rejected ? rejected : Promise.resolve(this._bodyText);
      };
    }

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  } // HTTP methods whose capitalization should be normalized


  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(url, options) {
    options = options || {};
    this.url = url;
    this.credentials = options.credentials || 'omit';
    this.headers = new Headers(options.headers);
    this.method = normalizeMethod(options.method || 'GET');
    this.mode = options.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && options.body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }

    this._initBody(options.body);
  }

  function decode(body) {
    var form = new exports.FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function headers(xhr) {
    var head = new Headers();
    var pairs = xhr.getAllResponseHeaders().trim().split('\n');
    pairs.forEach(function (header) {
      var split = header.trim().split(':');
      var key = split.shift().trim();
      var value = split.join(':').trim();
      head.append(key, value);
    });
    return head;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this._initBody(bodyInit);

    this.type = 'default';
    this.url = null;
    this.status = options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText;
    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
    this.url = options.url || '';
  }

  Body.call(Response.prototype);
  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;

  exports.fetch = function (input, init) {
    // TODO: Request constructor should accept input, init
    var request;

    if (Request.prototype.isPrototypeOf(input) && !init) {
      request = input;
    } else {
      request = new Request(input, init);
    }

    return new Promise(function (resolve, reject) {
      var xhr = new exports.XMLHttpRequest();

      function responseURL() {
        if ('responseURL' in xhr) {
          return xhr.responseURL;
        } // Avoid security warnings on getResponseHeader when not allowed by CORS


        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
          return xhr.getResponseHeader('X-Request-URL');
        }

        return;
      }

      xhr.onload = function () {
        var status = xhr.status === 1223 ? 204 : xhr.status;

        if (status < 100 || status > 599) {
          reject(new TypeError('Network request failed'));
          return;
        }

        var options = {
          status: status,
          statusText: xhr.statusText,
          headers: headers(xhr),
          url: responseURL() //var body = 'response' in xhr ? xhr.response : xhr.responseText;

        };
        resolve(new Response(xhr.responseText, options));
      };

      xhr.onerror = function (error) {
        reject(new TypeError(['Network request failed:', error.message].join(' ')));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });
      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };

  exports.fetch.polyfill = true;
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var appCommonModule = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 10000;
var minWidthHeightQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_WH) === 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_WH.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualLength = Math.min(context.width, context.height);

    if (actualLength < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualLength - numVal);
  }
};
var minWidthQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_W.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualWidth = context.width;

    if (actualWidth < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualWidth - numVal);
  }
};
var minHeightQualifier = {
  isMatch: function (value) {
    return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
  },
  getMatchValue: function (value, context) {
    var numVal = parseInt(value.substr(MIN_H.length));

    if (isNaN(numVal)) {
      return -1;
    }

    var actualHeight = context.height;

    if (actualHeight < numVal) {
      return -1;
    }

    return PRIORITY_STEP - (actualHeight - numVal);
  }
};
var platformQualifier = {
  isMatch: function (value) {
    return value === "android" || value === "ios";
  },
  getMatchValue: function (value, context) {
    return value === context.os.toLowerCase() ? 1 : -1;
  }
};
var orientationQualifier = {
  isMatch: function (value) {
    return value === "land" || value === "port";
  },
  getMatchValue: function (value, context) {
    var isLandscape = context.width > context.height ? 1 : -1;
    return value === "land" ? isLandscape : -isLandscape;
  }
};
var supportedQualifiers = [minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier];

var FileNameResolver = function () {
  function FileNameResolver(context) {
    this._cache = {};
    this._context = context;
  }

  FileNameResolver.prototype.resolveFileName = function (path, ext) {
    var key = path + ext;
    var result = this._cache[key];

    if (result === undefined) {
      result = this.resolveFileNameImpl(path, ext);
      this._cache[key] = result;
    }

    return result;
  };

  FileNameResolver.prototype.clearCache = function () {
    this._cache = {};
  };

  FileNameResolver.prototype.resolveFileNameImpl = function (path, ext) {
    var result = null;
    path = file_system_1.path.normalize(path);
    ext = "." + ext;
    var candidates = this.getFileCandidatesFromFolder(path, ext);
    result = _findFileMatch(path, ext, candidates, this._context);
    return result;
  };

  FileNameResolver.prototype.getFileCandidatesFromFolder = function (path, ext) {
    var candidates = new Array();
    var folderPath = path.substring(0, path.lastIndexOf(file_system_1.path.separator) + 1);

    if (file_system_1.Folder.exists(folderPath)) {
      var folder = file_system_1.Folder.fromPath(folderPath);
      folder.eachEntity(function (e) {
        if (e instanceof file_system_1.File) {
          var file = e;

          if (file.path.indexOf(path) === 0 && file.extension === ext) {
            candidates.push(file.path);
          }
        }

        return true;
      });
    } else {
      if (trace.isEnabled()) {
        trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
      }
    }

    return candidates;
  };

  return FileNameResolver;
}();

exports.FileNameResolver = FileNameResolver;

function _findFileMatch(path, ext, candidates, context) {
  var bestValue = -1;
  var result = null;

  for (var i = 0; i < candidates.length; i++) {
    var filePath = candidates[i];
    var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
    var qualifiers = qualifiersStr.split(".");
    var value = checkQualifiers(qualifiers, context);

    if (value >= 0 && value > bestValue) {
      bestValue = value;
      result = candidates[i];
    }
  }

  return result;
}

exports._findFileMatch = _findFileMatch;

function checkQualifiers(qualifiers, context) {
  var result = 0;

  for (var i = 0; i < qualifiers.length; i++) {
    if (qualifiers[i]) {
      var value = checkQualifier(qualifiers[i], context);

      if (value < 0) {
        return -1;
      }

      result += value;
    }
  }

  return result;
}

function checkQualifier(value, context) {
  for (var i = 0; i < supportedQualifiers.length; i++) {
    if (supportedQualifiers[i].isMatch(value)) {
      var result = supportedQualifiers[i].getMatchValue(value, context);

      if (result > 0) {
        result += (supportedQualifiers.length - i) * PRIORITY_STEP;
      }

      return result;
    }
  }

  return -1;
}

var resolverInstance;

function resolveFileName(path, ext) {
  if (!resolverInstance) {
    resolverInstance = new FileNameResolver({
      width: platform_1.screen.mainScreen.widthDIPs,
      height: platform_1.screen.mainScreen.heightDIPs,
      os: platform_1.device.os,
      deviceType: platform_1.device.deviceType
    });
  }

  return resolverInstance.resolveFileName(path, ext);
}

exports.resolveFileName = resolveFileName;
appCommonModule.on("cssChanged", function (args) {
  return resolverInstance = undefined;
});
appCommonModule.on("livesync", function (args) {
  return resolverInstance && resolverInstance.clearCache();
});

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system-access.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_1 = __webpack_require__("../node_modules/tns-core-modules/text/text.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var FileSystemAccess = function () {
  function FileSystemAccess() {}

  FileSystemAccess.prototype.getLastModified = function (path) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
    var attributes = fileManager.attributesOfItemAtPathError(path);

    if (attributes) {
      return attributes.objectForKey("NSFileModificationDate");
    } else {
      return new Date();
    }
  };

  FileSystemAccess.prototype.getFileSize = function (path) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
    var attributes = fileManager.attributesOfItemAtPathError(path);

    if (attributes) {
      return attributes.objectForKey("NSFileSize");
    } else {
      return 0;
    }
  };

  FileSystemAccess.prototype.getParent = function (path, onError) {
    try {
      var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
      var nsString = NSString.stringWithString(path);
      var parentPath = nsString.stringByDeletingLastPathComponent;
      var name_1 = fileManager.displayNameAtPath(parentPath);
      return {
        path: parentPath.toString(),
        name: name_1
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFile = function (path, onError) {
    try {
      var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
      var exists = fileManager.fileExistsAtPath(path);

      if (!exists) {
        var parentPath = this.getParent(path, onError).path;

        if (!fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(parentPath, true, null) || !fileManager.createFileAtPathContentsAttributes(path, null, null)) {
          if (onError) {
            onError(new Error("Failed to create file at path '" + path + "'"));
          }

          return undefined;
        }
      }

      var fileName = fileManager.displayNameAtPath(path);
      return {
        path: path,
        name: fileName,
        extension: this.getFileExtension(path)
      };
    } catch (exception) {
      if (onError) {
        onError(exception);
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getFolder = function (path, onError) {
    try {
      var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
      var exists = this.folderExists(path);

      if (!exists) {
        try {
          fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(path, true, null);
        } catch (ex) {
          if (onError) {
            onError(new Error("Failed to create folder at path '" + path + "': " + ex));
          }

          return undefined;
        }
      }

      var dirName = fileManager.displayNameAtPath(path);
      return {
        path: path,
        name: dirName
      };
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to create folder at path '" + path + "'"));
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.getExistingFolder = function (path, onError) {
    try {
      var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
      var exists = this.folderExists(path);

      if (exists) {
        var dirName = fileManager.displayNameAtPath(path);
        return {
          path: path,
          name: dirName
        };
      }

      return undefined;
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to get folder at path '" + path + "'"));
      }

      return undefined;
    }
  };

  FileSystemAccess.prototype.eachEntity = function (path, onEntity, onError) {
    if (!onEntity) {
      return;
    }

    this.enumEntities(path, onEntity, onError);
  };

  FileSystemAccess.prototype.getEntities = function (path, onError) {
    var fileInfos = new Array();

    var onEntity = function (entity) {
      fileInfos.push(entity);
      return true;
    };

    var errorOccurred;

    var localError = function (error) {
      if (onError) {
        onError(error);
      }

      errorOccurred = true;
    };

    this.enumEntities(path, onEntity, localError);

    if (!errorOccurred) {
      return fileInfos;
    }

    return null;
  };

  FileSystemAccess.prototype.fileExists = function (path) {
    var result = this.exists(path);
    return result.exists;
  };

  FileSystemAccess.prototype.folderExists = function (path) {
    var result = this.exists(path);
    return result.exists && result.isDirectory;
  };

  FileSystemAccess.prototype.exists = function (path) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
    var isDirectory = new interop.Reference(interop.types.bool, false);
    var exists = fileManager.fileExistsAtPathIsDirectory(path, isDirectory);
    return {
      exists: exists,
      isDirectory: isDirectory.value
    };
  };

  FileSystemAccess.prototype.concatPath = function (left, right) {
    return NSString.pathWithComponents([left, right]).toString();
  };

  FileSystemAccess.prototype.deleteFile = function (path, onError) {
    this.deleteEntity(path, onError);
  };

  FileSystemAccess.prototype.deleteFolder = function (path, onError) {
    this.deleteEntity(path, onError);
  };

  FileSystemAccess.prototype.emptyFolder = function (path, onError) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
    var entities = this.getEntities(path, onError);

    if (!entities) {
      return;
    }

    for (var i = 0; i < entities.length; i++) {
      try {
        fileManager.removeItemAtPathError(entities[i].path);
      } catch (ex) {
        if (onError) {
          onError(new Error("Failed to empty folder '" + path + "': " + ex));
        }

        return;
      }
    }
  };

  FileSystemAccess.prototype.rename = function (path, newPath, onError) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);

    try {
      fileManager.moveItemAtPathToPathError(path, newPath);
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to rename '" + path + "' to '" + newPath + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.getLogicalRootPath = function () {
    var mainBundlePath = utils_1.ios.getter(NSBundle, NSBundle.mainBundle).bundlePath;
    var resolvedPath = NSString.stringWithString(mainBundlePath).stringByResolvingSymlinksInPath;
    return resolvedPath;
  };

  FileSystemAccess.prototype.getDocumentsFolderPath = function () {
    return this.getKnownPath(9);
  };

  FileSystemAccess.prototype.getTempFolderPath = function () {
    return this.getKnownPath(13);
  };

  FileSystemAccess.prototype.getCurrentAppPath = function () {
    return utils_1.ios.getCurrentAppPath();
  };

  FileSystemAccess.prototype.readText = function (path, onError, encoding) {
    var actualEncoding = encoding || text_1.encoding.UTF_8;

    try {
      var nsString = NSString.stringWithContentsOfFileEncodingError(path, actualEncoding);
      return nsString.toString();
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to read file at path '" + path + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.read = function (path, onError) {
    try {
      return NSData.dataWithContentsOfFile(path);
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to read file at path '" + path + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.writeText = function (path, content, onError, encoding) {
    var nsString = NSString.stringWithString(content);
    var actualEncoding = encoding || text_1.encoding.UTF_8;

    try {
      nsString.writeToFileAtomicallyEncodingError(path, false, actualEncoding);
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to write to file '" + path + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.write = function (path, content, onError) {
    try {
      content.writeToFileAtomically(path, true);
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to write to file '" + path + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.getKnownPath = function (folderType) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
    var paths = fileManager.URLsForDirectoryInDomains(folderType, 1);
    var url = paths.objectAtIndex(0);
    return url.path;
  };

  FileSystemAccess.prototype.getFileExtension = function (path) {
    var dotIndex = path.lastIndexOf(".");

    if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
      return path.substring(dotIndex);
    }

    return "";
  };

  FileSystemAccess.prototype.deleteEntity = function (path, onError) {
    var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);

    try {
      fileManager.removeItemAtPathError(path);
    } catch (ex) {
      if (onError) {
        onError(new Error("Failed to delete file at path '" + path + "': " + ex));
      }
    }
  };

  FileSystemAccess.prototype.enumEntities = function (path, callback, onError) {
    try {
      var fileManager = utils_1.ios.getter(NSFileManager, NSFileManager.defaultManager);
      var files = void 0;

      try {
        files = fileManager.contentsOfDirectoryAtPathError(path);
      } catch (ex) {
        if (onError) {
          onError(new Error("Failed to enum files for folder '" + path + "': " + ex));
        }

        return;
      }

      for (var i = 0; i < files.count; i++) {
        var file = files.objectAtIndex(i);
        var info = {
          path: this.concatPath(path, file),
          name: file,
          extension: ""
        };

        if (!this.folderExists(this.joinPath(path, file))) {
          info.extension = this.getFileExtension(info.path);
        }

        var retVal = callback(info);

        if (retVal === false) {
          break;
        }
      }
    } catch (ex) {
      if (onError) {
        onError(ex);
      }
    }
  };

  FileSystemAccess.prototype.getPathSeparator = function () {
    return "/";
  };

  FileSystemAccess.prototype.normalizePath = function (path) {
    var nsString = NSString.stringWithString(path);
    var normalized = nsString.stringByStandardizingPath;
    return normalized;
  };

  FileSystemAccess.prototype.joinPath = function (left, right) {
    var nsString = NSString.stringWithString(left);
    return nsString.stringByAppendingPathComponent(right);
  };

  FileSystemAccess.prototype.joinPaths = function (paths) {
    return utils_1.ios.joinPaths.apply(utils_1.ios, paths);
  };

  return FileSystemAccess;
}();

exports.FileSystemAccess = FileSystemAccess;

/***/ }),

/***/ "../node_modules/tns-core-modules/file-system/file-system.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_access_module = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system-access.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var fileAccess;

var getFileAccess = function () {
  if (!fileAccess) {
    fileAccess = new file_access_module.FileSystemAccess();
  }

  return fileAccess;
};

var platform;

function ensurePlatform() {
  if (!platform) {
    platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");
  }
}

var createFile = function (info) {
  var file = new File();
  file._path = info.path;
  file._name = info.name;
  file._extension = info.extension;
  return file;
};

var createFolder = function (info) {
  var documents = knownFolders.documents();

  if (info.path === documents.path) {
    return documents;
  }

  var temp = knownFolders.temp();

  if (info.path === temp.path) {
    return temp;
  }

  var folder = new Folder();
  folder._path = info.path;
  folder._name = info.name;
  return folder;
};

var FileSystemEntity = function () {
  function FileSystemEntity() {}

  Object.defineProperty(FileSystemEntity.prototype, "parent", {
    get: function () {
      var onError = function (error) {
        throw error;
      };

      var folderInfo = getFileAccess().getParent(this.path, onError);

      if (!folderInfo) {
        return undefined;
      }

      return createFolder(folderInfo);
    },
    enumerable: true,
    configurable: true
  });

  FileSystemEntity.prototype.remove = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.removeSync(localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.removeSync = function (onError) {
    if (this._isKnown) {
      if (onError) {
        onError({
          message: "Cannot delete known folder."
        });
      }

      return;
    }

    var fileAccess = getFileAccess();

    if (this instanceof File) {
      fileAccess.deleteFile(this.path, onError);
    } else if (this instanceof Folder) {
      fileAccess.deleteFolder(this.path, onError);
    }
  };

  FileSystemEntity.prototype.rename = function (newName) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.renameSync(newName, localError);

      if (!hasError) {
        resolve();
      }
    });
  };

  FileSystemEntity.prototype.renameSync = function (newName, onError) {
    if (this._isKnown) {
      if (onError) {
        onError(new Error("Cannot rename known folder."));
      }

      return;
    }

    var parentFolder = this.parent;

    if (!parentFolder) {
      if (onError) {
        onError(new Error("No parent folder."));
      }

      return;
    }

    var fileAccess = getFileAccess();
    var path = parentFolder.path;
    var newPath = fileAccess.joinPath(path, newName);

    var localError = function (error) {
      if (onError) {
        onError(error);
      }

      return null;
    };

    fileAccess.rename(this.path, newPath, localError);
    this._path = newPath;
    this._name = newName;

    if (this instanceof File) {
      this._extension = fileAccess.getFileExtension(newPath);
    }
  };

  Object.defineProperty(FileSystemEntity.prototype, "name", {
    get: function () {
      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "path", {
    get: function () {
      return this._path;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
    get: function () {
      var value = this._lastModified;

      if (!this._lastModified) {
        value = this._lastModified = getFileAccess().getLastModified(this.path);
      }

      return value;
    },
    enumerable: true,
    configurable: true
  });
  return FileSystemEntity;
}();

exports.FileSystemEntity = FileSystemEntity;

var File = function (_super) {
  __extends(File, _super);

  function File() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  File.fromPath = function (path) {
    var onError = function (error) {
      throw error;
    };

    var fileInfo = getFileAccess().getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  File.exists = function (path) {
    return getFileAccess().fileExists(path);
  };

  Object.defineProperty(File.prototype, "extension", {
    get: function () {
      return this._extension;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "isLocked", {
    get: function () {
      return !!this._locked;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(File.prototype, "size", {
    get: function () {
      return getFileAccess().getFileSize(this.path);
    },
    enumerable: true,
    configurable: true
  });

  File.prototype.readSync = function (onError) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function (error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().read(this.path, localError);
    this._locked = false;
    return content;
  };

  File.prototype.writeSync = function (content, onError) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function (error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().write(this.path, content, localError);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.readText = function (encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      var content = _this.readTextSync(localError, encoding);

      if (!hasError) {
        resolve(content);
      }
    });
  };

  File.prototype.readTextSync = function (onError, encoding) {
    this.checkAccess();
    this._locked = true;
    var that = this;

    var localError = function (error) {
      that._locked = false;

      if (onError) {
        onError(error);
      }
    };

    var content = getFileAccess().readText(this.path, localError, encoding);
    this._locked = false;
    return content;
  };

  File.prototype.writeText = function (content, encoding) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.writeTextSync(content, localError, encoding);

      if (!hasError) {
        resolve();
      }
    });
  };

  File.prototype.writeTextSync = function (content, onError, encoding) {
    this.checkAccess();

    try {
      this._locked = true;
      var that = this;

      var localError = function (error) {
        that._locked = false;

        if (onError) {
          onError(error);
        }
      };

      getFileAccess().writeText(this.path, content, localError, encoding);
    } finally {
      this._locked = false;
    }
  };

  File.prototype.checkAccess = function () {
    if (this.isLocked) {
      throw new Error("Cannot access a locked file.");
    }
  };

  __decorate([profiling_1.profile], File.prototype, "readTextSync", null);

  return File;
}(FileSystemEntity);

exports.File = File;

var Folder = function (_super) {
  __extends(Folder, _super);

  function Folder() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Folder.fromPath = function (path) {
    var onError = function (error) {
      throw error;
    };

    var folderInfo = getFileAccess().getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.exists = function (path) {
    return getFileAccess().folderExists(path);
  };

  Folder.prototype.contains = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    if (fileAccess.fileExists(path)) {
      return true;
    }

    return fileAccess.folderExists(path);
  };

  Folder.prototype.clear = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var onError = function (error) {
        hasError = true;
        reject(error);
      };

      _this.clearSync(onError);

      if (!hasError) {
        resolve();
      }
    });
  };

  Folder.prototype.clearSync = function (onError) {
    getFileAccess().emptyFolder(this.path, onError);
  };

  Object.defineProperty(Folder.prototype, "isKnown", {
    get: function () {
      return this._isKnown;
    },
    enumerable: true,
    configurable: true
  });

  Folder.prototype.getFile = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function (error) {
      throw error;
    };

    var fileInfo = fileAccess.getFile(path, onError);

    if (!fileInfo) {
      return undefined;
    }

    return createFile(fileInfo);
  };

  Folder.prototype.getFolder = function (name) {
    var fileAccess = getFileAccess();
    var path = fileAccess.joinPath(this.path, name);

    var onError = function (error) {
      throw error;
    };

    var folderInfo = fileAccess.getFolder(path, onError);

    if (!folderInfo) {
      return undefined;
    }

    return createFolder(folderInfo);
  };

  Folder.prototype.getEntities = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var hasError = false;

      var localError = function (error) {
        hasError = true;
        reject(error);
      };

      var entities = _this.getEntitiesSync(localError);

      if (!hasError) {
        resolve(entities);
      }
    });
  };

  Folder.prototype.getEntitiesSync = function (onError) {
    var fileInfos = getFileAccess().getEntities(this.path, onError);

    if (!fileInfos) {
      return null;
    }

    var entities = new Array();
    var i;

    for (i = 0; i < fileInfos.length; i++) {
      if (fileInfos[i].extension) {
        entities.push(createFile(fileInfos[i]));
      } else {
        entities.push(createFolder(fileInfos[i]));
      }
    }

    return entities;
  };

  Folder.prototype.eachEntity = function (onEntity) {
    if (!onEntity) {
      return;
    }

    var onSuccess = function (fileInfo) {
      var entity;

      if (fileInfo.extension) {
        entity = createFile(fileInfo);
      } else {
        entity = createFolder(fileInfo);
      }

      return onEntity(entity);
    };

    var onError = function (error) {
      throw error;
    };

    getFileAccess().eachEntity(this.path, onSuccess, onError);
  };

  return Folder;
}(FileSystemEntity);

exports.Folder = Folder;
var knownFolders;

(function (knownFolders) {
  var _documents;

  var _temp;

  var _app;

  knownFolders.documents = function () {
    if (!_documents) {
      var path = getFileAccess().getDocumentsFolderPath();
      _documents = new Folder();
      _documents._path = path;
      _documents._isKnown = true;
    }

    return _documents;
  };

  knownFolders.temp = function () {
    if (!_temp) {
      var path = getFileAccess().getTempFolderPath();
      _temp = new Folder();
      _temp._path = path;
      _temp._isKnown = true;
    }

    return _temp;
  };

  knownFolders.currentApp = function () {
    if (!_app) {
      var path = getFileAccess().getCurrentAppPath();
      _app = new Folder();
      _app._path = path;
      _app._isKnown = true;
    }

    return _app;
  };

  var ios;

  (function (ios) {
    function _checkPlatform(knownFolderName) {
      ensurePlatform();

      if (!platform.isIOS) {
        throw new Error("The \"" + knownFolderName + "\" known folder is available on iOS only!");
      }
    }

    var _library;

    ios.library = function () {
      _checkPlatform("library");

      if (!_library) {
        var existingFolderInfo = getExistingFolderInfo(5);

        if (existingFolderInfo) {
          _library = existingFolderInfo.folder;
          _library._path = existingFolderInfo.path;
          _library._isKnown = true;
        }
      }

      return _library;
    };

    var _developer;

    ios.developer = function () {
      _checkPlatform("developer");

      if (!_developer) {
        var existingFolderInfo = getExistingFolderInfo(6);

        if (existingFolderInfo) {
          _developer = existingFolderInfo.folder;
          _developer._path = existingFolderInfo.path;
          _developer._isKnown = true;
        }
      }

      return _developer;
    };

    var _desktop;

    ios.desktop = function () {
      _checkPlatform("desktop");

      if (!_desktop) {
        var existingFolderInfo = getExistingFolderInfo(12);

        if (existingFolderInfo) {
          _desktop = existingFolderInfo.folder;
          _desktop._path = existingFolderInfo.path;
          _desktop._isKnown = true;
        }
      }

      return _desktop;
    };

    var _downloads;

    ios.downloads = function () {
      _checkPlatform("downloads");

      if (!_downloads) {
        var existingFolderInfo = getExistingFolderInfo(15);

        if (existingFolderInfo) {
          _downloads = existingFolderInfo.folder;
          _downloads._path = existingFolderInfo.path;
          _downloads._isKnown = true;
        }
      }

      return _downloads;
    };

    var _movies;

    ios.movies = function () {
      _checkPlatform("movies");

      if (!_movies) {
        var existingFolderInfo = getExistingFolderInfo(17);

        if (existingFolderInfo) {
          _movies = existingFolderInfo.folder;
          _movies._path = existingFolderInfo.path;
          _movies._isKnown = true;
        }
      }

      return _movies;
    };

    var _music;

    ios.music = function () {
      _checkPlatform("music");

      if (!_music) {
        var existingFolderInfo = getExistingFolderInfo(18);

        if (existingFolderInfo) {
          _music = existingFolderInfo.folder;
          _music._path = existingFolderInfo.path;
          _music._isKnown = true;
        }
      }

      return _music;
    };

    var _pictures;

    ios.pictures = function () {
      _checkPlatform("pictures");

      if (!_pictures) {
        var existingFolderInfo = getExistingFolderInfo(19);

        if (existingFolderInfo) {
          _pictures = existingFolderInfo.folder;
          _pictures._path = existingFolderInfo.path;
          _pictures._isKnown = true;
        }
      }

      return _pictures;
    };

    var _sharedPublic;

    ios.sharedPublic = function () {
      _checkPlatform("sharedPublic");

      if (!_sharedPublic) {
        var existingFolderInfo = getExistingFolderInfo(21);

        if (existingFolderInfo) {
          _sharedPublic = existingFolderInfo.folder;
          _sharedPublic._path = existingFolderInfo.path;
          _sharedPublic._isKnown = true;
        }
      }

      return _sharedPublic;
    };

    function getExistingFolderInfo(pathDirectory) {
      var fileAccess = getFileAccess();
      var folderPath = fileAccess.getKnownPath(pathDirectory);
      var folderInfo = fileAccess.getExistingFolder(folderPath);

      if (folderInfo) {
        return {
          folder: createFolder(folderInfo),
          path: folderPath
        };
      }

      return undefined;
    }
  })(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));

var path;

(function (path_1) {
  function normalize(path) {
    return getFileAccess().normalizePath(path);
  }

  path_1.normalize = normalize;

  function join() {
    var paths = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      paths[_i] = arguments[_i];
    }

    var fileAccess = getFileAccess();
    return fileAccess.joinPaths(paths);
  }

  path_1.join = join;
  path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/globals.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__("../node_modules/tns-core-modules/globals/ts-helpers.js");

global.moduleMerge = function (sourceExports, destExports) {
  for (var key in sourceExports) {
    destExports[key] = sourceExports[key];
  }
};

var modules = new Map();
global.moduleResolvers = [global.require];

global.registerModule = function (name, loader) {
  modules.set(name, loader);
};

var defaultExtensionMap = {
  ".js": ".js",
  ".ts": ".js",
  ".css": ".css",
  ".scss": ".css",
  ".xml": ".xml",
  ".less": ".css",
  ".sass": ".css"
};

global.registerWebpackModules = function registerWebpackModules(context, extensionMap) {
  if (extensionMap === void 0) {
    extensionMap = {};
  }

  context.keys().forEach(function (key) {
    var extDotIndex = key.lastIndexOf(".");
    var base = key.substr(0, extDotIndex);
    var originalExt = key.substr(extDotIndex);
    var registerExt = extensionMap[originalExt] || defaultExtensionMap[originalExt] || originalExt;
    var isSourceFile = originalExt !== registerExt;
    var registerName = base + registerExt;

    if (registerName.startsWith("./") && registerName.endsWith(".js")) {
      var jsNickNames = [registerName.substr(2, registerName.length - 5), registerName.substr(0, registerName.length - 3), registerName.substr(2)];
      jsNickNames.forEach(function (jsNickName) {
        if (isSourceFile || !global.moduleExists(jsNickName)) {
          global.registerModule(jsNickName, function () {
            return context(key);
          });
        }
      });
    }

    if (isSourceFile || !global.moduleExists(registerName)) {
      global.registerModule(registerName, function () {
        return context(key);
      });
    }
  });
};

global.moduleExists = function (name) {
  return modules.has(name);
};

global.loadModule = function (name) {
  var loader = modules.get(name);

  if (loader) {
    return loader();
  }

  var _loop_1 = function (resolver) {
    var result = resolver(name);

    if (result) {
      modules.set(name, function () {
        return result;
      });
      return {
        value: result
      };
    }
  };

  for (var _i = 0, _a = global.moduleResolvers; _i < _a.length; _i++) {
    var resolver = _a[_i];

    var state_1 = _loop_1(resolver);

    if (typeof state_1 === "object") return state_1.value;
  }
};

global.zonedCallback = function (callback) {
  if (global.zone) {
    return global.zone.bind(callback);
  }

  if (global.Zone) {
    return global.Zone.current.wrap(callback);
  } else {
    return callback;
  }
};

global.registerModule("timer", function () {
  return __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");
});
global.registerModule("ui/dialogs", function () {
  return __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");
});
global.registerModule("xhr", function () {
  return __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");
});
global.registerModule("fetch", function () {
  return __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");
});
global.System = {
  import: function (path) {
    return new Promise(function (resolve, reject) {
      try {
        resolve(global.require(path));
      } catch (e) {
        reject(e);
      }
    });
  }
};

function registerOnGlobalContext(name, module) {
  Object.defineProperty(global, name, {
    get: function () {
      var m = global.loadModule(module);
      var resolvedValue = m[name];
      Object.defineProperty(this, name, {
        value: resolvedValue,
        configurable: true,
        writable: true
      });
      return resolvedValue;
    },
    configurable: true
  });
}

var snapshotGlobals;

function install() {
  if (global.__snapshot || global.__snapshotEnabled) {
    if (!snapshotGlobals) {
      var timer = __webpack_require__("../node_modules/tns-core-modules/timer/timer.js");

      var dialogs = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs.js");

      var xhr = __webpack_require__("../node_modules/tns-core-modules/xhr/xhr.js");

      var fetch = __webpack_require__("../node_modules/tns-core-modules/fetch/fetch.js");

      snapshotGlobals = snapshotGlobals || {
        setTimeout: timer.setTimeout,
        clearTimeout: timer.clearTimeout,
        setInterval: timer.setInterval,
        clearInterval: timer.clearInterval,
        alert: dialogs.alert,
        confirm: dialogs.confirm,
        prompt: dialogs.prompt,
        login: dialogs.login,
        action: dialogs.action,
        XMLHttpRequest: xhr.XMLHttpRequest,
        FormData: xhr.FormData,
        fetch: fetch.fetch,
        Headers: fetch.Headers,
        Request: fetch.Request,
        Response: fetch.Response
      };
    }

    var consoleModule = __webpack_require__("../node_modules/tns-core-modules/console/console.js").Console;

    global.console = global.console || new consoleModule();
    Object.assign(global, snapshotGlobals);
  } else {
    registerOnGlobalContext("setTimeout", "timer");
    registerOnGlobalContext("clearTimeout", "timer");
    registerOnGlobalContext("setInterval", "timer");
    registerOnGlobalContext("clearInterval", "timer");
    registerOnGlobalContext("alert", "ui/dialogs");
    registerOnGlobalContext("confirm", "ui/dialogs");
    registerOnGlobalContext("prompt", "ui/dialogs");
    registerOnGlobalContext("login", "ui/dialogs");
    registerOnGlobalContext("action", "ui/dialogs");
    registerOnGlobalContext("XMLHttpRequest", "xhr");
    registerOnGlobalContext("FormData", "xhr");
    registerOnGlobalContext("fetch", "fetch");
    registerOnGlobalContext("Headers", "fetch");
    registerOnGlobalContext("Request", "fetch");
    registerOnGlobalContext("Response", "fetch");
  }
}

exports.install = install;
install();

function Deprecated(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is deprecated");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is deprecated");
    return target;
  }
}

exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;

function Experimental(target, key, descriptor) {
  if (descriptor) {
    var originalMethod = descriptor.value;

    descriptor.value = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      console.log(key.toString() + " is experimental");
      return originalMethod.apply(this, args);
    };

    return descriptor;
  } else {
    console.log((target && target.name || target) + " is experimental");
    return target;
  }
}

exports.Experimental = Experimental;
global.Experimental = Experimental;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/globals/ts-helpers.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

if (!global.__extends) {
  global.__extends = function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) {
        d[p] = b[p];
      }
    }

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}

var tslib = __webpack_require__("../node_modules/tslib/tslib.es6.js");

for (var _i = 0, _a = Object.keys(tslib); _i < _a.length; _i++) {
  var fnName = _a[_i];

  if (typeof tslib[fnName] !== "function") {
    continue;
  }

  if (fnName in global) {
    continue;
  }

  global[fnName] = tslib[fnName];
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function getFilenameFromUrl(url) {
  var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

  var slashPos = url.lastIndexOf("/") + 1;
  var questionMarkPos = url.lastIndexOf("?");
  var actualFileName;

  if (questionMarkPos !== -1) {
    actualFileName = url.substring(slashPos, questionMarkPos);
  } else {
    actualFileName = url.substring(slashPos);
  }

  var result = fs.path.join(fs.knownFolders.documents().path, actualFileName);
  return result;
}

exports.getFilenameFromUrl = getFilenameFromUrl;

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http-request/http-request.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var domainDebugger = __webpack_require__("../node_modules/tns-core-modules/debugger/debugger.js");

var http_request_common_1 = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request-common.js");

var getter = utils.ios.getter;
var HttpResponseEncoding;

(function (HttpResponseEncoding) {
  HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
  HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));

var currentDevice = getter(UIDevice, UIDevice.currentDevice);
var device = currentDevice.userInterfaceIdiom === 0 ? "Phone" : "Pad";
var osVersion = currentDevice.systemVersion;
var GET = "GET";
var USER_AGENT_HEADER = "User-Agent";
var USER_AGENT = "Mozilla/5.0 (i" + device + "; CPU OS " + osVersion.replace(".", "_") + " like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/" + osVersion + " Mobile/10A5355d Safari/8536.25";
var sessionConfig = getter(NSURLSessionConfiguration, NSURLSessionConfiguration.defaultSessionConfiguration);
var queue = getter(NSOperationQueue, NSOperationQueue.mainQueue);

function parseJSON(source) {
  var src = source.trim();

  if (src.lastIndexOf(")") === src.length - 1) {
    return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
  }

  return JSON.parse(src);
}

var NSURLSessionTaskDelegateImpl = function (_super) {
  __extends(NSURLSessionTaskDelegateImpl, _super);

  function NSURLSessionTaskDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NSURLSessionTaskDelegateImpl.prototype.URLSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler = function (session, task, response, request, completionHandler) {
    completionHandler(null);
  };

  NSURLSessionTaskDelegateImpl.ObjCProtocols = [NSURLSessionTaskDelegate];
  return NSURLSessionTaskDelegateImpl;
}(NSObject);

var sessionTaskDelegateInstance = NSURLSessionTaskDelegateImpl.new();
var defaultSession;

function ensureDefaultSession() {
  if (!defaultSession) {
    defaultSession = NSURLSession.sessionWithConfigurationDelegateDelegateQueue(sessionConfig, null, queue);
  }
}

var sessionNotFollowingRedirects;

function ensureSessionNotFollowingRedirects() {
  if (!sessionNotFollowingRedirects) {
    sessionNotFollowingRedirects = NSURLSession.sessionWithConfigurationDelegateDelegateQueue(sessionConfig, sessionTaskDelegateInstance, queue);
  }
}

var imageSource;

function ensureImageSource() {
  if (!imageSource) {
    imageSource = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");
  }
}

var fs;

function ensureFileSystem() {
  if (!fs) {
    fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");
  }
}

function request(options) {
  return new Promise(function (resolve, reject) {
    if (!options.url) {
      reject(new Error("Request url was empty."));
      return;
    }

    try {
      var network = domainDebugger.getNetwork();
      var debugRequest_1 = network && network.create();
      var urlRequest = NSMutableURLRequest.requestWithURL(NSURL.URLWithString(options.url));
      urlRequest.HTTPMethod = types.isDefined(options.method) ? options.method : GET;
      urlRequest.setValueForHTTPHeaderField(USER_AGENT, USER_AGENT_HEADER);

      if (options.headers) {
        for (var header in options.headers) {
          urlRequest.setValueForHTTPHeaderField(options.headers[header] + "", header);
        }
      }

      if (types.isString(options.content) || options.content instanceof FormData) {
        urlRequest.HTTPBody = NSString.stringWithString(options.content.toString()).dataUsingEncoding(4);
      }

      if (types.isNumber(options.timeout)) {
        urlRequest.timeoutInterval = options.timeout / 1000;
      }

      var session = void 0;

      if (types.isBoolean(options.dontFollowRedirects) && options.dontFollowRedirects) {
        ensureSessionNotFollowingRedirects();
        session = sessionNotFollowingRedirects;
      } else {
        ensureDefaultSession();
        session = defaultSession;
      }

      var dataTask = session.dataTaskWithRequestCompletionHandler(urlRequest, function (data, response, error) {
        if (error) {
          reject(new Error(error.localizedDescription));
        } else {
          var headers_1 = {};

          if (response && response.allHeaderFields) {
            var headerFields = response.allHeaderFields;
            headerFields.enumerateKeysAndObjectsUsingBlock(function (key, value, stop) {
              addHeader(headers_1, key, value);
            });
          }

          if (debugRequest_1) {
            debugRequest_1.mimeType = response.MIMEType;
            debugRequest_1.data = data;
            var debugResponse = {
              url: options.url,
              status: response.statusCode,
              statusText: NSHTTPURLResponse.localizedStringForStatusCode(response.statusCode),
              headers: headers_1,
              mimeType: response.MIMEType,
              fromDiskCache: false
            };
            debugRequest_1.responseReceived(debugResponse);
            debugRequest_1.loadingFinished();
          }

          resolve({
            content: {
              raw: data,
              toString: function (encoding) {
                return NSDataToString(data, encoding);
              },
              toJSON: function (encoding) {
                return parseJSON(NSDataToString(data, encoding));
              },
              toImage: function () {
                ensureImageSource();
                return new Promise(function (resolve, reject) {
                  UIImage.tns_decodeImageWithDataCompletion(data, function (image) {
                    if (image) {
                      resolve(imageSource.fromNativeSource(image));
                    } else {
                      reject(new Error("Response content may not be converted to an Image"));
                    }
                  });
                });
              },
              toFile: function (destinationFilePath) {
                ensureFileSystem();

                if (!destinationFilePath) {
                  destinationFilePath = http_request_common_1.getFilenameFromUrl(options.url);
                }

                if (data instanceof NSData) {
                  var file = fs.File.fromPath(destinationFilePath);
                  data.writeToFileAtomically(destinationFilePath, true);
                  return file;
                } else {
                  reject(new Error("Cannot save file with path: " + destinationFilePath + "."));
                }
              }
            },
            statusCode: response.statusCode,
            headers: headers_1
          });
        }
      });

      if (options.url && debugRequest_1) {
        var request_1 = {
          url: options.url,
          method: "GET",
          headers: options.headers
        };
        debugRequest_1.requestWillBeSent(request_1);
      }

      dataTask.resume();
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.request = request;

function NSDataToString(data, encoding) {
  var code = 4;

  if (encoding === HttpResponseEncoding.GBK) {
    code = 1586;
  }

  return NSString.alloc().initWithDataEncoding(data, code).toString();
}

function addHeader(headers, key, value) {
  if (!headers[key]) {
    headers[key] = value;
  } else if (Array.isArray(headers[key])) {
    headers[key].push(value);
  } else {
    var values = [headers[key]];
    values.push(value);
    headers[key] = values;
  }
}

exports.addHeader = addHeader;

/***/ }),

/***/ "../node_modules/tns-core-modules/http/http.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var httpRequest = __webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js");

__export(__webpack_require__("../node_modules/tns-core-modules/http/http-request/http-request.js"));

function getString(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var str = r.content.toString();
        resolve(str);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getString = getString;

function getJSON(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var json = r.content.toJSON();
        resolve(json);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getJSON = getJSON;

function getImage(arg) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        resolve(r.content.toImage());
      } catch (err) {
        reject(err);
      }
    }, function (err) {
      reject(err);
    });
  });
}

exports.getImage = getImage;

function getFile(arg, destinationFilePath) {
  return new Promise(function (resolve, reject) {
    httpRequest.request(typeof arg === "string" ? {
      url: arg,
      method: "GET"
    } : arg).then(function (r) {
      try {
        var file = r.content.toFile(destinationFilePath);
        resolve(file);
      } catch (e) {
        reject(e);
      }
    }, function (e) {
      return reject(e);
    });
  });
}

exports.getFile = getFile;

/***/ }),

/***/ "../node_modules/tns-core-modules/image-asset/image-asset-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var ImageAsset = function (_super) {
  __extends(ImageAsset, _super);

  function ImageAsset() {
    var _this = _super.call(this) || this;

    _this._options = {
      keepAspectRatio: true,
      autoScaleFactor: true
    };
    return _this;
  }

  Object.defineProperty(ImageAsset.prototype, "options", {
    get: function () {
      return this._options;
    },
    set: function (value) {
      this._options = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageAsset.prototype, "nativeImage", {
    get: function () {
      return this._nativeImage;
    },
    set: function (value) {
      this._nativeImage = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageAsset.prototype.getImageAsync = function (callback) {};

  return ImageAsset;
}(observable.Observable);

exports.ImageAsset = ImageAsset;

function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
  var widthCoef = sourceWidth / reqWidth;
  var heightCoef = sourceHeight / reqHeight;
  var aspectCoef = Math.min(widthCoef, heightCoef);
  return {
    width: Math.floor(sourceWidth / aspectCoef),
    height: Math.floor(sourceHeight / aspectCoef)
  };
}

exports.getAspectSafeDimensions = getAspectSafeDimensions;

function getRequestedImageSize(src, options) {
  var screen = platform.screen.mainScreen;
  var reqWidth = options.width || Math.min(src.width, screen.widthPixels);
  var reqHeight = options.height || Math.min(src.height, screen.heightPixels);

  if (options && options.keepAspectRatio) {
    var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
    reqWidth = safeAspectSize.width;
    reqHeight = safeAspectSize.height;
  }

  return {
    width: reqWidth,
    height: reqHeight
  };
}

exports.getRequestedImageSize = getRequestedImageSize;

/***/ }),

/***/ "../node_modules/tns-core-modules/image-asset/image-asset.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var common = __webpack_require__("../node_modules/tns-core-modules/image-asset/image-asset-common.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

global.moduleMerge(common, exports);

var ImageAsset = function (_super) {
  __extends(ImageAsset, _super);

  function ImageAsset(asset) {
    var _this = _super.call(this) || this;

    if (typeof asset === "string") {
      if (asset.indexOf("~/") === 0) {
        asset = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, asset.replace("~/", ""));
      }

      _this.nativeImage = UIImage.imageWithContentsOfFile(asset);
    } else if (asset instanceof UIImage) {
      _this.nativeImage = asset;
    } else {
      _this.ios = asset;
    }

    return _this;
  }

  Object.defineProperty(ImageAsset.prototype, "ios", {
    get: function () {
      return this._ios;
    },
    set: function (value) {
      this._ios = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageAsset.prototype.getImageAsync = function (callback) {
    var _this = this;

    if (!this.ios && !this.nativeImage) {
      callback(null, "Asset cannot be found.");
    }

    var srcWidth = this.nativeImage ? this.nativeImage.size.width : this.ios.pixelWidth;
    var srcHeight = this.nativeImage ? this.nativeImage.size.height : this.ios.pixelHeight;
    var requestedSize = common.getRequestedImageSize({
      width: srcWidth,
      height: srcHeight
    }, this.options);

    if (this.nativeImage) {
      var newSize = CGSizeMake(requestedSize.width, requestedSize.height);
      var resizedImage = this.scaleImage(this.nativeImage, newSize);
      callback(resizedImage, null);
      return;
    }

    var imageRequestOptions = PHImageRequestOptions.alloc().init();
    imageRequestOptions.deliveryMode = 1;
    imageRequestOptions.networkAccessAllowed = true;
    PHImageManager.defaultManager().requestImageForAssetTargetSizeContentModeOptionsResultHandler(this.ios, requestedSize, 0, imageRequestOptions, function (image, imageResultInfo) {
      if (image) {
        var resultImage = _this.scaleImage(image, requestedSize);

        callback(resultImage, null);
      } else {
        callback(null, imageResultInfo.valueForKey(PHImageErrorKey));
      }
    });
  };

  ImageAsset.prototype.scaleImage = function (image, requestedSize) {
    var scaleFactor = this.options && this.options.autoScaleFactor === false ? 1.0 : 0.0;
    UIGraphicsBeginImageContextWithOptions(requestedSize, false, scaleFactor);
    image.drawInRect(CGRectMake(0, 0, requestedSize.width, requestedSize.height));
    var resultImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return resultImage;
  };

  return ImageAsset;
}(common.ImageAsset);

exports.ImageAsset = ImageAsset;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/image-source/image-source.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
var http;

function ensureHttp() {
  if (!http) {
    http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");
  }
}

var ImageSource = function () {
  function ImageSource() {}

  ImageSource.prototype.fromAsset = function (asset) {
    return new Promise(function (resolve, reject) {
      asset.getImageAsync(function (image, err) {
        if (image) {
          resolve(fromNativeSource(image));
        } else {
          reject(err);
        }
      });
    });
  };

  ImageSource.prototype.loadFromResource = function (name) {
    this.ios = UIImage.tns_safeImageNamed(name) || UIImage.tns_safeImageNamed(name + ".jpg");
    return this.ios != null;
  };

  ImageSource.prototype.fromResource = function (name) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        UIImage.tns_safeDecodeImageNamedCompletion(name, function (image) {
          if (image) {
            _this.ios = image;
            resolve(true);
          } else {
            UIImage.tns_safeDecodeImageNamedCompletion(name + ".jpg", function (image) {
              _this.ios = image;
              resolve(true);
            });
          }
        });
      } catch (ex) {
        reject(ex);
      }
    });
  };

  ImageSource.prototype.loadFromFile = function (path) {
    this.ios = UIImage.imageWithContentsOfFile(getFileName(path));
    return this.ios != null;
  };

  ImageSource.prototype.fromFile = function (path) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        UIImage.tns_decodeImageWidthContentsOfFileCompletion(getFileName(path), function (image) {
          _this.ios = image;
          resolve(true);
        });
      } catch (ex) {
        reject(ex);
      }
    });
  };

  ImageSource.prototype.loadFromData = function (data) {
    this.ios = UIImage.imageWithData(data);
    return this.ios != null;
  };

  ImageSource.prototype.fromData = function (data) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        UIImage.tns_decodeImageWithDataCompletion(data, function (image) {
          _this.ios = image;
          resolve(true);
        });
      } catch (ex) {
        reject(ex);
      }
    });
  };

  ImageSource.prototype.loadFromBase64 = function (source) {
    if (typeof source === "string") {
      var data = NSData.alloc().initWithBase64EncodedStringOptions(source, 1);
      this.ios = UIImage.imageWithData(data);
    }

    return this.ios != null;
  };

  ImageSource.prototype.fromBase64 = function (source) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      try {
        var data = NSData.alloc().initWithBase64EncodedStringOptions(source, 1);
        UIImage.imageWithData["async"](UIImage, [data]).then(function (image) {
          _this.ios = image;
          resolve(true);
        });
      } catch (ex) {
        reject(ex);
      }
    });
  };

  ImageSource.prototype.setNativeSource = function (source) {
    if (source && !(source instanceof UIImage)) {
      throw new Error("The method setNativeSource() expects UIImage instance.");
    }

    this.ios = source;
  };

  ImageSource.prototype.saveToFile = function (path, format, quality) {
    if (!this.ios) {
      return false;
    }

    if (quality) {
      quality = (quality - 0) / (100 - 0);
    }

    var data = getImageData(this.ios, format, quality);

    if (data) {
      return NSFileManager.defaultManager.createFileAtPathContentsAttributes(path, data, null);
    }

    return false;
  };

  ImageSource.prototype.toBase64String = function (format, quality) {
    var res = null;

    if (!this.ios) {
      return res;
    }

    if (quality) {
      quality = (quality - 0) / (100 - 0);
    }

    var data = getImageData(this.ios, format, quality);

    if (data) {
      res = data.base64Encoding();
    }

    return res;
  };

  Object.defineProperty(ImageSource.prototype, "height", {
    get: function () {
      if (this.ios) {
        return this.ios.size.height;
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "width", {
    get: function () {
      if (this.ios) {
        return this.ios.size.width;
      }

      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ImageSource.prototype, "rotationAngle", {
    get: function () {
      return NaN;
    },
    enumerable: true,
    configurable: true
  });
  return ImageSource;
}();

exports.ImageSource = ImageSource;

function getFileName(path) {
  var fileName = typeof path === "string" ? path.trim() : "";

  if (fileName.indexOf("~/") === 0) {
    fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
  }

  return fileName;
}

function getImageData(instance, format, quality) {
  if (quality === void 0) {
    quality = 0.9;
  }

  var data = null;

  switch (format) {
    case "png":
      data = UIImagePNGRepresentation(instance);
      break;

    case "jpeg":
    case "jpg":
      data = UIImageJPEGRepresentation(instance, quality);
      break;
  }

  return data;
}

function fromAsset(asset) {
  var image = new ImageSource();
  return image.fromAsset(asset);
}

exports.fromAsset = fromAsset;

function fromResource(name) {
  var image = new ImageSource();
  return image.loadFromResource(name) ? image : null;
}

exports.fromResource = fromResource;

function fromFile(path) {
  var image = new ImageSource();
  return image.loadFromFile(path) ? image : null;
}

exports.fromFile = fromFile;

function fromData(data) {
  var image = new ImageSource();
  return image.loadFromData(data) ? image : null;
}

exports.fromData = fromData;

function fromBase64(source) {
  var image = new ImageSource();
  return image.loadFromBase64(source) ? image : null;
}

exports.fromBase64 = fromBase64;

function fromNativeSource(source) {
  var imageSource = new ImageSource();
  imageSource.setNativeSource(source);
  return imageSource;
}

exports.fromNativeSource = fromNativeSource;

function fromUrl(url) {
  ensureHttp();
  return http.getImage(url);
}

exports.fromUrl = fromUrl;

function fromFileOrResource(path) {
  if (!utils_1.isFileOrResourcePath(path)) {
    throw new Error("Path \"" + "\" is not a valid file or resource.");
  }

  if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
    return fromResource(path.substr(utils_1.RESOURCE_PREFIX.length));
  }

  return fromFile(path);
}

exports.fromFileOrResource = fromFileOrResource;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/easysax/easysax.js":
/***/ (function(module, exports, __webpack_require__) {

/*
new function() {
	var parser = new EasySAXParser();
		parser.ns('rss', { // or false
		rss: 'http://purl.org/rss/1.0/',
		atom: 'http://www.w3.org/2005/Atom',
		xhtml: 'http://www.w3.org/1999/xhtml',
		media: 'http://search.yahoo.com/mrss/'
	});

	parser.on('error', function(msg) {
		//console.log(msg)
	});
		parser.on('startNode', function(elem, attr, uq, tagend, getStrNode) {
		attr();
		return;
		if (tagend) {
			console.log('   '+str)
		} else {
			console.log('+  '+str)
		};
	});
		parser.on('endNode', function(elem, uq, tagstart, str) {
		return;
		if (!tagstart) console.log('-  ' + str)
	});
		parser.on('textNode', function(s, uq) {
		uq(s);
		return
		console.log('   '+s)
	});
		parser.on('cdata', function(data) {
	});

	parser.on('comment', function(text) {
		//console.log('--'+text+'--')
	});
		//parser.on('question', function() {}); // <? ... ?>
	//parser.on('attention', function() {}); // <!XXXXX zzzz="eeee">
		console.time('easysax');
	for(var z=1000;z--;) {
		parser.parse(xml)
	};
	console.timeEnd('easysax');
};

*/
// << ------------------------------------------------------------------------ >> //
if (true
/*&& this == exports*/
) {
    module.exports.EasySAXParser = EasySAXParser;
  }

;

function EasySAXParser() {
  'use strict';

  if (!this) return null;
  this.angularSyntax = false;

  function nullFunc() {}

  ;
  this.onTextNode = nullFunc;
  this.onStartNode = nullFunc;
  this.onEndNode = nullFunc;
  this.onCDATA = nullFunc;
  this.onError = nullFunc;
  this.onComment = null;
  this.onQuestion = null;
  this.onAttention = null;
  this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
  this.isNamespace = false;
  this.useNS = null;
  this.default_xmlns = null;
  this.xmlns = null;
  this.nsmatrix = {
    xmlns: this.xmlns
  };
  this.hasSurmiseNS = false;
  ;
  this.attr_string = ''; // строка атрибутов

  this.attr_posstart = 0; //

  this.attr_res; // закешированный результат разбора атрибутов , null - разбор не проводился, object - хеш атрибутов, true - нет атрибутов, false - невалидный xml
}

EasySAXParser.prototype.on = function (name, cb) {
  if (typeof cb !== 'function') {
    if (cb !== null) return;
  }

  ;

  switch (name) {
    case 'error':
      this.onError = cb || nullFunc;
      break;

    case 'startNode':
      this.onStartNode = cb || nullFunc;
      break;

    case 'endNode':
      this.onEndNode = cb || nullFunc;
      break;

    case 'textNode':
      this.onTextNode = cb || nullFunc;
      break;

    case 'cdata':
      this.onCDATA = cb || nullFunc;
      break;

    case 'comment':
      this.onComment = cb;
      this.is_onComment = !!cb;
      break;

    case 'question':
      this.onQuestion = cb;
      this.is_onQuestion = !!cb;
      break;
    // <? ....  ?>

    case 'attention':
      this.onAttention = cb;
      this.is_onAttention = !!cb;
      break;
    // <!XXXXX zzzz="eeee">
  }

  ;
};

EasySAXParser.prototype.ns = function (root, ns) {
  if (!root || typeof root !== 'string' || !ns) {
    return;
  }

  ;
  var u,
      x = {},
      ok,
      v,
      i;

  for (i in ns) {
    v = ns[i];

    if (typeof v === 'string') {
      if (root === v) ok = true;
      x[i] = v;
    }

    ;
  }

  ;

  if (ok) {
    this.isNamespace = true;
    this.default_xmlns = root;
    this.useNS = x;
  }

  ;
};

EasySAXParser.prototype.parse = function (xml) {
  if (typeof xml !== 'string') {
    return;
  }

  ;

  if (this.isNamespace) {
    this.nsmatrix = {
      xmlns: this.default_xmlns
    };
    parse(xml);
    this.nsmatrix = false;
  } else {
    parse(xml);
  }

  ;
  this.attr_res = true;
}; // -----------------------------------------------------


var xharsQuot = {
  constructor: false,
  hasOwnProperty: false,
  isPrototypeOf: false,
  propertyIsEnumerable: false,
  toLocaleString: false,
  toString: false,
  valueOf: false,
  quot: '"',
  QUOT: '"',
  amp: '&',
  AMP: '&',
  nbsp: '\u00A0',
  apos: '\'',
  lt: '<',
  LT: '<',
  gt: '>',
  GT: '>',
  copy: '\u00A9',
  laquo: '\u00AB',
  raquo: '\u00BB',
  reg: '\u00AE',
  deg: '\u00B0',
  plusmn: '\u00B1',
  sup2: '\u00B2',
  sup3: '\u00B3',
  micro: '\u00B5',
  para: '\u00B6'
};

function rpEntities(s, d, x, z) {
  if (z) {
    return xharsQuot[z] || '\x01';
  }

  ;

  if (d) {
    return String.fromCharCode(d);
  }

  ;
  return String.fromCharCode(parseInt(x, 16));
}

;

function unEntities(s, i) {
  s = String(s);

  if (s.length > 3 && s.indexOf('&') !== -1) {
    if (s.indexOf('&gt;') !== -1) s = s.replace(/&gt;/g, '>');
    if (s.indexOf('&lt;') !== -1) s = s.replace(/&lt;/g, '<');
    if (s.indexOf('&quot;') !== -1) s = s.replace(/&quot;/g, '"');

    if (s.indexOf('&') !== -1) {
      s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig, rpEntities);
    }

    ;
  }

  ;
  return s;
}

;

EasySAXParser.prototype.allowedAngularAttributeChars = function (w) {
  if (!this.angularSyntax) {
    return false;
  } else {
    return w === 40 || // (
    w === 41 || // )
    w === 91 || // [
    w === 93 || // ]
    w === 94 || // ^
    w === 35 // #
    ;
  }
};
/*
	парсит атрибуты по требованию. Важно! - функция не генерирует исключения.
		если была ошибка разбора возврашается false
	если атрибутов нет и разбор удачен то возврашается true
	если есть атрибуты то возврашается обьект(хеш)
*/


EasySAXParser.prototype.getAttrs = function () {
  if (this.attr_res !== null) {
    return this.attr_res;
  }

  ;
  /*
  if (xxtest !== u && attr_string.indexOf(xxtest) === -1) {
      / *
          // для ускорения
          if (getAttrs('html').type == 'html') {
              ...
          };
      * /
      return true;
  };
  */

  var u,
      res = {},
      s = this.attr_string,
      i = this.attr_posstart,
      l = s.length,
      attr_list = this.hasSurmiseNS ? [] : false,
      name,
      value = '',
      ok = false,
      noValueAttribute = false,
      j,
      w,
      nn,
      n,
      hasNewMatrix,
      alias,
      newalias;

  aa: for (; i < l; i++) {
    w = s.charCodeAt(i);

    if (w === 32 || w < 14 && w > 8) {
      // \f\n\r\t\v
      continue;
    }

    ; // Check for valid attribute start char

    if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
      // ожидаем символ
      return this.attr_res = false; // error. invalid char
    }

    ;

    for (j = i + 1; j < l; j++) {
      // проверяем все символы имени атрибута
      w = s.charCodeAt(j);

      if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
      /* https://github.com/telerik/xPlatCore/issues/179 */
      ) {
          if (noValueAttribute) {
            j--; //Started next attribute. Get back and break out of the loop.

            break;
          } else {
            continue;
          }
        }

      ;

      if (this.allowedAngularAttributeChars(w)) {
        continue;
      }

      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        noValueAttribute = true;
        continue;
      } else if (w === 61) {
        // "=" == 61
        noValueAttribute = false;
        break;
      } else {
        //console.log('error 2');
        if (!noValueAttribute) return this.attr_res = false; // error. invalid char
      }

      ;
      break;
    }

    ;
    name = s.substring(i, j).trim();
    ok = true;

    if (name === 'xmlns:xmlns') {
      //console.log('error 6')
      return this.attr_res = false; // error. invalid name
    }

    ;
    w = s.charCodeAt(j + 1);

    while (w = s.charCodeAt(j + 1)) {
      if (w === 32 || w > 8 && w < 14) {
        // \f\n\r\t\v пробел
        j++;
      } else {
        break;
      }
    }

    if (!noValueAttribute) {
      if (w === 34) {
        // '"'
        j = s.indexOf('"', i = j + 2);
      } else {
        if (w === 39) {
          j = s.indexOf('\'', i = j + 2);
        } else {
          // "'"
          return this.attr_res = false; // error. invalid char
        }

        ;
      }

      ;
    }

    if (j === -1) {
      //console.log('error 4')
      return this.attr_res = false; // error. invalid char
    }

    ;

    if (j + 1 < l && !noValueAttribute) {
      w = s.charCodeAt(j + 1);

      if (w > 32 || w < 9 || w < 32 && w > 13) {
        // error. invalid char
        //console.log('error 5')
        return this.attr_res = false;
      }

      ;
    }

    ;

    if (noValueAttribute) {
      value = '';
    } else {
      value = s.substring(i, j);
    } //i = j + 1; // след. семвол уже проверен потому проверять нужно следуюший


    i = j; // след. семвол уже проверен потому проверять нужно следуюший

    if (this.isNamespace) {
      //
      if (this.hasSurmiseNS) {
        // есть подозрение что в атрибутах присутствует xmlns
        if (newalias = name === 'xmlns' ? 'xmlns' : name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:' && name.substr(6)) {
          alias = this.useNS[unEntities(value)];

          if (alias) {
            if (this.nsmatrix[newalias] !== alias) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = alias;
            }

            ;
          } else {
            if (this.nsmatrix[newalias]) {
              if (!hasNewMatrix) {
                hasNewMatrix = true;
                nn = {};

                for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];

                this.nsmatrix = nn;
              }

              ;
              this.nsmatrix[newalias] = false;
            }

            ;
          }

          ;
          res[name] = value;
          continue;
        }

        ;
        attr_list.push(name, value);
        continue;
      }

      ;
      w = name.length;

      while (--w) {
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = value;
          }

          ;
          continue aa; // 'xml:base' ???
        }

        ;
      }

      ;
    }

    ;
    res[name] = value;
    noValueAttribute = false;
  }

  ;

  if (!ok) {
    return this.attr_res = true; // атрибутов нет, ошибок тоже нет
  }

  ;

  if (this.hasSurmiseNS) {
    bb: for (i = 0, l = attr_list.length; i < l; i++) {
      name = attr_list[i++];
      w = name.length;

      while (--w) {
        // name.indexOf(':')
        if (name.charCodeAt(w) === 58) {
          // ':'
          if (w = this.nsmatrix[name.substring(0, w)]) {
            res[w + name.substr(w)] = attr_list[i];
          }

          ;
          continue bb;
          break;
        }

        ;
      }

      ;
      res[name] = attr_list[i];
    }

    ;
  }

  ;
  return this.attr_res = res;
}; // xml - string


EasySAXParser.prototype.parse = function (xml) {
  var u,
      xml = String(xml),
      nodestack = [],
      stacknsmatrix = [] //, string_node
  ,
      elem,
      tagend = false,
      tagstart = false,
      j = 0,
      i = 0,
      k = 0,
      len,
      x,
      y,
      q,
      w,
      xmlns,
      stopIndex = 0,
      stop // используется при разборе "namespace" . если встретился неизвестное пространство то события не генерируются
  ,
      _nsmatrix,
      ok,
      pos = 0,
      ln = 0,
      lnStart = -2,
      lnEnd = -1;

  len = xml.length;

  function getStringNode() {
    return xml.substring(i, j + 1);
  }

  ;

  function findLineAndColumnFromPos() {
    while (lnStart < lnEnd && lnEnd < pos) {
      lnStart = lnEnd;
      lnEnd = xml.indexOf("\n", lnEnd + 1);
      ++ln;
    }

    return {
      line: ln,
      column: pos - lnStart
    };
  }

  function position(p) {
    pos = p;
    return findLineAndColumnFromPos;
  }

  while (j !== -1) {
    stop = stopIndex > 0;

    if (xml.charCodeAt(j) === 60) {
      // "<"
      i = j;
    } else {
      i = xml.indexOf('<', j);
    }

    ;

    if (i === -1) {
      // конец разбора
      if (nodestack.length) {
        this.onError('end file', position(j));
        return;
      }

      ;
      return;
    }

    ;

    if (j !== i && !stop) {
      ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
      if (ok === false) return;
    }

    ;
    w = xml.charCodeAt(i + 1);

    if (w === 33) {
      // "!"
      w = xml.charCodeAt(i + 2);

      if (w === 91 && xml.substr(i + 3, 6) === 'CDATA[') {
        // 91 == "["
        j = xml.indexOf(']]>', i);

        if (j === -1) {
          this.onError('cdata', position(i));
          return;
        }

        ; //x = xml.substring(i+9, j);

        if (!stop) {
          ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;

      if (w === 45 && xml.charCodeAt(i + 3) === 45) {
        // 45 == "-"
        j = xml.indexOf('-->', i);

        if (j === -1) {
          this.onError('expected -->', position(i));
          return;
        }

        ;

        if (this.is_onComment && !stop) {
          ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
          if (ok === false) return;
        }

        ;
        j += 3;
        continue;
      }

      ;
      j = xml.indexOf('>', i + 1);

      if (j === -1) {
        this.onError('expected ">"', position(i + 1));
        return;
      }

      ;

      if (this.is_onAttention && !stop) {
        ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
        if (ok === false) return;
      }

      ;
      j += 1;
      continue;
    } else {
      if (w === 63) {
        // "?"
        j = xml.indexOf('?>', i);

        if (j === -1) {
          // error
          this.onError('...?>', position(i));
          return;
        }

        ;

        if (this.is_onQuestion) {
          ok = this.onQuestion(xml.substring(i, j + 2), position(i));
          if (ok === false) return;
        }

        ;
        j += 2;
        continue;
      }

      ;
    }

    ;
    var inside = false;

    for (k = i, j = -1; k < len; k++) {
      var c = xml.charCodeAt(k);

      if (!inside) {
        if (c === 34) {
          // '"'
          inside = c;
        } else if (c === 39) {
          // "'"
          inside = c;
        } else if (c === 62) {
          // <
          j = k;
          break;
        }
      } else {
        if (c === inside) {
          inside = false;
        }
      }
    }

    if (j == -1) {
      // error
      this.onError('...>', position(i + 1));
      return;
    }

    ;
    this.attr_res = true; // атрибутов нет
    //if (xml.charCodeAt(i+1) === 47) { // </...

    if (w === 47) {
      // </...
      tagstart = false;
      tagend = true; // проверяем что должен быть закрыт тотже тег что и открывался

      x = elem = nodestack.pop();
      q = i + 2 + x.length; //console.log()

      if (xml.substring(i + 2, q) !== x) {
        this.onError('close tagname', position(i + 2));
        return;
      }

      ; // проверим что в закрываюшем теге нет лишнего

      for (; q < j; q++) {
        w = xml.charCodeAt(q);

        if (w === 32 || w > 8 && w < 14) {
          // \f\n\r\t\v пробел
          continue;
        }

        ;
        this.onError('close tag', position(i + 2));
        return;
      }

      ;
    } else {
      if (xml.charCodeAt(j - 1) === 47) {
        // .../>
        x = elem = xml.substring(i + 1, j - 1);
        tagstart = true;
        tagend = true;
      } else {
        x = elem = xml.substring(i + 1, j);
        tagstart = true;
        tagend = false;
      }

      ;

      if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
        this.onError('first char nodeName', position(i + 1));
        return;
      }

      ;

      for (q = 1, y = x.length; q < y; q++) {
        w = x.charCodeAt(q);

        if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46
        /* https://github.com/telerik/xPlatCore/issues/179 */
        ) {
            continue;
          }

        ;

        if (w === 32 || w < 14 && w > 8) {
          // \f\n\r\t\v пробел
          elem = x.substring(0, q);
          this.attr_res = null; // возможно есть атирибуты

          break;
        }

        ;
        this.onError('invalid nodeName', position(i + 1));
        return;
      }

      ;

      if (!tagend) {
        nodestack.push(elem);
      }

      ;
    }

    ;

    if (this.isNamespace) {
      if (stop) {
        if (tagend) {
          if (!tagstart) {
            if (--stopIndex === 0) {
              this.nsmatrix = stacknsmatrix.pop();
            }

            ;
          }

          ;
        } else {
          stopIndex += 1;
        }

        ;
        j += 1;
        continue;
      }

      ;
      _nsmatrix = this.nsmatrix;

      if (!tagend) {
        stacknsmatrix.push(this.nsmatrix);

        if (this.attr_res !== true) {
          if (this.hasSurmiseNS = x.indexOf('xmlns', q) !== -1) {
            this.attr_string = x;
            this.attr_posstart = q;
            this.getAttrs();
            this.hasSurmiseNS = false;
          }

          ;
        }

        ;
      }

      ;
      w = elem.indexOf(':');

      if (w !== -1) {
        xmlns = this.nsmatrix[elem.substring(0, w)];
        elem = elem.substr(w + 1);
      } else {
        xmlns = this.nsmatrix.xmlns;
      }

      ;

      if (!xmlns) {
        if (tagend) {
          if (tagstart) {
            this.nsmatrix = _nsmatrix;
          } else {
            this.nsmatrix = stacknsmatrix.pop();
          }

          ;
        } else {
          stopIndex = 1; // первый элемент для которого не определено пространство имен

          this.attr_res = true;
        }

        ;
        j += 1;
        continue;
      }

      ;
      elem = xmlns + ':' + elem;
    }

    ; //string_node = xml.substring(i, j+1); // текст ноды как есть

    if (tagstart) {
      // is_onStartNode
      this.attr_string = x;
      this.attr_posstart = q;
      var that = this;
      ok = this.onStartNode(elem, function () {
        return that.getAttrs();
      }, unEntities, tagend, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;
      this.attr_res = true;
    }

    ;

    if (tagend) {
      ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));

      if (ok === false) {
        return;
      }

      ;

      if (this.isNamespace) {
        if (tagstart) {
          this.nsmatrix = _nsmatrix;
        } else {
          this.nsmatrix = stacknsmatrix.pop();
        }

        ;
      }

      ;
    }

    ;
    j += 1;
  }

  ;
};

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/esprima/esprima.js":
/***/ (function(module, exports) {

/*
  Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
(function (global) {
  'use strict';

  var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
  Token = {
    BooleanLiteral: 1,
    EOF: 2,
    Identifier: 3,
    Keyword: 4,
    NullLiteral: 5,
    NumericLiteral: 6,
    Punctuator: 7,
    StringLiteral: 8
  };
  TokenName = {};
  TokenName[Token.BooleanLiteral] = 'Boolean';
  TokenName[Token.EOF] = '<end>';
  TokenName[Token.Identifier] = 'Identifier';
  TokenName[Token.Keyword] = 'Keyword';
  TokenName[Token.NullLiteral] = 'Null';
  TokenName[Token.NumericLiteral] = 'Numeric';
  TokenName[Token.Punctuator] = 'Punctuator';
  TokenName[Token.StringLiteral] = 'String';
  Syntax = {
    ArrayExpression: 'ArrayExpression',
    BinaryExpression: 'BinaryExpression',
    CallExpression: 'CallExpression',
    ConditionalExpression: 'ConditionalExpression',
    EmptyStatement: 'EmptyStatement',
    ExpressionStatement: 'ExpressionStatement',
    Identifier: 'Identifier',
    Literal: 'Literal',
    LabeledStatement: 'LabeledStatement',
    LogicalExpression: 'LogicalExpression',
    MemberExpression: 'MemberExpression',
    ObjectExpression: 'ObjectExpression',
    Program: 'Program',
    Property: 'Property',
    ThisExpression: 'ThisExpression',
    UnaryExpression: 'UnaryExpression'
  }; // Error messages should be identical to V8.

  Messages = {
    UnexpectedToken: 'Unexpected token %0',
    UnknownLabel: 'Undefined label \'%0\'',
    Redeclaration: '%0 \'%1\' has already been declared'
  }; // Ensure the condition is true, otherwise throw an error.
  // This is only to have a better contract semantic, i.e. another safety net
  // to catch a logic error. The condition shall be fulfilled in normal case.
  // Do NOT use this to enforce a certain condition on any user input.

  function assert(condition, message) {
    if (!condition) {
      throw new Error('ASSERT: ' + message);
    }
  }

  function isDecimalDigit(ch) {
    return ch >= 48 && ch <= 57; // 0..9
  } // 7.2 White Space


  function isWhiteSpace(ch) {
    return ch === 32 || // space
    ch === 9 || // tab
    ch === 0xB || ch === 0xC || ch === 0xA0 || ch >= 0x1680 && '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) > 0;
  } // 7.3 Line Terminators


  function isLineTerminator(ch) {
    return ch === 10 || ch === 13 || ch === 0x2028 || ch === 0x2029;
  } // 7.6 Identifier Names and Identifiers


  function isIdentifierStart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122; // a..z
  }

  function isIdentifierPart(ch) {
    return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)
    ch >= 65 && ch <= 90 || // A..Z
    ch >= 97 && ch <= 122 || // a..z
    ch >= 48 && ch <= 57; // 0..9
  } // 7.6.1.1 Keywords


  function isKeyword(id) {
    return id === 'this';
  } // 7.4 Comments


  function skipWhitespace() {
    while (index < length && isWhiteSpace(source.charCodeAt(index))) {
      ++index;
    }
  }

  function getIdentifier() {
    var start, ch;
    start = index++;

    while (index < length) {
      ch = source.charCodeAt(index);

      if (isIdentifierPart(ch)) {
        ++index;
      } else {
        break;
      }
    }

    return source.slice(start, index);
  }

  function scanIdentifier() {
    var start, id, type;
    start = index;
    id = getIdentifier(); // There is no keyword or literal with only one character.
    // Thus, it must be an identifier.

    if (id.length === 1) {
      type = Token.Identifier;
    } else if (isKeyword(id)) {
      type = Token.Keyword;
    } else if (id === 'null') {
      type = Token.NullLiteral;
    } else if (id === 'true' || id === 'false') {
      type = Token.BooleanLiteral;
    } else {
      type = Token.Identifier;
    }

    return {
      type: type,
      value: id,
      range: [start, index]
    };
  } // 7.7 Punctuators


  function scanPunctuator() {
    var start = index,
        code = source.charCodeAt(index),
        code2,
        ch1 = source[index],
        ch2;

    switch (code) {
      // Check for most common single-character punctuators.
      case 46: // . dot

      case 40: // ( open bracket

      case 41: // ) close bracket

      case 59: // ; semicolon

      case 44: // , comma

      case 123: // { open curly brace

      case 125: // } close curly brace

      case 91: // [

      case 93: // ]

      case 58: // :

      case 63:
        // ?
        ++index;
        return {
          type: Token.Punctuator,
          value: String.fromCharCode(code),
          range: [start, index]
        };

      default:
        code2 = source.charCodeAt(index + 1); // '=' (char #61) marks an assignment or comparison operator.

        if (code2 === 61) {
          switch (code) {
            case 37: // %

            case 38: // &

            case 42: // *:

            case 43: // +

            case 45: // -

            case 47: // /

            case 60: // <

            case 62: // >

            case 124:
              // |
              index += 2;
              return {
                type: Token.Punctuator,
                value: String.fromCharCode(code) + String.fromCharCode(code2),
                range: [start, index]
              };

            case 33: // !

            case 61:
              // =
              index += 2; // !== and ===

              if (source.charCodeAt(index) === 61) {
                ++index;
              }

              return {
                type: Token.Punctuator,
                value: source.slice(start, index),
                range: [start, index]
              };

            default:
              break;
          }
        }

        break;
    } // Peek more characters.


    ch2 = source[index + 1]; // Other 2-character punctuators: && ||

    if (ch1 === ch2 && '&|'.indexOf(ch1) >= 0) {
      index += 2;
      return {
        type: Token.Punctuator,
        value: ch1 + ch2,
        range: [start, index]
      };
    }

    if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
      ++index;
      return {
        type: Token.Punctuator,
        value: ch1,
        range: [start, index]
      };
    }

    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
  } // 7.8.3 Numeric Literals


  function scanNumericLiteral() {
    var number, start, ch;
    ch = source[index];
    assert(isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');
    start = index;
    number = '';

    if (ch !== '.') {
      number = source[index++];
      ch = source[index]; // Hex number starts with '0x'.
      // Octal number starts with '0'.

      if (number === '0') {
        // decimal number starts with '0' such as '09' is illegal.
        if (ch && isDecimalDigit(ch.charCodeAt(0))) {
          throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
        }
      }

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === '.') {
      number += source[index++];

      while (isDecimalDigit(source.charCodeAt(index))) {
        number += source[index++];
      }

      ch = source[index];
    }

    if (ch === 'e' || ch === 'E') {
      number += source[index++];
      ch = source[index];

      if (ch === '+' || ch === '-') {
        number += source[index++];
      }

      if (isDecimalDigit(source.charCodeAt(index))) {
        while (isDecimalDigit(source.charCodeAt(index))) {
          number += source[index++];
        }
      } else {
        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
      }
    }

    if (isIdentifierStart(source.charCodeAt(index))) {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.NumericLiteral,
      value: parseFloat(number),
      range: [start, index]
    };
  } // 7.8.4 String Literals


  function scanStringLiteral() {
    var str = '',
        quote,
        start,
        ch,
        octal = false;
    quote = source[index];
    assert(quote === '\'' || quote === '"', 'String literal must starts with a quote');
    start = index;
    ++index;

    while (index < length) {
      ch = source[index++];

      if (ch === quote) {
        quote = '';
        break;
      } else if (ch === '\\') {
        ch = source[index++];

        if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
          switch (ch) {
            case 'n':
              str += '\n';
              break;

            case 'r':
              str += '\r';
              break;

            case 't':
              str += '\t';
              break;

            case 'b':
              str += '\b';
              break;

            case 'f':
              str += '\f';
              break;

            case 'v':
              str += '\x0B';
              break;

            default:
              str += ch;
              break;
          }
        } else {
          if (ch === '\r' && source[index] === '\n') {
            ++index;
          }
        }
      } else if (isLineTerminator(ch.charCodeAt(0))) {
        break;
      } else {
        str += ch;
      }
    }

    if (quote !== '') {
      throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
    }

    return {
      type: Token.StringLiteral,
      value: str,
      octal: octal,
      range: [start, index]
    };
  }

  function isIdentifierName(token) {
    return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
  }

  function advance() {
    var ch;
    skipWhitespace();

    if (index >= length) {
      return {
        type: Token.EOF,
        range: [index, index]
      };
    }

    ch = source.charCodeAt(index); // Very common: ( and ) and ;

    if (ch === 40 || ch === 41 || ch === 58) {
      return scanPunctuator();
    } // String literal starts with single quote (#39) or double quote (#34).


    if (ch === 39 || ch === 34) {
      return scanStringLiteral();
    }

    if (isIdentifierStart(ch)) {
      return scanIdentifier();
    } // Dot (.) char #46 can also start a floating-point number, hence the need
    // to check the next character.


    if (ch === 46) {
      if (isDecimalDigit(source.charCodeAt(index + 1))) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    if (isDecimalDigit(ch)) {
      return scanNumericLiteral();
    }

    return scanPunctuator();
  }

  function lex() {
    var token;
    token = lookahead;
    index = token.range[1];
    lookahead = advance();
    index = token.range[1];
    return token;
  }

  function peek() {
    var pos;
    pos = index;
    lookahead = advance();
    index = pos;
  } // Throw an exception


  function throwError(token, messageFormat) {
    var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(/%(\d)/g, function (whole, index) {
      assert(index < args.length, 'Message reference must be in range');
      return args[index];
    });
    error = new Error(msg);
    error.index = index;
    error.description = msg;
    throw error;
  } // Throw an exception because of the token.


  function throwUnexpected(token) {
    throwError(token, Messages.UnexpectedToken, token.value);
  } // Expect the next token to match the specified punctuator.
  // If not, an exception will be thrown.


  function expect(value) {
    var token = lex();

    if (token.type !== Token.Punctuator || token.value !== value) {
      throwUnexpected(token);
    }
  } // Return true if the next token matches the specified punctuator.


  function match(value) {
    return lookahead.type === Token.Punctuator && lookahead.value === value;
  } // Return true if the next token matches the specified keyword


  function matchKeyword(keyword) {
    return lookahead.type === Token.Keyword && lookahead.value === keyword;
  }

  function consumeSemicolon() {
    // Catch the very common case first: immediately a semicolon (char #59).
    if (source.charCodeAt(index) === 59) {
      lex();
      return;
    }

    skipWhitespace();

    if (match(';')) {
      lex();
      return;
    }

    if (lookahead.type !== Token.EOF && !match('}')) {
      throwUnexpected(lookahead);
    }
  } // 11.1.4 Array Initialiser


  function parseArrayInitialiser() {
    var elements = [];
    expect('[');

    while (!match(']')) {
      if (match(',')) {
        lex();
        elements.push(null);
      } else {
        elements.push(parseExpression());

        if (!match(']')) {
          expect(',');
        }
      }
    }

    expect(']');
    return delegate.createArrayExpression(elements);
  } // 11.1.5 Object Initialiser


  function parseObjectPropertyKey() {
    var token;
    skipWhitespace();
    token = lex(); // Note: This function is called only from parseObjectProperty(), where
    // EOF and Punctuator tokens are already filtered out.

    if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
      return delegate.createLiteral(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseObjectProperty() {
    var token, key;
    token = lookahead;
    skipWhitespace();

    if (token.type === Token.EOF || token.type === Token.Punctuator) {
      throwUnexpected(token);
    }

    key = parseObjectPropertyKey();
    expect(':');
    return delegate.createProperty('init', key, parseExpression());
  }

  function parseObjectInitialiser() {
    var properties = [];
    expect('{');

    while (!match('}')) {
      properties.push(parseObjectProperty());

      if (!match('}')) {
        expect(',');
      }
    }

    expect('}');
    return delegate.createObjectExpression(properties);
  } // 11.1.6 The Grouping Operator


  function parseGroupExpression() {
    var expr;
    expect('(');
    expr = parseExpression();
    expect(')');
    return expr;
  } // 11.1 Primary Expressions


  function parsePrimaryExpression() {
    var type, token, expr;

    if (match('(')) {
      return parseGroupExpression();
    }

    type = lookahead.type;

    if (type === Token.Identifier) {
      expr = delegate.createIdentifier(lex().value);
    } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
      expr = delegate.createLiteral(lex());
    } else if (type === Token.Keyword) {
      if (matchKeyword('this')) {
        lex();
        expr = delegate.createThisExpression();
      }
    } else if (type === Token.BooleanLiteral) {
      token = lex();
      token.value = token.value === 'true';
      expr = delegate.createLiteral(token);
    } else if (type === Token.NullLiteral) {
      token = lex();
      token.value = null;
      expr = delegate.createLiteral(token);
    } else if (match('[')) {
      expr = parseArrayInitialiser();
    } else if (match('{')) {
      expr = parseObjectInitialiser();
    }

    if (expr) {
      return expr;
    }

    throwUnexpected(lex());
  } // 11.2 Left-Hand-Side Expressions


  function parseArguments() {
    var args = [];
    expect('(');

    if (!match(')')) {
      while (index < length) {
        args.push(parseExpression());

        if (match(')')) {
          break;
        }

        expect(',');
      }
    }

    expect(')');
    return args;
  }

  function parseNonComputedProperty() {
    var token;
    token = lex();

    if (!isIdentifierName(token)) {
      throwUnexpected(token);
    }

    return delegate.createIdentifier(token.value);
  }

  function parseNonComputedMember() {
    expect('.');
    return parseNonComputedProperty();
  }

  function parseComputedMember() {
    var expr;
    expect('[');
    expr = parseExpression();
    expect(']');
    return expr;
  }

  function parseLeftHandSideExpression() {
    var expr, args, property;
    expr = parsePrimaryExpression();

    while (true) {
      if (match('[')) {
        property = parseComputedMember();
        expr = delegate.createMemberExpression('[', expr, property);
      } else if (match('.')) {
        property = parseNonComputedMember();
        expr = delegate.createMemberExpression('.', expr, property);
      } else if (match('(')) {
        args = parseArguments();
        expr = delegate.createCallExpression(expr, args);
      } else {
        break;
      }
    }

    return expr;
  } // 11.3 Postfix Expressions


  var parsePostfixExpression = parseLeftHandSideExpression; // 11.4 Unary Operators

  function parseUnaryExpression() {
    var token, expr;

    if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
      expr = parsePostfixExpression();
    } else if (match('+') || match('-') || match('!')) {
      token = lex();
      expr = parseUnaryExpression();
      expr = delegate.createUnaryExpression(token.value, expr);
    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
      throwError({}, Messages.UnexpectedToken);
    } else {
      expr = parsePostfixExpression();
    }

    return expr;
  }

  function binaryPrecedence(token) {
    var prec = 0;

    if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
      return 0;
    }

    switch (token.value) {
      case '||':
        prec = 1;
        break;

      case '&&':
        prec = 2;
        break;

      case '==':
      case '!=':
      case '===':
      case '!==':
        prec = 6;
        break;

      case '<':
      case '>':
      case '<=':
      case '>=':
      case 'instanceof':
        prec = 7;
        break;

      case 'in':
        prec = 7;
        break;

      case '+':
      case '-':
        prec = 9;
        break;

      case '*':
      case '/':
      case '%':
        prec = 11;
        break;

      default:
        break;
    }

    return prec;
  } // 11.5 Multiplicative Operators
  // 11.6 Additive Operators
  // 11.7 Bitwise Shift Operators
  // 11.8 Relational Operators
  // 11.9 Equality Operators
  // 11.10 Binary Bitwise Operators
  // 11.11 Binary Logical Operators


  function parseBinaryExpression() {
    var expr, token, prec, stack, right, operator, left, i;
    left = parseUnaryExpression();
    token = lookahead;
    prec = binaryPrecedence(token);

    if (prec === 0) {
      return left;
    }

    token.prec = prec;
    lex();
    right = parseUnaryExpression();
    stack = [left, token, right];

    while ((prec = binaryPrecedence(lookahead)) > 0) {
      // Reduce: make a binary expression from the three topmost entries.
      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
        right = stack.pop();
        operator = stack.pop().value;
        left = stack.pop();
        expr = delegate.createBinaryExpression(operator, left, right);
        stack.push(expr);
      } // Shift.


      token = lex();
      token.prec = prec;
      stack.push(token);
      expr = parseUnaryExpression();
      stack.push(expr);
    } // Final reduce to clean-up the stack.


    i = stack.length - 1;
    expr = stack[i];

    while (i > 1) {
      expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
      i -= 2;
    }

    return expr;
  } // 11.12 Conditional Operator


  function parseConditionalExpression() {
    var expr, consequent, alternate;
    expr = parseBinaryExpression();

    if (match('?')) {
      lex();
      consequent = parseConditionalExpression();
      expect(':');
      alternate = parseConditionalExpression();
      expr = delegate.createConditionalExpression(expr, consequent, alternate);
    }

    return expr;
  } // Simplification since we do not support AssignmentExpression.


  var parseExpression = parseConditionalExpression; // Polymer Syntax extensions
  // Filter ::
  //   Identifier
  //   Identifier "(" ")"
  //   Identifier "(" FilterArguments ")"

  function parseFilter() {
    var identifier, args;
    identifier = lex();

    if (identifier.type !== Token.Identifier) {
      throwUnexpected(identifier);
    }

    args = match('(') ? parseArguments() : [];
    return delegate.createFilter(identifier.value, args);
  } // Filters ::
  //   "|" Filter
  //   Filters "|" Filter


  function parseFilters() {
    while (match('|')) {
      lex();
      parseFilter();
    }
  } // TopLevel ::
  //   LabelledExpressions
  //   AsExpression
  //   InExpression
  //   FilterExpression
  // AsExpression ::
  //   FilterExpression as Identifier
  // InExpression ::
  //   Identifier, Identifier in FilterExpression
  //   Identifier in FilterExpression
  // FilterExpression ::
  //   Expression
  //   Expression Filters


  function parseTopLevel() {
    skipWhitespace();
    peek();
    var expr = parseExpression();

    if (expr) {
      if (lookahead.value === ',' || lookahead.value == 'in' && expr.type === Syntax.Identifier) {
        parseInExpression(expr);
      } else {
        parseFilters();

        if (lookahead.value === 'as') {
          parseAsExpression(expr);
        } else {
          delegate.createTopLevel(expr);
        }
      }
    }

    if (lookahead.type !== Token.EOF) {
      throwUnexpected(lookahead);
    }
  }

  function parseAsExpression(expr) {
    lex(); // as

    var identifier = lex().value;
    delegate.createAsExpression(expr, identifier);
  }

  function parseInExpression(identifier) {
    var indexName;

    if (lookahead.value === ',') {
      lex();
      if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
      indexName = lex().value;
    }

    lex(); // in

    var expr = parseExpression();
    parseFilters();
    delegate.createInExpression(identifier.name, indexName, expr);
  }

  function parse(code, inDelegate) {
    delegate = inDelegate;
    source = code;
    index = 0;
    length = source.length;
    lookahead = null;
    state = {
      labelSet: {}
    };
    return parseTopLevel();
  }

  global.esprima = {
    parse: parse
  };
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */


function detectEval() {
  // Don't test for eval if we're running in a Chrome App environment.
  // We check for APIs set that only exist in a Chrome App context.
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
    return false;
  } // Firefox OS Apps do not allow eval. This feature detection is very hacky
  // but even if some other platform adds support for this function this code
  // will continue to work.


  if (typeof navigator != 'undefined' && navigator.getDeviceStorage) {
    return false;
  }

  try {
    var f = new Function('', 'return true;');
    return f();
  } catch (ex) {
    return false;
  }
}

var hasEval = detectEval();

function isIndex(s) {
  return +s === s >>> 0 && s !== '';
}

function toNumber(s) {
  return +s;
}

function isObject(obj) {
  return obj === Object(obj);
}

var numberIsNaN = Number.isNaN || function (value) {
  return typeof value === 'number' && isNaN(value);
};

function areSameValue(left, right) {
  if (left === right) return left !== 0 || 1 / left === 1 / right;
  if (numberIsNaN(left) && numberIsNaN(right)) return true;
  return left !== left && right !== right;
}

var createObject = '__proto__' in {} ? function (obj) {
  return obj;
} : function (obj) {
  var proto = obj.__proto__;
  if (!proto) return obj;
  var newObject = Object.create(proto);
  Object.getOwnPropertyNames(obj).forEach(function (name) {
    Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
  });
  return newObject;
};
var identStart = '[\$_a-zA-Z]';
var identPart = '[\$_a-zA-Z0-9]';
var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

function getPathCharType(char) {
  if (char === undefined) return 'eof';
  var code = char.charCodeAt(0);

  switch (code) {
    case 0x5B: // [

    case 0x5D: // ]

    case 0x2E: // .

    case 0x22: // "

    case 0x27: // '

    case 0x30:
      // 0
      return char;

    case 0x5F: // _

    case 0x24:
      // $
      return 'ident';

    case 0x20: // Space

    case 0x09: // Tab

    case 0x0A: // Newline

    case 0x0D: // Return

    case 0xA0: // No-break space

    case 0xFEFF: // Byte Order Mark

    case 0x2028: // Line Separator

    case 0x2029:
      // Paragraph Separator
      return 'ws';
  } // a-z, A-Z


  if (0x61 <= code && code <= 0x7A || 0x41 <= code && code <= 0x5A) return 'ident'; // 1-9

  if (0x31 <= code && code <= 0x39) return 'number';
  return 'else';
}

var pathStateMachine = {
  'beforePath': {
    'ws': ['beforePath'],
    'ident': ['inIdent', 'append'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'inPath': {
    'ws': ['inPath'],
    '.': ['beforeIdent'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },
  'beforeIdent': {
    'ws': ['beforeIdent'],
    'ident': ['inIdent', 'append']
  },
  'inIdent': {
    'ident': ['inIdent', 'append'],
    '0': ['inIdent', 'append'],
    'number': ['inIdent', 'append'],
    'ws': ['inPath', 'push'],
    '.': ['beforeIdent', 'push'],
    '[': ['beforeElement', 'push'],
    'eof': ['afterPath', 'push']
  },
  'beforeElement': {
    'ws': ['beforeElement'],
    '0': ['afterZero', 'append'],
    'number': ['inIndex', 'append'],
    "'": ['inSingleQuote', 'append', ''],
    '"': ['inDoubleQuote', 'append', '']
  },
  'afterZero': {
    'ws': ['afterElement', 'push'],
    ']': ['inPath', 'push']
  },
  'inIndex': {
    '0': ['inIndex', 'append'],
    'number': ['inIndex', 'append'],
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  },
  'inSingleQuote': {
    "'": ['afterElement'],
    'eof': ['error'],
    'else': ['inSingleQuote', 'append']
  },
  'inDoubleQuote': {
    '"': ['afterElement'],
    'eof': ['error'],
    'else': ['inDoubleQuote', 'append']
  },
  'afterElement': {
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  }
};

function noop() {}

function parsePath(path) {
  var keys = [];
  var index = -1;
  var c,
      newChar,
      key,
      type,
      transition,
      action,
      typeMap,
      mode = 'beforePath';
  var actions = {
    push: function () {
      if (key === undefined) return;
      keys.push(key);
      key = undefined;
    },
    append: function () {
      if (key === undefined) key = newChar;else key += newChar;
    }
  };

  function maybeUnescapeQuote() {
    if (index >= path.length) return;
    var nextChar = path[index + 1];

    if (mode == 'inSingleQuote' && nextChar == "'" || mode == 'inDoubleQuote' && nextChar == '"') {
      index++;
      newChar = nextChar;
      actions.append();
      return true;
    }
  }

  while (mode) {
    index++;
    c = path[index];
    if (c == '\\' && maybeUnescapeQuote(mode)) continue;
    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || 'error';
    if (transition == 'error') return; // parse error;

    mode = transition[0];
    action = actions[transition[1]] || noop;
    newChar = transition[2] === undefined ? c : transition[2];
    action();

    if (mode === 'afterPath') {
      return keys;
    }
  }

  return; // parse error
}

function isIdent(s) {
  return identRegExp.test(s);
}

var constructorIsPrivate = {};

function Path(parts, privateToken) {
  if (privateToken !== constructorIsPrivate) throw Error('Use Path.get to retrieve path objects');

  for (var i = 0; i < parts.length; i++) {
    this.push(String(parts[i]));
  }

  if (hasEval && this.length) {
    this.getValueFrom = this.compiledGetValueFromFn();
  }
} // TODO(rafaelw): Make simple LRU cache


var pathCache = {};

function getPath(pathString) {
  if (pathString instanceof Path) return pathString;
  if (pathString == null || pathString.length == 0) pathString = '';

  if (typeof pathString != 'string') {
    if (isIndex(pathString.length)) {
      // Constructed with array-like (pre-parsed) keys
      return new Path(pathString, constructorIsPrivate);
    }

    pathString = String(pathString);
  }

  var path = pathCache[pathString];
  if (path) return path;
  var parts = parsePath(pathString);
  if (!parts) return invalidPath;
  var path = new Path(parts, constructorIsPrivate);
  pathCache[pathString] = path;
  return path;
}

Path.get = getPath;

function formatAccessor(key) {
  if (isIndex(key)) {
    return '[' + key + ']';
  } else {
    return '["' + key.replace(/"/g, '\\"') + '"]';
  }
}

Path.prototype = createObject({
  __proto__: [],
  valid: true,
  toString: function () {
    var pathString = '';

    for (var i = 0; i < this.length; i++) {
      var key = this[i];

      if (isIdent(key)) {
        pathString += i ? '.' + key : key;
      } else {
        pathString += formatAccessor(key);
      }
    }

    return pathString;
  },
  getValueFrom: function (obj, directObserver) {
    for (var i = 0; i < this.length; i++) {
      if (obj == null) return;
      obj = obj[this[i]];
    }

    return obj;
  },
  iterateObjects: function (obj, observe) {
    for (var i = 0; i < this.length; i++) {
      if (i) obj = obj[this[i - 1]];
      if (!isObject(obj)) return;
      observe(obj, this[i]);
    }
  },
  compiledGetValueFromFn: function () {
    var str = '';
    var pathString = 'obj';
    str += 'if (obj != null';
    var i = 0;
    var key;

    for (; i < this.length - 1; i++) {
      key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);
      str += ' &&\n     ' + pathString + ' != null';
    }

    str += ')\n';
    var key = this[i];
    pathString += isIdent(key) ? '.' + key : formatAccessor(key);
    str += '  return ' + pathString + ';\nelse\n  return undefined;';
    return new Function('obj', str);
  },
  setValueFrom: function (obj, value) {
    if (!this.length) return false;

    for (var i = 0; i < this.length - 1; i++) {
      if (!isObject(obj)) return false;
      obj = obj[this[i]];
    }

    if (!isObject(obj)) return false;
    obj[this[i]] = value;
    return true;
  }
});
var invalidPath = new Path('', constructorIsPrivate);
invalidPath.valid = false;

invalidPath.getValueFrom = invalidPath.setValueFrom = function () {};

exports.Path = Path;

/***/ }),

/***/ "../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js":
/***/ (function(module, exports, __webpack_require__) {

// Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
// This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
// The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
// The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
// Code distributed by Google as part of the polymer project is also
// subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
var esprima = __webpack_require__("../node_modules/tns-core-modules/js-libs/esprima/esprima.js").esprima;

var Path = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/path-parser.js").Path;

(function (global) {
  'use strict'; // TODO(rafaelw): Implement simple LRU.

  var expressionParseCache = Object.create(null);

  function getExpression(expressionText) {
    var expression = expressionParseCache[expressionText];

    if (!expression) {
      var delegate = new ASTDelegate();
      esprima.parse(expressionText, delegate);
      expression = new Expression(delegate);
      expressionParseCache[expressionText] = expression;
    }

    return expression;
  }

  function Literal(value) {
    this.value = value;
    this.valueFn_ = undefined;
  }

  Literal.prototype = {
    valueFn: function () {
      if (!this.valueFn_) {
        var value = this.value;

        this.valueFn_ = function () {
          return value;
        };
      }

      return this.valueFn_;
    }
  };

  function IdentPath(name) {
    this.name = name;
    this.path = Path.get(name);
  }

  IdentPath.prototype = {
    valueFn: function () {
      if (!this.valueFn_) {
        var name = this.name;
        var path = this.path;

        this.valueFn_ = function (model, observer, changedModel) {
          if (observer) observer.addPath(model, path);

          if (changedModel) {
            var result = path.getValueFrom(changedModel);

            if (result !== undefined) {
              return result;
            }
          }

          return path.getValueFrom(model);
        };
      }

      return this.valueFn_;
    },
    setValue: function (model, newValue) {
      if (this.path.length == 1) {
        model = findScope(model, this.path[0]);
      }

      return this.path.setValueFrom(model, newValue);
    }
  };

  function MemberExpression(object, property, accessor) {
    this.computed = accessor == '[';
    this.dynamicDeps = typeof object == 'function' || object.dynamicDeps || this.computed && !(property instanceof Literal);
    this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
    this.object = this.simplePath ? object : getFn(object);
    this.property = !this.computed || this.simplePath ? property : getFn(property);
  }

  MemberExpression.prototype = {
    get fullPath() {
      if (!this.fullPath_) {
        var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [this.object.name];
        parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
        this.fullPath_ = Path.get(parts);
      }

      return this.fullPath_;
    },

    valueFn: function () {
      if (!this.valueFn_) {
        var object = this.object;

        if (this.simplePath) {
          var path = this.fullPath;

          this.valueFn_ = function (model, observer) {
            if (observer) observer.addPath(model, path);
            return path.getValueFrom(model);
          };
        } else if (!this.computed) {
          var path = Path.get(this.property.name);

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            if (observer) observer.addPath(context, path);
            return path.getValueFrom(context);
          };
        } else {
          // Computed property.
          var property = this.property;

          this.valueFn_ = function (model, observer, filterRegistry) {
            var context = object(model, observer, filterRegistry);
            var propName = property(model, observer, filterRegistry);
            if (observer) observer.addPath(context, [propName]);
            return context ? context[propName] : undefined;
          };
        }
      }

      return this.valueFn_;
    },
    setValue: function (model, newValue) {
      if (this.simplePath) {
        this.fullPath.setValueFrom(model, newValue);
        return newValue;
      }

      var object = this.object(model);
      var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
      return object[propName] = newValue;
    }
  };

  function Filter(name, args) {
    this.name = name;
    this.args = [];

    for (var i = 0; i < args.length; i++) {
      this.args[i] = getFn(args[i]);
    }
  }

  Filter.prototype = {
    transform: function (model, observer, filterRegistry, toModelDirection, initialArgs) {
      var fn = filterRegistry[this.name];
      var context = model;

      if (fn) {
        context = undefined;
      } else {
        fn = context[this.name];

        if (!fn) {
          console.error('Cannot find function or filter: ' + this.name);
          return;
        }
      } // If toModelDirection is falsey, then the "normal" (dom-bound) direction
      // is used. Otherwise, it looks for a 'toModel' property function on the
      // object.


      if (toModelDirection) {
        fn = fn.toModel;
      } else if (typeof fn.toView == 'function') {
        fn = fn.toView;
      }

      if (typeof fn != 'function') {
        console.error('Cannot find function or filter: ' + this.name);
        return;
      }

      var args = initialArgs || [];

      for (var i = 0; i < this.args.length; i++) {
        args.push(getFn(this.args[i])(model, observer, filterRegistry));
      }

      return fn.apply(context, args);
    }
  };

  function notImplemented() {
    throw Error('Not Implemented');
  }

  var unaryOperators = {
    '+': function (v) {
      return +v;
    },
    '-': function (v) {
      return -v;
    },
    '!': function (v) {
      return !v;
    }
  };
  var binaryOperators = {
    '+': function (l, r) {
      return l + r;
    },
    '-': function (l, r) {
      return l - r;
    },
    '*': function (l, r) {
      return l * r;
    },
    '/': function (l, r) {
      return l / r;
    },
    '%': function (l, r) {
      return l % r;
    },
    '<': function (l, r) {
      return l < r;
    },
    '>': function (l, r) {
      return l > r;
    },
    '<=': function (l, r) {
      return l <= r;
    },
    '>=': function (l, r) {
      return l >= r;
    },
    '==': function (l, r) {
      return l == r;
    },
    '!=': function (l, r) {
      return l != r;
    },
    '===': function (l, r) {
      return l === r;
    },
    '!==': function (l, r) {
      return l !== r;
    },
    '&&': function (l, r) {
      return l && r;
    },
    '||': function (l, r) {
      return l || r;
    }
  };

  function getFn(arg) {
    return typeof arg == 'function' ? arg : arg.valueFn();
  }

  function ASTDelegate() {
    this.expression = null;
    this.filters = [];
    this.deps = {};
    this.currentPath = undefined;
    this.scopeIdent = undefined;
    this.indexIdent = undefined;
    this.dynamicDeps = false;
  }

  ASTDelegate.prototype = {
    createUnaryExpression: function (op, argument) {
      if (!unaryOperators[op]) throw Error('Disallowed operator: ' + op);
      argument = getFn(argument);
      return function (model, observer, filterRegistry) {
        return unaryOperators[op](argument(model, observer, filterRegistry));
      };
    },
    createBinaryExpression: function (op, left, right) {
      if (!binaryOperators[op]) throw Error('Disallowed operator: ' + op);
      left = getFn(left);
      right = getFn(right);

      switch (op) {
        case '||':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
          };

        case '&&':
          this.dynamicDeps = true;
          return function (model, observer, filterRegistry) {
            return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
          };
      }

      return function (model, observer, filterRegistry) {
        return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
      };
    },
    createConditionalExpression: function (test, consequent, alternate) {
      test = getFn(test);
      consequent = getFn(consequent);
      alternate = getFn(alternate);
      this.dynamicDeps = true;
      return function (model, observer, filterRegistry) {
        return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
      };
    },
    createIdentifier: function (name) {
      var ident = new IdentPath(name);
      ident.type = 'Identifier';
      return ident;
    },
    createMemberExpression: function (accessor, object, property) {
      var ex = new MemberExpression(object, property, accessor);
      if (ex.dynamicDeps) this.dynamicDeps = true;
      return ex;
    },
    createCallExpression: function (expression, args) {
      if (!(expression instanceof IdentPath)) throw Error('Only identifier function invocations are allowed');
      var filter = new Filter(expression.name, args);
      return function (model, observer, filterRegistry) {
        return filter.transform(model, observer, filterRegistry, false);
      };
    },
    createLiteral: function (token) {
      return new Literal(token.value);
    },
    createArrayExpression: function (elements) {
      for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);

      return function (model, observer, filterRegistry) {
        var arr = [];

        for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));

        return arr;
      };
    },
    createProperty: function (kind, key, value) {
      return {
        key: key instanceof IdentPath ? key.name : key.value,
        value: value
      };
    },
    createObjectExpression: function (properties) {
      for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);

      return function (model, observer, filterRegistry) {
        var obj = {};

        for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);

        return obj;
      };
    },
    createFilter: function (name, args) {
      this.filters.push(new Filter(name, args));
    },
    createAsExpression: function (expression, scopeIdent) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
    },
    createInExpression: function (scopeIdent, indexIdent, expression) {
      this.expression = expression;
      this.scopeIdent = scopeIdent;
      this.indexIdent = indexIdent;
    },
    createTopLevel: function (expression) {
      this.expression = expression;
    },
    createThisExpression: notImplemented
  };

  function Expression(delegate) {
    this.scopeIdent = delegate.scopeIdent;
    this.indexIdent = delegate.indexIdent;
    if (!delegate.expression) throw Error('No expression found.');
    this.expression = delegate.expression;
    getFn(this.expression); // forces enumeration of path dependencies

    this.filters = delegate.filters;
    this.dynamicDeps = delegate.dynamicDeps;
  }

  Expression.prototype = {
    getValue: function (model, isBackConvert, changedModel, observer) {
      var value = getFn(this.expression)(model.context, observer, changedModel);

      for (var i = 0; i < this.filters.length; i++) {
        value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [value]);
      }

      return value;
    },
    setValue: function (model, newValue, filterRegistry) {
      var count = this.filters ? this.filters.length : 0;

      while (count-- > 0) {
        newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [newValue]);
      }

      if (this.expression.setValue) return this.expression.setValue(model, newValue);
    }
    /**
     * Converts a style property name to a css property name. For example:
     * "WebkitUserSelect" to "-webkit-user-select"
     */

  };

  function convertStylePropertyName(name) {
    return String(name).replace(/[A-Z]/g, function (c) {
      return '-' + c.toLowerCase();
    });
  }

  var parentScopeName = '@' + Math.random().toString(36).slice(2); // Single ident paths must bind directly to the appropriate scope object.
  // I.e. Pushed values in two-bindings need to be assigned to the actual model
  // object.

  function findScope(model, prop) {
    while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
      model = model[parentScopeName];
    }

    return model;
  }

  function isLiteralExpression(pathString) {
    switch (pathString) {
      case '':
        return false;

      case 'false':
      case 'null':
      case 'true':
        return true;
    }

    if (!isNaN(Number(pathString))) return true;
    return false;
  }

  ;

  function PolymerExpressions() {}

  PolymerExpressions.prototype = {
    // "built-in" filters
    styleObject: function (value) {
      var parts = [];

      for (var key in value) {
        parts.push(convertStylePropertyName(key) + ': ' + value[key]);
      }

      return parts.join('; ');
    },
    tokenList: function (value) {
      var tokens = [];

      for (var key in value) {
        if (value[key]) tokens.push(key);
      }

      return tokens.join(' ');
    },
    // binding delegate API
    prepareInstancePositionChanged: function (template) {
      var indexIdent = template.polymerExpressionIndexIdent_;
      if (!indexIdent) return;
      return function (templateInstance, index) {
        templateInstance.model[indexIdent] = index;
      };
    },
    prepareInstanceModel: function (template) {
      var scopeName = template.polymerExpressionScopeIdent_;
      if (!scopeName) return;
      var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
      var indexName = template.polymerExpressionIndexIdent_;
      return function (model) {
        return createScopeObject(parentScope, model, scopeName, indexName);
      };
    }
  };
  var createScopeObject = '__proto__' in {} ? function (parentScope, model, scopeName, indexName) {
    var scope = {};
    scope[scopeName] = model;
    scope[indexName] = undefined;
    scope[parentScopeName] = parentScope;
    scope.__proto__ = parentScope;
    return scope;
  } : function (parentScope, model, scopeName, indexName) {
    var scope = Object.create(parentScope);
    Object.defineProperty(scope, scopeName, {
      value: model,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, indexName, {
      value: undefined,
      configurable: true,
      writable: true
    });
    Object.defineProperty(scope, parentScopeName, {
      value: parentScope,
      configurable: true,
      writable: true
    });
    return scope;
  };
  global.PolymerExpressions = PolymerExpressions;
  PolymerExpressions.getExpression = getExpression;
})(module.exports);

/***/ }),

/***/ "../node_modules/tns-core-modules/matrix/matrix.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

exports.getTransformMatrix = function (_a) {
  var property = _a.property,
      value = _a.value;
  return TRANSFORM_MATRIXES[property](value);
};

var TRANSFORM_MATRIXES = {
  "scale": function (_a) {
    var x = _a.x,
        y = _a.y;
    return [x, 0, 0, 0, y, 0, 0, 0, 1];
  },
  "translate": function (_a) {
    var x = _a.x,
        y = _a.y;
    return [1, 0, x, 0, 1, y, 0, 0, 1];
  },
  "rotate": function (angleInDeg) {
    var angleInRad = number_utils_1.degreesToRadians(angleInDeg);
    return [Math.cos(angleInRad), -Math.sin(angleInRad), 0, Math.sin(angleInRad), Math.cos(angleInRad), 0, 0, 0, 1];
  }
};

exports.matrixArrayToCssMatrix = function (m) {
  return [m[0], m[3], m[1], m[4], m[2], m[5]];
};

function multiplyAffine2d(m1, m2) {
  return [m1[0] * m2[0] + m1[1] * m2[3], m1[0] * m2[1] + m1[1] * m2[4], m1[0] * m2[2] + m1[1] * m2[5] + m1[2], m1[3] * m2[0] + m1[4] * m2[3], m1[3] * m2[1] + m1[4] * m2[4], m1[3] * m2[2] + m1[4] * m2[5] + m1[5]];
}

exports.multiplyAffine2d = multiplyAffine2d;

function decompose2DTransformMatrix(matrix) {
  verifyTransformMatrix(matrix);

  var _a = matrix.slice(),
      A = _a[0],
      B = _a[1],
      C = _a[2],
      D = _a[3],
      E = _a[4],
      F = _a[5];

  var determinant = A * D - B * C;
  var translate = {
    x: E || 0,
    y: F || 0
  };
  var rotate = 0;
  var scale = {
    x: 1,
    y: 1
  };

  if (A || B) {
    var R = Math.sqrt(A * A + B * B);
    rotate = B > 0 ? Math.acos(A / R) : -Math.acos(A / R);
    scale = {
      x: R,
      y: determinant / R
    };
  } else if (C || D) {
    var R = Math.sqrt(C * C + D * D);
    rotate = Math.PI / 2 - (D > 0 ? Math.acos(-C / R) : -Math.acos(C / R));
    scale = {
      x: determinant / R,
      y: R
    };
  }

  rotate = number_utils_1.radiansToDegrees(rotate);
  return {
    translate: translate,
    rotate: rotate,
    scale: scale
  };
}

exports.decompose2DTransformMatrix = decompose2DTransformMatrix;

function verifyTransformMatrix(matrix) {
  if (matrix.length < 6) {
    throw new Error("Transform matrix should be 2x3.");
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/platform/platform.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var platformNames;

(function (platformNames) {
  platformNames.android = "Android";
  platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));

var Device = function () {
  function Device() {}

  Object.defineProperty(Device.prototype, "manufacturer", {
    get: function () {
      return "Apple";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "os", {
    get: function () {
      return platformNames.ios;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "osVersion", {
    get: function () {
      if (!this._osVersion) {
        this._osVersion = utils.ios.getter(UIDevice, UIDevice.currentDevice).systemVersion;
      }

      return this._osVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "model", {
    get: function () {
      if (!this._model) {
        this._model = utils.ios.getter(UIDevice, UIDevice.currentDevice).model;
      }

      return this._model;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "sdkVersion", {
    get: function () {
      if (!this._sdkVersion) {
        this._sdkVersion = utils.ios.getter(UIDevice, UIDevice.currentDevice).systemVersion;
      }

      return this._sdkVersion;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "deviceType", {
    get: function () {
      if (!this._deviceType) {
        if (utils.ios.getter(UIDevice, UIDevice.currentDevice).userInterfaceIdiom === 0) {
          this._deviceType = "Phone";
        } else {
          this._deviceType = "Tablet";
        }
      }

      return this._deviceType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "uuid", {
    get: function () {
      var userDefaults = utils.ios.getter(NSUserDefaults, NSUserDefaults.standardUserDefaults);
      var uuid_key = "TNSUUID";
      var app_uuid = userDefaults.stringForKey(uuid_key);

      if (!app_uuid) {
        app_uuid = NSUUID.UUID().UUIDString;
        userDefaults.setObjectForKey(app_uuid, uuid_key);
        userDefaults.synchronize();
      }

      return app_uuid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "language", {
    get: function () {
      if (!this._language) {
        var languages = utils.ios.getter(NSLocale, NSLocale.preferredLanguages);
        this._language = languages[0];
      }

      return this._language;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Device.prototype, "region", {
    get: function () {
      if (!this._region) {
        this._region = utils.ios.getter(NSLocale, NSLocale.currentLocale).objectForKey(NSLocaleCountryCode);
      }

      return this._region;
    },
    enumerable: true,
    configurable: true
  });
  return Device;
}();

var MainScreen = function () {
  function MainScreen() {}

  Object.defineProperty(MainScreen.prototype, "screen", {
    get: function () {
      if (!this._screen) {
        this._screen = utils.ios.getter(UIScreen, UIScreen.mainScreen);
      }

      return this._screen;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthPixels", {
    get: function () {
      return this.widthDIPs * this.scale;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightPixels", {
    get: function () {
      return this.heightDIPs * this.scale;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "scale", {
    get: function () {
      return this.screen.scale;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "widthDIPs", {
    get: function () {
      return this.screen.bounds.size.width;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MainScreen.prototype, "heightDIPs", {
    get: function () {
      return this.screen.bounds.size.height;
    },
    enumerable: true,
    configurable: true
  });
  return MainScreen;
}();

exports.device = new Device();
var screen;

(function (screen) {
  screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));

exports.isIOS = true;

/***/ }),

/***/ "../node_modules/tns-core-modules/profiling/profiling.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

function uptime() {
  return global.android ? org.nativescript.Process.getUpTime() : global.__tns_uptime();
}

exports.uptime = uptime;

function log(message) {
  if (global.__nslog) {
    global.__nslog("CONSOLE LOG: " + message);
  }

  console.log(message);
}

exports.log = log;
var timers = {};
var anyGlobal = global;
var profileNames = [];
exports.time = global.__time || Date.now;

function start(name) {
  var info = timers[name];

  if (info) {
    info.currentStart = exports.time();
    info.runCount++;
  } else {
    info = {
      totalTime: 0,
      count: 0,
      currentStart: exports.time(),
      runCount: 1
    };
    timers[name] = info;
    profileNames.push(name);
  }
}

exports.start = start;

function stop(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  if (info.runCount) {
    info.runCount--;

    if (info.runCount) {
      info.count++;
    } else {
      info.lastTime = exports.time() - info.currentStart;
      info.totalTime += info.lastTime;
      info.count++;
      info.currentStart = 0;
    }
  } else {
    throw new Error("Timer " + name + " paused more times than started.");
  }

  return info;
}

exports.stop = stop;

function timer(name) {
  return timers[name];
}

exports.timer = timer;

function print(name) {
  var info = timers[name];

  if (!info) {
    throw new Error("No timer started: " + name);
  }

  console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
  return info;
}

exports.print = print;

function isRunning(name) {
  var info = timers[name];
  return !!(info && info.runCount);
}

exports.isRunning = isRunning;

function countersProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  profileNames.push(name);
  return function () {
    start(name);

    try {
      return fn.apply(this, arguments);
    } finally {
      stop(name);
    }
  };
}

function timelineProfileFunctionFactory(fn, name, type) {
  if (type === void 0) {
    type = 1;
  }

  return type === 1 ? function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + " " + this + "  (" + start + "ms. - " + end + "ms.)");
    }
  } : function () {
    var start = exports.time();

    try {
      return fn.apply(this, arguments);
    } finally {
      var end = exports.time();
      console.log("Timeline: Modules: " + name + "  (" + start + "ms. - " + end + "ms.)");
    }
  };
}

var Level;

(function (Level) {
  Level[Level["none"] = 0] = "none";
  Level[Level["lifecycle"] = 1] = "lifecycle";
  Level[Level["timeline"] = 2] = "timeline";
})(Level = exports.Level || (exports.Level = {}));

var tracingLevel = Level.none;
var profileFunctionFactory;

function enable(mode) {
  if (mode === void 0) {
    mode = "counters";
  }

  profileFunctionFactory = mode && {
    counters: countersProfileFunctionFactory,
    timeline: timelineProfileFunctionFactory
  }[mode];
  tracingLevel = {
    lifecycle: Level.lifecycle,
    timeline: Level.timeline
  }[mode] || Level.none;
}

exports.enable = enable;

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.profiling) {
    enable(appConfig.profiling);
  }
} catch (e1) {
  try {
    console.log("Profiling startup failed to figure out defaults from package.json, error: " + e1);
  } catch (e2) {}
}

function disable() {
  profileFunctionFactory = undefined;
}

exports.disable = disable;

function profileFunction(fn, customName) {
  return profileFunctionFactory(fn, customName || fn.name);
}

var profileMethodUnnamed = function (target, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(target, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (target && target.constructor && target.constructor.name) {
    className = target.constructor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 1);
  return descriptor;
};

var profileStaticMethodUnnamed = function (ctor, key, descriptor) {
  if (descriptor === undefined) {
    descriptor = Object.getOwnPropertyDescriptor(ctor, key);
  }

  var originalMethod = descriptor.value;
  var className = "";

  if (ctor && ctor.name) {
    className = ctor.name + ".";
  }

  var name = className + key;
  descriptor.value = profileFunctionFactory(originalMethod, name, 0);
  return descriptor;
};

function profileMethodNamed(name) {
  return function (target, key, descriptor) {
    if (descriptor === undefined) {
      descriptor = Object.getOwnPropertyDescriptor(target, key);
    }

    var originalMethod = descriptor.value;
    descriptor.value = profileFunctionFactory(originalMethod, name);
    return descriptor;
  };
}

var voidMethodDecorator = function () {};

function profile(nameFnOrTarget, fnOrKey, descriptor) {
  if (typeof nameFnOrTarget === "object" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "function" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
    if (!profileFunctionFactory) {
      return;
    }

    return profileStaticMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
  } else if (typeof nameFnOrTarget === "string" && typeof fnOrKey === "function") {
    if (!profileFunctionFactory) {
      return fnOrKey;
    }

    return profileFunction(fnOrKey, nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "function") {
    if (!profileFunctionFactory) {
      return nameFnOrTarget;
    }

    return profileFunction(nameFnOrTarget);
  } else if (typeof nameFnOrTarget === "string") {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodNamed(nameFnOrTarget);
  } else {
    if (!profileFunctionFactory) {
      return voidMethodDecorator;
    }

    return profileMethodUnnamed;
  }
}

exports.profile = profile;

function dumpProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
    } else {
      console.log("---- [" + name + "] Never called");
    }
  });
}

exports.dumpProfiles = dumpProfiles;

function resetProfiles() {
  profileNames.forEach(function (name) {
    var info = timers[name];

    if (info) {
      if (info.runCount) {
        console.log("---- timer with name [" + name + "] is currently running and won't be reset");
      } else {
        timers[name] = undefined;
      }
    }
  });
}

exports.resetProfiles = resetProfiles;

function startCPUProfile(name) {
  if (anyGlobal.android) {
    __startCPUProfiler(name);
  }
}

exports.startCPUProfile = startCPUProfile;

function stopCPUProfile(name) {
  if (anyGlobal.android) {
    __stopCPUProfiler(name);
  }
}

exports.stopCPUProfile = stopCPUProfile;

function level() {
  return tracingLevel;
}

exports.level = level;

function trace(message, start, end) {
  log("Timeline: Modules: " + message + "  (" + start + "ms. - " + end + "ms.)");
}

exports.trace = trace;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/text/formatted-string.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var span_1 = __webpack_require__("../node_modules/tns-core-modules/text/span.js");

exports.Span = span_1.Span;

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var knownCollections;

(function (knownCollections) {
  knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var CHILD_SPAN = "Span";

var FormattedString = function (_super) {
  __extends(FormattedString, _super);

  function FormattedString() {
    var _this = _super.call(this) || this;

    _this._spans = new observable_array_1.ObservableArray();

    _this._spans.addEventListener(observable_array_1.ObservableArray.changeEvent, _this.onSpansCollectionChanged, _this);

    return _this;
  }

  Object.defineProperty(FormattedString.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FormattedString.prototype, "spans", {
    get: function () {
      if (!this._spans) {
        this._spans = new observable_array_1.ObservableArray();
      }

      return this._spans;
    },
    enumerable: true,
    configurable: true
  });

  FormattedString.prototype.toString = function () {
    var result = "";

    for (var i = 0, length_1 = this._spans.length; i < length_1; i++) {
      result += this._spans.getItem(i).text;
    }

    return result;
  };

  FormattedString.prototype._addArrayFromBuilder = function (name, value) {
    if (name === knownCollections.spans) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      this.spans.push(value);
    }
  };

  FormattedString.prototype.onSpansCollectionChanged = function (eventData) {
    if (eventData.addedCount > 0) {
      for (var i = 0; i < eventData.addedCount; i++) {
        var span = eventData.object.getItem(eventData.index + i);

        this._addView(span);

        this.addPropertyChangeHandler(span);
      }
    }

    if (eventData.removed && eventData.removed.length > 0) {
      for (var p = 0; p < eventData.removed.length; p++) {
        var span = eventData.removed[p];
        this.removePropertyChangeHandler(span);

        this._removeView(span);
      }
    }

    this.notifyPropertyChange(".", this);
  };

  FormattedString.prototype.addPropertyChangeHandler = function (span) {
    var style = span.style;
    span.on(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.on("fontFamilyChange", this.onPropertyChange, this);
    style.on("fontSizeChange", this.onPropertyChange, this);
    style.on("fontStyleChange", this.onPropertyChange, this);
    style.on("fontWeightChange", this.onPropertyChange, this);
    style.on("textDecorationChange", this.onPropertyChange, this);
    style.on("colorChange", this.onPropertyChange, this);
    style.on("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.removePropertyChangeHandler = function (span) {
    var style = span.style;
    span.off(observable_1.Observable.propertyChangeEvent, this.onPropertyChange, this);
    style.off("fontFamilyChange", this.onPropertyChange, this);
    style.off("fontSizeChange", this.onPropertyChange, this);
    style.off("fontStyleChange", this.onPropertyChange, this);
    style.off("fontWeightChange", this.onPropertyChange, this);
    style.off("textDecorationChange", this.onPropertyChange, this);
    style.off("colorChange", this.onPropertyChange, this);
    style.off("backgroundColorChange", this.onPropertyChange, this);
  };

  FormattedString.prototype.onPropertyChange = function (data) {
    this.notifyPropertyChange(data.propertyName, this);
  };

  FormattedString.prototype.eachChild = function (callback) {
    this.spans.forEach(function (v, i, arr) {
      return callback(v);
    });
  };

  return FormattedString;
}(view_1.ViewBase);

exports.FormattedString = FormattedString;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/span.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var Span = function (_super) {
  __extends(Span, _super);

  function Span() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Span.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Span.prototype, "text", {
    get: function () {
      return this._text;
    },
    set: function (value) {
      if (this._text !== value) {
        this._text = value;
        this.notifyPropertyChange("text", value);
      }
    },
    enumerable: true,
    configurable: true
  });

  Span.prototype._setTextInternal = function (value) {
    this._text = value;
  };

  return Span;
}(view_1.ViewBase);

exports.Span = Span;

/***/ }),

/***/ "../node_modules/tns-core-modules/text/text.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var encoding;

(function (encoding) {
  encoding.ISO_8859_1 = 5;
  encoding.US_ASCII = 1;
  encoding.UTF_16 = 10;
  encoding.UTF_16BE = 0x90000100;
  encoding.UTF_16LE = 0x94000100;
  encoding.UTF_8 = 4;
})(encoding = exports.encoding || (exports.encoding = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/timer/timer.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var timeoutCallbacks = new Map();
var timerId = 0;

var TimerTargetImpl = function (_super) {
  __extends(TimerTargetImpl, _super);

  function TimerTargetImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimerTargetImpl.initWithCallback = function (callback, id, shouldRepeat) {
    var handler = TimerTargetImpl.new();
    handler.callback = callback;
    handler.id = id;
    handler.shouldRepeat = shouldRepeat;
    return handler;
  };

  TimerTargetImpl.prototype.tick = function (timer) {
    if (!this.disposed) {
      this.callback();
    }

    if (!this.shouldRepeat) {
      this.unregister();
    }
  };

  TimerTargetImpl.prototype.unregister = function () {
    if (!this.disposed) {
      this.disposed = true;
      var timer = timeoutCallbacks.get(this.id).k;
      timer.invalidate();
      timeoutCallbacks.delete(this.id);
    }
  };

  TimerTargetImpl.ObjCExposedMethods = {
    "tick": {
      returns: interop.types.void,
      params: [NSTimer]
    }
  };
  return TimerTargetImpl;
}(NSObject);

function createTimerAndGetId(callback, milliseconds, shouldRepeat) {
  timerId++;
  var id = timerId;
  var timerTarget = TimerTargetImpl.initWithCallback(callback, id, shouldRepeat);
  var timer = NSTimer.scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(milliseconds / 1000, timerTarget, "tick", null, shouldRepeat);
  utils.ios.getter(NSRunLoop, NSRunLoop.currentRunLoop).addTimerForMode(timer, NSRunLoopCommonModes);
  var pair = {
    k: timer,
    v: timerTarget
  };
  timeoutCallbacks.set(id, pair);
  return id;
}

function setTimeout(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var invoke = function () {
    return callback.apply(void 0, args);
  };

  return createTimerAndGetId(zonedCallback(invoke), milliseconds, false);
}

exports.setTimeout = setTimeout;

function clearTimeout(id) {
  var pair = timeoutCallbacks.get(id);

  if (pair) {
    pair.v.unregister();
  }
}

exports.clearTimeout = clearTimeout;

function setInterval(callback, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }

  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  var invoke = function () {
    return callback.apply(void 0, args);
  };

  return createTimerAndGetId(zonedCallback(invoke), milliseconds, true);
}

exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;

/***/ }),

/***/ "../node_modules/tns-core-modules/trace/trace.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];

var _errorHandler;

function enable() {
  enabled = true;
}

exports.enable = enable;

function disable() {
  enabled = false;
}

exports.disable = disable;

function isEnabled() {
  return enabled;
}

exports.isEnabled = isEnabled;

function isCategorySet(category) {
  return category in _categories;
}

exports.isCategorySet = isCategorySet;

function addWriter(writer) {
  _writers.push(writer);
}

exports.addWriter = addWriter;

function removeWriter(writer) {
  var index = _writers.indexOf(writer);

  if (index >= 0) {
    _writers.splice(index, 1);
  }
}

exports.removeWriter = removeWriter;

function clearWriters() {
  if (_writers.length > 0) {
    _writers.splice(0, _writers.length);
  }
}

exports.clearWriters = clearWriters;

function setCategories(categories) {
  _categories = {};
  addCategories(categories);
}

exports.setCategories = setCategories;

function addCategories(categories) {
  var split = categories.split(",");

  for (var i = 0; i < split.length; i++) {
    _categories[split[i].trim()] = true;
  }
}

exports.addCategories = addCategories;

function write(message, category, type) {
  var i;

  if (type === messageType.error) {
    for (i = 0; i < _writers.length; i++) {
      _writers[i].write(message, category, type);
    }

    return;
  }

  if (!enabled) {
    return;
  }

  if (!(category in _categories)) {
    return;
  }

  for (i = 0; i < _writers.length; i++) {
    _writers[i].write(message, category, type);
  }
}

exports.write = write;

function notifyEvent(object, name, data) {
  if (!enabled) {
    return;
  }

  var i, listener, filters;

  for (i = 0; i < _eventListeners.length; i++) {
    listener = _eventListeners[i];

    if (listener.filter) {
      filters = listener.filter.split(",");
      filters.forEach(function (value) {
        if (value.trim() === name) {
          listener.on(object, name, data);
        }
      });
    } else {
      listener.on(object, name, data);
    }
  }
}

exports.notifyEvent = notifyEvent;

function addEventListener(listener) {
  _eventListeners.push(listener);
}

exports.addEventListener = addEventListener;

function removeEventListener(listener) {
  var index = _eventListeners.indexOf(listener);

  if (index >= 0) {
    _eventListeners.splice(index, 1);
  }
}

exports.removeEventListener = removeEventListener;
var messageType;

(function (messageType) {
  messageType.log = 0;
  messageType.info = 1;
  messageType.warn = 2;
  messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));

var categories;

(function (categories) {
  categories.VisualTreeEvents = "VisualTreeEvents";
  categories.Layout = "Layout";
  categories.Style = "Style";
  categories.ViewHierarchy = "ViewHierarchy";
  categories.NativeLifecycle = "NativeLifecycle";
  categories.Debug = "Debug";
  categories.Navigation = "Navigation";
  categories.Test = "Test";
  categories.Binding = "Binding";
  categories.BindingError = "BindingError";
  categories.Error = "Error";
  categories.Animation = "Animation";
  categories.Transition = "Transition";
  categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
  categories.separator = ",";

  function concat() {
    var i;
    var result;

    for (i = 0; i < arguments.length; i++) {
      if (!result) {
        result = arguments[i];
        continue;
      }

      result = result.concat(categories.separator, arguments[i]);
    }

    return result;
  }

  categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));

var ConsoleWriter = function () {
  function ConsoleWriter() {}

  ConsoleWriter.prototype.write = function (message, category, type) {
    if (!console) {
      return;
    }

    var msgType;

    if (type === undefined) {
      msgType = messageType.log;
    } else {
      msgType = type;
    }

    switch (msgType) {
      case messageType.log:
        console.log(category + ": " + message);
        break;

      case messageType.info:
        console.info(category + ": " + message);
        break;

      case messageType.warn:
        console.warn(category + ": " + message);
        break;

      case messageType.error:
        console.error(category + ": " + message);
        break;
    }
  };

  return ConsoleWriter;
}();

addWriter(new ConsoleWriter());

var DefaultErrorHandler = function () {
  function DefaultErrorHandler() {}

  DefaultErrorHandler.prototype.handlerError = function (error) {
    throw error;
  };

  return DefaultErrorHandler;
}();

exports.DefaultErrorHandler = DefaultErrorHandler;
setErrorHandler(new DefaultErrorHandler());

function getErrorHandler() {
  return _errorHandler;
}

exports.getErrorHandler = getErrorHandler;

function setErrorHandler(handler) {
  _errorHandler = handler;
}

exports.setErrorHandler = setErrorHandler;

function error(error) {
  if (!_errorHandler) {
    return;
  }

  if (typeof error === "string") {
    error = new Error(error);
  }

  _errorHandler.handlerError(error);
}

exports.error = error;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var knownCollections;

(function (knownCollections) {
  knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var ActionBarBase = function (_super) {
  __extends(ActionBarBase, _super);

  function ActionBarBase() {
    var _this = _super.call(this) || this;

    _this._actionItems = new ActionItems(_this);
    return _this;
  }

  Object.defineProperty(ActionBarBase.prototype, "navigationButton", {
    get: function () {
      return this._navigationButton;
    },
    set: function (value) {
      if (this._navigationButton !== value) {
        if (this._navigationButton) {
          this._removeView(this._navigationButton);

          this._navigationButton.actionBar = undefined;
        }

        this._navigationButton = value;

        if (this._navigationButton) {
          this._navigationButton.actionBar = this;

          this._addView(this._navigationButton);
        }

        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "actionItems", {
    get: function () {
      return this._actionItems;
    },
    set: function (value) {
      throw new Error("actionItems property is read-only");
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "titleView", {
    get: function () {
      return this._titleView;
    },
    set: function (value) {
      if (this._titleView !== value) {
        if (this._titleView) {
          this._removeView(this._titleView);

          this._titleView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
          this._titleView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;
        }

        this._titleView = value;

        if (value) {
          this._addView(value);

          var style = value.style;

          if (!view_1.horizontalAlignmentProperty.isSet(style)) {
            style[view_1.horizontalAlignmentProperty.cssName] = "center";
          }

          if (!view_1.verticalAlignmentProperty.isSet(style)) {
            style[view_1.verticalAlignmentProperty.cssName] = "middle";
          }
        }

        this.update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "ios", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "android", {
    get: function () {
      return undefined;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionBarBase.prototype, "_childrenCount", {
    get: function () {
      var actionViewsCount = 0;

      this._actionItems.getItems().forEach(function (actionItem) {
        if (actionItem.actionView) {
          actionViewsCount++;
        }
      });

      return actionViewsCount + (this.titleView ? 1 : 0);
    },
    enumerable: true,
    configurable: true
  });

  ActionBarBase.prototype.update = function () {};

  ActionBarBase.prototype._onTitlePropertyChanged = function () {};

  ActionBarBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "actionItems") {
      this.actionItems.setItems(value);
    }
  };

  ActionBarBase.prototype.eachChildView = function (callback) {
    var titleView = this.titleView;

    if (titleView) {
      callback(titleView);
    }
  };

  ActionBarBase.prototype.eachChild = function (callback) {
    var titleView = this.titleView;

    if (titleView) {
      callback(titleView);
    }

    var navigationButton = this._navigationButton;

    if (navigationButton) {
      callback(navigationButton);
    }

    this.actionItems.getItems().forEach(function (actionItem) {
      callback(actionItem);
    });
  };

  ActionBarBase.prototype._isEmpty = function () {
    if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
      return false;
    }

    return true;
  };

  ActionBarBase = __decorate([view_1.CSSType("ActionBar")], ActionBarBase);
  return ActionBarBase;
}(view_1.View);

exports.ActionBarBase = ActionBarBase;

var ActionItems = function () {
  function ActionItems(actionBar) {
    this._items = new Array();
    this._actionBar = actionBar;
  }

  ActionItems.prototype.addItem = function (item) {
    if (!item) {
      throw new Error("Cannot add empty item");
    }

    this._items.push(item);

    item.actionBar = this._actionBar;

    this._actionBar._addView(item);

    this.invalidate();
  };

  ActionItems.prototype.removeItem = function (item) {
    if (!item) {
      throw new Error("Cannot remove empty item");
    }

    var itemIndex = this._items.indexOf(item);

    if (itemIndex < 0) {
      throw new Error("Cannot find item to remove");
    }

    this._items.splice(itemIndex, 1);

    this._actionBar._removeView(item);

    item.actionBar = undefined;
    this.invalidate();
  };

  ActionItems.prototype.getItems = function () {
    return this._items.slice();
  };

  ActionItems.prototype.getVisibleItems = function () {
    var visibleItems = [];

    this._items.forEach(function (item) {
      if (isVisible(item)) {
        visibleItems.push(item);
      }
    });

    return visibleItems;
  };

  ActionItems.prototype.getItemAt = function (index) {
    if (index < 0 || index >= this._items.length) {
      return undefined;
    }

    return this._items[index];
  };

  ActionItems.prototype.setItems = function (items) {
    while (this._items.length > 0) {
      this.removeItem(this._items[this._items.length - 1]);
    }

    for (var i = 0; i < items.length; i++) {
      this.addItem(items[i]);
    }

    this.invalidate();
  };

  ActionItems.prototype.invalidate = function () {
    if (this._actionBar) {
      this._actionBar.update();
    }
  };

  return ActionItems;
}();

exports.ActionItems = ActionItems;

var ActionItemBase = function (_super) {
  __extends(ActionItemBase, _super);

  function ActionItemBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ActionItemBase.prototype, "actionView", {
    get: function () {
      return this._actionView;
    },
    set: function (value) {
      if (this._actionView !== value) {
        if (this._actionView) {
          this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = view_1.unsetValue;
          this._actionView.style[view_1.verticalAlignmentProperty.cssName] = view_1.unsetValue;

          this._removeView(this._actionView);
        }

        this._actionView = value;

        if (this._actionView) {
          this._addView(this._actionView);
        }

        if (this._actionBar) {
          this._actionBar.update();
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ActionItemBase.prototype, "actionBar", {
    get: function () {
      return this._actionBar;
    },
    set: function (value) {
      if (value !== this._actionBar) {
        this._actionBar = value;
      }
    },
    enumerable: true,
    configurable: true
  });

  ActionItemBase.prototype.onLoaded = function () {
    if (this._actionView) {
      this._actionView.style[view_1.horizontalAlignmentProperty.cssName] = "center";
      this._actionView.style[view_1.verticalAlignmentProperty.cssName] = "middle";
    }

    _super.prototype.onLoaded.call(this);
  };

  ActionItemBase.prototype._raiseTap = function () {
    this._emit(ActionItemBase.tapEvent);
  };

  ActionItemBase.prototype._addChildFromBuilder = function (name, value) {
    this.actionView = value;
  };

  ActionItemBase.prototype._onVisibilityChanged = function (visibility) {
    if (this.actionBar) {
      this.actionBar.update();
    }
  };

  ActionItemBase.prototype.eachChild = function (callback) {
    if (this._actionView) {
      callback(this._actionView);
    }
  };

  ActionItemBase.tapEvent = "tap";

  __decorate([profiling_1.profile], ActionItemBase.prototype, "onLoaded", null);

  return ActionItemBase;
}(view_1.ViewBase);

exports.ActionItemBase = ActionItemBase;

function isVisible(item) {
  return item.visibility === "visible";
}

exports.isVisible = isVisible;

function onTitlePropertyChanged(actionBar, oldValue, newValue) {
  actionBar._onTitlePropertyChanged();
}

exports.titleProperty = new view_1.Property({
  name: "title",
  valueChanged: onTitlePropertyChanged
});
exports.titleProperty.register(ActionBarBase);

function onItemChanged(item, oldValue, newValue) {
  if (item.actionBar) {
    item.actionBar.update();
  }
}

function onVisibilityChanged(item, oldValue, newValue) {
  item._onVisibilityChanged(newValue);
}

function traceMissingIcon(icon) {
  view_1.traceWrite("Could not load action bar icon: " + icon, view_1.traceCategories.Error, view_1.traceMessageType.error);
}

exports.traceMissingIcon = traceMissingIcon;
exports.iosIconRenderingModeProperty = new view_1.Property({
  name: "iosIconRenderingMode",
  defaultValue: "alwaysOriginal"
});
exports.iosIconRenderingModeProperty.register(ActionBarBase);
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  valueChanged: onItemChanged
});
exports.textProperty.register(ActionItemBase);
exports.iconProperty = new view_1.Property({
  name: "icon",
  valueChanged: onItemChanged
});
exports.iconProperty.register(ActionItemBase);
exports.visibilityProperty = new view_1.Property({
  name: "visibility",
  defaultValue: "visible",
  valueChanged: onVisibilityChanged
});
exports.visibilityProperty.register(ActionItemBase);
exports.flatProperty = new view_1.Property({
  name: "flat",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.flatProperty.register(ActionBarBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/action-bar/action-bar.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var action_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar-common.js"));

var majorVersion = utils_1.ios.MajorVersion;
var UNSPECIFIED = action_bar_common_1.layout.makeMeasureSpec(0, action_bar_common_1.layout.UNSPECIFIED);

function loadActionIconFromFileOrResource(icon) {
  var img = image_source_1.fromFileOrResource(icon);

  if (img && img.ios) {
    return img.ios;
  } else {
    action_bar_common_1.traceMissingIcon(icon);
    return null;
  }
}

var TapBarItemHandlerImpl = function (_super) {
  __extends(TapBarItemHandlerImpl, _super);

  function TapBarItemHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TapBarItemHandlerImpl.initWithOwner = function (owner) {
    var handler = TapBarItemHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  TapBarItemHandlerImpl.prototype.tap = function (args) {
    var owner = this._owner.get();

    if (owner) {
      owner._raiseTap();
    }
  };

  TapBarItemHandlerImpl.ObjCExposedMethods = {
    "tap": {
      returns: interop.types.void,
      params: [interop.types.id]
    }
  };
  return TapBarItemHandlerImpl;
}(NSObject);

var ActionItem = function (_super) {
  __extends(ActionItem, _super);

  function ActionItem() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._ios = {
      position: "left",
      systemIcon: undefined
    };
    return _this;
  }

  Object.defineProperty(ActionItem.prototype, "ios", {
    get: function () {
      return this._ios;
    },
    set: function (value) {
      throw new Error("ActionItem.ios is read-only");
    },
    enumerable: true,
    configurable: true
  });
  return ActionItem;
}(action_bar_common_1.ActionItemBase);

exports.ActionItem = ActionItem;

var NavigationButton = function (_super) {
  __extends(NavigationButton, _super);

  function NavigationButton() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NavigationButton.prototype._onVisibilityChanged = function (visibility) {
    if (this._navigationItem) {
      var visible = visibility === "visible";

      this._navigationItem.setHidesBackButtonAnimated(!visible, true);
    }
  };

  return NavigationButton;
}(ActionItem);

exports.NavigationButton = NavigationButton;

var ActionBar = function (_super) {
  __extends(ActionBar, _super);

  function ActionBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ActionBar.prototype, "ios", {
    get: function () {
      var page = this.page;

      if (!page || !page.parent) {
        return;
      }

      var viewController = page.ios;

      if (viewController.navigationController !== null) {
        return viewController.navigationController.navigationBar;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  ActionBar.prototype.createNativeView = function () {
    return this.ios;
  };

  ActionBar.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof NavigationButton) {
      this.navigationButton = value;
    } else if (value instanceof ActionItem) {
      this.actionItems.addItem(value);
    } else if (value instanceof action_bar_common_1.View) {
      this.titleView = value;
    }
  };

  Object.defineProperty(ActionBar.prototype, "_getActualSize", {
    get: function () {
      var navBar = this.ios;

      if (!navBar) {
        return {
          width: 0,
          height: 0
        };
      }

      var frame = navBar.frame;
      var size = frame.size;
      var width = action_bar_common_1.layout.toDevicePixels(size.width);
      var height = action_bar_common_1.layout.toDevicePixels(size.height);
      return {
        width: width,
        height: height
      };
    },
    enumerable: true,
    configurable: true
  });

  ActionBar.prototype.layoutInternal = function () {
    var _a = this._getActualSize,
        width = _a.width,
        height = _a.height;
    var widthSpec = action_bar_common_1.layout.makeMeasureSpec(width, action_bar_common_1.layout.EXACTLY);
    var heightSpec = action_bar_common_1.layout.makeMeasureSpec(height, action_bar_common_1.layout.EXACTLY);
    this.measure(widthSpec, heightSpec);
    this.layout(0, 0, width, height, false);
  };

  ActionBar.prototype._getIconRenderingMode = function () {
    switch (this.iosIconRenderingMode) {
      case "alwaysOriginal":
        return 1;

      case "alwaysTemplate":
        return 2;

      case "automatic":
      default:
        return 1;
    }
  };

  ActionBar.prototype.update = function () {
    var page = this.page;

    if (!page || !page.frame) {
      return;
    }

    var viewController = page.ios;
    var navigationItem = viewController.navigationItem;
    var navController = viewController.navigationController;

    if (!navController) {
      return;
    }

    var navigationBar = navController.navigationBar;
    var previousController;
    navigationItem.title = this.title;
    var titleView = this.titleView;

    if (titleView && titleView.ios) {
      navigationItem.titleView = titleView.ios;
    } else {
      navigationItem.titleView = null;
    }

    var indexOfViewController = navController.viewControllers.indexOfObject(viewController);

    if (indexOfViewController > 0 && indexOfViewController < navController.viewControllers.count) {
      previousController = navController.viewControllers[indexOfViewController - 1];
    }

    if (previousController) {
      if (this.navigationButton) {
        var tapHandler = TapBarItemHandlerImpl.initWithOwner(new WeakRef(this.navigationButton));
        var barButtonItem = UIBarButtonItem.alloc().initWithTitleStyleTargetAction(this.navigationButton.text + "", 0, tapHandler, "tap");
        previousController.navigationItem.backBarButtonItem = barButtonItem;
      } else {
        previousController.navigationItem.backBarButtonItem = null;
      }
    }

    var img;

    if (this.navigationButton && action_bar_common_1.isVisible(this.navigationButton) && this.navigationButton.icon) {
      img = loadActionIconFromFileOrResource(this.navigationButton.icon);
    }

    if (img) {
      var image = img.imageWithRenderingMode(1);
      navigationBar.backIndicatorImage = image;
      navigationBar.backIndicatorTransitionMaskImage = image;
    } else {
      navigationBar.backIndicatorImage = null;
      navigationBar.backIndicatorTransitionMaskImage = null;
    }

    if (this.navigationButton) {
      this.navigationButton._navigationItem = navigationItem;
      navigationItem.setHidesBackButtonAnimated(!action_bar_common_1.isVisible(this.navigationButton), false);
    }

    this.populateMenuItems(navigationItem);
    this.updateColors(navigationBar);
    this.updateFlatness(navigationBar);

    if (!this.isLayoutValid) {
      this.layoutInternal();
    }
  };

  ActionBar.prototype.populateMenuItems = function (navigationItem) {
    var items = this.actionItems.getVisibleItems();
    var leftBarItems = [];
    var rightBarItems = [];

    for (var i = 0; i < items.length; i++) {
      var barButtonItem = this.createBarButtonItem(items[i]);

      if (items[i].ios.position === "left") {
        leftBarItems.push(barButtonItem);
      } else {
        rightBarItems.splice(0, 0, barButtonItem);
      }
    }

    navigationItem.setLeftBarButtonItemsAnimated(leftBarItems, false);
    navigationItem.setRightBarButtonItemsAnimated(rightBarItems, false);

    if (leftBarItems.length > 0) {
      navigationItem.leftItemsSupplementBackButton = true;
    }
  };

  ActionBar.prototype.createBarButtonItem = function (item) {
    var tapHandler = TapBarItemHandlerImpl.initWithOwner(new WeakRef(item));
    item.handler = tapHandler;
    var barButtonItem;

    if (item.actionView && item.actionView.ios) {
      var recognizer = UITapGestureRecognizer.alloc().initWithTargetAction(tapHandler, "tap");
      item.actionView.ios.addGestureRecognizer(recognizer);
      barButtonItem = UIBarButtonItem.alloc().initWithCustomView(item.actionView.ios);
    } else if (item.ios.systemIcon !== undefined) {
      var id = item.ios.systemIcon;

      if (typeof id === "string") {
        id = parseInt(id);
      }

      barButtonItem = UIBarButtonItem.alloc().initWithBarButtonSystemItemTargetAction(id, tapHandler, "tap");
    } else if (item.icon) {
      var img = loadActionIconFromFileOrResource(item.icon);
      var image = img.imageWithRenderingMode(this._getIconRenderingMode());
      barButtonItem = UIBarButtonItem.alloc().initWithImageStyleTargetAction(image, 0, tapHandler, "tap");
    } else {
      barButtonItem = UIBarButtonItem.alloc().initWithTitleStyleTargetAction(item.text + "", 0, tapHandler, "tap");
    }

    if (item.text) {
      barButtonItem.isAccessibilityElement = true;
      barButtonItem.accessibilityLabel = item.text;
      barButtonItem.accessibilityTraits = UIAccessibilityTraitButton;
    }

    return barButtonItem;
  };

  ActionBar.prototype.updateColors = function (navBar) {
    var color = this.color;
    this.setColor(navBar, color);
    var bgColor = this.backgroundColor;
    navBar.barTintColor = bgColor ? bgColor.ios : null;
  };

  ActionBar.prototype.setColor = function (navBar, color) {
    var _a, _b;

    if (color) {
      navBar.titleTextAttributes = (_a = {}, _a[NSForegroundColorAttributeName] = color.ios, _a);
      navBar.largeTitleTextAttributes = (_b = {}, _b[NSForegroundColorAttributeName] = color.ios, _b);
      navBar.tintColor = color.ios;
    } else {
      navBar.titleTextAttributes = null;
      navBar.largeTitleTextAttributes = null;
      navBar.tintColor = null;
    }
  };

  ActionBar.prototype._onTitlePropertyChanged = function () {
    var page = this.page;

    if (!page) {
      return;
    }

    if (page.frame) {
      page.frame._updateActionBar();
    }

    var navigationItem = page.ios.navigationItem;
    navigationItem.title = this.title;
  };

  ActionBar.prototype.updateFlatness = function (navBar) {
    if (this.flat) {
      navBar.setBackgroundImageForBarMetrics(UIImage.new(), 0);
      navBar.shadowImage = UIImage.new();
      navBar.translucent = false;
    } else {
      navBar.setBackgroundImageForBarMetrics(null, null);
      navBar.shadowImage = null;
      navBar.translucent = true;
    }
  };

  ActionBar.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    var width = action_bar_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var height = action_bar_common_1.layout.getMeasureSpecSize(heightMeasureSpec);

    if (this.titleView) {
      action_bar_common_1.View.measureChild(this, this.titleView, UNSPECIFIED, UNSPECIFIED);
    }

    this.actionItems.getItems().forEach(function (actionItem) {
      var actionView = actionItem.actionView;

      if (actionView) {
        action_bar_common_1.View.measureChild(_this, actionView, UNSPECIFIED, UNSPECIFIED);
      }
    });
    this.setMeasuredDimension(width, height);
  };

  ActionBar.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    var titleView = this.titleView;

    if (titleView) {
      if (majorVersion > 10) {
        action_bar_common_1.View.layoutChild(this, titleView, 0, 0, titleView.getMeasuredWidth(), titleView.getMeasuredHeight());
      } else {
        action_bar_common_1.View.layoutChild(this, titleView, 0, 0, right - left, bottom - top);
      }
    }

    this.actionItems.getItems().forEach(function (actionItem) {
      var actionView = actionItem.actionView;

      if (actionView && actionView.ios) {
        var measuredWidth = actionView.getMeasuredWidth();
        var measuredHeight = actionView.getMeasuredHeight();
        action_bar_common_1.View.layoutChild(_this, actionView, 0, 0, measuredWidth, measuredHeight);
      }
    });

    _super.prototype.onLayout.call(this, left, top, right, bottom);
  };

  ActionBar.prototype.layoutNativeView = function (left, top, right, bottom) {
    return;
  };

  Object.defineProperty(ActionBar.prototype, "navBar", {
    get: function () {
      var page = this.page;

      if (!page || !page.frame) {
        return undefined;
      }

      return page.frame.ios.controller.navigationBar;
    },
    enumerable: true,
    configurable: true
  });

  ActionBar.prototype[action_bar_common_1.colorProperty.getDefault] = function () {
    return null;
  };

  ActionBar.prototype[action_bar_common_1.colorProperty.setNative] = function (color) {
    var navBar = this.navBar;
    this.setColor(navBar, color);
  };

  ActionBar.prototype[action_bar_common_1.backgroundColorProperty.getDefault] = function () {
    return null;
  };

  ActionBar.prototype[action_bar_common_1.backgroundColorProperty.setNative] = function (value) {
    var navBar = this.navBar;

    if (navBar) {
      var color = value instanceof action_bar_common_1.Color ? value.ios : value;
      navBar.barTintColor = color;
    }
  };

  ActionBar.prototype[action_bar_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  ActionBar.prototype[action_bar_common_1.backgroundInternalProperty.setNative] = function (value) {};

  ActionBar.prototype[action_bar_common_1.flatProperty.setNative] = function (value) {
    var navBar = this.navBar;

    if (navBar) {
      this.updateFlatness(navBar);
    }
  };

  ActionBar.prototype[action_bar_common_1.iosIconRenderingModeProperty.getDefault] = function () {
    return "alwaysOriginal";
  };

  ActionBar.prototype[action_bar_common_1.iosIconRenderingModeProperty.setNative] = function (value) {
    this.update();
  };

  return ActionBar;
}(action_bar_common_1.ActionBarBase);

exports.ActionBar = ActionBar;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ActivityIndicatorBase = function (_super) {
  __extends(ActivityIndicatorBase, _super);

  function ActivityIndicatorBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ActivityIndicatorBase = __decorate([view_1.CSSType("ActivityIndicator")], ActivityIndicatorBase);
  return ActivityIndicatorBase;
}(view_1.View);

exports.ActivityIndicatorBase = ActivityIndicatorBase;
ActivityIndicatorBase.prototype.recycleNativeView = "auto";
exports.busyProperty = new view_1.Property({
  name: "busy",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.busyProperty.register(ActivityIndicatorBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var activity_indicator_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/activity-indicator/activity-indicator-common.js"));

var ActivityIndicator = function (_super) {
  __extends(ActivityIndicator, _super);

  function ActivityIndicator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ActivityIndicator.prototype.createNativeView = function () {
    var view = UIActivityIndicatorView.alloc().initWithActivityIndicatorStyle(2);
    view.hidesWhenStopped = true;
    return view;
  };

  Object.defineProperty(ActivityIndicator.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.getDefault] = function () {
    if (this.nativeViewProtected.isAnimating) {
      return this.nativeViewProtected.isAnimating();
    } else {
      return this.nativeViewProtected.animating;
    }
  };

  ActivityIndicator.prototype[activity_indicator_common_1.busyProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (value) {
      nativeView.startAnimating();
    } else {
      nativeView.stopAnimating();
    }

    if (nativeView.hidesWhenStopped) {
      this.requestLayout();
    }
  };

  ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.getDefault] = function () {
    return this.nativeViewProtected.color;
  };

  ActivityIndicator.prototype[activity_indicator_common_1.colorProperty.setNative] = function (value) {
    this.nativeViewProtected.color = value instanceof activity_indicator_common_1.Color ? value.ios : value;
  };

  return ActivityIndicator;
}(activity_indicator_common_1.ActivityIndicatorBase);

exports.ActivityIndicator = ActivityIndicator;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceType = trace_1.messageType;
var Properties;

(function (Properties) {
  Properties.opacity = "opacity";
  Properties.backgroundColor = "backgroundColor";
  Properties.translate = "translate";
  Properties.rotate = "rotate";
  Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));

var CubicBezierAnimationCurve = function () {
  function CubicBezierAnimationCurve(x1, y1, x2, y2) {
    this.x1 = x1;
    this.y1 = y1;
    this.x2 = x2;
    this.y2 = y2;
  }

  return CubicBezierAnimationCurve;
}();

exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;

var AnimationBase = function () {
  function AnimationBase(animationDefinitions, playSequentially) {
    if (!animationDefinitions || animationDefinitions.length === 0) {
      throw new Error("No animation definitions specified");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
    }

    this._propertyAnimations = new Array();

    for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
      if (animationDefinitions[i].curve) {
        animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
      }

      this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
    }

    if (this._propertyAnimations.length === 0) {
      throw new Error("Nothing to animate.");
    }

    if (trace_1.isEnabled()) {
      trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
    }

    this._playSequentially = playSequentially;
  }

  AnimationBase.prototype._rejectAlreadyPlaying = function () {
    var reason = "Animation is already playing.";
    trace_1.write(reason, trace_1.categories.Animation, trace_1.messageType.warn);
    return new Promise(function (resolve, reject) {
      reject(reason);
    });
  };

  AnimationBase.prototype.play = function () {
    var _this_1 = this;

    var animationFinishedPromise = new Promise(function (resolve, reject) {
      _this_1._resolve = resolve;
      _this_1._reject = reject;
    });
    this.fixupAnimationPromise(animationFinishedPromise);
    this._isPlaying = true;
    return animationFinishedPromise;
  };

  AnimationBase.prototype.fixupAnimationPromise = function (promise) {
    var _this = this;

    promise.cancel = function () {
      _this.cancel();
    };

    var _then = promise.then;

    promise.then = function () {
      var r = _then.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };

    var _catch = promise.catch;

    promise.catch = function () {
      var r = _catch.apply(promise, arguments);

      _this.fixupAnimationPromise(r);

      return r;
    };
  };

  AnimationBase.prototype.cancel = function () {};

  Object.defineProperty(AnimationBase.prototype, "isPlaying", {
    get: function () {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  AnimationBase.prototype._resolveAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._resolve();
  };

  AnimationBase.prototype._rejectAnimationFinishedPromise = function () {
    this._isPlaying = false;

    this._reject(new Error("Animation cancelled."));
  };

  AnimationBase._createPropertyAnimations = function (animationDefinition) {
    if (!animationDefinition.target) {
      throw new Error("No animation target specified.");
    }

    for (var item in animationDefinition) {
      if (animationDefinition[item] === undefined) {
        continue;
      }

      if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && typeof animationDefinition[item] !== "number") {
        throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
      } else if ((item === Properties.scale || item === Properties.translate) && (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
        throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
      } else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
        throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
      }
    }

    var propertyAnimations = new Array();

    if (animationDefinition.opacity !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.opacity,
        value: animationDefinition.opacity,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.backgroundColor !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.backgroundColor,
        value: typeof animationDefinition.backgroundColor === "string" ? new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.translate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.translate,
        value: animationDefinition.translate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.scale !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.scale,
        value: animationDefinition.scale,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (animationDefinition.rotate !== undefined) {
      propertyAnimations.push({
        target: animationDefinition.target,
        property: Properties.rotate,
        value: animationDefinition.rotate,
        duration: animationDefinition.duration,
        delay: animationDefinition.delay,
        iterations: animationDefinition.iterations,
        curve: animationDefinition.curve
      });
    }

    if (propertyAnimations.length === 0) {
      throw new Error("No animation property specified.");
    }

    return propertyAnimations;
  };

  AnimationBase._getAnimationInfo = function (animation) {
    return JSON.stringify({
      target: animation.target.id,
      property: animation.property,
      value: animation.value,
      duration: animation.duration,
      delay: animation.delay,
      iterations: animation.iterations,
      curve: animation.curve
    });
  };

  return AnimationBase;
}();

exports.AnimationBase = AnimationBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/animation.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var animation_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/animation/animation-common.js"));

var getter = utils_1.ios.getter;
var _transform = "_transform";
var _skip = "_skip";
var FLT_MAX = 340282346638528859811704183484516925440.000000;

var AnimationInfo = function () {
  function AnimationInfo() {}

  return AnimationInfo;
}();

var AnimationDelegateImpl = function (_super) {
  __extends(AnimationDelegateImpl, _super);

  function AnimationDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AnimationDelegateImpl.initWithFinishedCallback = function (finishedCallback, propertyAnimation, valueSource) {
    var delegate = AnimationDelegateImpl.new();
    delegate._finishedCallback = finishedCallback;
    delegate._propertyAnimation = propertyAnimation;
    delegate._valueSource = valueSource;
    return delegate;
  };

  AnimationDelegateImpl.prototype.animationDidStart = function (anim) {
    var value = this._propertyAnimation.value;
    var setLocal = this._valueSource === "animation";
    var targetStyle = this._propertyAnimation.target.style;

    this._propertyAnimation.target._suspendPresentationLayerUpdates();

    switch (this._propertyAnimation.property) {
      case animation_common_1.Properties.backgroundColor:
        targetStyle[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = value;
        break;

      case animation_common_1.Properties.opacity:
        targetStyle[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = value;
        break;

      case animation_common_1.Properties.rotate:
        targetStyle[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = value;
        break;

      case animation_common_1.Properties.translate:
        targetStyle[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.x;
        targetStyle[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.y;
        break;

      case animation_common_1.Properties.scale:
        targetStyle[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.x === 0 ? 0.001 : value.x;
        targetStyle[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.y === 0 ? 0.001 : value.y;
        break;

      case _transform:
        if (value[animation_common_1.Properties.translate] !== undefined) {
          targetStyle[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value[animation_common_1.Properties.translate].x;
          targetStyle[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value[animation_common_1.Properties.translate].y;
        }

        if (value[animation_common_1.Properties.scale] !== undefined) {
          var x = value[animation_common_1.Properties.scale].x;
          var y = value[animation_common_1.Properties.scale].y;
          targetStyle[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = x === 0 ? 0.001 : x;
          targetStyle[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = y === 0 ? 0.001 : y;
        }

        break;
    }

    this._propertyAnimation.target._resumePresentationLayerUpdates();
  };

  AnimationDelegateImpl.prototype.animationDidStopFinished = function (anim, finished) {
    if (this._finishedCallback) {
      this._finishedCallback(!finished);
    }

    if (finished && this.nextAnimation) {
      this.nextAnimation();
    }
  };

  AnimationDelegateImpl.ObjCProtocols = global.CAAnimationDelegate ? [global.CAAnimationDelegate] : [];
  return AnimationDelegateImpl;
}(NSObject);

function _resolveAnimationCurve(curve) {
  switch (curve) {
    case "easeIn":
      return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseIn);

    case "easeOut":
      return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseOut);

    case "easeInOut":
      return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseInEaseOut);

    case "linear":
      return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionLinear);

    case "spring":
      return curve;

    case "ease":
      return CAMediaTimingFunction.functionWithControlPoints(0.25, 0.1, 0.25, 1.0);

    default:
      if (curve instanceof CAMediaTimingFunction) {
        return curve;
      } else if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
        var animationCurve = curve;
        return CAMediaTimingFunction.functionWithControlPoints(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
      } else {
        throw new Error("Invalid animation curve: " + curve);
      }

  }
}

exports._resolveAnimationCurve = _resolveAnimationCurve;

var Animation = function (_super) {
  __extends(Animation, _super);

  function Animation(animationDefinitions, playSequentially) {
    var _this = _super.call(this, animationDefinitions, playSequentially) || this;

    _this._valueSource = "animation";

    if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
      _this._valueSource = animationDefinitions[0].valueSource;
    }

    if (!playSequentially) {
      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Non-merged Property Animations: " + _this._propertyAnimations.length, animation_common_1.traceCategories.Animation);
      }

      _this._mergedPropertyAnimations = Animation._mergeAffineTransformAnimations(_this._propertyAnimations);

      if (animation_common_1.traceEnabled()) {
        animation_common_1.traceWrite("Merged Property Animations: " + _this._mergedPropertyAnimations.length, animation_common_1.traceCategories.Animation);
      }
    } else {
      _this._mergedPropertyAnimations = _this._propertyAnimations;
    }

    var that = _this;

    var animationFinishedCallback = function (cancelled) {
      if (that._playSequentially) {
        if (cancelled) {
          that._rejectAnimationFinishedPromise();
        } else {
          that._resolveAnimationFinishedPromise();
        }
      } else {
        if (cancelled) {
          that._cancelledAnimations++;
        } else {
          that._finishedAnimations++;
        }

        if (that._cancelledAnimations > 0 && that._cancelledAnimations + that._finishedAnimations === that._mergedPropertyAnimations.length) {
          if (animation_common_1.traceEnabled()) {
            animation_common_1.traceWrite(that._cancelledAnimations + " animations cancelled.", animation_common_1.traceCategories.Animation);
          }

          that._rejectAnimationFinishedPromise();
        } else if (that._finishedAnimations === that._mergedPropertyAnimations.length) {
          if (animation_common_1.traceEnabled()) {
            animation_common_1.traceWrite(that._finishedAnimations + " animations finished.", animation_common_1.traceCategories.Animation);
          }

          that._resolveAnimationFinishedPromise();
        }
      }
    };

    _this._iOSAnimationFunction = Animation._createiOSAnimationFunction(_this._mergedPropertyAnimations, 0, _this._playSequentially, _this._valueSource, animationFinishedCallback);
    return _this;
  }

  Animation.prototype.play = function () {
    if (this.isPlaying) {
      return this._rejectAlreadyPlaying();
    }

    var animationFinishedPromise = _super.prototype.play.call(this);

    this._finishedAnimations = 0;
    this._cancelledAnimations = 0;

    this._iOSAnimationFunction();

    return animationFinishedPromise;
  };

  Animation.prototype.cancel = function () {
    if (!this.isPlaying) {
      animation_common_1.traceWrite("Animation is not currently playing.", animation_common_1.traceCategories.Animation, animation_common_1.traceType.warn);
      return;
    }

    var i = 0;
    var length = this._mergedPropertyAnimations.length;

    for (; i < length; i++) {
      var propertyAnimation = this._mergedPropertyAnimations[i];
      propertyAnimation.target.nativeViewProtected.layer.removeAllAnimations();

      if (propertyAnimation._propertyResetCallback) {
        propertyAnimation._propertyResetCallback(propertyAnimation._originalValue, this._valueSource);
      }
    }
  };

  Animation.prototype._resolveAnimationCurve = function (curve) {
    return _resolveAnimationCurve(curve);
  };

  Animation._createiOSAnimationFunction = function (propertyAnimations, index, playSequentially, valueSource, finishedCallback) {
    return function (cancelled) {
      if (cancelled && finishedCallback) {
        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("Animation " + (index - 1).toString() + " was cancelled. Will skip the rest of animations and call finishedCallback(true).", animation_common_1.traceCategories.Animation);
        }

        finishedCallback(cancelled);
        return;
      }

      var animation = propertyAnimations[index];

      var args = Animation._getNativeAnimationArguments(animation, valueSource);

      if (animation.curve === "spring") {
        Animation._createNativeSpringAnimation(propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback);
      } else {
        Animation._createNativeAnimation(propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback);
      }
    };
  };

  Animation._getNativeAnimationArguments = function (animation, valueSource) {
    var nativeView = animation.target.nativeViewProtected;
    var propertyNameToAnimate = animation.property;
    var value = animation.value;
    var originalValue;
    var tempRotate = (animation.target.rotate || 0) * Math.PI / 180;
    var abs;
    var setLocal = valueSource === "animation";

    switch (animation.property) {
      case animation_common_1.Properties.backgroundColor:
        animation._originalValue = animation.target.backgroundColor;

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = value;
        };

        originalValue = nativeView.layer.backgroundColor;

        if (nativeView instanceof UILabel) {
          nativeView.setValueForKey(getter(UIColor, UIColor.clearColor), "backgroundColor");
        }

        value = value.CGColor;
        break;

      case animation_common_1.Properties.opacity:
        animation._originalValue = animation.target.opacity;

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = value;
        };

        originalValue = nativeView.layer.opacity;
        break;

      case animation_common_1.Properties.rotate:
        animation._originalValue = animation.target.rotate !== undefined ? animation.target.rotate : 0;

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = value;
        };

        propertyNameToAnimate = "transform.rotation";
        originalValue = nativeView.layer.valueForKeyPath("transform.rotation");

        if (animation.target.rotate !== undefined && animation.target.rotate !== 0 && Math.floor(value / 360) - value / 360 === 0) {
          originalValue = animation.target.rotate * Math.PI / 180;
        }

        value = value * Math.PI / 180;
        abs = fabs(originalValue - value);

        if (abs < 0.001 && originalValue !== tempRotate) {
          originalValue = tempRotate;
        }

        break;

      case animation_common_1.Properties.translate:
        animation._originalValue = {
          x: animation.target.translateX,
          y: animation.target.translateY
        };

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.x;
          animation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.y;
        };

        propertyNameToAnimate = "transform";
        originalValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
        value = NSValue.valueWithCATransform3D(CATransform3DTranslate(nativeView.layer.transform, value.x, value.y, 0));
        break;

      case animation_common_1.Properties.scale:
        if (value.x === 0) {
          value.x = 0.001;
        }

        if (value.y === 0) {
          value.y = 0.001;
        }

        animation._originalValue = {
          x: animation.target.scaleX,
          y: animation.target.scaleY
        };

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.x;
          animation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.y;
        };

        propertyNameToAnimate = "transform";
        originalValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
        value = NSValue.valueWithCATransform3D(CATransform3DScale(nativeView.layer.transform, value.x, value.y, 1));
        break;

      case _transform:
        originalValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
        animation._originalValue = {
          xs: animation.target.scaleX,
          ys: animation.target.scaleY,
          xt: animation.target.translateX,
          yt: animation.target.translateY
        };

        animation._propertyResetCallback = function (value, valueSource) {
          animation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.xt;
          animation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.yt;
          animation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.xs;
          animation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.ys;
        };

        propertyNameToAnimate = "transform";
        value = NSValue.valueWithCATransform3D(Animation._createNativeAffineTransform(animation));
        break;

      default:
        throw new Error("Cannot animate " + animation.property);
    }

    var duration = 0.3;

    if (animation.duration !== undefined) {
      duration = animation.duration / 1000.0;
    }

    var delay = undefined;

    if (animation.delay) {
      delay = animation.delay / 1000.0;
    }

    var repeatCount = undefined;

    if (animation.iterations !== undefined) {
      if (animation.iterations === Number.POSITIVE_INFINITY) {
        repeatCount = FLT_MAX;
      } else {
        repeatCount = animation.iterations;
      }
    }

    return {
      propertyNameToAnimate: propertyNameToAnimate,
      fromValue: originalValue,
      toValue: value,
      duration: duration,
      repeatCount: repeatCount,
      delay: delay
    };
  };

  Animation._createNativeAnimation = function (propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback) {
    var nativeView = animation.target.nativeViewProtected;
    var nativeAnimation = CABasicAnimation.animationWithKeyPath(args.propertyNameToAnimate);
    nativeAnimation.fromValue = args.fromValue;
    nativeAnimation.toValue = args.toValue;
    nativeAnimation.duration = args.duration;

    if (args.repeatCount !== undefined) {
      nativeAnimation.repeatCount = args.repeatCount;
    }

    if (args.delay !== undefined) {
      nativeAnimation.beginTime = CACurrentMediaTime() + args.delay;
    }

    if (animation.curve !== undefined) {
      nativeAnimation.timingFunction = animation.curve;
    }

    var animationDelegate = AnimationDelegateImpl.initWithFinishedCallback(finishedCallback, animation, valueSource);
    nativeAnimation.setValueForKey(animationDelegate, "delegate");
    nativeView.layer.addAnimationForKey(nativeAnimation, args.propertyNameToAnimate);
    var callback = undefined;

    if (index + 1 < propertyAnimations.length) {
      callback = Animation._createiOSAnimationFunction(propertyAnimations, index + 1, playSequentially, valueSource, finishedCallback);

      if (!playSequentially) {
        callback();
      } else {
        animationDelegate.nextAnimation = callback;
      }
    }
  };

  Animation._createNativeSpringAnimation = function (propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback) {
    var nativeView = animation.target.nativeViewProtected;
    var callback = undefined;
    var nextAnimation;

    if (index + 1 < propertyAnimations.length) {
      callback = Animation._createiOSAnimationFunction(propertyAnimations, index + 1, playSequentially, valueSource, finishedCallback);

      if (!playSequentially) {
        callback();
      } else {
        nextAnimation = callback;
      }
    }

    var delay = 0;

    if (args.delay) {
      delay = args.delay;
    }

    UIView.animateWithDurationDelayUsingSpringWithDampingInitialSpringVelocityOptionsAnimationsCompletion(args.duration, delay, 0.2, 0, 196608, function () {
      if (args.repeatCount !== undefined) {
        UIView.setAnimationRepeatCount(args.repeatCount);
      }

      switch (animation.property) {
        case animation_common_1.Properties.backgroundColor:
          animation.target.backgroundColor = args.toValue;
          break;

        case animation_common_1.Properties.opacity:
          animation.target.opacity = args.toValue;
          break;

        case animation_common_1.Properties.rotate:
          nativeView.layer.setValueForKey(args.toValue, args.propertyNameToAnimate);
          break;

        case _transform:
          animation._originalValue = nativeView.layer.transform;
          nativeView.layer.setValueForKey(args.toValue, args.propertyNameToAnimate);

          animation._propertyResetCallback = function (value) {
            nativeView.layer.transform = value;
          };

          break;
      }
    }, function (finished) {
      if (finished) {
        if (animation.property === _transform) {
          if (animation.value[animation_common_1.Properties.translate] !== undefined) {
            animation.target.translateX = animation.value[animation_common_1.Properties.translate].x;
            animation.target.translateY = animation.value[animation_common_1.Properties.translate].y;
          }

          if (animation.value[animation_common_1.Properties.scale] !== undefined) {
            animation.target.scaleX = animation.value[animation_common_1.Properties.scale].x;
            animation.target.scaleY = animation.value[animation_common_1.Properties.scale].y;
          }
        }
      } else {
        if (animation._propertyResetCallback) {
          animation._propertyResetCallback(animation._originalValue);
        }
      }

      if (finishedCallback) {
        var cancelled = !finished;
        finishedCallback(cancelled);
      }

      if (finished && nextAnimation) {
        nextAnimation();
      }
    });
  };

  Animation._createNativeAffineTransform = function (animation) {
    var value = animation.value;
    var result = CATransform3DIdentity;

    if (value[animation_common_1.Properties.translate] !== undefined) {
      var x = value[animation_common_1.Properties.translate].x;
      var y = value[animation_common_1.Properties.translate].y;
      result = CATransform3DTranslate(result, x, y, 0);
    }

    if (value[animation_common_1.Properties.scale] !== undefined) {
      var x = value[animation_common_1.Properties.scale].x;
      var y = value[animation_common_1.Properties.scale].y;
      result = CATransform3DScale(result, x === 0 ? 0.001 : x, y === 0 ? 0.001 : y, 1);
    }

    return result;
  };

  Animation._isAffineTransform = function (property) {
    return property === _transform || property === animation_common_1.Properties.translate || property === animation_common_1.Properties.scale;
  };

  Animation._canBeMerged = function (animation1, animation2) {
    var result = Animation._isAffineTransform(animation1.property) && Animation._isAffineTransform(animation2.property) && animation1.target === animation2.target && animation1.duration === animation2.duration && animation1.delay === animation2.delay && animation1.iterations === animation2.iterations && animation1.curve === animation2.curve;
    return result;
  };

  Animation._mergeAffineTransformAnimations = function (propertyAnimations) {
    var result = new Array();
    var i = 0;
    var j;
    var length = propertyAnimations.length;

    for (; i < length; i++) {
      if (propertyAnimations[i][_skip]) {
        continue;
      }

      if (!Animation._isAffineTransform(propertyAnimations[i].property)) {
        result.push(propertyAnimations[i]);
      } else {
        var newTransformAnimation = {
          target: propertyAnimations[i].target,
          property: _transform,
          value: {},
          duration: propertyAnimations[i].duration,
          delay: propertyAnimations[i].delay,
          iterations: propertyAnimations[i].iterations,
          curve: propertyAnimations[i].curve
        };

        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("Curve: " + propertyAnimations[i].curve, animation_common_1.traceCategories.Animation);
        }

        newTransformAnimation.value[propertyAnimations[i].property] = propertyAnimations[i].value;

        if (animation_common_1.traceEnabled()) {
          animation_common_1.traceWrite("Created new transform animation: " + Animation._getAnimationInfo(newTransformAnimation), animation_common_1.traceCategories.Animation);
        }

        j = i + 1;

        if (j < length) {
          for (; j < length; j++) {
            if (Animation._canBeMerged(propertyAnimations[i], propertyAnimations[j])) {
              if (animation_common_1.traceEnabled()) {
                animation_common_1.traceWrite("Merging animations: " + Animation._getAnimationInfo(newTransformAnimation) + " + " + Animation._getAnimationInfo(propertyAnimations[j]) + ";", animation_common_1.traceCategories.Animation);
              }

              newTransformAnimation.value[propertyAnimations[j].property] = propertyAnimations[j].value;
              propertyAnimations[j][_skip] = true;
            }
          }
        }

        result.push(newTransformAnimation);
      }
    }

    return result;
  };

  return Animation;
}(animation_common_1.AnimationBase);

exports.Animation = Animation;

function _getTransformMismatchErrorMessage(view) {
  var result = CGAffineTransformIdentity;
  var tx = view.translateX;
  var ty = view.translateY;
  result = CGAffineTransformTranslate(result, tx, ty);
  result = CGAffineTransformRotate(result, (view.rotate || 0) * Math.PI / 180);
  result = CGAffineTransformScale(result, view.scaleX || 1, view.scaleY || 1);
  var viewTransform = NSStringFromCGAffineTransform(result);
  var nativeTransform = NSStringFromCGAffineTransform(view.nativeViewProtected.transform);

  if (viewTransform !== nativeTransform) {
    return "View and Native transforms do not match. View: " + viewTransform + "; Native: " + nativeTransform;
  }

  return undefined;
}

exports._getTransformMismatchErrorMessage = _getTransformMismatchErrorMessage;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/animation/keyframe-animation.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var Keyframes = function () {
  function Keyframes() {}

  return Keyframes;
}();

exports.Keyframes = Keyframes;

var UnparsedKeyframe = function () {
  function UnparsedKeyframe() {}

  return UnparsedKeyframe;
}();

exports.UnparsedKeyframe = UnparsedKeyframe;

var KeyframeDeclaration = function () {
  function KeyframeDeclaration() {}

  return KeyframeDeclaration;
}();

exports.KeyframeDeclaration = KeyframeDeclaration;

var KeyframeInfo = function () {
  function KeyframeInfo() {
    this.curve = enums_1.AnimationCurve.ease;
  }

  return KeyframeInfo;
}();

exports.KeyframeInfo = KeyframeInfo;

var KeyframeAnimationInfo = function () {
  function KeyframeAnimationInfo() {
    this.name = "";
    this.duration = 0.3;
    this.delay = 0;
    this.iterations = 1;
    this.curve = "ease";
    this.isForwards = false;
    this.isReverse = false;
  }

  return KeyframeAnimationInfo;
}();

exports.KeyframeAnimationInfo = KeyframeAnimationInfo;

var KeyframeAnimation = function () {
  function KeyframeAnimation() {
    this.delay = 0;
    this.iterations = 1;
  }

  KeyframeAnimation.keyframeAnimationFromInfo = function (info) {
    var length = info.keyframes.length;
    var animations = new Array();
    var startDuration = 0;

    if (info.isReverse) {
      for (var index_1 = length - 1; index_1 >= 0; index_1--) {
        var keyframe = info.keyframes[index_1];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }
    } else {
      for (var index_2 = 0; index_2 < length; index_2++) {
        var keyframe = info.keyframes[index_2];
        startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration);
      }

      for (var index_3 = length - 1; index_3 > 0; index_3--) {
        var a1 = animations[index_3];
        var a2 = animations[index_3 - 1];

        if (a2["curve"] !== undefined) {
          a1["curve"] = a2["curve"];
          a2["curve"] = undefined;
        }
      }
    }

    animations.map(function (a) {
      return a["curve"] ? a : Object.assign(a, {
        curve: info.curve
      });
    });
    var animation = new KeyframeAnimation();
    animation.delay = info.delay;
    animation.iterations = info.iterations;
    animation.animations = animations;
    animation._isForwards = info.isForwards;
    return animation;
  };

  KeyframeAnimation.parseKeyframe = function (info, keyframe, animations, startDuration) {
    var animation = {};

    for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
      var declaration = _a[_i];
      animation[declaration.property] = declaration.value;
    }

    var duration = keyframe.duration;

    if (duration === 0) {
      duration = 0.01;
    } else {
      duration = info.duration * duration - startDuration;
      startDuration += duration;
    }

    animation.duration = info.isReverse ? info.duration - duration : duration;
    animation.curve = keyframe.curve;
    animation.forceLayer = true;
    animation.valueSource = "keyframe";
    animations.push(animation);
    return startDuration;
  };

  Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
    get: function () {
      return this._isPlaying;
    },
    enumerable: true,
    configurable: true
  });

  KeyframeAnimation.prototype.cancel = function () {
    if (!this.isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return;
    }

    this._isPlaying = false;

    for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
      var animation = this._nativeAnimations[i];

      if (animation.isPlaying) {
        animation.cancel();
      }
    }

    if (this._nativeAnimations.length > 0) {
      var animation = this._nativeAnimations[0];

      this._resetAnimationValues(this._target, animation);
    }

    this._resetAnimations();
  };

  KeyframeAnimation.prototype.play = function (view) {
    var _this = this;

    if (this._isPlaying) {
      trace_1.write("Keyframe animation is already playing.", trace_1.categories.Animation, trace_1.messageType.warn);
      return new Promise(function (resolve) {
        resolve();
      });
    }

    var animationFinishedPromise = new Promise(function (resolve) {
      _this._resolve = resolve;
    });
    this._isPlaying = true;
    this._nativeAnimations = new Array();
    this._target = view;

    if (this.delay !== 0) {
      setTimeout(function () {
        return _this.animate(view, 0, _this.iterations);
      }, this.delay);
    } else {
      this.animate(view, 0, this.iterations);
    }

    return animationFinishedPromise;
  };

  KeyframeAnimation.prototype.animate = function (view, index, iterations) {
    var _this = this;

    if (!this._isPlaying) {
      return;
    }

    if (index === 0) {
      var animation = this.animations[0];

      if ("backgroundColor" in animation) {
        view.style[style_properties_1.backgroundColorProperty.keyframe] = animation.backgroundColor;
      }

      if ("scale" in animation) {
        view.style[style_properties_1.scaleXProperty.keyframe] = animation.scale.x;
        view.style[style_properties_1.scaleYProperty.keyframe] = animation.scale.y;
      }

      if ("translate" in animation) {
        view.style[style_properties_1.translateXProperty.keyframe] = animation.translate.x;
        view.style[style_properties_1.translateYProperty.keyframe] = animation.translate.y;
      }

      if ("rotate" in animation) {
        view.style[style_properties_1.rotateProperty.keyframe] = animation.rotate;
      }

      if ("opacity" in animation) {
        view.style[style_properties_1.opacityProperty.keyframe] = animation.opacity;
      }

      setTimeout(function () {
        return _this.animate(view, 1, iterations);
      }, 1);
    } else if (index < 0 || index >= this.animations.length) {
      iterations -= 1;

      if (iterations > 0) {
        this.animate(view, 0, iterations);
      } else {
        if (this._isForwards === false) {
          var animation = this.animations[this.animations.length - 1];

          this._resetAnimationValues(view, animation);
        }

        this._resolveAnimationFinishedPromise();
      }
    } else {
      var animation = void 0;
      var cachedAnimation = this._nativeAnimations[index - 1];

      if (cachedAnimation) {
        animation = cachedAnimation;
      } else {
        var animationDef = this.animations[index];
        animationDef.target = view;
        animation = new animation_1.Animation([animationDef]);

        this._nativeAnimations.push(animation);
      }

      var isLastIteration = iterations - 1 <= 0;
      animation.play(isLastIteration).then(function () {
        _this.animate(view, index + 1, iterations);
      }, function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      }).catch(function (error) {
        trace_1.write(typeof error === "string" ? error : error.message, trace_1.categories.Animation, trace_1.messageType.warn);
      });
    }
  };

  KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;

    this._resolve();
  };

  KeyframeAnimation.prototype._resetAnimations = function () {
    this._nativeAnimations = new Array();
    this._isPlaying = false;
    this._target = null;
  };

  KeyframeAnimation.prototype._resetAnimationValues = function (view, animation) {
    if ("backgroundColor" in animation) {
      view.style[style_properties_1.backgroundColorProperty.keyframe] = properties_1.unsetValue;
    }

    if ("scale" in animation) {
      view.style[style_properties_1.scaleXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.scaleYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("translate" in animation) {
      view.style[style_properties_1.translateXProperty.keyframe] = properties_1.unsetValue;
      view.style[style_properties_1.translateYProperty.keyframe] = properties_1.unsetValue;
    }

    if ("rotate" in animation) {
      view.style[style_properties_1.rotateProperty.keyframe] = properties_1.unsetValue;
    }

    if ("opacity" in animation) {
      view.style[style_properties_1.opacityProperty.keyframe] = properties_1.unsetValue;
    }
  };

  return KeyframeAnimation;
}();

exports.KeyframeAnimation = KeyframeAnimation;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/border/border.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var Border = function (_super) {
  __extends(Border, _super);

  function Border() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Border.prototype, "cornerRadius", {
    get: function () {
      if (typeof this.borderRadius === "number") {
        return this.borderRadius;
      }

      return 0;
    },
    set: function (value) {
      this.borderRadius = value;
    },
    enumerable: true,
    configurable: true
  });

  Border.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = content_view_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = content_view_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = content_view_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = content_view_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var result = content_view_1.View.measureChild(this, this.layoutView, content_view_1.layout.makeMeasureSpec(width - horizontalBorderLength, widthMode), content_view_1.layout.makeMeasureSpec(height - verticalBorderLength, heightMode));
    var widthAndState = content_view_1.View.resolveSizeAndState(result.measuredWidth + horizontalBorderLength, width, widthMode, 0);
    var heightAndState = content_view_1.View.resolveSizeAndState(result.measuredHeight + verticalBorderLength, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Border.prototype.onLayout = function (left, top, right, bottom) {
    var horizontalBorderLength = this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalBorderLength = this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    content_view_1.View.layoutChild(this, this.layoutView, this.effectiveBorderLeftWidth, this.effectiveBorderTopWidth, right - left - horizontalBorderLength, bottom - top - verticalBorderLength);
  };

  Border = __decorate([Deprecated, content_view_1.CSSType("Border")], Border);
  return Border;
}(content_view_1.ContentView);

exports.Border = Border;
Border.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/binding-builder.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;

(function (bindingConstants) {
  bindingConstants.sourceProperty = "sourceProperty";
  bindingConstants.targetProperty = "targetProperty";
  bindingConstants.expression = "expression";
  bindingConstants.twoWay = "twoWay";
  bindingConstants.source = "source";
  bindingConstants.bindingValueKey = "$value";
  bindingConstants.parentValueKey = "$parent";
  bindingConstants.parentsValueKey = "$parents";
  bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));

;
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;

function isNamedParam(value) {
  var equalSignIndex = value.search(hasEqualSignRegex);

  if (equalSignIndex > -1) {
    var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);

    if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
      return true;
    }
  }

  return false;
}

function areNamedParams(params) {
  var i;

  for (i = 0; i < params.length; i++) {
    if (isNamedParam(params[i])) {
      return true;
    }
  }

  return false;
}

var namedParamConstants = {
  propName: "propName",
  propValue: "propValue"
};

function getPropertyNameValuePair(param, knownOptions, callback) {
  var nameValuePair = {};
  var propertyName = param.substr(0, param.indexOf("=")).trim();
  var propertyValue = param.substr(param.indexOf("=") + 1).trim();

  if (knownOptions) {
    if (!propertyName) {
      propertyName = knownOptions.defaultProperty;
    } else {
      propertyName = propertyName in knownOptions ? propertyName : null;
    }
  }

  if (propertyName) {
    if (callback) {
      nameValuePair = callback(propertyName, propertyValue);
    } else {
      nameValuePair[namedParamConstants.propName] = propertyName;
      nameValuePair[namedParamConstants.propValue] = propertyValue;
    }

    return nameValuePair;
  }

  return null;
}

function parseNamedProperties(parameterList, knownOptions, callback) {
  var result = {};
  var i;

  for (i = 0; i < parameterList.length; i++) {
    var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);

    if (nameValuePair) {
      result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
    }
  }

  return result;
}

function getParamsArray(value) {
  var result = [];
  var i;
  var skipComma = 0;
  var indexReached = 0;
  var singleQuoteBlock,
      doubleQuoteBlock = false;

  for (i = 0; i < value.length; i++) {
    if (value[i] === "\"") {
      doubleQuoteBlock = !doubleQuoteBlock;
    }

    if (value[i] === "'") {
      singleQuoteBlock = !singleQuoteBlock;
    }

    if (value[i] === "(" || value[i] === "[") {
      skipComma++;
    }

    if (value[i] === ")" || value[i] === "]") {
      skipComma--;
    }

    if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
      result.push(value.substr(indexReached, i - indexReached));
      indexReached = i + 1;
    }
  }

  result.push(value.substr(indexReached));
  return result;
}

function isExpression(expression) {
  if (expression.search(expressionSymbolsRegex) > -1) {
    var parentsMatches = expression.match(exports.parentsRegex);

    if (parentsMatches) {
      var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);

      if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
        return false;
      }
    }

    return true;
  }

  return false;
}

function getBindingOptions(name, value) {
  var namedParams = [];
  var params = getParamsArray(value);

  if (!areNamedParams(params)) {
    if (params.length === 1) {
      var trimmedValue = params[0].trim();
      var sourceProp;

      if (isExpression(trimmedValue)) {
        sourceProp = bindingConstants.bindingValueKey;
        namedParams.push(bindingConstants.expression + " = " + trimmedValue);
      } else {
        sourceProp = trimmedValue;
      }

      namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
      namedParams.push(bindingConstants.twoWay + " = true");
    } else {
      namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
      namedParams.push(bindingConstants.expression + " = " + params[1].trim());
      var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
      namedParams.push(bindingConstants.twoWay + " = " + twoWay);
    }
  } else {
    namedParams = params;
  }

  var bindingPropertyHandler = function (prop, value) {
    var result = {};
    result[namedParamConstants.propName] = prop;

    if (prop === bindingConstants.twoWay) {
      if (value === "true") {
        result[namedParamConstants.propValue] = true;
      } else {
        result[namedParamConstants.propValue] = false;
      }
    } else {
      result[namedParamConstants.propValue] = value;
    }

    return result;
  };

  var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
  var bindOptions = {
    targetProperty: name
  };

  for (var prop in bindingOptionsParameters) {
    if (bindingOptionsParameters.hasOwnProperty(prop)) {
      bindOptions[prop] = bindingOptionsParameters[prop];
    }
  }

  if (bindOptions[bindingConstants.twoWay] === undefined) {
    bindOptions[bindingConstants.twoWay] = true;
  }

  return bindOptions;
}

exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
  sourceProperty: true,
  expression: true,
  twoWay: true,
  source: true,
  defaultProperty: bindingConstants.sourceProperty
};

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var xml = __webpack_require__("../node_modules/tns-core-modules/xml/xml.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var component_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var ios = platform_1.platformNames.ios.toLowerCase();
var android = platform_1.platformNames.android.toLowerCase();
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;

function ensureTrace() {
  if (!trace) {
    trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");
  }
}

function parse(value, context) {
  if (typeof value === "function") {
    return value();
  } else {
    var exports_1 = context ? getExports(context) : undefined;
    var componentModule = parseInternal(value, exports_1);
    return componentModule && componentModule.component;
  }
}

exports.parse = parse;

function parseMultipleTemplates(value, context) {
  var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
  return parseInternal(dummyComponent, context).component["itemTemplates"];
}

exports.parseMultipleTemplates = parseMultipleTemplates;

function load(pathOrOptions, context) {
  var componentModule;

  if (!context) {
    if (typeof pathOrOptions === "string") {
      componentModule = loadInternal(pathOrOptions);
    } else {
      componentModule = loadCustomComponent(pathOrOptions.path, pathOrOptions.name, pathOrOptions.attributes, pathOrOptions.exports, pathOrOptions.page, true);
    }
  } else {
    var path_1 = pathOrOptions;
    componentModule = loadInternal(path_1, context);
  }

  return componentModule && componentModule.component;
}

exports.load = load;

function loadPage(moduleNamePath, fileName, context) {
  var componentModule = loadInternal(fileName, context, moduleNamePath);
  var componentView = componentModule && componentModule.component;
  markAsModuleRoot(componentView, moduleNamePath);
  return componentView;
}

exports.loadPage = loadPage;
var loadModule = profiling_1.profile("loadModule", function (moduleNamePath, entry) {
  if (global.moduleExists(entry.moduleName)) {
    return global.loadModule(entry.moduleName);
  } else {
    var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");

    if (moduleExportsResolvedPath) {
      moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
      return global.loadModule(moduleExportsResolvedPath);
    }
  }

  return null;
});
var viewFromBuilder = profiling_1.profile("viewFromBuilder", function (moduleNamePath, moduleExports) {
  var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
  return loadPage(moduleNamePath, fileName, moduleExports);
});
exports.createViewFromEntry = profiling_1.profile("createViewFromEntry", function (entry) {
  if (entry.create) {
    return createView(entry);
  } else if (entry.moduleName) {
    var currentAppPath = file_system_1.knownFolders.currentApp().path;
    var moduleNamePath = file_system_1.path.join(currentAppPath, entry.moduleName);
    var moduleExports = loadModule(moduleNamePath, entry);

    if (moduleExports && moduleExports.createPage) {
      return moduleCreateView(moduleNamePath, moduleExports);
    } else {
      return viewFromBuilder(moduleNamePath, moduleExports);
    }
  }

  throw new Error("Failed to load page XML file for module: " + entry.moduleName);
});
var createView = profiling_1.profile("entry.create", function (entry) {
  var view = entry.create();

  if (!view) {
    throw new Error("Failed to create Page with entry.create() function.");
  }

  return view;
});
var moduleCreateView = profiling_1.profile("module.createView", function (moduleNamePath, moduleExports) {
  var view = moduleExports.createPage();
  var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

  if (cssFileName) {
    view.addCssFile(cssFileName);
  }

  return view;
});

function markAsModuleRoot(componentView, moduleNamePath) {
  var lastIndexOfSeparator = moduleNamePath.lastIndexOf(file_system_1.path.separator);
  var moduleName = moduleNamePath.substring(lastIndexOfSeparator + 1);
  componentView._moduleName = moduleName;
}

function loadInternal(fileName, context, moduleNamePath) {
  var componentModule;
  var appPath = file_system_1.knownFolders.currentApp().path;
  var filePathRelativeToApp = (moduleNamePath && moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".xml";

  if (global.moduleExists(filePathRelativeToApp)) {
    var text = global.loadModule(filePathRelativeToApp);
    componentModule = parseInternal(text, context, fileName, moduleNamePath);
  } else if (fileName && file_system_1.File.exists(fileName)) {
    var file = file_system_1.File.fromPath(fileName);
    var text_1 = file.readTextSync(function (error) {
      throw new Error("Error loading file " + fileName + " :" + error.message);
    });
    componentModule = parseInternal(text_1, context, fileName, moduleNamePath);
  }

  if (componentModule && componentModule.component) {
    componentModule.component.exports = context;
  }

  return componentModule;
}

function loadCustomComponent(componentPath, componentName, attributes, context, parentPage, isRootComponent, moduleNamePath) {
  if (isRootComponent === void 0) {
    isRootComponent = true;
  }

  if (!parentPage && context) {
    parentPage = context["_parentPage"];
    delete context["_parentPage"];
  }

  var result;
  componentPath = componentPath.replace("~/", "");
  var moduleName = componentPath + "/" + componentName;
  var xmlModuleName = moduleName + ".xml";
  var fullComponentPathFilePathWithoutExt = componentPath;

  if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
    fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
  }

  var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");

  if (xmlFilePath || global.moduleExists(xmlModuleName)) {
    var subExports = context;

    if (global.moduleExists(moduleName)) {
      subExports = global.loadModule(moduleName);
    } else {
      var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");

      if (jsFilePath) {
        subExports = global.loadModule(jsFilePath);
      }
    }

    if (!subExports) {
      subExports = {};
    }

    subExports["_parentPage"] = parentPage;
    result = xmlFilePath ? loadInternal(xmlFilePath, subExports) : loadInternal(xmlFilePath, subExports, moduleName);

    if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
      for (var attr in attributes) {
        component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
      }
    }
  } else {
    result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context, moduleNamePath, isRootComponent);
  }

  var cssModulePath = fullComponentPathFilePathWithoutExt + ".css";

  if (cssModulePath.startsWith("/")) {
    var app = file_system_1.knownFolders.currentApp().path + "/";

    if (cssModulePath.startsWith(app)) {
      cssModulePath = "./" + cssModulePath.substr(app.length);
    }
  }

  if (global.moduleExists(cssModulePath)) {
    parentPage.addCssFile(cssModulePath);
  } else {
    var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");

    if (cssFilePath) {
      if (parentPage && typeof parentPage.addCssFile === "function") {
        parentPage.addCssFile(cssFilePath);
      } else {
        ensureTrace();
        trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
      }
    }
  }

  return result;
}

function getExports(instance) {
  var isView = !!instance._domId;

  if (!isView) {
    return instance.exports || instance;
  }

  var exportObject = instance.exports;
  var parent = instance.parent;

  while (exportObject === undefined && parent) {
    exportObject = parent.exports;
    parent = parent.parent;
  }

  return exportObject;
}

function parseInternal(value, context, uri, moduleNamePath) {
  var start;
  var ui;
  var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
  var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function () {};
  (start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker, moduleNamePath)));
  start.parse(value);
  return ui.rootComponentModule;
}

var xml2ui;

(function (xml2ui) {
  var XmlProducerBase = function () {
    function XmlProducerBase() {}

    XmlProducerBase.prototype.pipe = function (next) {
      this._next = next;
      return next;
    };

    XmlProducerBase.prototype.next = function (args) {
      this._next.parse(args);
    };

    return XmlProducerBase;
  }();

  xml2ui.XmlProducerBase = XmlProducerBase;

  var XmlStringParser = function (_super) {
    __extends(XmlStringParser, _super);

    function XmlStringParser(error) {
      var _this = _super.call(this) || this;

      _this.error = error || PositionErrorFormat;
      return _this;
    }

    XmlStringParser.prototype.parse = function (value) {
      var _this = this;

      var xmlParser = new xml.XmlParser(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      }, function (e, p) {
        throw _this.error(e, p);
      }, true);

      if (types_1.isString(value)) {
        xmlParser.parse(value);
      }
    };

    return XmlStringParser;
  }(XmlProducerBase);

  xml2ui.XmlStringParser = XmlStringParser;

  function PositionErrorFormat(e, p) {
    return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
  }

  xml2ui.PositionErrorFormat = PositionErrorFormat;

  function SourceErrorFormat(uri) {
    return function (e, p) {
      var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
      e = new debug_1.SourceError(e, source, "Building UI from XML.");
      return e;
    };
  }

  xml2ui.SourceErrorFormat = SourceErrorFormat;

  function ComponentSourceTracker(uri) {
    return function (component, p) {
      if (!debug_1.Source.get(component)) {
        var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
        debug_1.Source.set(component, source);
      }
    };
  }

  xml2ui.ComponentSourceTracker = ComponentSourceTracker;

  var PlatformFilter = function (_super) {
    __extends(PlatformFilter, _super);

    function PlatformFilter() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    PlatformFilter.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          if (this.currentPlatformContext) {
            throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
          }

          this.currentPlatformContext = args.elementName;
          return;
        }
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        if (PlatformFilter.isPlatform(args.elementName)) {
          this.currentPlatformContext = undefined;
          return;
        }
      }

      if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
        return;
      }

      this.next(args);
    };

    PlatformFilter.isPlatform = function (value) {
      if (value) {
        var toLower = value.toLowerCase();
        return toLower === android || toLower === ios;
      }

      return false;
    };

    PlatformFilter.isCurentPlatform = function (value) {
      return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
    };

    return PlatformFilter;
  }(XmlProducerBase);

  xml2ui.PlatformFilter = PlatformFilter;

  var XmlArgsReplay = function (_super) {
    __extends(XmlArgsReplay, _super);

    function XmlArgsReplay(args, errorFormat) {
      var _this = _super.call(this) || this;

      _this.args = args;
      _this.error = errorFormat;
      return _this;
    }

    XmlArgsReplay.prototype.replay = function () {
      var _this = this;

      this.args.forEach(function (args) {
        try {
          _this.next(args);
        } catch (e) {
          throw _this.error(e, args.position);
        }
      });
    };

    return XmlArgsReplay;
  }(XmlProducerBase);

  xml2ui.XmlArgsReplay = XmlArgsReplay;

  var XmlStateParser = function () {
    function XmlStateParser(state) {
      this.state = state;
    }

    XmlStateParser.prototype.parse = function (args) {
      this.state = this.state.parse(args);
    };

    return XmlStateParser;
  }();

  xml2ui.XmlStateParser = XmlStateParser;

  var TemplateParser = function () {
    function TemplateParser(parent, templateProperty, setTemplateProperty) {
      if (setTemplateProperty === void 0) {
        setTemplateProperty = true;
      }

      this.parent = parent;
      this._context = templateProperty.context;
      this._recordedXmlStream = new Array();
      this._templateProperty = templateProperty;
      this._nestingLevel = 0;
      this._state = 0;
      this._setTemplateProperty = setTemplateProperty;
    }

    TemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement) {
        this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        this.parseEndElement(args.prefix, args.elementName);
      }

      this._recordedXmlStream.push(args);

      return this._state === 2 ? this.parent : this;
    };

    Object.defineProperty(TemplateParser.prototype, "elementName", {
      get: function () {
        return this._templateProperty.elementName;
      },
      enumerable: true,
      configurable: true
    });

    TemplateParser.prototype.parseStartElement = function (prefix, namespace, elementName, attributes) {
      if (this._state === 0) {
        this._state = 1;
      } else if (this._state === 2) {
        throw new Error("Template must have exactly one root element but multiple elements were found.");
      }

      this._nestingLevel++;
    };

    TemplateParser.prototype.parseEndElement = function (prefix, elementName) {
      if (this._state === 0) {
        throw new Error("Template must have exactly one root element but none was found.");
      } else if (this._state === 2) {
        throw new Error("No more closing elements expected for this template.");
      }

      this._nestingLevel--;

      if (this._nestingLevel === 0) {
        this._state = 2;

        if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
          var template = this.buildTemplate();
          this._templateProperty.parent.component[this._templateProperty.name] = template;
        }
      }
    };

    TemplateParser.prototype.buildTemplate = function () {
      var _this = this;

      var context = this._context;
      var errorFormat = this._templateProperty.errorFormat;
      var sourceTracker = this._templateProperty.sourceTracker;
      var template = profiling_1.profile("Template()", function () {
        var start;
        var ui;
        (start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
        start.replay();
        return ui.rootComponentModule.component;
      });
      return template;
    };

    return TemplateParser;
  }();

  xml2ui.TemplateParser = TemplateParser;

  var MultiTemplateParser = function () {
    function MultiTemplateParser(parent, templateProperty) {
      this.parent = parent;
      this.templateProperty = templateProperty;
      this._childParsers = new Array();
    }

    Object.defineProperty(MultiTemplateParser.prototype, "value", {
      get: function () {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });

    MultiTemplateParser.prototype.parse = function (args) {
      if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
        var childParser = new TemplateParser(this, this.templateProperty, false);
        childParser["key"] = args.attributes["key"];

        this._childParsers.push(childParser);

        return childParser;
      }

      if (args.eventType === xml.ParserEventType.EndElement) {
        var name_1 = ComponentParser.getComplexPropertyName(args.elementName);

        if (name_1 === this.templateProperty.name) {
          var templates = new Array();

          for (var i = 0; i < this._childParsers.length; i++) {
            templates.push({
              key: this._childParsers[i]["key"],
              createView: this._childParsers[i].buildTemplate()
            });
          }

          this._value = templates;
          return this.parent.parse(args);
        }
      }

      return this;
    };

    return MultiTemplateParser;
  }();

  xml2ui.MultiTemplateParser = MultiTemplateParser;

  var ComponentParser = function () {
    function ComponentParser(context, errorFormat, sourceTracker, moduleNamePath) {
      this.moduleNamePath = moduleNamePath;
      this.parents = new Array();
      this.complexProperties = new Array();
      this.context = context;
      this.error = errorFormat;
      this.sourceTracker = sourceTracker;
    }

    ComponentParser.prototype.buildComponent = function (args) {
      if (args.prefix && args.namespace) {
        return loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentRootView, !this.currentRootView, this.moduleNamePath);
      } else {
        var namespace = args.namespace;

        if (defaultNameSpaceMatcher.test(namespace || "")) {
          namespace = undefined;
        }

        return component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context, this.moduleNamePath, !this.currentRootView);
      }
    };

    ComponentParser.prototype.parse = function (args) {
      var parent = this.parents[this.parents.length - 1];
      var complexProperty = this.complexProperties[this.complexProperties.length - 1];

      if (args.eventType === xml.ParserEventType.StartElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          var name = ComponentParser.getComplexPropertyName(args.elementName);
          var complexProperty_1 = {
            parent: parent,
            name: name,
            items: []
          };
          this.complexProperties.push(complexProperty_1);

          if (ComponentParser.isKnownTemplate(name, parent.exports)) {
            return new TemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
          }

          if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
            var parser = new MultiTemplateParser(this, {
              context: (parent ? getExports(parent.component) : null) || this.context,
              parent: parent,
              name: name,
              elementName: args.elementName,
              templateItems: [],
              errorFormat: this.error,
              sourceTracker: this.sourceTracker
            });
            complexProperty_1.parser = parser;
            return parser;
          }
        } else {
          var componentModule = this.buildComponent(args);

          if (componentModule) {
            this.sourceTracker(componentModule.component, args.position);

            if (parent) {
              if (complexProperty) {
                ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
              } else if (parent.component._addChildFromBuilder) {
                parent.component._addChildFromBuilder(args.elementName, componentModule.component);
              }
            } else if (this.parents.length === 0) {
              this.rootComponentModule = componentModule;

              if (this.rootComponentModule) {
                this.currentRootView = this.rootComponentModule.component;

                if (this.currentRootView.exports) {
                  this.context = this.currentRootView.exports;
                }
              }
            }

            this.parents.push(componentModule);
          }
        }
      } else if (args.eventType === xml.ParserEventType.EndElement) {
        if (ComponentParser.isComplexProperty(args.elementName)) {
          if (complexProperty) {
            if (complexProperty.parser) {
              parent.component[complexProperty.name] = complexProperty.parser.value;
            } else if (parent && parent.component._addArrayFromBuilder) {
              parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);

              complexProperty.items = [];
            }
          }

          this.complexProperties.pop();
        } else {
          this.parents.pop();
        }
      }

      return this;
    };

    ComponentParser.isComplexProperty = function (name) {
      return types_1.isString(name) && name.indexOf(".") !== -1;
    };

    ComponentParser.getComplexPropertyName = function (fullName) {
      var name;

      if (types_1.isString(fullName)) {
        var names = fullName.split(".");
        name = names[names.length - 1];
      }

      return name;
    };

    ComponentParser.isKnownTemplate = function (name, exports) {
      return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
    };

    ComponentParser.isKnownMultiTemplate = function (name, exports) {
      return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
    };

    ComponentParser.addToComplexProperty = function (parent, complexProperty, elementModule) {
      var parentComponent = parent.component;

      if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
        complexProperty.items.push(elementModule.component);
      } else if (parentComponent._addChildFromBuilder) {
        parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
      } else {
        parentComponent[complexProperty.name] = elementModule.component;
      }
    };

    ComponentParser.isKnownCollection = function (name, context) {
      return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
    };

    ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
    ComponentParser.KNOWNTEMPLATES = "knownTemplates";
    ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";

    __decorate([profiling_1.profile], ComponentParser.prototype, "buildComponent", null);

    return ComponentParser;
  }();

  xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/builder/component-builder/component-builder.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var file_name_resolver_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-name-resolver/file-name-resolver.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var platform = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var filesystem = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var UI_PATH = "ui/";
var MODULES = {
  "TabViewItem": "ui/tab-view",
  "FormattedString": "text/formatted-string",
  "Span": "text/span",
  "ActionItem": "ui/action-bar",
  "NavigationButton": "ui/action-bar",
  "SegmentedBarItem": "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
var createComponentInstance = profiling_1.profile("createComponentInstance", function (elementName, namespace) {
  var instance;
  var instanceModule;
  var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();

  try {
    if (typeof namespace === "string") {
      if (global.moduleExists(namespace)) {
        moduleId = namespace;
      } else {
        var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);

        try {
          instanceModule = global.require(pathInsideTNSModules);
          moduleId = pathInsideTNSModules;
        } catch (e) {
          moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
        }
      }
    }

    if (!instanceModule) {
      instanceModule = global.loadModule(moduleId);
    }

    var instanceType = instanceModule[elementName] || Object;
    instance = new instanceType();
  } catch (ex) {
    var debug = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

    throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
  }

  return {
    instance: instance,
    instanceModule: instanceModule
  };
});
var getComponentModuleExports = profiling_1.profile("getComponentModuleExports", function (instance, moduleExports, attributes) {
  if (attributes) {
    if (attributes[IMPORT]) {
      var importPath = attributes[IMPORT].trim();

      if (importPath.indexOf("~/") === 0) {
        importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
      }

      moduleExports = global.loadModule(importPath);
      instance.exports = moduleExports;
    }

    if (attributes[CODEFILE]) {
      var codeFilePath = attributes[CODEFILE].trim();

      if (codeFilePath.indexOf("~/") === 0) {
        codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
      }

      var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";

      if (file_system_1.File.exists(codeFilePathWithExt)) {
        moduleExports = global.loadModule(codeFilePath);
        instance.exports = moduleExports;
      } else {
        throw new Error("Code file with path \"" + codeFilePathWithExt + "\" cannot be found!");
      }
    }
  }

  return moduleExports;
});
var applyComponentCss = profiling_1.profile("applyComponentCss", function (instance, moduleNamePath, attributes) {
  var cssApplied = false;

  if (attributes) {
    if (attributes[CSSFILE] && typeof instance.addCssFile === "function") {
      var cssFilePath = attributes[CSSFILE].trim();

      if (cssFilePath.indexOf("~/") === 0) {
        cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
      }

      if (file_system_1.File.exists(cssFilePath)) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      } else {
        throw new Error("Css file with path \"" + cssFilePath + "\" cannot be found!");
      }
    }
  }

  if (typeof instance.addCssFile === "function") {
    if (moduleNamePath && !cssApplied) {
      var appPath = filesystem.knownFolders.currentApp().path;
      var cssPathRelativeToApp = (moduleNamePath.startsWith(appPath) ? "./" + moduleNamePath.substr(appPath.length + 1) : moduleNamePath) + ".css";

      if (global.moduleExists(cssPathRelativeToApp)) {
        instance.addCssFile(cssPathRelativeToApp);
      }

      var cssFilePath = file_name_resolver_1.resolveFileName(moduleNamePath, "css");

      if (cssFilePath) {
        instance.addCssFile(cssFilePath);
        cssApplied = true;
      }
    }
  }
});
var applyComponentAttributes = profiling_1.profile("applyComponentAttributes", function (instance, instanceModule, moduleExports, attributes) {
  if (instance && instanceModule) {
    for (var attr in attributes) {
      var attrValue = attributes[attr];

      if (attr.indexOf(":") !== -1) {
        var platformName = attr.split(":")[0].trim();

        if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
          attr = attr.split(":")[1].trim();
        } else {
          continue;
        }
      }

      if (attr.indexOf(".") !== -1) {
        var subObj = instance;
        var properties = attr.split(".");
        var subPropName = properties[properties.length - 1];

        for (var i = 0; i < properties.length - 1; i++) {
          if (subObj !== undefined && subObj !== null) {
            subObj = subObj[properties[i]];
          }
        }

        if (subObj !== undefined && subObj !== null) {
          setPropertyValue(subObj, instanceModule, moduleExports, subPropName, attrValue);
        }
      } else {
        setPropertyValue(instance, instanceModule, moduleExports, attr, attrValue);
      }
    }
  }
});

function getComponentModule(elementName, namespace, attributes, moduleExports, moduleNamePath, isRootComponent) {
  elementName = elementName.split("-").map(function (s) {
    return s[0].toUpperCase() + s.substring(1);
  }).join("");

  var _a = createComponentInstance(elementName, namespace),
      instance = _a.instance,
      instanceModule = _a.instanceModule;

  moduleExports = getComponentModuleExports(instance, moduleExports, attributes);

  if (isRootComponent) {
    applyComponentCss(instance, moduleNamePath, attributes);
  }

  applyComponentAttributes(instance, instanceModule, moduleExports, attributes);
  var componentModule;

  if (instance && instanceModule) {
    componentModule = {
      component: instance,
      exports: instanceModule
    };
  }

  return componentModule;
}

exports.getComponentModule = getComponentModule;

function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
  if (isBinding(propertyValue) && instance.bind) {
    var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
    instance.bind({
      sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
      targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
      expression: bindOptions[binding_builder_1.bindingConstants.expression],
      twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
    }, bindOptions[binding_builder_1.bindingConstants.source]);
  } else if (bindable_1.isEventOrGesture(propertyName, instance)) {
    var handler = exports && exports[propertyValue];

    if (typeof handler === "function") {
      instance.on(propertyName, handler);
    }
  } else if (isKnownFunction(propertyName, instance) && exports && typeof exports[propertyValue] === "function") {
    instance[propertyName] = exports[propertyValue];
  } else {
    instance[propertyName] = propertyValue;
  }
}

exports.setPropertyValue = setPropertyValue;

function getBindingExpressionFromAttribute(value) {
  return value.replace("{{", "").replace("}}", "").trim();
}

function isBinding(value) {
  var isBinding;

  if (typeof value === "string") {
    var str = value.trim();
    isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
  }

  return isBinding;
}

var KNOWN_FUNCTIONS = "knownFunctions";

function isKnownFunction(name, instance) {
  return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var ButtonBase = function (_super) {
  __extends(ButtonBase, _super);

  function ButtonBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ButtonBase.prototype, "textWrap", {
    get: function () {
      return this.style.whiteSpace === "normal";
    },
    set: function (value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });
  ButtonBase.tapEvent = "tap";
  ButtonBase = __decorate([text_base_1.CSSType("Button")], ButtonBase);
  return ButtonBase;
}(text_base_1.TextBase);

exports.ButtonBase = ButtonBase;
ButtonBase.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/button/button.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var control_state_change_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/control-state-change/control-state-change.js");

var button_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/button/button-common.js"));

var Button = function (_super) {
  __extends(Button, _super);

  function Button() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Button.prototype.createNativeView = function () {
    return UIButton.buttonWithType(1);
  };

  Button.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    this._tapHandler = TapHandlerImpl.initWithOwner(new WeakRef(this));
    nativeView.addTargetActionForControlEvents(this._tapHandler, "tap", 64);
  };

  Button.prototype.disposeNativeView = function () {
    this._tapHandler = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(Button.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  Button.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    if (this._stateChangedHandler) {
      this._stateChangedHandler.stop();
    }
  };

  Button.prototype._updateHandler = function (subscribe) {
    var _this = this;

    if (subscribe) {
      if (!this._stateChangedHandler) {
        this._stateChangedHandler = new control_state_change_1.ControlStateChangeListener(this.nativeViewProtected, function (s) {
          _this._goToVisualState(s);
        });
      }

      this._stateChangedHandler.start();
    } else {
      this._stateChangedHandler.stop();
    }
  };

  Button.prototype[button_common_1.borderTopWidthProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.top,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.borderTopWidthProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var top = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingTop + this.effectiveBorderTopWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: top,
      left: inset.left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.borderRightWidthProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.right,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.borderRightWidthProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var right = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingRight + this.effectiveBorderRightWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: inset.left,
      bottom: inset.bottom,
      right: right
    };
  };

  Button.prototype[button_common_1.borderBottomWidthProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.bottom,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.borderBottomWidthProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var bottom = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingBottom + this.effectiveBorderBottomWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: inset.left,
      bottom: bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.borderLeftWidthProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.left,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.borderLeftWidthProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var left = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingLeft + this.effectiveBorderLeftWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.top,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingTopProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var top = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingTop + this.effectiveBorderTopWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: top,
      left: inset.left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.right,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingRightProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var right = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingRight + this.effectiveBorderRightWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: inset.left,
      bottom: inset.bottom,
      right: right
    };
  };

  Button.prototype[button_common_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.bottom,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingBottomProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var bottom = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingBottom + this.effectiveBorderBottomWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: inset.left,
      bottom: bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this.nativeViewProtected.contentEdgeInsets.left,
      unit: "px"
    };
  };

  Button.prototype[button_common_1.paddingLeftProperty.setNative] = function (value) {
    var inset = this.nativeViewProtected.contentEdgeInsets;
    var left = button_common_1.layout.toDeviceIndependentPixels(this.effectivePaddingLeft + this.effectiveBorderLeftWidth);
    this.nativeViewProtected.contentEdgeInsets = {
      top: inset.top,
      left: left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  Button.prototype[button_common_1.textAlignmentProperty.setNative] = function (value) {
    switch (value) {
      case "left":
        this.nativeViewProtected.titleLabel.textAlignment = 0;
        this.nativeViewProtected.contentHorizontalAlignment = 1;
        break;

      case "initial":
      case "center":
        this.nativeViewProtected.titleLabel.textAlignment = 1;
        this.nativeViewProtected.contentHorizontalAlignment = 0;
        break;

      case "right":
        this.nativeViewProtected.titleLabel.textAlignment = 2;
        this.nativeViewProtected.contentHorizontalAlignment = 2;
        break;
    }
  };

  Button.prototype[button_common_1.whiteSpaceProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected.titleLabel;

    switch (value) {
      case "normal":
        nativeView.lineBreakMode = 0;
        nativeView.numberOfLines = 0;
        break;

      case "nowrap":
      case "initial":
        nativeView.lineBreakMode = 5;
        nativeView.numberOfLines = 1;
        break;
    }
  };

  Button.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    if (!this.textWrap) {
      return _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);
    }

    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      var width = button_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
      var widthMode = button_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
      var height = button_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
      var heightMode = button_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
      var horizontalPadding = this.effectivePaddingLeft + this.effectiveBorderLeftWidth + this.effectivePaddingRight + this.effectiveBorderRightWidth;
      var verticalPadding = this.effectivePaddingTop + this.effectiveBorderTopWidth + this.effectivePaddingBottom + this.effectiveBorderBottomWidth;

      if (verticalPadding === 0) {
        verticalPadding = button_common_1.layout.toDevicePixels(12);
      }

      var desiredSize = button_common_1.layout.measureNativeView(nativeView.titleLabel, width - horizontalPadding, widthMode, height - verticalPadding, heightMode);
      desiredSize.width = desiredSize.width + horizontalPadding;
      desiredSize.height = desiredSize.height + verticalPadding;
      var measureWidth = Math.max(desiredSize.width, this.effectiveMinWidth);
      var measureHeight = Math.max(desiredSize.height, this.effectiveMinHeight);
      var widthAndState = button_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
      var heightAndState = button_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
      this.setMeasuredDimension(widthAndState, heightAndState);
    }
  };

  __decorate([button_common_1.PseudoClassHandler("normal", "highlighted", "pressed", "active")], Button.prototype, "_updateHandler", null);

  return Button;
}(button_common_1.ButtonBase);

exports.Button = Button;

var TapHandlerImpl = function (_super) {
  __extends(TapHandlerImpl, _super);

  function TapHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TapHandlerImpl.initWithOwner = function (owner) {
    var handler = TapHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  TapHandlerImpl.prototype.tap = function (args) {
    var owner = this._owner.get();

    if (owner) {
      owner._emit(button_common_1.ButtonBase.tapEvent);
    }
  };

  TapHandlerImpl.ObjCExposedMethods = {
    "tap": {
      returns: interop.types.void,
      params: [interop.types.id]
    }
  };
  return TapHandlerImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/content-view/content-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ContentView = function (_super) {
  __extends(ContentView, _super);

  function ContentView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ContentView.prototype, "content", {
    get: function () {
      return this._content;
    },
    set: function (value) {
      var oldView = this._content;

      if (this._content) {
        this._removeView(this._content);
      }

      this._content = value;

      if (this._content) {
        this._addView(this._content);
      }

      this._onContentChanged(oldView, value);

      if (view_1.isIOS && oldView !== value) {
        this.requestLayout();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContentView.prototype, "layoutView", {
    get: function () {
      var result;

      if (this._content) {
        var first_1 = true;

        this._content._eachLayoutView(function (child) {
          if (first_1) {
            first_1 = false;
            result = child;
          } else {
            throw new Error("More than one layout child inside a ContentView");
          }
        });
      }

      return result;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ContentView.prototype, "_childrenCount", {
    get: function () {
      return this._content ? 1 : 0;
    },
    enumerable: true,
    configurable: true
  });

  ContentView.prototype._onContentChanged = function (oldView, newView) {};

  ContentView.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.content = value;
    }
  };

  ContentView.prototype.eachChildView = function (callback) {
    var content = this._content;

    if (content) {
      callback(content);
    }
  };

  ContentView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var result = view_1.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
    var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = view_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = view_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var measureWidth = Math.max(result.measuredWidth, this.effectiveMinWidth);
    var measureHeight = Math.max(result.measuredHeight, this.effectiveMinHeight);
    var widthAndState = view_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = view_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  ContentView.prototype.onLayout = function (left, top, right, bottom) {
    view_1.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
  };

  return ContentView;
}(view_1.CustomLayoutView);

exports.ContentView = ContentView;
ContentView.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/bindable/bindable.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

exports.Observable = observable_1.Observable;
exports.WrappedValue = observable_1.WrappedValue;

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

var binding_builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/binding-builder.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceError = trace_1.error;
exports.traceCategories = trace_1.categories;
exports.traceNotifyEvent = trace_1.notifyEvent;
exports.isCategorySet = trace_1.isCategorySet;
exports.traceMessageType = trace_1.messageType;

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var polymerExpressions = __webpack_require__("../node_modules/tns-core-modules/js-libs/polymer-expressions/polymer-expressions.js");

var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = binding_builder_1.bindingConstants;
var emptyArray = [];
var propertiesCache = {};

function getProperties(property) {
  if (!property) {
    return emptyArray;
  }

  var result = propertiesCache[property];

  if (result) {
    return result;
  }

  var parentsMatches = property.match(binding_builder_1.parentsRegex);
  result = property.replace(binding_builder_1.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
  var parentsMatchesCounter = 0;

  for (var i = 0, resultLength = result.length; i < resultLength; i++) {
    if (result[i] === "parentsMatch") {
      result[i] = parentsMatches[parentsMatchesCounter++];
    }
  }

  propertiesCache[property] = result;
  return result;
}

function getEventOrGestureName(name) {
  return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}

exports.getEventOrGestureName = getEventOrGestureName;

function isGesture(eventOrGestureName) {
  var t = eventOrGestureName.trim().toLowerCase();
  return t === "tap" || t === "doubletap" || t === "pinch" || t === "pan" || t === "swipe" || t === "rotation" || t === "longpress" || t === "touch";
}

exports.isGesture = isGesture;

function isEventOrGesture(name, view) {
  if (typeof name === "string") {
    var eventOrGestureName = getEventOrGestureName(name);
    var evt = eventOrGestureName + "Event";
    return view.constructor && evt in view.constructor || isGesture(eventOrGestureName.toLowerCase());
  }

  return false;
}

exports.isEventOrGesture = isEventOrGesture;

var Binding = function () {
  function Binding(target, options) {
    this.propertyChangeListeners = new Map();
    this.target = new WeakRef(target);
    this.options = options;
    this.sourceProperties = getProperties(options.sourceProperty);
    this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));

    if (!this.targetOptions) {
      throw new Error("Invalid property: " + options.targetProperty + " for target: " + target);
    }

    if (options.twoWay) {
      var target_1 = this.targetOptions.instance.get();

      if (target_1 instanceof observable_1.Observable) {
        target_1.on(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }
    }
  }

  Binding.prototype.onTargetPropertyChanged = function (data) {
    this.updateTwoWay(data.value);
  };

  Binding.prototype.loadedHandlerVisualTreeBinding = function (args) {
    var target = args.object;
    target.off("loaded", this.loadedHandlerVisualTreeBinding, this);
    var context = target.bindingContext;

    if (context !== undefined && context !== null) {
      this.update(context);
    }
  };

  ;

  Binding.prototype.clearSource = function () {
    var _this = this;

    this.propertyChangeListeners.forEach(function (observable, index, map) {
      weak_event_listener_1.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
    });
    this.propertyChangeListeners.clear();

    if (this.source) {
      this.source.clear();
    }

    if (this.sourceOptions) {
      this.sourceOptions.instance.clear();
      this.sourceOptions = undefined;
    }
  };

  Binding.prototype.sourceAsObject = function (source) {
    var objectType = typeof source;

    if (objectType === "number") {
      source = new Number(source);
    } else if (objectType === "boolean") {
      source = new Boolean(source);
    } else if (objectType === "string") {
      source = new String(source);
    }

    return source;
  };

  Binding.prototype.bindingContextChanged = function (data) {
    var target = this.targetOptions.instance.get();

    if (!target) {
      this.unbind();
      return;
    }

    var value = data.value;

    if (value !== null && value !== undefined) {
      this.update(value);
    } else {
      this.clearBinding();
    }
  };

  Binding.prototype.bind = function (source) {
    var target = this.targetOptions.instance.get();

    if (this.sourceIsBindingContext && target instanceof observable_1.Observable && this.targetOptions.property !== "bindingContext") {
      target.on("bindingContextChange", this.bindingContextChanged, this);
    }

    this.update(source);
  };

  Binding.prototype.update = function (source) {
    this.clearSource();
    source = this.sourceAsObject(source);

    if (!types.isNullOrUndefined(source)) {
      this.source = new WeakRef(source);
      this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue);
      this.addPropertyChangeListeners(this.source, this.sourceProperties);
    } else if (!this.sourceIsBindingContext) {
      var sourceValue = this.getSourcePropertyValue();
      this.updateTarget(sourceValue ? sourceValue : source);
    }
  };

  Binding.prototype.unbind = function () {
    var target = this.targetOptions.instance.get();

    if (target instanceof observable_1.Observable) {
      if (this.options.twoWay) {
        target.off(this.targetOptions.property + "Change", this.onTargetPropertyChanged, this);
      }

      if (this.sourceIsBindingContext && this.targetOptions.property !== "bindingContext") {
        target.off("bindingContextChange", this.bindingContextChanged, this);
      }
    }

    if (this.targetOptions) {
      this.targetOptions = undefined;
    }

    this.sourceProperties = undefined;

    if (!this.source) {
      return;
    }

    this.clearSource();
  };

  Binding.prototype.resolveObjectsAndProperties = function (source, properties) {
    var result = [];
    var currentObject = source;
    var currentObjectChanged = false;

    for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
      var property = properties[i];

      if (property === bc.bindingValueKey) {
        currentObjectChanged = true;
      }

      if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
        var parentView = this.getParentView(this.target.get(), property).view;

        if (parentView) {
          currentObject = parentView.bindingContext;
        } else {
          var targetInstance = this.target.get();
          targetInstance.off("loaded", this.loadedHandlerVisualTreeBinding, this);
          targetInstance.on("loaded", this.loadedHandlerVisualTreeBinding, this);
        }

        currentObjectChanged = true;
      }

      if (currentObject) {
        result.push({
          instance: currentObject,
          property: property
        });
      } else {
        break;
      }

      if (!currentObjectChanged && i < propsArrayLength - 1) {
        currentObject = currentObject ? currentObject[properties[i]] : null;
      }

      currentObjectChanged = false;
    }

    return result;
  };

  Binding.prototype.addPropertyChangeListeners = function (source, sourceProperty, parentProperies) {
    var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
    var prop = parentProperies || "";

    for (var i = 0, length_1 = objectsAndProperties.length; i < length_1; i++) {
      var propName = objectsAndProperties[i].property;
      prop += "$" + propName;
      var currentObject = objectsAndProperties[i].instance;

      if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable && currentObject._isViewBase) {
        weak_event_listener_1.addWeakEventListener(currentObject, propName + "Change", this.onSourcePropertyChanged, this);
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      } else if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
        weak_event_listener_1.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
        this.propertyChangeListeners.set(prop, currentObject);
      }
    }
  };

  Binding.prototype.prepareExpressionForUpdate = function () {
    var escapedSourceProperty = utils_1.escapeRegexSymbols(this.options.sourceProperty);
    var expRegex = new RegExp(escapedSourceProperty, "g");
    var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
    return resultExp;
  };

  Binding.prototype.updateTwoWay = function (value) {
    if (this.updating || !this.options.twoWay) {
      return;
    }

    var newValue = value;

    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = value;
      changedModel[bc.newPropertyValueKey] = value;
      var sourcePropertyName = "";

      if (this.sourceOptions) {
        sourcePropertyName = this.sourceOptions.property;
      } else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
        sourcePropertyName = this.options.sourceProperty;
      }

      if (sourcePropertyName !== "") {
        changedModel[sourcePropertyName] = value;
      }

      var updateExpression = this.prepareExpressionForUpdate();
      this.prepareContextForExpression(changedModel, updateExpression, undefined);

      var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      }

      newValue = expressionValue;
    }

    this.updateSource(newValue);
  };

  Binding.prototype._getExpressionValue = function (expression, isBackConvert, changedModel) {
    try {
      var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);

      if (exp_1) {
        var context_1 = this.source && this.source.get && this.source.get() || global;
        var model = {};
        var addedProps = [];
        var resources = applicationCommon.getResources();

        for (var prop in resources) {
          if (resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
            context_1[prop] = resources[prop];
            addedProps.push(prop);
          }
        }

        this.prepareContextForExpression(context_1, expression, addedProps);
        model[contextKey] = context_1;
        var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
        var addedPropsLength = addedProps.length;

        for (var i = 0; i < addedPropsLength; i++) {
          delete context_1[addedProps[i]];
        }

        addedProps.length = 0;
        return result;
      }

      return new Error(expression + " is not a valid expression.");
    } catch (e) {
      var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
      return new Error(errorMessage);
    }
  };

  Binding.prototype.onSourcePropertyChanged = function (data) {
    var sourceProps = this.sourceProperties;
    var sourcePropsLength = sourceProps.length;
    var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
    var parentProps = "";

    if (changedPropertyIndex > -1) {
      parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");

      while (this.propertyChangeListeners.get(parentProps) !== data.object) {
        changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
        parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
      }
    }

    if (this.options.expression) {
      var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        this.updateTarget(expressionValue);
      }
    } else {
      if (changedPropertyIndex > -1) {
        var props = sourceProps.slice(changedPropertyIndex + 1);
        var propsLength = props.length;

        if (propsLength > 0) {
          var value = data.value;

          for (var i = 0; i < propsLength; i++) {
            value = value[props[i]];
          }

          this.updateTarget(value);
        } else if (data.propertyName === this.sourceOptions.property) {
          this.updateTarget(data.value);
        }
      }
    }

    if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
      var probablyChangedObject = this.propertyChangeListeners.get(parentProps);

      if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
        for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
          var prop = "$" + sourceProps.slice(0, i + 1).join("$");

          if (this.propertyChangeListeners.has(prop)) {
            weak_event_listener_1.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
            this.propertyChangeListeners.delete(prop);
          }
        }

        var newProps = sourceProps.slice(changedPropertyIndex + 1);
        var newObject = data.object[sourceProps[changedPropertyIndex]];

        if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
          this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
        }
      }
    }
  };

  Binding.prototype.prepareContextForExpression = function (model, expression, newProps) {
    var parentViewAndIndex;
    var parentView;
    var addedProps = newProps || [];

    if (expression.indexOf(bc.bindingValueKey) > -1) {
      model[bc.bindingValueKey] = model;
      addedProps.push(bc.bindingValueKey);
    }

    if (expression.indexOf(bc.parentValueKey) > -1) {
      parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;

      if (parentView) {
        model[bc.parentValueKey] = parentView.bindingContext;
        addedProps.push(bc.parentValueKey);
      }
    }

    var parentsArray = expression.match(binding_builder_1.parentsRegex);

    if (parentsArray) {
      for (var i = 0; i < parentsArray.length; i++) {
        parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);

        if (parentViewAndIndex.view) {
          model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
          model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
          addedProps.push(bc.parentsValueKey);
        }
      }
    }
  };

  Binding.prototype.getSourcePropertyValue = function () {
    if (this.options.expression) {
      var changedModel = {};
      changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;

      var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);

      if (expressionValue instanceof Error) {
        trace_1.write(expressionValue.message, trace_1.categories.Binding, trace_1.messageType.error);
      } else {
        return expressionValue;
      }
    }

    if (this.sourceOptions) {
      var sourceOptionsInstance = this.sourceOptions.instance.get();

      if (this.sourceOptions.property === bc.bindingValueKey) {
        return sourceOptionsInstance;
      } else if (sourceOptionsInstance instanceof observable_1.Observable && this.sourceOptions.property && this.sourceOptions.property !== "") {
        return sourceOptionsInstance.get(this.sourceOptions.property);
      } else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
        return sourceOptionsInstance[this.sourceOptions.property];
      } else {
        trace_1.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace_1.categories.Binding, trace_1.messageType.error);
      }
    }

    return null;
  };

  Binding.prototype.clearBinding = function () {
    this.clearSource();
    this.updateTarget(properties_1.unsetValue);
  };

  Binding.prototype.updateTarget = function (value) {
    if (this.updating) {
      return;
    }

    this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? properties_1.unsetValue : value);
  };

  Binding.prototype.updateSource = function (value) {
    if (this.updating || !this.source || !this.source.get()) {
      return;
    }

    this.updateOptions(this.sourceOptions, value);
  };

  Binding.prototype.getParentView = function (target, property) {
    if (!target) {
      return {
        view: null,
        index: null
      };
    }

    var result;

    if (property === bc.parentValueKey) {
      result = target.parent;
    }

    var index = null;

    if (property.indexOf(bc.parentsValueKey) === 0) {
      result = target.parent;
      var indexParams = paramsRegex.exec(property);

      if (indexParams && indexParams.length > 1) {
        index = indexParams[2];
      }

      if (!isNaN(index)) {
        var indexAsInt = parseInt(index);

        while (indexAsInt > 0) {
          result = result.parent;
          indexAsInt--;
        }
      } else if (types.isString(index)) {
        while (result && result.typeName !== index) {
          result = result.parent;
        }
      }
    }

    return {
      view: result,
      index: index
    };
  };

  Binding.prototype.resolveOptions = function (obj, properties) {
    var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);

    if (objectsAndProperties.length > 0) {
      var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
      var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
      return {
        instance: new WeakRef(this.sourceAsObject(resolvedObj)),
        property: prop
      };
    }

    return null;
  };

  Binding.prototype.updateOptions = function (options, value) {
    var optionsInstance;

    if (options && options.instance) {
      optionsInstance = options.instance.get();
    }

    if (!optionsInstance) {
      return;
    }

    this.updating = true;

    try {
      if (isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
        optionsInstance.off(options.property, null, optionsInstance.bindingContext);
        optionsInstance.on(options.property, value, optionsInstance.bindingContext);
      } else if (optionsInstance instanceof observable_1.Observable) {
        optionsInstance.set(options.property, value);
      } else {
        optionsInstance[options.property] = value;
      }
    } catch (ex) {
      trace_1.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace_1.categories.Binding, trace_1.messageType.error);
    }

    this.updating = false;
  };

  return Binding;
}();

exports.Binding = Binding;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/control-state-change/control-state-change.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var ObserverClass = function (_super) {
  __extends(ObserverClass, _super);

  function ObserverClass() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ObserverClass.prototype.observeValueForKeyPathOfObjectChangeContext = function (path) {
    if (path === "selected") {
      this["_owner"]._onSelectedChanged();
    } else if (path === "enabled") {
      this["_owner"]._onEnabledChanged();
    } else if (path === "highlighted") {
      this["_owner"]._onHighlightedChanged();
    }
  };

  return ObserverClass;
}(NSObject);

var ControlStateChangeListener = function () {
  function ControlStateChangeListener(control, callback) {
    this._observing = false;
    this._observer = ObserverClass.alloc();
    this._observer["_owner"] = this;
    this._control = control;
    this._callback = callback;
  }

  ControlStateChangeListener.prototype.start = function () {
    if (!this._observing) {
      this._control.addObserverForKeyPathOptionsContext(this._observer, "highlighted", 1, null);

      this._observing = true;

      this._updateState();
    }
  };

  ControlStateChangeListener.prototype.stop = function () {
    if (this._observing) {
      this._observing = false;

      this._control.removeObserverForKeyPath(this._observer, "highlighted");
    }
  };

  ControlStateChangeListener.prototype._onEnabledChanged = function () {
    this._updateState();
  };

  ControlStateChangeListener.prototype._onSelectedChanged = function () {
    this._updateState();
  };

  ControlStateChangeListener.prototype._onHighlightedChanged = function () {
    this._updateState();
  };

  ControlStateChangeListener.prototype._updateState = function () {
    var state = "normal";

    if (this._control.highlighted) {
      state = "highlighted";
    }

    this._callback(state);
  };

  return ControlStateChangeListener;
}();

exports.ControlStateChangeListener = ControlStateChangeListener;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/properties/properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var style_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style/style.js");

exports.Style = style_1.Style;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

exports.unsetValue = new Object();
var cssPropertyNames = [];
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();

function print(map) {
  var symbols = Object.getOwnPropertySymbols(map);

  for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
    var symbol = symbols_1[_i];
    var prop = map[symbol];

    if (!prop.registered) {
      console.log("Property " + prop.name + " not Registered!!!!!");
    }
  }
}

function _printUnregisteredProperties() {
  print(symbolPropertyMap);
  print(cssSymbolPropertyMap);
}

exports._printUnregisteredProperties = _printUnregisteredProperties;

function _getProperties() {
  return getPropertiesFromMap(symbolPropertyMap);
}

exports._getProperties = _getProperties;

function _getStyleProperties() {
  return getPropertiesFromMap(cssSymbolPropertyMap);
}

exports._getStyleProperties = _getStyleProperties;

function getPropertiesFromMap(map) {
  var props = [];
  Object.getOwnPropertySymbols(map).forEach(function (symbol) {
    return props.push(map[symbol]);
  });
  return props;
}

var Property = function () {
  function Property(options) {
    this.enumerable = true;
    this.configurable = true;
    var propertyName = options.name;
    this.name = propertyName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var equalityComparer = options.equalityComparer;
    var affectsLayout = options.affectsLayout;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (affectsLayout) {
          this.requestLayout();
        }

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    this.get = function () {
      return key in this ? this[key] : defaultValue;
    };

    this.nativeValueChange = function (owner, value) {
      var oldValue = key in owner ? owner[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        owner[key] = value;

        if (valueChanged) {
          valueChanged(owner, oldValue, value);
        }

        if (owner.nativeViewProtected && !(defaultValueKey in owner)) {
          owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
        }

        if (owner.hasListeners(eventName)) {
          owner.notify({
            object: owner,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          owner.requestLayout();
        }

        if (owner.domNode) {
          owner.domNode.attributeModified(propertyName, value);
        }
      }
    };

    symbolPropertyMap[key] = this;
  }

  Property.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this);
  };

  Property.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return Property;
}();

exports.Property = Property;
Property.prototype.isStyleProperty = false;

var CoercibleProperty = function (_super) {
  __extends(CoercibleProperty, _super);

  function CoercibleProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var defaultValue = _this.defaultValue;
    var coerceKey = Symbol(propertyName + ":coerceKey");
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var coerceCallback = options.coerceValue;
    var property = _this;

    _this.coerce = function (target) {
      var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
      target[propertyName] = originalValue;
    };

    _this.set = function (boxedValue) {
      var reset = boxedValue === exports.unsetValue;
      var value;
      var wrapped;

      if (reset) {
        value = defaultValue;
        delete this[coerceKey];
      } else {
        wrapped = boxedValue && boxedValue.wrapped;
        value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;

        if (valueConverter && typeof value === "string") {
          value = valueConverter(value);
        }

        this[coerceKey] = value;
        value = coerceCallback(this, value);
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (wrapped || changed) {
        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                this[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                this[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (this[setNative]) {
            if (this._suspendNativeUpdatesCount) {
              if (this._suspendedUpdates) {
                this._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
              }

              this[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          this.requestLayout();
        }

        if (this.domNode) {
          if (reset) {
            this.domNode.attributeRemoved(propertyName);
          } else {
            this.domNode.attributeModified(propertyName, value);
          }
        }
      }
    };

    return _this;
  }

  return CoercibleProperty;
}(Property);

exports.CoercibleProperty = CoercibleProperty;

var InheritedProperty = function (_super) {
  __extends(InheritedProperty, _super);

  function InheritedProperty(options) {
    var _this = _super.call(this, options) || this;

    var name = options.name;
    var key = _this.key;
    var defaultValue = options.defaultValue;
    var sourceKey = Symbol(name + ":valueSourceKey");
    _this.sourceKey = sourceKey;
    var setBase = _this.set;

    var setFunc = function (valueSource) {
      return function (value) {
        var that = this;
        var unboxedValue;
        var newValueSource;

        if (value === exports.unsetValue) {
          var parent_1 = that.parent;

          if (parent_1 && parent_1[sourceKey] !== 0) {
            unboxedValue = parent_1[name];
            newValueSource = 1;
          } else {
            unboxedValue = defaultValue;
            newValueSource = 0;
          }
        } else {
          unboxedValue = value;
          newValueSource = valueSource;
        }

        var currentValue = that[key];
        setBase.call(that, unboxedValue);
        var newValue = that[key];
        that[sourceKey] = newValueSource;

        if (currentValue !== newValue) {
          var reset_1 = newValueSource === 0;
          that.eachChild(function (child) {
            var childValueSource = child[sourceKey] || 0;

            if (reset_1) {
              if (childValueSource === 1) {
                setFunc.call(child, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedValue.call(child, newValue);
              }
            }

            return true;
          });
        }
      };
    };

    var setInheritedValue = setFunc(1);
    _this.setInheritedValue = setInheritedValue;
    _this.set = setFunc(3);
    inheritableProperties.push(_this);
    return _this;
  }

  return InheritedProperty;
}(Property);

exports.InheritedProperty = InheritedProperty;

var CssProperty = function () {
  function CssProperty(options) {
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = options.cssName;
    var key = Symbol(propertyName + ":propertyKey");
    this.key = key;
    var sourceKey = Symbol(propertyName + ":valueSourceKey");
    this.sourceKey = sourceKey;
    var getDefault = Symbol(propertyName + ":getDefault");
    this.getDefault = getDefault;
    var setNative = Symbol(propertyName + ":setNative");
    this.setNative = setNative;
    var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
    this.defaultValueKey = defaultValueKey;
    var defaultValue = options.defaultValue;
    this.defaultValue = defaultValue;
    var eventName = propertyName + "Change";
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = this;

    function setLocalValue(newValue) {
      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        this[sourceKey] = 3;
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function setCssValue(newValue) {
      var currentValueSource = this[sourceKey] || 0;

      if (currentValueSource === 3) {
        return;
      }

      var reset = newValue === exports.unsetValue || newValue === "";
      var value;

      if (reset) {
        value = defaultValue;
        delete this[sourceKey];
      } else {
        value = valueConverter && typeof newValue === "string" ? valueConverter(newValue) : newValue;
        this[sourceKey] = 2;
      }

      var oldValue = key in this ? this[key] : defaultValue;
      var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

      if (changed) {
        var view = this.view;

        if (reset) {
          delete this[key];

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (defaultValueKey in this) {
                view[setNative](this[defaultValueKey]);
                delete this[defaultValueKey];
              } else {
                view[setNative](defaultValue);
              }
            }
          }
        } else {
          this[key] = value;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view[setNative]) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (!(defaultValueKey in this)) {
                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
              }

              view[setNative](value);
            }
          }
        }

        if (this.hasListeners(eventName)) {
          this.notify({
            object: this,
            eventName: eventName,
            propertyName: propertyName,
            value: value,
            oldValue: oldValue
          });
        }

        if (affectsLayout) {
          view.requestLayout();
        }
      }
    }

    function get() {
      return key in this ? this[key] : defaultValue;
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: get,
      set: setLocalValue
    };
    cssSymbolPropertyMap[key] = this;
  }

  CssProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }
  };

  CssProperty.prototype.isSet = function (instance) {
    return this.key in instance;
  };

  return CssProperty;
}();

exports.CssProperty = CssProperty;
CssProperty.prototype.isStyleProperty = true;

var CssAnimationProperty = function () {
  function CssAnimationProperty(options) {
    var valueConverter = options.valueConverter,
        equalityComparer = options.equalityComparer,
        valueChanged = options.valueChanged,
        defaultValue = options.defaultValue;
    var propertyName = options.name;
    this.name = propertyName;
    cssPropertyNames.push(options.cssName);
    CssAnimationProperty.properties[propertyName] = this;

    if (options.cssName && options.cssName !== propertyName) {
      CssAnimationProperty.properties[options.cssName] = this;
    }

    this._valueConverter = options.valueConverter;
    var cssLocalName = options.cssName || propertyName;
    this.cssLocalName = cssLocalName;
    var cssName = "css:" + cssLocalName;
    this.cssName = cssName;
    var keyframeName = "keyframe:" + propertyName;
    this.keyframe = keyframeName;
    var defaultName = "default:" + propertyName;
    var defaultValueKey = Symbol(defaultName);
    this.defaultValueKey = defaultValueKey;
    this.defaultValue = defaultValue;
    var cssValue = Symbol(cssName);
    var styleValue = Symbol("local:" + propertyName);
    var keyframeValue = Symbol(keyframeName);
    var computedValue = Symbol("computed-value:" + propertyName);
    this.key = computedValue;
    var computedSource = Symbol("computed-source:" + propertyName);
    this.source = computedSource;
    this.getDefault = Symbol(propertyName + ":getDefault");
    var getDefault = this.getDefault;
    var setNative = this.setNative = Symbol(propertyName + ":setNative");
    var eventName = propertyName + "Change";
    var property = this;

    function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
      return {
        enumerable: enumerable,
        configurable: configurable,
        get: getsComputed ? function () {
          return this[computedValue];
        } : function () {
          return this[symbol];
        },
        set: function (boxedValue) {
          var oldValue = this[computedValue];
          var oldSource = this[computedSource];
          var wasSet = oldSource !== 0;
          var reset = boxedValue === exports.unsetValue || boxedValue === "";

          if (reset) {
            this[symbol] = exports.unsetValue;

            if (this[computedSource] === propertySource) {
              if (this[styleValue] !== exports.unsetValue) {
                this[computedSource] = 3;
                this[computedValue] = this[styleValue];
              } else if (this[cssValue] !== exports.unsetValue) {
                this[computedSource] = 2;
                this[computedValue] = this[cssValue];
              } else {
                delete this[computedSource];
                delete this[computedValue];
              }
            }
          } else {
            if (valueConverter && typeof boxedValue === "string") {
              boxedValue = valueConverter(boxedValue);
            }

            this[symbol] = boxedValue;

            if (this[computedSource] <= propertySource) {
              this[computedSource] = propertySource;
              this[computedValue] = boxedValue;
            }
          }

          var value = this[computedValue];
          var source = this[computedSource];
          var isSet = source !== 0;
          var computedValueChanged = oldValue !== value && (!equalityComparer || !equalityComparer(oldValue, value));

          if (computedValueChanged && valueChanged) {
            valueChanged(this, oldValue, value);
          }

          var view = this.view;

          if (view[setNative] && (computedValueChanged || isSet !== wasSet)) {
            if (view._suspendNativeUpdatesCount) {
              if (view._suspendedUpdates) {
                view._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (isSet) {
                if (!wasSet && !(defaultValueKey in this)) {
                  this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                }

                view[setNative](value);
              } else if (wasSet) {
                if (defaultValueKey in this) {
                  view[setNative](this[defaultValueKey]);
                } else {
                  view[setNative](defaultValue);
                }
              }
            }
          }

          if (computedValueChanged && this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }
        }
      };
    }

    var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
    var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
    var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
    var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
    symbolPropertyMap[computedValue] = this;
    cssSymbolPropertyMap[computedValue] = this;

    this.register = function (cls) {
      cls.prototype[computedValue] = options.defaultValue;
      cls.prototype[computedSource] = 0;
      cls.prototype[cssValue] = exports.unsetValue;
      cls.prototype[styleValue] = exports.unsetValue;
      cls.prototype[keyframeValue] = exports.unsetValue;
      Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
      Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
      Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);

      if (options.cssName && options.cssName !== options.name) {
        Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
      }

      Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
    };
  }

  CssAnimationProperty.prototype._initDefaultNativeValue = function (target) {
    var defaultValueKey = this.defaultValueKey;

    if (!(defaultValueKey in target)) {
      var view = target.view;
      var getDefault = this.getDefault;
      target[defaultValueKey] = view[getDefault] ? view[getDefault]() : this.defaultValue;
    }
  };

  CssAnimationProperty._getByCssName = function (name) {
    return this.properties[name];
  };

  CssAnimationProperty._getPropertyNames = function () {
    return Object.keys(CssAnimationProperty.properties);
  };

  CssAnimationProperty.prototype.isSet = function (instance) {
    return instance[this.source] !== 0;
  };

  CssAnimationProperty.properties = {};
  return CssAnimationProperty;
}();

exports.CssAnimationProperty = CssAnimationProperty;
CssAnimationProperty.prototype.isStyleProperty = true;

var InheritedCssProperty = function (_super) {
  __extends(InheritedCssProperty, _super);

  function InheritedCssProperty(options) {
    var _this = _super.call(this, options) || this;

    var propertyName = options.name;
    var key = _this.key;
    var sourceKey = _this.sourceKey;
    var getDefault = _this.getDefault;
    var setNative = _this.setNative;
    var defaultValueKey = _this.defaultValueKey;
    var eventName = propertyName + "Change";
    var defaultValue = options.defaultValue;
    var affectsLayout = options.affectsLayout;
    var equalityComparer = options.equalityComparer;
    var valueChanged = options.valueChanged;
    var valueConverter = options.valueConverter;
    var property = _this;

    var setFunc = function (valueSource) {
      return function (boxedValue) {
        var reset = boxedValue === exports.unsetValue || boxedValue === "";
        var currentValueSource = this[sourceKey] || 0;

        if (reset) {
          if (valueSource === 2 && currentValueSource === 3) {
            return;
          }
        } else {
          if (currentValueSource > valueSource) {
            return;
          }
        }

        var oldValue = key in this ? this[key] : defaultValue;
        var view = this.view;
        var value;
        var unsetNativeValue = false;

        if (reset) {
          var parent_2 = view.parent;
          var style = parent_2 ? parent_2.style : null;

          if (style && style[sourceKey] > 0) {
            value = style[propertyName];
            this[sourceKey] = 1;
            this[key] = value;
          } else {
            value = defaultValue;
            delete this[sourceKey];
            delete this[key];
            unsetNativeValue = true;
          }
        } else {
          this[sourceKey] = valueSource;

          if (valueConverter && typeof boxedValue === "string") {
            value = valueConverter(boxedValue);
          } else {
            value = boxedValue;
          }

          this[key] = value;
        }

        var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;

        if (changed) {
          var view_1 = this.view;

          if (valueChanged) {
            valueChanged(this, oldValue, value);
          }

          if (view_1[setNative]) {
            if (view_1._suspendNativeUpdatesCount) {
              if (view_1._suspendedUpdates) {
                view_1._suspendedUpdates[propertyName] = property;
              }
            } else {
              if (unsetNativeValue) {
                if (defaultValueKey in this) {
                  view_1[setNative](this[defaultValueKey]);
                  delete this[defaultValueKey];
                } else {
                  view_1[setNative](defaultValue);
                }
              } else {
                if (!(defaultValueKey in this)) {
                  this[defaultValueKey] = view_1[getDefault] ? view_1[getDefault]() : defaultValue;
                }

                view_1[setNative](value);
              }
            }
          }

          if (this.hasListeners(eventName)) {
            this.notify({
              object: this,
              eventName: eventName,
              propertyName: propertyName,
              value: value,
              oldValue: oldValue
            });
          }

          if (affectsLayout) {
            view_1.requestLayout();
          }

          view_1.eachChild(function (child) {
            var childStyle = child.style;
            var childValueSource = childStyle[sourceKey] || 0;

            if (reset) {
              if (childValueSource === 1) {
                setDefaultFunc.call(childStyle, exports.unsetValue);
              }
            } else {
              if (childValueSource <= 1) {
                setInheritedFunc.call(childStyle, value);
              }
            }

            return true;
          });
        }
      };
    };

    var setDefaultFunc = setFunc(0);
    var setInheritedFunc = setFunc(1);
    _this.setInheritedValue = setInheritedFunc;
    _this.cssValueDescriptor.set = setFunc(2);
    _this.localValueDescriptor.set = setFunc(3);
    inheritableCssProperties.push(_this);
    return _this;
  }

  return InheritedCssProperty;
}(CssProperty);

exports.InheritedCssProperty = InheritedCssProperty;

var ShorthandProperty = function () {
  function ShorthandProperty(options) {
    this.name = options.name;
    var key = Symbol(this.name + ":propertyKey");
    this.key = key;
    this.cssName = "css:" + options.cssName;
    this.cssLocalName = "" + options.cssName;
    var converter = options.converter;

    function setLocalValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.name] = v;
        }
      });
    }

    function setCssValue(value) {
      var _this = this;

      this.view._batchUpdate(function () {
        for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
          var _b = _a[_i],
              p = _b[0],
              v = _b[1];
          _this[p.cssName] = v;
        }
      });
    }

    this.cssValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setCssValue
    };
    this.localValueDescriptor = {
      enumerable: true,
      configurable: true,
      get: options.getter,
      set: setLocalValue
    };
    this.propertyBagDescriptor = {
      enumerable: false,
      configurable: true,
      set: function (value) {
        var _this = this;

        converter(value).forEach(function (_a) {
          var property = _a[0],
              value = _a[1];
          _this[property.cssLocalName] = value;
        });
      }
    };
    cssSymbolPropertyMap[key] = this;
  }

  ShorthandProperty.prototype.register = function (cls) {
    if (this.registered) {
      throw new Error("Property " + this.name + " already registered.");
    }

    this.registered = true;
    Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
    Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);

    if (this.cssLocalName !== this.cssName) {
      Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
    }

    Object.defineProperty(cls.prototype.PropertyBag, this.cssLocalName, this.propertyBagDescriptor);
  };

  return ShorthandProperty;
}();

exports.ShorthandProperty = ShorthandProperty;

function inheritablePropertyValuesOn(view) {
  var array = new Array();

  for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
    var prop = inheritableProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = view[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: view[prop.name]
      });
    }
  }

  return array;
}

function inheritableCssPropertyValuesOn(style) {
  var array = new Array();

  for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
    var prop = inheritableCssProperties_1[_i];
    var sourceKey = prop.sourceKey;
    var valueSource = style[sourceKey] || 0;

    if (valueSource !== 0) {
      array.push({
        property: prop,
        value: style[prop.name]
      });
    }
  }

  return array;
}

exports.initNativeView = profiling_1.profile("\"properties\".initNativeView", function initNativeView(view) {
  if (view._suspendedUpdates) {
    applyPendingNativeSetters(view);
  } else {
    applyAllNativeSetters(view);
  }

  view._suspendedUpdates = {};
});

function applyPendingNativeSetters(view) {
  var suspendedUpdates = view._suspendedUpdates;

  for (var propertyName in suspendedUpdates) {
    var property = suspendedUpdates[propertyName];
    var setNative = property.setNative;

    if (view[setNative]) {
      var getDefault = property.getDefault,
          isStyleProperty = property.isStyleProperty,
          defaultValueKey = property.defaultValueKey,
          defaultValue = property.defaultValue;
      var value = void 0;

      if (isStyleProperty) {
        var style = view.style;

        if (property.isSet(view.style)) {
          if (!(defaultValueKey in style)) {
            style[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view.style[propertyName];
        } else {
          value = style[defaultValueKey];
        }
      } else {
        if (property.isSet(view)) {
          if (!(defaultValueKey in view)) {
            view[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
          }

          value = view[propertyName];
        } else {
          value = view[defaultValueKey];
        }
      }

      view[setNative](value);
    }
  }
}

exports.applyPendingNativeSetters = applyPendingNativeSetters;

function applyAllNativeSetters(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
    var symbol = symbols_2[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var setNative = property.setNative;
    var getDefault = property.getDefault;

    if (setNative in view) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in view)) {
        view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
      }

      var value = view[symbol];
      view[setNative](value);
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
    var symbol = symbols_3[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      var defaultValueKey = property.defaultValueKey;

      if (!(defaultValueKey in style)) {
        style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
      }

      var value = style[symbol];
      view[property.setNative](value);
    }
  }
}

exports.applyAllNativeSetters = applyAllNativeSetters;

function resetNativeView(view) {
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
    var symbol = symbols_4[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in view) {
        view[property.setNative](view[property.defaultValueKey]);
        delete view[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }

  var style = view.style;
  symbols = Object.getOwnPropertySymbols(style);

  for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
    var symbol = symbols_5[_a];
    var property = cssSymbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    if (view[property.setNative]) {
      if (property.defaultValueKey in style) {
        view[property.setNative](style[property.defaultValueKey]);
        delete style[property.defaultValueKey];
      } else {
        view[property.setNative](property.defaultValue);
      }
    }
  }
}

exports.resetNativeView = resetNativeView;

function clearInheritedProperties(view) {
  for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
    var prop = inheritableProperties_2[_i];
    var sourceKey = prop.sourceKey;

    if (view[sourceKey] === 1) {
      prop.set.call(view, exports.unsetValue);
    }
  }

  var style = view.style;

  for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
    var prop = inheritableCssProperties_2[_a];
    var sourceKey = prop.sourceKey;

    if (style[sourceKey] === 1) {
      prop.setInheritedValue.call(style, exports.unsetValue);
    }
  }
}

exports.clearInheritedProperties = clearInheritedProperties;

function resetCSSProperties(style) {
  var symbols = Object.getOwnPropertySymbols(style);

  for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
    var symbol = symbols_6[_i];
    var cssProperty = void 0;

    if (cssProperty = cssSymbolPropertyMap[symbol]) {
      style[cssProperty.cssName] = exports.unsetValue;

      if (cssProperty instanceof CssAnimationProperty) {
        style[cssProperty.keyframe] = exports.unsetValue;
      }
    }
  }
}

exports.resetCSSProperties = resetCSSProperties;

function propagateInheritableProperties(view, child) {
  var inheritablePropertyValues = inheritablePropertyValuesOn(view);

  for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
    var pair = inheritablePropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = child[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(child, pair.value);
    }
  }
}

exports.propagateInheritableProperties = propagateInheritableProperties;

function propagateInheritableCssProperties(parentStyle, childStyle) {
  var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);

  for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
    var pair = inheritableCssPropertyValues_1[_i];
    var prop = pair.property;
    var sourceKey = prop.sourceKey;
    var currentValueSource = childStyle[sourceKey] || 0;

    if (currentValueSource <= 1) {
      prop.setInheritedValue.call(childStyle, pair.value, 1);
    }
  }
}

exports.propagateInheritableCssProperties = propagateInheritableCssProperties;

function makeValidator() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  var set = new Set(values);
  return function (value) {
    return set.has(value);
  };
}

exports.makeValidator = makeValidator;

function makeParser(isValid) {
  return function (value) {
    var lower = value && value.toLowerCase();

    if (isValid(lower)) {
      return lower;
    } else {
      throw new Error("Invalid value: " + value);
    }
  };
}

exports.makeParser = makeParser;

function getSetProperties(view) {
  var result = [];
  Object.getOwnPropertyNames(view).forEach(function (prop) {
    result.push([prop, view[prop]]);
  });
  var symbols = Object.getOwnPropertySymbols(view);

  for (var _i = 0, symbols_7 = symbols; _i < symbols_7.length; _i++) {
    var symbol = symbols_7[_i];
    var property = symbolPropertyMap[symbol];

    if (!property) {
      continue;
    }

    var value = view[property.key];
    result.push([property.name, value]);
  }

  return result;
}

exports.getSetProperties = getSetProperties;

function getComputedCssValues(view) {
  var result = [];
  var style = view.style;

  for (var _i = 0, cssPropertyNames_1 = cssPropertyNames; _i < cssPropertyNames_1.length; _i++) {
    var prop = cssPropertyNames_1[_i];
    result.push([prop, style[prop]]);
  }

  result.push(["top", "auto"]);
  result.push(["left", "auto"]);
  result.push(["bottom", "auto"]);
  result.push(["right", "auto"]);
  return result;
}

exports.getComputedCssValues = getComputedCssValues;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view-base/view-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var debug_1 = __webpack_require__("../node_modules/tns-core-modules/utils/debug.js");

var bindable_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.isIOS = platform_1.isIOS;
exports.isAndroid = platform_1.isAndroid;

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.layout = utils_1.layout;

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

exports.Color = color_1.Color;

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/bindable/bindable.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js"));

var ssm = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var domNodeModule;

function ensuredomNodeModule() {
  if (!domNodeModule) {
    domNodeModule = __webpack_require__("../node_modules/tns-core-modules/debugger/dom-node.js");
  }
}

var styleScopeModule;

function ensureStyleScopeModule() {
  if (!styleScopeModule) {
    styleScopeModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");
  }
}

var defaultBindingSource = {};

function getAncestor(view, criterion) {
  var matcher = null;

  if (typeof criterion === "string") {
    matcher = function (view) {
      return view.typeName === criterion;
    };
  } else {
    matcher = function (view) {
      return view instanceof criterion;
    };
  }

  for (var parent_1 = view.parent; parent_1 != null; parent_1 = parent_1.parent) {
    if (matcher(parent_1)) {
      return parent_1;
    }
  }

  return null;
}

exports.getAncestor = getAncestor;

function getViewById(view, id) {
  if (!view) {
    return undefined;
  }

  if (view.id === id) {
    return view;
  }

  var retVal;

  var descendantsCallback = function (child) {
    if (child.id === id) {
      retVal = child;
      return false;
    }

    return true;
  };

  eachDescendant(view, descendantsCallback);
  return retVal;
}

exports.getViewById = getViewById;

function eachDescendant(view, callback) {
  if (!callback || !view) {
    return;
  }

  var continueIteration;

  var localCallback = function (child) {
    continueIteration = callback(child);

    if (continueIteration) {
      child.eachChild(localCallback);
    }

    return continueIteration;
  };

  view.eachChild(localCallback);
}

exports.eachDescendant = eachDescendant;
var viewIdCounter = 1;
var Flags;

(function (Flags) {
  Flags["superOnLoadedCalled"] = "Loaded";
  Flags["superOnUnloadedCalled"] = "Unloaded";
})(Flags || (Flags = {}));

var SuspendType;

(function (SuspendType) {
  SuspendType[SuspendType["Incremental"] = 0] = "Incremental";
  SuspendType[SuspendType["Loaded"] = 1048576] = "Loaded";
  SuspendType[SuspendType["NativeView"] = 2097152] = "NativeView";
  SuspendType[SuspendType["UISetup"] = 4194304] = "UISetup";
  SuspendType[SuspendType["IncrementalCountMask"] = -7340033] = "IncrementalCountMask";
})(SuspendType || (SuspendType = {}));

(function (SuspendType) {
  function toString(type) {
    return (type ? "suspended" : "resumed") + "(" + "Incremental: " + (type & SuspendType.IncrementalCountMask) + ", " + "Loaded: " + !(type & SuspendType.Loaded) + ", " + "NativeView: " + !(type & SuspendType.NativeView) + ", " + "UISetup: " + !(type & SuspendType.UISetup) + ")";
  }

  SuspendType.toString = toString;
})(SuspendType || (SuspendType = {}));

var ViewBase = function (_super) {
  __extends(ViewBase, _super);

  function ViewBase() {
    var _this = _super.call(this) || this;

    _this._onLoadedCalled = false;
    _this._onUnloadedCalled = false;
    _this._cssState = new ssm.CssState(_this);
    _this.pseudoClassAliases = {
      "highlighted": ["active", "pressed"]
    };
    _this.cssClasses = new Set();
    _this.cssPseudoClasses = new Set();
    _this._domId = viewIdCounter++;
    _this._style = new properties_1.Style(_this);
    return _this;
  }

  Object.defineProperty(ViewBase.prototype, "parentNode", {
    get: function () {
      return this._templateParent || this.parent;
    },
    set: function (node) {
      this._templateParent = node;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "nativeView", {
    get: function () {
      return this.nativeViewProtected;
    },
    set: function (value) {
      this.setNativeView(value);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "typeName", {
    get: function () {
      return types.getClass(this);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "style", {
    get: function () {
      return this._style;
    },
    set: function (inlineStyle) {
      if (typeof inlineStyle === "string") {
        this.setInlineStyle(inlineStyle);
      } else {
        throw new Error("View.style property is read-only.");
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "android", {
    get: function () {
      return this._androidView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "ios", {
    get: function () {
      return this._iosView;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "isLoaded", {
    get: function () {
      return this._isLoaded;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewBase.prototype, "class", {
    get: function () {
      return this.className;
    },
    set: function (v) {
      this.className = v;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.getViewById = function (id) {
    return getViewById(this, id);
  };

  Object.defineProperty(ViewBase.prototype, "page", {
    get: function () {
      if (this.parent) {
        return this.parent.page;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  ViewBase.prototype.ensureDomNode = function () {
    if (!this.domNode) {
      ensuredomNodeModule();
      this.domNode = new domNodeModule.DOMNode(this);
    }
  };

  ViewBase.prototype.set = function (name, value) {
    this[name] = bindable_1.WrappedValue.unwrap(value);
  };

  ViewBase.prototype.onLoaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnLoadedCalled, true);

    if (this._isLoaded) {
      return;
    }

    this._isLoaded = true;

    this._cssState.onLoaded();

    this._resumeNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.loadView(child);

      return true;
    });

    this._emit("loaded");
  };

  ViewBase.prototype.onUnloaded = function () {
    var _this = this;

    this.setFlag(Flags.superOnUnloadedCalled, true);

    if (!this._isLoaded) {
      return;
    }

    this._suspendNativeUpdates(SuspendType.Loaded);

    this.eachChild(function (child) {
      _this.unloadView(child);

      return true;
    });
    this._isLoaded = false;

    this._cssState.onUnloaded();

    this._emit("unloaded");
  };

  ViewBase.prototype._suspendNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount | type;
    } else {
      this._suspendNativeUpdatesCount++;
    }
  };

  ViewBase.prototype._resumeNativeUpdates = function (type) {
    if (type) {
      this._suspendNativeUpdatesCount = this._suspendNativeUpdatesCount & ~type;
    } else {
      if ((this._suspendNativeUpdatesCount & SuspendType.IncrementalCountMask) === 0) {
        throw new Error("Invalid call to " + this + "._resumeNativeUpdates");
      }

      this._suspendNativeUpdatesCount--;
    }

    if (!this._suspendNativeUpdatesCount) {
      this.onResumeNativeUpdates();
    }
  };

  ViewBase.prototype._batchUpdate = function (callback) {
    try {
      this._suspendNativeUpdates(SuspendType.Incremental);

      return callback();
    } finally {
      this._resumeNativeUpdates(SuspendType.Incremental);
    }
  };

  ViewBase.prototype.setFlag = function (flag, value) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        this._onLoadedCalled = value;
        break;

      case Flags.superOnUnloadedCalled:
        this._onUnloadedCalled = value;
        break;
    }
  };

  ViewBase.prototype.isFlagSet = function (flag) {
    switch (flag) {
      case Flags.superOnLoadedCalled:
        return this._onLoadedCalled;

      case Flags.superOnUnloadedCalled:
        return this._onUnloadedCalled;
    }
  };

  ViewBase.prototype.callFunctionWithSuper = function (flag, func) {
    this.setFlag(flag, false);
    func();

    if (!this.isFlagSet(flag)) {
      throw new Error("super." + flag + " not called in " + this);
    }
  };

  ViewBase.prototype.callLoaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnLoadedCalled, function () {
      return _this.onLoaded();
    });
  };

  ViewBase.prototype.callUnloaded = function () {
    var _this = this;

    this.callFunctionWithSuper(Flags.superOnUnloadedCalled, function () {
      return _this.onUnloaded();
    });
  };

  ViewBase.prototype.notifyPseudoClassChanged = function (pseudoClass) {
    this.notify({
      eventName: ":" + pseudoClass,
      object: this
    });
  };

  ViewBase.prototype.getAllAliasedStates = function (name) {
    var allStates = [];
    allStates.push(name);

    if (name in this.pseudoClassAliases) {
      for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
        allStates.push(this.pseudoClassAliases[name][i]);
      }
    }

    return allStates;
  };

  ViewBase.prototype.addPseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (!this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.add(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.deletePseudoClass = function (name) {
    var allStates = this.getAllAliasedStates(name);

    for (var i = 0; i < allStates.length; i++) {
      if (this.cssPseudoClasses.has(allStates[i])) {
        this.cssPseudoClasses.delete(allStates[i]);
        this.notifyPseudoClassChanged(allStates[i]);
      }
    }
  };

  ViewBase.prototype.bindingContextChanged = function (data) {
    this.bindings.get("bindingContext").bind(data.value);
  };

  ViewBase.prototype.bind = function (options, source) {
    if (source === void 0) {
      source = defaultBindingSource;
    }

    var targetProperty = options.targetProperty;
    this.unbind(targetProperty);

    if (!this.bindings) {
      this.bindings = new Map();
    }

    var binding = new bindable_1.Binding(this, options);
    this.bindings.set(targetProperty, binding);
    var bindingSource = source;

    if (bindingSource === defaultBindingSource) {
      bindingSource = this.bindingContext;
      binding.sourceIsBindingContext = true;

      if (targetProperty === "bindingContext") {
        this.bindingContextBoundToParentBindingContextChanged = true;
        var parent_2 = this.parent;

        if (parent_2) {
          parent_2.on("bindingContextChange", this.bindingContextChanged, this);
        } else {
          this.shouldAddHandlerToParentBindingContextChanged = true;
        }
      }
    }

    binding.bind(bindingSource);
  };

  ViewBase.prototype.unbind = function (property) {
    var bindings = this.bindings;

    if (!bindings) {
      return;
    }

    var binding = bindings.get(property);

    if (binding) {
      binding.unbind();
      bindings.delete(property);

      if (binding.sourceIsBindingContext) {
        if (property === "bindingContext") {
          this.shouldAddHandlerToParentBindingContextChanged = false;
          this.bindingContextBoundToParentBindingContextChanged = false;
          var parent_3 = this.parent;

          if (parent_3) {
            parent_3.off("bindingContextChange", this.bindingContextChanged, this);
          }
        }
      }
    }
  };

  ViewBase.prototype.requestLayout = function () {
    var parent = this.parent;

    if (parent) {
      parent.requestLayout();
    }
  };

  ViewBase.prototype.eachChild = function (callback) {};

  ViewBase.prototype._addView = function (view, atIndex) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._addView(" + view + ", " + atIndex + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (!view) {
      throw new Error("Expecting a valid View instance.");
    }

    if (!(view instanceof ViewBase)) {
      throw new Error(view + " is not a valid View instance.");
    }

    if (view.parent) {
      throw new Error("View already has a parent. View: " + view + " Parent: " + view.parent);
    }

    view.parent = this;

    this._addViewCore(view, atIndex);

    view._parentChanged(null);

    if (this.domNode) {
      this.domNode.onChildAdded(view);
    }
  };

  ViewBase.prototype._addViewCore = function (view, atIndex) {
    properties_1.propagateInheritableProperties(this, view);

    view._inheritStyleScope(this._styleScope);

    properties_1.propagateInheritableCssProperties(this.style, view.style);

    if (this._context) {
      view._setupUI(this._context, atIndex);
    }

    if (this._isLoaded) {
      this.loadView(view);
    }
  };

  ViewBase.prototype.loadView = function (view) {
    if (view && !view.isLoaded) {
      view.callLoaded();
    }
  };

  ViewBase.prototype.unloadView = function (view) {
    if (view && view.isLoaded) {
      view.callUnloaded();
    }
  };

  ViewBase.prototype._removeView = function (view) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + "._removeView(" + view + ")", bindable_1.traceCategories.ViewHierarchy);
    }

    if (view.parent !== this) {
      throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view.parent + " ExpectedParent: " + this);
    }

    if (this.domNode) {
      this.domNode.onChildRemoved(view);
    }

    this._removeViewCore(view);

    view.parent = undefined;

    view._parentChanged(this);
  };

  ViewBase.prototype._removeViewCore = function (view) {
    this.unloadView(view);

    if (view._context) {
      view._tearDownUI();
    }
  };

  ViewBase.prototype.createNativeView = function () {
    return undefined;
  };

  ViewBase.prototype.disposeNativeView = function () {};

  ViewBase.prototype.initNativeView = function () {};

  ViewBase.prototype.resetNativeView = function () {};

  ViewBase.prototype.resetNativeViewInternal = function () {};

  ViewBase.prototype._setupAsRootView = function (context) {
    this._setupUI(context);
  };

  ViewBase.prototype._setupUI = function (context, atIndex, parentIsLoaded) {
    if (this._context === context) {
      return;
    } else if (this._context) {
      this._tearDownUI(true);
    }

    this._context = context;
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      nativeView = this.createNativeView();
    }

    if (platform_1.isAndroid) {
      this._androidView = nativeView;

      if (nativeView) {
        if (this._isPaddingRelative === undefined) {
          this._isPaddingRelative = nativeView.isPaddingRelative();
        }

        var result = nativeView.defaultPaddings;

        if (result === undefined) {
          result = org.nativescript.widgets.ViewHelper.getPadding(nativeView);
          nativeView.defaultPaddings = result;
        }

        this._defaultPaddingTop = result.top;
        this._defaultPaddingRight = result.right;
        this._defaultPaddingBottom = result.bottom;
        this._defaultPaddingLeft = result.left;
        var style = this.style;

        if (!style_properties_1.paddingTopProperty.isSet(style)) {
          this.effectivePaddingTop = this._defaultPaddingTop;
        }

        if (!style_properties_1.paddingRightProperty.isSet(style)) {
          this.effectivePaddingRight = this._defaultPaddingRight;
        }

        if (!style_properties_1.paddingBottomProperty.isSet(style)) {
          this.effectivePaddingBottom = this._defaultPaddingBottom;
        }

        if (!style_properties_1.paddingLeftProperty.isSet(style)) {
          this.effectivePaddingLeft = this._defaultPaddingLeft;
        }
      }
    } else {
      this._iosView = nativeView;
    }

    this.setNativeView(nativeView);

    if (this.parent) {
      var nativeIndex = this.parent._childIndexToNativeChildIndex(atIndex);

      this._isAddedToNativeVisualTree = this.parent._addViewToNativeVisualTree(this, nativeIndex);
    }

    this._resumeNativeUpdates(SuspendType.UISetup);

    this.eachChild(function (child) {
      child._setupUI(context);

      return true;
    });
  };

  ViewBase.prototype.setNativeView = function (value) {
    if (this.__nativeView === value) {
      return;
    }

    if (this.__nativeView) {
      this._suspendNativeUpdates(SuspendType.NativeView);
    }

    this.__nativeView = this.nativeViewProtected = value;

    if (this.__nativeView) {
      this._suspendedUpdates = undefined;
      this.initNativeView();

      this._resumeNativeUpdates(SuspendType.NativeView);
    }
  };

  ViewBase.prototype._tearDownUI = function (force) {
    if (!this._context) {
      return;
    }

    this.resetNativeViewInternal();
    this.eachChild(function (child) {
      child._tearDownUI(force);

      return true;
    });

    if (this.parent) {
      this.parent._removeViewFromNativeVisualTree(this);
    }

    this.disposeNativeView();

    this._suspendNativeUpdates(SuspendType.UISetup);

    if (platform_1.isAndroid) {
      this.setNativeView(null);
      this._androidView = null;
    }

    this._context = null;

    if (this.domNode) {
      this.domNode.dispose();
      this.domNode = undefined;
    }
  };

  ViewBase.prototype._childIndexToNativeChildIndex = function (index) {
    return index;
  };

  ViewBase.prototype._addViewToNativeVisualTree = function (view, atIndex) {
    if (view._isAddedToNativeVisualTree) {
      throw new Error("Child already added to the native visual tree.");
    }

    return true;
  };

  ViewBase.prototype._removeViewFromNativeVisualTree = function (view) {
    view._isAddedToNativeVisualTree = false;
  };

  ViewBase.prototype._goToVisualState = function (state) {
    if (bindable_1.traceEnabled()) {
      bindable_1.traceWrite(this + " going to state: " + state, bindable_1.traceCategories.Style);
    }

    if (state === this._visualState) {
      return;
    }

    this.deletePseudoClass(this._visualState);
    this._visualState = state;
    this.addPseudoClass(state);
  };

  ViewBase.prototype._applyXmlAttribute = function (attribute, value) {
    if (attribute === "style" || attribute === "rows" || attribute === "columns" || attribute === "fontAttributes") {
      this[attribute] = value;
      return true;
    }

    return false;
  };

  ViewBase.prototype.setInlineStyle = function (style) {
    if (typeof style !== "string") {
      throw new Error("Parameter should be valid CSS string!");
    }

    ensureStyleScopeModule();
    styleScopeModule.applyInlineStyle(this, style);
  };

  ViewBase.prototype._parentChanged = function (oldParent) {
    var newParent = this.parent;

    if (oldParent) {
      properties_1.clearInheritedProperties(this);

      if (this.bindingContextBoundToParentBindingContextChanged) {
        oldParent.off("bindingContextChange", this.bindingContextChanged, this);
      }
    } else if (this.shouldAddHandlerToParentBindingContextChanged) {
      newParent.on("bindingContextChange", this.bindingContextChanged, this);
      this.bindings.get("bindingContext").bind(newParent.bindingContext);
    }
  };

  ViewBase.prototype.onResumeNativeUpdates = function () {
    properties_1.initNativeView(this);
  };

  ViewBase.prototype.toString = function () {
    var str = this.typeName;

    if (this.id) {
      str += "<" + this.id + ">";
    } else {
      str += "(" + this._domId + ")";
    }

    var source = debug_1.Source.get(this);

    if (source) {
      str += "@" + source + ";";
    }

    return str;
  };

  ViewBase.prototype._onCssStateChange = function () {
    this._cssState.onChange();

    eachDescendant(this, function (child) {
      child._cssState.onChange();

      return true;
    });
  };

  ViewBase.prototype._inheritStyleScope = function (styleScope) {
    if (this._isStyleScopeHost) {
      return;
    }

    if (this._styleScope !== styleScope) {
      this._styleScope = styleScope;

      this._onCssStateChange();

      this.eachChild(function (child) {
        child._inheritStyleScope(styleScope);

        return true;
      });
    }
  };

  ViewBase.prototype.showModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;
    return parent && parent.showModal.apply(parent, args);
  };

  ViewBase.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var parent = this.parent;

    if (parent) {
      parent.closeModal.apply(parent, args);
    }
  };

  ViewBase.prototype._dialogClosed = function () {
    eachDescendant(this, function (child) {
      child._dialogClosed();

      return true;
    });
  };

  ViewBase.prototype._onRootViewReset = function () {
    eachDescendant(this, function (child) {
      child._onRootViewReset();

      return true;
    });
  };

  ViewBase.loadedEvent = "loaded";
  ViewBase.unloadedEvent = "unloaded";

  __decorate([profiling_1.profile], ViewBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "onUnloaded", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "addPseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "deletePseudoClass", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "requestLayout", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_addView", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_setupUI", null);

  __decorate([profiling_1.profile], ViewBase.prototype, "_tearDownUI", null);

  return ViewBase;
}(bindable_1.Observable);

exports.ViewBase = ViewBase;
ViewBase.prototype.isCollapsed = false;
ViewBase.prototype._oldLeft = 0;
ViewBase.prototype._oldTop = 0;
ViewBase.prototype._oldRight = 0;
ViewBase.prototype._oldBottom = 0;
ViewBase.prototype.effectiveMinWidth = 0;
ViewBase.prototype.effectiveMinHeight = 0;
ViewBase.prototype.effectiveWidth = 0;
ViewBase.prototype.effectiveHeight = 0;
ViewBase.prototype.effectiveMarginTop = 0;
ViewBase.prototype.effectiveMarginRight = 0;
ViewBase.prototype.effectiveMarginBottom = 0;
ViewBase.prototype.effectiveMarginLeft = 0;
ViewBase.prototype.effectivePaddingTop = 0;
ViewBase.prototype.effectivePaddingRight = 0;
ViewBase.prototype.effectivePaddingBottom = 0;
ViewBase.prototype.effectivePaddingLeft = 0;
ViewBase.prototype.effectiveBorderTopWidth = 0;
ViewBase.prototype.effectiveBorderRightWidth = 0;
ViewBase.prototype.effectiveBorderBottomWidth = 0;
ViewBase.prototype.effectiveBorderLeftWidth = 0;
ViewBase.prototype._defaultPaddingTop = 0;
ViewBase.prototype._defaultPaddingRight = 0;
ViewBase.prototype._defaultPaddingBottom = 0;
ViewBase.prototype._defaultPaddingLeft = 0;
ViewBase.prototype._isViewBase = true;
ViewBase.prototype.recycleNativeView = "never";
ViewBase.prototype._suspendNativeUpdatesCount = SuspendType.Loaded | SuspendType.NativeView | SuspendType.UISetup;
exports.bindingContextProperty = new properties_1.InheritedProperty({
  name: "bindingContext"
});
exports.bindingContextProperty.register(ViewBase);
exports.classNameProperty = new properties_1.Property({
  name: "className",
  valueChanged: function (view, oldValue, newValue) {
    var classes = view.cssClasses;
    classes.clear();

    if (typeof newValue === "string") {
      newValue.split(" ").forEach(function (c) {
        return classes.add(c);
      });
    }

    view._onCssStateChange();
  }
});
exports.classNameProperty.register(ViewBase);
exports.idProperty = new properties_1.Property({
  name: "id",
  valueChanged: function (view, oldValue, newValue) {
    return view._onCssStateChange();
  }
});
exports.idProperty.register(ViewBase);

function booleanConverter(v) {
  var lowercase = (v + "").toLowerCase();

  if (lowercase === "true") {
    return true;
  } else if (lowercase === "false") {
    return false;
  }

  throw new Error("Invalid boolean: " + v);
}

exports.booleanConverter = booleanConverter;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var gestures_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var style_scope_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-scope.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

exports.LinearGradient = linear_gradient_1.LinearGradient;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js"));

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view-base/view-base.js"));

var animationModule;

function ensureAnimationModule() {
  if (!animationModule) {
    animationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
  }
}

function CSSType(type) {
  return function (cls) {
    cls.prototype.cssType = type;
  };
}

exports.CSSType = CSSType;

function PseudoClassHandler() {
  var pseudoClasses = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    pseudoClasses[_i] = arguments[_i];
  }

  var stateEventNames = pseudoClasses.map(function (s) {
    return ":" + s;
  });
  var listeners = Symbol("listeners");
  return function (target, propertyKey, descriptor) {
    function update(change) {
      var prev = this[listeners] || 0;
      var next = prev + change;

      if (prev <= 0 && next > 0) {
        this[propertyKey](true);
      } else if (prev > 0 && next <= 0) {
        this[propertyKey](false);
      }
    }

    stateEventNames.forEach(function (s) {
      return target[s] = update;
    });
  };
}

exports.PseudoClassHandler = PseudoClassHandler;
exports._rootModalViews = new Array();

var ViewCommon = function (_super) {
  __extends(ViewCommon, _super);

  function ViewCommon() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._gestureObservers = {};
    return _this;
  }

  Object.defineProperty(ViewCommon.prototype, "css", {
    get: function () {
      var scope = this._styleScope;
      return scope && scope.css;
    },
    set: function (value) {
      this._updateStyleScope(undefined, undefined, value);
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.addCss = function (cssString) {
    this._updateStyleScope(undefined, cssString);
  };

  ViewCommon.prototype.addCssFile = function (cssFileName) {
    this._updateStyleScope(cssFileName);
  };

  ViewCommon.prototype.changeCssFile = function (cssFileName) {
    var scope = this._styleScope;

    if (scope && cssFileName) {
      scope.changeCssFile(cssFileName);

      this._onCssStateChange();
    }
  };

  ViewCommon.prototype._updateStyleScope = function (cssFileName, cssString, css) {
    var scope = this._styleScope;

    if (!scope) {
      scope = new style_scope_1.StyleScope();
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._inheritStyleScope(scope);

      this._isStyleScopeHost = true;
    } else {
      this.setScopeProperty(scope, cssFileName, cssString, css);

      this._onCssStateChange();
    }
  };

  ViewCommon.prototype.setScopeProperty = function (scope, cssFileName, cssString, css) {
    if (cssFileName !== undefined) {
      scope.addCssFile(cssFileName);
    } else if (cssString !== undefined) {
      scope.addCss(cssString);
    } else if (css !== undefined) {
      scope.css = css;
    }
  };

  ViewCommon.prototype._onLivesync = function (context) {
    exports._rootModalViews.forEach(function (v) {
      return v.closeModal();
    });

    exports._rootModalViews.length = 0;

    if (context && context.path) {
      return this.changeLocalStyles(context.path);
    }

    return false;
  };

  ViewCommon.prototype.changeLocalStyles = function (contextPath) {
    var _this = this;

    if (!this.changeStyles(this, contextPath)) {
      view_base_1.eachDescendant(this, function (child) {
        _this.changeStyles(child, contextPath);

        return true;
      });
    }

    return true;
  };

  ViewCommon.prototype.changeStyles = function (view, contextPath) {
    if (view._moduleName && contextPath.includes(view._moduleName)) {
      view.changeCssFile(contextPath);
      return true;
    }

    return false;
  };

  ViewCommon.prototype._setupAsRootView = function (context) {
    _super.prototype._setupAsRootView.call(this, context);

    if (!this._styleScope) {
      this._updateStyleScope();
    }
  };

  ViewCommon.prototype.observe = function (type, callback, thisArg) {
    if (!this._gestureObservers[type]) {
      this._gestureObservers[type] = [];
    }

    this._gestureObservers[type].push(gestures_1.observe(this, type, callback, thisArg));
  };

  ViewCommon.prototype.getGestureObservers = function (type) {
    return this._gestureObservers[type];
  };

  ViewCommon.prototype.addEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      arg = view_base_1.getEventOrGestureName(arg);
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this.observe(gesture, callback, thisArg);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this.observe(gst, callback, thisArg);
            } else {
              _super.prototype.addEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.addEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this.observe(arg, callback, thisArg);
    }
  };

  ViewCommon.prototype.removeEventListener = function (arg, callback, thisArg) {
    if (typeof arg === "string") {
      var gesture = gestures_1.fromString(arg);

      if (gesture && !this._isEvent(arg)) {
        this._disconnectGestureObservers(gesture);
      } else {
        var events = arg.split(",");

        if (events.length > 0) {
          for (var i = 0; i < events.length; i++) {
            var evt = events[i].trim();
            var gst = gestures_1.fromString(evt);

            if (gst && !this._isEvent(arg)) {
              this._disconnectGestureObservers(gst);
            } else {
              _super.prototype.removeEventListener.call(this, evt, callback, thisArg);
            }
          }
        } else {
          _super.prototype.removeEventListener.call(this, arg, callback, thisArg);
        }
      }
    } else if (typeof arg === "number") {
      this._disconnectGestureObservers(arg);
    }
  };

  ViewCommon.prototype.onBackPressed = function () {
    return false;
  };

  ViewCommon.prototype._getFragmentManager = function () {
    return undefined;
  };

  ViewCommon.prototype.getModalOptions = function (args) {
    if (args.length === 0) {
      throw new Error("showModal without parameters is deprecated. Please call showModal on a view instance instead.");
    } else {
      var options = null;

      if (args.length === 2) {
        options = args[1];
      } else {
        options = {
          context: args[1],
          closeCallback: args[2],
          fullscreen: args[3],
          animated: args[4],
          stretched: args[5]
        };
      }

      var firstArgument = args[0];
      var view = firstArgument instanceof ViewCommon ? firstArgument : builder_1.createViewFromEntry({
        moduleName: firstArgument
      });
      return {
        view: view,
        options: options
      };
    }
  };

  ViewCommon.prototype.showModal = function () {
    var _a = this.getModalOptions(arguments),
        view = _a.view,
        options = _a.options;

    view._showNativeModalView(this, options);

    return view;
  };

  ViewCommon.prototype.closeModal = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var closeCallback = this._closeModalCallback;

    if (closeCallback) {
      closeCallback.apply(undefined, arguments);
    } else {
      var parent_1 = this.parent;

      if (parent_1) {
        parent_1.closeModal.apply(parent_1, args);
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "modal", {
    get: function () {
      return this._modal;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype._showNativeModalView = function (parent, options) {
    exports._rootModalViews.push(this);

    parent._modal = this;
    this._modalParent = parent;
    this._modalContext = options.context;
    var that = this;

    this._closeModalCallback = function () {
      var originalArgs = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        originalArgs[_i] = arguments[_i];
      }

      if (that._closeModalCallback) {
        var modalIndex = exports._rootModalViews.indexOf(that);

        exports._rootModalViews.splice(modalIndex);

        that._modalParent = null;
        that._modalContext = null;
        that._closeModalCallback = null;

        that._dialogClosed();

        parent._modal = null;

        var whenClosedCallback = function () {
          if (typeof options.closeCallback === "function") {
            options.closeCallback.apply(undefined, originalArgs);
          }
        };

        that._hideNativeModalView(parent, whenClosedCallback);
      }
    };
  };

  ViewCommon.prototype._raiseLayoutChangedEvent = function () {
    var args = {
      eventName: ViewCommon.layoutChangedEvent,
      object: this
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShownModallyEvent = function () {
    var args = {
      eventName: ViewCommon.shownModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._raiseShowingModallyEvent = function () {
    var args = {
      eventName: ViewCommon.showingModallyEvent,
      object: this,
      context: this._modalContext,
      closeCallback: this._closeModalCallback
    };
    this.notify(args);
  };

  ViewCommon.prototype._isEvent = function (name) {
    return this.constructor && name + "Event" in this.constructor;
  };

  ViewCommon.prototype._disconnectGestureObservers = function (type) {
    var observers = this.getGestureObservers(type);

    if (observers) {
      for (var i = 0; i < observers.length; i++) {
        observers[i].disconnect();
      }
    }
  };

  Object.defineProperty(ViewCommon.prototype, "borderColor", {
    get: function () {
      return this.style.borderColor;
    },
    set: function (value) {
      this.style.borderColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopColor", {
    get: function () {
      return this.style.borderTopColor;
    },
    set: function (value) {
      this.style.borderTopColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightColor", {
    get: function () {
      return this.style.borderRightColor;
    },
    set: function (value) {
      this.style.borderRightColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomColor", {
    get: function () {
      return this.style.borderBottomColor;
    },
    set: function (value) {
      this.style.borderBottomColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftColor", {
    get: function () {
      return this.style.borderLeftColor;
    },
    set: function (value) {
      this.style.borderLeftColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderWidth", {
    get: function () {
      return this.style.borderWidth;
    },
    set: function (value) {
      this.style.borderWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopWidth", {
    get: function () {
      return this.style.borderTopWidth;
    },
    set: function (value) {
      this.style.borderTopWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRightWidth", {
    get: function () {
      return this.style.borderRightWidth;
    },
    set: function (value) {
      this.style.borderRightWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomWidth", {
    get: function () {
      return this.style.borderBottomWidth;
    },
    set: function (value) {
      this.style.borderBottomWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderLeftWidth", {
    get: function () {
      return this.style.borderLeftWidth;
    },
    set: function (value) {
      this.style.borderLeftWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderRadius", {
    get: function () {
      return this.style.borderRadius;
    },
    set: function (value) {
      this.style.borderRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopLeftRadius", {
    get: function () {
      return this.style.borderTopLeftRadius;
    },
    set: function (value) {
      this.style.borderTopLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderTopRightRadius", {
    get: function () {
      return this.style.borderTopRightRadius;
    },
    set: function (value) {
      this.style.borderTopRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomRightRadius", {
    get: function () {
      return this.style.borderBottomRightRadius;
    },
    set: function (value) {
      this.style.borderBottomRightRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "borderBottomLeftRadius", {
    get: function () {
      return this.style.borderBottomLeftRadius;
    },
    set: function (value) {
      this.style.borderBottomLeftRadius = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "color", {
    get: function () {
      return this.style.color;
    },
    set: function (value) {
      this.style.color = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "background", {
    get: function () {
      return this.style.background;
    },
    set: function (value) {
      this.style.background = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundColor", {
    get: function () {
      return this.style.backgroundColor;
    },
    set: function (value) {
      this.style.backgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundImage", {
    get: function () {
      return this.style.backgroundImage;
    },
    set: function (value) {
      this.style.backgroundImage = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundSize", {
    get: function () {
      return this.style.backgroundSize;
    },
    set: function (value) {
      this.style.backgroundSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundPosition", {
    get: function () {
      return this.style.backgroundPosition;
    },
    set: function (value) {
      this.style.backgroundPosition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "backgroundRepeat", {
    get: function () {
      return this.style.backgroundRepeat;
    },
    set: function (value) {
      this.style.backgroundRepeat = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minWidth", {
    get: function () {
      return this.style.minWidth;
    },
    set: function (value) {
      this.style.minWidth = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "minHeight", {
    get: function () {
      return this.style.minHeight;
    },
    set: function (value) {
      this.style.minHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "width", {
    get: function () {
      return this.style.width;
    },
    set: function (value) {
      this.style.width = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "height", {
    get: function () {
      return this.style.height;
    },
    set: function (value) {
      this.style.height = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "margin", {
    get: function () {
      return this.style.margin;
    },
    set: function (value) {
      this.style.margin = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginLeft", {
    get: function () {
      return this.style.marginLeft;
    },
    set: function (value) {
      this.style.marginLeft = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginTop", {
    get: function () {
      return this.style.marginTop;
    },
    set: function (value) {
      this.style.marginTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginRight", {
    get: function () {
      return this.style.marginRight;
    },
    set: function (value) {
      this.style.marginRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "marginBottom", {
    get: function () {
      return this.style.marginBottom;
    },
    set: function (value) {
      this.style.marginBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "horizontalAlignment", {
    get: function () {
      return this.style.horizontalAlignment;
    },
    set: function (value) {
      this.style.horizontalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "verticalAlignment", {
    get: function () {
      return this.style.verticalAlignment;
    },
    set: function (value) {
      this.style.verticalAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "visibility", {
    get: function () {
      return this.style.visibility;
    },
    set: function (value) {
      this.style.visibility = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "opacity", {
    get: function () {
      return this.style.opacity;
    },
    set: function (value) {
      this.style.opacity = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "rotate", {
    get: function () {
      return this.style.rotate;
    },
    set: function (value) {
      this.style.rotate = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateX", {
    get: function () {
      return this.style.translateX;
    },
    set: function (value) {
      this.style.translateX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "translateY", {
    get: function () {
      return this.style.translateY;
    },
    set: function (value) {
      this.style.translateY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleX", {
    get: function () {
      return this.style.scaleX;
    },
    set: function (value) {
      this.style.scaleX = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "scaleY", {
    get: function () {
      return this.style.scaleY;
    },
    set: function (value) {
      this.style.scaleY = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutValid", {
    get: function () {
      return this._isLayoutValid;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "cssType", {
    get: function () {
      if (!this._cssType) {
        this._cssType = this.typeName.toLowerCase();
      }

      return this._cssType;
    },
    set: function (type) {
      this._cssType = type.toLowerCase();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ViewCommon.prototype, "isLayoutRequired", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  ViewCommon.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
  };

  ViewCommon.prototype.layout = function (left, top, right, bottom) {
    this._setCurrentLayoutBounds(left, top, right, bottom);
  };

  ViewCommon.prototype.getMeasuredWidth = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredHeight = function () {
    return this._measuredHeight & view_base_1.layout.MEASURED_SIZE_MASK || 0;
  };

  ViewCommon.prototype.getMeasuredState = function () {
    return this._measuredWidth & view_base_1.layout.MEASURED_STATE_MASK | this._measuredHeight >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT & view_base_1.layout.MEASURED_STATE_MASK >> view_base_1.layout.MEASURED_HEIGHT_STATE_SHIFT;
  };

  ViewCommon.prototype.setMeasuredDimension = function (measuredWidth, measuredHeight) {
    this._measuredWidth = measuredWidth;
    this._measuredHeight = measuredHeight;

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, view_base_1.traceCategories.Layout);
    }
  };

  ViewCommon.prototype.requestLayout = function () {
    this._isLayoutValid = false;

    _super.prototype.requestLayout.call(this);
  };

  ViewCommon.resolveSizeAndState = function (size, specSize, specMode, childMeasuredState) {
    var result = size;

    switch (specMode) {
      case view_base_1.layout.UNSPECIFIED:
        result = Math.ceil(size);
        break;

      case view_base_1.layout.AT_MOST:
        if (specSize < size) {
          result = Math.ceil(specSize) | view_base_1.layout.MEASURED_STATE_TOO_SMALL;
        }

        break;

      case view_base_1.layout.EXACTLY:
        result = Math.ceil(specSize);
        break;
    }

    return result | childMeasuredState & view_base_1.layout.MEASURED_STATE_MASK;
  };

  ViewCommon.combineMeasuredStates = function (curState, newState) {
    return curState | newState;
  };

  ViewCommon.layoutChild = function (parent, child, left, top, right, bottom, setFrame) {
    if (setFrame === void 0) {
      setFrame = true;
    }

    if (!child || child.isCollapsed) {
      return;
    }

    var childStyle = child.style;
    var childTop;
    var childLeft;
    var childWidth = child.getMeasuredWidth();
    var childHeight = child.getMeasuredHeight();
    var effectiveMarginTop = child.effectiveMarginTop;
    var effectiveMarginBottom = child.effectiveMarginBottom;
    var vAlignment;

    if (child.effectiveHeight >= 0 && childStyle.verticalAlignment === "stretch") {
      vAlignment = "middle";
    } else {
      vAlignment = childStyle.verticalAlignment;
    }

    switch (vAlignment) {
      case "top":
        childTop = top + effectiveMarginTop;
        break;

      case "middle":
        childTop = top + (bottom - top - childHeight + (effectiveMarginTop - effectiveMarginBottom)) / 2;
        break;

      case "bottom":
        childTop = bottom - childHeight - effectiveMarginBottom;
        break;

      case "stretch":
      default:
        childTop = top + effectiveMarginTop;
        childHeight = bottom - top - (effectiveMarginTop + effectiveMarginBottom);
        break;
    }

    var effectiveMarginLeft = child.effectiveMarginLeft;
    var effectiveMarginRight = child.effectiveMarginRight;
    var hAlignment;

    if (child.effectiveWidth >= 0 && childStyle.horizontalAlignment === "stretch") {
      hAlignment = "center";
    } else {
      hAlignment = childStyle.horizontalAlignment;
    }

    switch (hAlignment) {
      case "left":
        childLeft = left + effectiveMarginLeft;
        break;

      case "center":
        childLeft = left + (right - left - childWidth + (effectiveMarginLeft - effectiveMarginRight)) / 2;
        break;

      case "right":
        childLeft = right - childWidth - effectiveMarginRight;
        break;

      case "stretch":
      default:
        childLeft = left + effectiveMarginLeft;
        childWidth = right - left - (effectiveMarginLeft + effectiveMarginRight);
        break;
    }

    var childRight = Math.round(childLeft + childWidth);
    var childBottom = Math.round(childTop + childHeight);
    childLeft = Math.round(childLeft);
    childTop = Math.round(childTop);

    if (view_base_1.traceEnabled()) {
      view_base_1.traceWrite(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, view_base_1.traceCategories.Layout);
    }

    child.layout(childLeft, childTop, childRight, childBottom, setFrame);
  };

  ViewCommon.measureChild = function (parent, child, widthMeasureSpec, heightMeasureSpec) {
    var measureWidth = 0;
    var measureHeight = 0;

    if (child && !child.isCollapsed) {
      var widthSpec = parent ? parent._currentWidthMeasureSpec : widthMeasureSpec;
      var heightSpec = parent ? parent._currentHeightMeasureSpec : heightMeasureSpec;
      var width = view_base_1.layout.getMeasureSpecSize(widthSpec);
      var widthMode = view_base_1.layout.getMeasureSpecMode(widthSpec);
      var height = view_base_1.layout.getMeasureSpecSize(heightSpec);
      var heightMode = view_base_1.layout.getMeasureSpecMode(heightSpec);

      child._updateEffectiveLayoutValues(width, widthMode, height, heightMode);

      var style = child.style;
      var horizontalMargins = child.effectiveMarginLeft + child.effectiveMarginRight;
      var verticalMargins = child.effectiveMarginTop + child.effectiveMarginBottom;
      var childWidthMeasureSpec = ViewCommon.getMeasureSpec(widthMeasureSpec, horizontalMargins, child.effectiveWidth, style.horizontalAlignment === "stretch");
      var childHeightMeasureSpec = ViewCommon.getMeasureSpec(heightMeasureSpec, verticalMargins, child.effectiveHeight, style.verticalAlignment === "stretch");

      if (view_base_1.traceEnabled()) {
        view_base_1.traceWrite(child.parent + " :measureChild: " + child + " " + view_base_1.layout.measureSpecToString(childWidthMeasureSpec) + ", " + view_base_1.layout.measureSpecToString(childHeightMeasureSpec) + "}", view_base_1.traceCategories.Layout);
      }

      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
      measureWidth = Math.round(child.getMeasuredWidth() + horizontalMargins);
      measureHeight = Math.round(child.getMeasuredHeight() + verticalMargins);
    }

    return {
      measuredWidth: measureWidth,
      measuredHeight: measureHeight
    };
  };

  ViewCommon.getMeasureSpec = function (parentSpec, margins, childLength, stretched) {
    var parentLength = view_base_1.layout.getMeasureSpecSize(parentSpec);
    var parentSpecMode = view_base_1.layout.getMeasureSpecMode(parentSpec);
    var resultSize;
    var resultMode;

    if (childLength >= 0) {
      resultSize = parentSpecMode === view_base_1.layout.UNSPECIFIED ? childLength : Math.min(parentLength, childLength);
      resultMode = view_base_1.layout.EXACTLY;
    } else {
      switch (parentSpecMode) {
        case view_base_1.layout.EXACTLY:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = stretched ? view_base_1.layout.EXACTLY : view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.AT_MOST:
          resultSize = Math.max(0, parentLength - margins);
          resultMode = view_base_1.layout.AT_MOST;
          break;

        case view_base_1.layout.UNSPECIFIED:
          resultSize = 0;
          resultMode = view_base_1.layout.UNSPECIFIED;
          break;
      }
    }

    return view_base_1.layout.makeMeasureSpec(resultSize, resultMode);
  };

  ViewCommon.prototype._setCurrentMeasureSpecs = function (widthMeasureSpec, heightMeasureSpec) {
    var changed = this._currentWidthMeasureSpec !== widthMeasureSpec || this._currentHeightMeasureSpec !== heightMeasureSpec;
    this._currentWidthMeasureSpec = widthMeasureSpec;
    this._currentHeightMeasureSpec = heightMeasureSpec;
    return changed;
  };

  ViewCommon.prototype._getCurrentLayoutBounds = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype._setCurrentLayoutBounds = function (left, top, right, bottom) {
    this._isLayoutValid = true;
    var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
    var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
    this._oldLeft = left;
    this._oldTop = top;
    this._oldRight = right;
    this._oldBottom = bottom;
    return {
      boundsChanged: boundsChanged,
      sizeChanged: sizeChanged
    };
  };

  ViewCommon.prototype.eachChild = function (callback) {
    this.eachChildView(callback);
  };

  ViewCommon.prototype.eachChildView = function (callback) {};

  ViewCommon.prototype._getNativeViewsCount = function () {
    return this._isAddedToNativeVisualTree ? 1 : 0;
  };

  ViewCommon.prototype._eachLayoutView = function (callback) {
    return callback(this);
  };

  ViewCommon.prototype.focus = function () {
    return undefined;
  };

  ViewCommon.prototype.getSafeAreaInsets = function () {
    return {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
  };

  ViewCommon.prototype.getLocationInWindow = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationOnScreen = function () {
    return undefined;
  };

  ViewCommon.prototype.getLocationRelativeTo = function (otherView) {
    return undefined;
  };

  ViewCommon.prototype.getActualSize = function () {
    var currentBounds = this._getCurrentLayoutBounds();

    if (!currentBounds) {
      return undefined;
    }

    return {
      width: view_base_1.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
      height: view_base_1.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
    };
  };

  ViewCommon.prototype.animate = function (animation) {
    return this.createAnimation(animation).play();
  };

  ViewCommon.prototype.createAnimation = function (animation) {
    ensureAnimationModule();

    if (!this._localAnimations) {
      this._localAnimations = new Set();
    }

    animation.target = this;
    var anim = new animationModule.Animation([animation]);

    this._localAnimations.add(anim);

    return anim;
  };

  ViewCommon.prototype._removeAnimation = function (animation) {
    var localAnimations = this._localAnimations;

    if (localAnimations && localAnimations.has(animation)) {
      localAnimations.delete(animation);

      if (animation.isPlaying) {
        animation.cancel();
      }

      return true;
    }

    return false;
  };

  ViewCommon.prototype.resetNativeView = function () {
    var _this = this;

    if (this._localAnimations) {
      this._localAnimations.forEach(function (a) {
        return _this._removeAnimation(a);
      });
    }

    _super.prototype.resetNativeView.call(this);
  };

  ViewCommon.prototype._setNativeViewFrame = function (nativeView, frame) {};

  ViewCommon.prototype._getValue = function () {
    throw new Error("The View._getValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._setValue = function () {
    throw new Error("The View._setValue is obsolete. There is a new property system.");
  };

  ViewCommon.prototype._updateEffectiveLayoutValues = function (parentWidthMeasureSize, parentWidthMeasureMode, parentHeightMeasureSize, parentHeightMeasureMode) {
    var style = this.style;
    var availableWidth = parentWidthMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentWidthMeasureSize;
    this.effectiveWidth = style_properties_1.PercentLength.toDevicePixels(style.width, -2, availableWidth);
    this.effectiveMarginLeft = style_properties_1.PercentLength.toDevicePixels(style.marginLeft, 0, availableWidth);
    this.effectiveMarginRight = style_properties_1.PercentLength.toDevicePixels(style.marginRight, 0, availableWidth);
    var availableHeight = parentHeightMeasureMode === view_base_1.layout.UNSPECIFIED ? -1 : parentHeightMeasureSize;
    this.effectiveHeight = style_properties_1.PercentLength.toDevicePixels(style.height, -2, availableHeight);
    this.effectiveMarginTop = style_properties_1.PercentLength.toDevicePixels(style.marginTop, 0, availableHeight);
    this.effectiveMarginBottom = style_properties_1.PercentLength.toDevicePixels(style.marginBottom, 0, availableHeight);
  };

  ViewCommon.prototype._setNativeClipToBounds = function () {};

  ViewCommon.prototype._redrawNativeBackground = function (value) {};

  ViewCommon.prototype._onAttachedToWindow = function () {};

  ViewCommon.prototype._onDetachedFromWindow = function () {};

  ViewCommon.prototype._hasAncestorView = function (ancestorView) {
    var matcher = function (view) {
      return view === ancestorView;
    };

    for (var parent_2 = this.parent; parent_2 != null; parent_2 = parent_2.parent) {
      if (matcher(parent_2)) {
        return true;
      }
    }

    return false;
  };

  ViewCommon.layoutChangedEvent = "layoutChanged";
  ViewCommon.shownModallyEvent = "shownModally";
  ViewCommon.showingModallyEvent = "showingModally";
  return ViewCommon;
}(view_base_1.ViewBase);

exports.ViewCommon = ViewCommon;
exports.automationTextProperty = new view_base_1.Property({
  name: "automationText"
});
exports.automationTextProperty.register(ViewCommon);
exports.originXProperty = new view_base_1.Property({
  name: "originX",
  defaultValue: 0.5,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.originXProperty.register(ViewCommon);
exports.originYProperty = new view_base_1.Property({
  name: "originY",
  defaultValue: 0.5,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.originYProperty.register(ViewCommon);
exports.isEnabledProperty = new view_base_1.Property({
  name: "isEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter,
  valueChanged: function (target, oldValue, newValue) {
    target._goToVisualState(newValue ? "normal" : "disabled");
  }
});
exports.isEnabledProperty.register(ViewCommon);
exports.isUserInteractionEnabledProperty = new view_base_1.Property({
  name: "isUserInteractionEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.isUserInteractionEnabledProperty.register(ViewCommon);
exports.iosOverflowSafeAreaProperty = new view_base_1.Property({
  name: "iosOverflowSafeArea",
  defaultValue: false,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaProperty.register(ViewCommon);
exports.iosOverflowSafeAreaEnabledProperty = new view_base_1.InheritedProperty({
  name: "iosOverflowSafeAreaEnabled",
  defaultValue: true,
  valueConverter: view_base_1.booleanConverter
});
exports.iosOverflowSafeAreaEnabledProperty.register(ViewCommon);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/view/view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js"));

var PFLAG_FORCE_LAYOUT = 1;
var PFLAG_MEASURED_DIMENSION_SET = 1 << 1;
var PFLAG_LAYOUT_REQUIRED = 1 << 2;
var majorVersion = utils_1.ios.MajorVersion;

var View = function (_super) {
  __extends(View, _super);

  function View() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._isLaidOut = false;
    _this._hasTransfrom = false;
    _this._privateFlags = PFLAG_LAYOUT_REQUIRED | PFLAG_FORCE_LAYOUT;
    _this._suspendCATransaction = false;
    return _this;
  }

  Object.defineProperty(View.prototype, "isLayoutRequired", {
    get: function () {
      return (this._privateFlags & PFLAG_LAYOUT_REQUIRED) === PFLAG_LAYOUT_REQUIRED;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "isLayoutRequested", {
    get: function () {
      return (this._privateFlags & PFLAG_FORCE_LAYOUT) === PFLAG_FORCE_LAYOUT;
    },
    enumerable: true,
    configurable: true
  });

  View.prototype.requestLayout = function () {
    _super.prototype.requestLayout.call(this);

    this._privateFlags |= PFLAG_FORCE_LAYOUT;
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      nativeView.setNeedsLayout();
    }

    if (this.viewController && this.viewController.view !== nativeView) {
      this.viewController.view.setNeedsLayout();
    }
  };

  View.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    var measureSpecsChanged = this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);

    var forceLayout = (this._privateFlags & PFLAG_FORCE_LAYOUT) === PFLAG_FORCE_LAYOUT;

    if (forceLayout || measureSpecsChanged) {
      this._privateFlags &= ~PFLAG_MEASURED_DIMENSION_SET;
      this.onMeasure(widthMeasureSpec, heightMeasureSpec);
      this._privateFlags |= PFLAG_LAYOUT_REQUIRED;

      if ((this._privateFlags & PFLAG_MEASURED_DIMENSION_SET) !== PFLAG_MEASURED_DIMENSION_SET) {
        throw new Error("onMeasure() did not set the measured dimension by calling setMeasuredDimension() " + this);
      }
    }
  };

  View.prototype.layout = function (left, top, right, bottom, setFrame) {
    if (setFrame === void 0) {
      setFrame = true;
    }

    var _a = this._setCurrentLayoutBounds(left, top, right, bottom),
        boundsChanged = _a.boundsChanged,
        sizeChanged = _a.sizeChanged;

    if (setFrame) {
      this.layoutNativeView(left, top, right, bottom);
    }

    if (boundsChanged || (this._privateFlags & PFLAG_LAYOUT_REQUIRED) === PFLAG_LAYOUT_REQUIRED) {
      var position = {
        left: left,
        top: top,
        right: right,
        bottom: bottom
      };

      if (this.nativeViewProtected && majorVersion > 10) {
        var frame = this.nativeViewProtected.frame;
        position = ios.getPositionFromFrame(frame);
      }

      this.onLayout(position.left, position.top, position.right, position.bottom);
      this._privateFlags &= ~PFLAG_LAYOUT_REQUIRED;
    }

    this.updateBackground(sizeChanged);
    this._privateFlags &= ~PFLAG_FORCE_LAYOUT;
  };

  View.prototype.updateBackground = function (sizeChanged) {
    if (sizeChanged) {
      this._onSizeChanged();
    } else if (this._nativeBackgroundState === "invalid") {
      var background = this.style.backgroundInternal;

      this._redrawNativeBackground(background);
    }
  };

  View.prototype.setMeasuredDimension = function (measuredWidth, measuredHeight) {
    _super.prototype.setMeasuredDimension.call(this, measuredWidth, measuredHeight);

    this._privateFlags |= PFLAG_MEASURED_DIMENSION_SET;
  };

  View.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var view = this.nativeViewProtected;
    var width = view_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = view_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = view_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = view_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var nativeWidth = 0;
    var nativeHeight = 0;

    if (view) {
      var nativeSize = view_common_1.layout.measureNativeView(view, width, widthMode, height, heightMode);
      nativeWidth = nativeSize.width;
      nativeHeight = nativeSize.height;
    }

    var measureWidth = Math.max(nativeWidth, this.effectiveMinWidth);
    var measureHeight = Math.max(nativeHeight, this.effectiveMinHeight);
    var widthAndState = View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  View.prototype.onLayout = function (left, top, right, bottom) {};

  View.prototype._setNativeViewFrame = function (nativeView, frame) {
    var oldFrame = this._cachedFrame || nativeView.frame;

    if (!CGRectEqualToRect(oldFrame, frame)) {
      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(this + " :_setNativeViewFrame: " + JSON.stringify(ios.getPositionFromFrame(frame)), view_common_1.traceCategories.Layout);
      }

      this._cachedFrame = frame;
      var adjustedFrame = null;
      var transform = null;

      if (this._hasTransfrom) {
        transform = nativeView.transform;
        nativeView.transform = CGAffineTransformIdentity;
        nativeView.frame = frame;
      } else {
        nativeView.frame = frame;
      }

      adjustedFrame = this.applySafeAreaInsets(frame);

      if (adjustedFrame) {
        nativeView.frame = adjustedFrame;
      }

      if (this._hasTransfrom) {
        nativeView.transform = transform;
      }

      var boundsOrigin = nativeView.bounds.origin;
      var boundsFrame = adjustedFrame || frame;
      nativeView.bounds = CGRectMake(boundsOrigin.x, boundsOrigin.y, boundsFrame.size.width, boundsFrame.size.height);

      this._raiseLayoutChangedEvent();

      this._isLaidOut = true;
    } else if (!this._isLaidOut) {
      this._raiseLayoutChangedEvent();

      this._isLaidOut = true;
    }
  };

  Object.defineProperty(View.prototype, "isLayoutValid", {
    get: function () {
      if (this.nativeViewProtected) {
        return this._isLayoutValid;
      }

      return false;
    },
    enumerable: true,
    configurable: true
  });

  View.prototype.layoutNativeView = function (left, top, right, bottom) {
    if (!this.nativeViewProtected) {
      return;
    }

    var nativeView = this.nativeViewProtected;
    var frame = ios.getFrameFromPosition({
      left: left,
      top: top,
      right: right,
      bottom: bottom
    });

    this._setNativeViewFrame(nativeView, frame);
  };

  View.prototype._setLayoutFlags = function (left, top, right, bottom) {
    var width = right - left;
    var height = bottom - top;
    var widthSpec = view_common_1.layout.makeMeasureSpec(width, view_common_1.layout.EXACTLY);
    var heightSpec = view_common_1.layout.makeMeasureSpec(height, view_common_1.layout.EXACTLY);

    this._setCurrentMeasureSpecs(widthSpec, heightSpec);

    this._privateFlags &= ~PFLAG_FORCE_LAYOUT;
    this.setMeasuredDimension(width, height);

    var sizeChanged = this._setCurrentLayoutBounds(left, top, right, bottom).sizeChanged;

    this.updateBackground(sizeChanged);
    this._privateFlags &= ~PFLAG_LAYOUT_REQUIRED;
  };

  View.prototype.focus = function () {
    if (this.ios) {
      return this.ios.becomeFirstResponder();
    }

    return false;
  };

  View.prototype.applySafeAreaInsets = function (frame) {
    if (majorVersion <= 10) {
      return null;
    }

    if (!this.iosOverflowSafeArea || !this.iosOverflowSafeAreaEnabled) {
      return ios.shrinkToSafeArea(this, frame);
    } else if (this.nativeViewProtected && this.nativeViewProtected.window) {
      return ios.expandBeyondSafeArea(this, frame);
    }

    return null;
  };

  View.prototype.getSafeAreaInsets = function () {
    var safeAreaInsets = this.nativeViewProtected && this.nativeViewProtected.safeAreaInsets;
    var insets = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };

    if (safeAreaInsets) {
      insets.left = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaInsets.left));
      insets.top = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaInsets.top));
      insets.right = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaInsets.right));
      insets.bottom = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaInsets.bottom));
    }

    return insets;
  };

  View.prototype.getLocationInWindow = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.window) {
      return undefined;
    }

    var pointInWindow = this.nativeViewProtected.convertPointToView(this.nativeViewProtected.bounds.origin, null);
    return {
      x: pointInWindow.x,
      y: pointInWindow.y
    };
  };

  View.prototype.getLocationOnScreen = function () {
    if (!this.nativeViewProtected || !this.nativeViewProtected.window) {
      return undefined;
    }

    var pointInWindow = this.nativeViewProtected.convertPointToView(this.nativeViewProtected.bounds.origin, null);
    var pointOnScreen = this.nativeViewProtected.window.convertPointToWindow(pointInWindow, null);
    return {
      x: pointOnScreen.x,
      y: pointOnScreen.y
    };
  };

  View.prototype.getLocationRelativeTo = function (otherView) {
    if (!this.nativeViewProtected || !this.nativeViewProtected.window || !otherView.nativeViewProtected || !otherView.nativeViewProtected.window || this.nativeViewProtected.window !== otherView.nativeViewProtected.window) {
      return undefined;
    }

    var myPointInWindow = this.nativeViewProtected.convertPointToView(this.nativeViewProtected.bounds.origin, null);
    var otherPointInWindow = otherView.nativeViewProtected.convertPointToView(otherView.nativeViewProtected.bounds.origin, null);
    return {
      x: myPointInWindow.x - otherPointInWindow.x,
      y: myPointInWindow.y - otherPointInWindow.y
    };
  };

  View.prototype._onSizeChanged = function () {
    var nativeView = this.nativeViewProtected;

    if (!nativeView) {
      return;
    }

    var background = this.style.backgroundInternal;
    var backgroundDependsOnSize = background.image || !background.hasUniformBorder() || background.hasBorderRadius();

    if (this._nativeBackgroundState === "invalid" || this._nativeBackgroundState === "drawn" && backgroundDependsOnSize) {
      this._redrawNativeBackground(background);
    }

    var clipPath = this.style.clipPath;

    if (clipPath !== "" && this[style_properties_1.clipPathProperty.setNative]) {
      this[style_properties_1.clipPathProperty.setNative](clipPath);
    }
  };

  View.prototype.updateNativeTransform = function () {
    var scaleX = this.scaleX || 1e-6;
    var scaleY = this.scaleY || 1e-6;
    var rotate = this.rotate || 0;
    var newTransform = CGAffineTransformIdentity;
    newTransform = CGAffineTransformTranslate(newTransform, this.translateX, this.translateY);
    newTransform = CGAffineTransformRotate(newTransform, rotate * Math.PI / 180);
    newTransform = CGAffineTransformScale(newTransform, scaleX, scaleY);

    if (!CGAffineTransformEqualToTransform(this.nativeViewProtected.transform, newTransform)) {
      var updateSuspended = this._isPresentationLayerUpdateSuspeneded();

      if (!updateSuspended) {
        CATransaction.begin();
      }

      this.nativeViewProtected.transform = newTransform;
      this._hasTransfrom = this.nativeViewProtected && !CGAffineTransformEqualToTransform(this.nativeViewProtected.transform, CGAffineTransformIdentity);

      if (!updateSuspended) {
        CATransaction.commit();
      }
    }
  };

  View.prototype.updateOriginPoint = function (originX, originY) {
    var newPoint = CGPointMake(originX, originY);
    this.nativeViewProtected.layer.anchorPoint = newPoint;

    if (this._cachedFrame) {
      this._setNativeViewFrame(this.nativeViewProtected, this._cachedFrame);
    }
  };

  View.prototype._suspendPresentationLayerUpdates = function () {
    this._suspendCATransaction = true;
  };

  View.prototype._resumePresentationLayerUpdates = function () {
    this._suspendCATransaction = false;
  };

  View.prototype._isPresentationLayerUpdateSuspeneded = function () {
    return this._suspendCATransaction || this._suspendNativeUpdatesCount;
  };

  View.prototype._showNativeModalView = function (parent, options) {
    var _this = this;

    var parentWithController = ios.getParentWithViewController(parent);

    if (!parentWithController) {
      view_common_1.traceWrite("Could not find parent with viewController for " + parent + " while showing modal view.", view_common_1.traceCategories.ViewHierarchy, view_common_1.traceMessageType.error);
      return;
    }

    var parentController = parentWithController.viewController;

    if (parentController.presentedViewController) {
      view_common_1.traceWrite("Parent is already presenting view controller. Close the current modal page before showing another one!", view_common_1.traceCategories.ViewHierarchy, view_common_1.traceMessageType.error);
      return;
    }

    if (!parentController.view || !parentController.view.window) {
      view_common_1.traceWrite("Parent page is not part of the window hierarchy.", view_common_1.traceCategories.ViewHierarchy, view_common_1.traceMessageType.error);
      return;
    }

    this._setupAsRootView({});

    _super.prototype._showNativeModalView.call(this, parentWithController, options);

    var controller = this.viewController;

    if (!controller) {
      var nativeView = this.ios || this.nativeViewProtected;
      controller = ios.UILayoutViewController.initWithOwner(new WeakRef(this));

      if (nativeView instanceof UIView) {
        controller.view.addSubview(nativeView);
      }

      this.viewController = controller;
    }

    if (options.fullscreen) {
      controller.modalPresentationStyle = 0;
    } else {
      controller.modalPresentationStyle = 2;
    }

    if (options.ios && options.ios.presentationStyle) {
      var presentationStyle = options.ios.presentationStyle;
      controller.modalPresentationStyle = presentationStyle;

      if (presentationStyle === 7) {
        var popoverPresentationController = controller.popoverPresentationController;
        var view = parent.nativeViewProtected;
        popoverPresentationController.sourceView = view;
        popoverPresentationController.sourceRect = CGRectMake(0, 0, view.frame.size.width, view.frame.size.height);
      }
    }

    this.horizontalAlignment = "stretch";
    this.verticalAlignment = "stretch";

    this._raiseShowingModallyEvent();

    var animated = options.animated === undefined ? true : !!options.animated;
    controller.animated = animated;
    parentController.presentViewControllerAnimatedCompletion(controller, animated, null);
    var transitionCoordinator = utils_1.ios.getter(parentController, parentController.transitionCoordinator);

    if (transitionCoordinator) {
      UIViewControllerTransitionCoordinator.prototype.animateAlongsideTransitionCompletion.call(transitionCoordinator, null, function () {
        return _this._raiseShownModallyEvent();
      });
    } else {
      this._raiseShownModallyEvent();
    }
  };

  View.prototype._hideNativeModalView = function (parent, whenClosedCallback) {
    if (!parent || !parent.viewController) {
      view_common_1.traceError("Trying to hide modal view but no parent with viewController specified.");
      return;
    }

    var parentController = parent.viewController;
    var animated = this.viewController.animated;
    parentController.dismissViewControllerAnimatedCompletion(animated, whenClosedCallback);
  };

  View.prototype[view_common_1.isEnabledProperty.getDefault] = function () {
    var nativeView = this.nativeViewProtected;
    return nativeView instanceof UIControl ? nativeView.enabled : true;
  };

  View.prototype[view_common_1.isEnabledProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (nativeView instanceof UIControl) {
      nativeView.enabled = value;
    }
  };

  View.prototype[view_common_1.originXProperty.getDefault] = function () {
    return this.nativeViewProtected.layer.anchorPoint.x;
  };

  View.prototype[view_common_1.originXProperty.setNative] = function (value) {
    this.updateOriginPoint(value, this.originY);
  };

  View.prototype[view_common_1.originYProperty.getDefault] = function () {
    return this.nativeViewProtected.layer.anchorPoint.y;
  };

  View.prototype[view_common_1.originYProperty.setNative] = function (value) {
    this.updateOriginPoint(this.originX, value);
  };

  View.prototype[view_common_1.automationTextProperty.getDefault] = function () {
    return this.nativeViewProtected.accessibilityLabel;
  };

  View.prototype[view_common_1.automationTextProperty.setNative] = function (value) {
    this.nativeViewProtected.accessibilityIdentifier = value;
    this.nativeViewProtected.accessibilityLabel = value;
  };

  View.prototype[view_common_1.isUserInteractionEnabledProperty.getDefault] = function () {
    return this.nativeViewProtected.userInteractionEnabled;
  };

  View.prototype[view_common_1.isUserInteractionEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.userInteractionEnabled = value;
  };

  View.prototype[style_properties_1.visibilityProperty.getDefault] = function () {
    return this.nativeViewProtected.hidden ? style_properties_1.Visibility.COLLAPSE : style_properties_1.Visibility.VISIBLE;
  };

  View.prototype[style_properties_1.visibilityProperty.setNative] = function (value) {
    switch (value) {
      case style_properties_1.Visibility.VISIBLE:
        this.nativeViewProtected.hidden = false;
        break;

      case style_properties_1.Visibility.HIDDEN:
      case style_properties_1.Visibility.COLLAPSE:
        this.nativeViewProtected.hidden = true;
        break;

      default:
        throw new Error("Invalid visibility value: " + value + ". Valid values are: \"" + style_properties_1.Visibility.VISIBLE + "\", \"" + style_properties_1.Visibility.HIDDEN + "\", \"" + style_properties_1.Visibility.COLLAPSE + "\".");
    }
  };

  View.prototype[style_properties_1.opacityProperty.getDefault] = function () {
    return this.nativeViewProtected.alpha;
  };

  View.prototype[style_properties_1.opacityProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    var updateSuspended = this._isPresentationLayerUpdateSuspeneded();

    if (!updateSuspended) {
      CATransaction.begin();
    }

    nativeView.alpha = value;

    if (!updateSuspended) {
      CATransaction.commit();
    }
  };

  View.prototype[style_properties_1.rotateProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.rotateProperty.setNative] = function (value) {
    this.updateNativeTransform();
  };

  View.prototype[style_properties_1.scaleXProperty.getDefault] = function () {
    return 1;
  };

  View.prototype[style_properties_1.scaleXProperty.setNative] = function (value) {
    this.updateNativeTransform();
  };

  View.prototype[style_properties_1.scaleYProperty.getDefault] = function () {
    return 1;
  };

  View.prototype[style_properties_1.scaleYProperty.setNative] = function (value) {
    this.updateNativeTransform();
  };

  View.prototype[style_properties_1.translateXProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.translateXProperty.setNative] = function (value) {
    this.updateNativeTransform();
  };

  View.prototype[style_properties_1.translateYProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.translateYProperty.setNative] = function (value) {
    this.updateNativeTransform();
  };

  View.prototype[style_properties_1.zIndexProperty.getDefault] = function () {
    return 0;
  };

  View.prototype[style_properties_1.zIndexProperty.setNative] = function (value) {
    this.nativeViewProtected.layer.zPosition = value;
  };

  View.prototype[style_properties_1.backgroundInternalProperty.getDefault] = function () {
    return this.nativeViewProtected.backgroundColor;
  };

  View.prototype[style_properties_1.backgroundInternalProperty.setNative] = function (value) {
    this._nativeBackgroundState = "invalid";

    if (this.isLayoutValid) {
      this._redrawNativeBackground(value);
    }
  };

  View.prototype._getCurrentLayoutBounds = function () {
    var nativeView = this.nativeViewProtected;

    if (nativeView && !this.isCollapsed) {
      var frame = nativeView.frame;
      var origin_1 = frame.origin;
      var size = frame.size;
      return {
        left: Math.round(view_common_1.layout.toDevicePixels(origin_1.x)),
        top: Math.round(view_common_1.layout.toDevicePixels(origin_1.y)),
        right: Math.round(view_common_1.layout.toDevicePixels(origin_1.x + size.width)),
        bottom: Math.round(view_common_1.layout.toDevicePixels(origin_1.y + size.height))
      };
    } else {
      return {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      };
    }
  };

  View.prototype._redrawNativeBackground = function (value) {
    var _this = this;

    var updateSuspended = this._isPresentationLayerUpdateSuspeneded();

    if (!updateSuspended) {
      CATransaction.begin();
    }

    if (value instanceof UIColor) {
      this.nativeViewProtected.backgroundColor = value;
    } else {
      background_1.ios.createBackgroundUIColor(this, function (color) {
        _this.nativeViewProtected.backgroundColor = color;
      });

      this._setNativeClipToBounds();
    }

    if (!updateSuspended) {
      CATransaction.commit();
    }

    this._nativeBackgroundState = "drawn";
  };

  View.prototype._setNativeClipToBounds = function () {
    var backgroundInternal = this.style.backgroundInternal;
    this.nativeViewProtected.clipsToBounds = this.nativeViewProtected instanceof UIScrollView || backgroundInternal.hasBorderWidth() || backgroundInternal.hasBorderRadius();
  };

  __decorate([profiling_1.profile], View.prototype, "layout", null);

  __decorate([profiling_1.profile], View.prototype, "onMeasure", null);

  return View;
}(view_common_1.ViewCommon);

exports.View = View;
View.prototype._nativeBackgroundState = "unset";

var ContainerView = function (_super) {
  __extends(ContainerView, _super);

  function ContainerView() {
    var _this = _super.call(this) || this;

    _this.iosOverflowSafeArea = true;
    return _this;
  }

  return ContainerView;
}(View);

exports.ContainerView = ContainerView;

var CustomLayoutView = function (_super) {
  __extends(CustomLayoutView, _super);

  function CustomLayoutView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  CustomLayoutView.prototype.createNativeView = function () {
    return UIView.alloc().initWithFrame(utils_1.ios.getter(UIScreen, UIScreen.mainScreen).bounds);
  };

  Object.defineProperty(CustomLayoutView.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  CustomLayoutView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {};

  CustomLayoutView.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);

    var parentNativeView = this.nativeViewProtected;
    var childNativeView = child.nativeViewProtected;

    if (parentNativeView && childNativeView) {
      if (typeof atIndex !== "number" || atIndex >= parentNativeView.subviews.count) {
        parentNativeView.addSubview(childNativeView);
      } else {
        parentNativeView.insertSubviewAtIndex(childNativeView, atIndex);
      }

      return true;
    }

    return false;
  };

  CustomLayoutView.prototype._removeViewFromNativeVisualTree = function (child) {
    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    if (child.nativeViewProtected) {
      child.nativeViewProtected.removeFromSuperview();
    }
  };

  return CustomLayoutView;
}(ContainerView);

exports.CustomLayoutView = CustomLayoutView;
var ios;

(function (ios) {
  function getParentWithViewController(view) {
    while (view && !view.viewController) {
      view = view.parent;
    }

    return view;
  }

  ios.getParentWithViewController = getParentWithViewController;

  function updateAutoAdjustScrollInsets(controller, owner) {
    if (majorVersion <= 10) {
      owner._automaticallyAdjustsScrollViewInsets = false;
      controller.automaticallyAdjustsScrollViewInsets = false;
    }
  }

  ios.updateAutoAdjustScrollInsets = updateAutoAdjustScrollInsets;

  function updateConstraints(controller, owner) {
    if (majorVersion <= 10) {
      var layoutGuide = initLayoutGuide(controller);
      controller.view.safeAreaLayoutGuide = layoutGuide;
    }
  }

  ios.updateConstraints = updateConstraints;

  function initLayoutGuide(controller) {
    var rootView = controller.view;
    var layoutGuide = UILayoutGuide.alloc().init();
    rootView.addLayoutGuide(layoutGuide);
    NSLayoutConstraint.activateConstraints([layoutGuide.topAnchor.constraintEqualToAnchor(controller.topLayoutGuide.bottomAnchor), layoutGuide.bottomAnchor.constraintEqualToAnchor(controller.bottomLayoutGuide.topAnchor), layoutGuide.leadingAnchor.constraintEqualToAnchor(rootView.leadingAnchor), layoutGuide.trailingAnchor.constraintEqualToAnchor(rootView.trailingAnchor)]);
    return layoutGuide;
  }

  function layoutView(controller, owner) {
    var layoutGuide = controller.view.safeAreaLayoutGuide;

    if (!layoutGuide) {
      view_common_1.traceWrite("safeAreaLayoutGuide during layout of " + owner + ". Creating fallback constraints, but layout might be wrong.", view_common_1.traceCategories.Layout, view_common_1.traceMessageType.error);
      layoutGuide = initLayoutGuide(controller);
    }

    var safeArea = layoutGuide.layoutFrame;
    var position = ios.getPositionFromFrame(safeArea);
    var safeAreaSize = safeArea.size;
    var hasChildViewControllers = controller.childViewControllers.count > 0;

    if (hasChildViewControllers) {
      var fullscreen = controller.view.frame;
      position = ios.getPositionFromFrame(fullscreen);
    }

    var safeAreaWidth = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaSize.width));
    var safeAreaHeight = view_common_1.layout.round(view_common_1.layout.toDevicePixels(safeAreaSize.height));
    var widthSpec = view_common_1.layout.makeMeasureSpec(safeAreaWidth, view_common_1.layout.EXACTLY);
    var heightSpec = view_common_1.layout.makeMeasureSpec(safeAreaHeight, view_common_1.layout.EXACTLY);
    View.measureChild(null, owner, widthSpec, heightSpec);
    View.layoutChild(null, owner, position.left, position.top, position.right, position.bottom);
    layoutParent(owner.parent);
  }

  ios.layoutView = layoutView;

  function getPositionFromFrame(frame) {
    var left = view_common_1.layout.round(view_common_1.layout.toDevicePixels(frame.origin.x));
    var top = view_common_1.layout.round(view_common_1.layout.toDevicePixels(frame.origin.y));
    var right = view_common_1.layout.round(view_common_1.layout.toDevicePixels(frame.origin.x + frame.size.width));
    var bottom = view_common_1.layout.round(view_common_1.layout.toDevicePixels(frame.origin.y + frame.size.height));
    return {
      left: left,
      right: right,
      top: top,
      bottom: bottom
    };
  }

  ios.getPositionFromFrame = getPositionFromFrame;

  function getFrameFromPosition(position, insets) {
    insets = insets || {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    var left = view_common_1.layout.toDeviceIndependentPixels(position.left + insets.left);
    var top = view_common_1.layout.toDeviceIndependentPixels(position.top + insets.top);
    var width = view_common_1.layout.toDeviceIndependentPixels(position.right - position.left - insets.left - insets.right);
    var height = view_common_1.layout.toDeviceIndependentPixels(position.bottom - position.top - insets.top - insets.bottom);
    return CGRectMake(left, top, width, height);
  }

  ios.getFrameFromPosition = getFrameFromPosition;

  function shrinkToSafeArea(view, frame) {
    var insets = view.getSafeAreaInsets();

    if (insets.left || insets.top) {
      var position = ios.getPositionFromFrame(frame);
      var adjustedFrame = ios.getFrameFromPosition(position, insets);

      if (view_common_1.traceEnabled()) {
        view_common_1.traceWrite(this + " :shrinkToSafeArea: " + JSON.stringify(ios.getPositionFromFrame(adjustedFrame)), view_common_1.traceCategories.Layout);
      }

      return adjustedFrame;
    }

    return null;
  }

  ios.shrinkToSafeArea = shrinkToSafeArea;

  function expandBeyondSafeArea(view, frame) {
    var availableSpace = getAvailableSpaceFromParent(view, frame);
    var safeArea = availableSpace.safeArea;
    var fullscreen = availableSpace.fullscreen;
    var inWindow = availableSpace.inWindow;
    var position = ios.getPositionFromFrame(frame);
    var safeAreaPosition = ios.getPositionFromFrame(safeArea);
    var fullscreenPosition = ios.getPositionFromFrame(fullscreen);
    var inWindowPosition = ios.getPositionFromFrame(inWindow);
    var adjustedPosition = position;

    if (position.left && inWindowPosition.left <= safeAreaPosition.left) {
      adjustedPosition.left = fullscreenPosition.left;
    }

    if (position.top && inWindowPosition.top <= safeAreaPosition.top) {
      adjustedPosition.top = fullscreenPosition.top;
    }

    if (inWindowPosition.right < fullscreenPosition.right && inWindowPosition.right >= safeAreaPosition.right + fullscreenPosition.left) {
      adjustedPosition.right += fullscreenPosition.right - inWindowPosition.right;
    }

    if (inWindowPosition.bottom < fullscreenPosition.bottom && inWindowPosition.bottom >= safeAreaPosition.bottom + fullscreenPosition.top) {
      adjustedPosition.bottom += fullscreenPosition.bottom - inWindowPosition.bottom;
    }

    var adjustedFrame = CGRectMake(view_common_1.layout.toDeviceIndependentPixels(adjustedPosition.left), view_common_1.layout.toDeviceIndependentPixels(adjustedPosition.top), view_common_1.layout.toDeviceIndependentPixels(adjustedPosition.right - adjustedPosition.left), view_common_1.layout.toDeviceIndependentPixels(adjustedPosition.bottom - adjustedPosition.top));

    if (view_common_1.traceEnabled()) {
      view_common_1.traceWrite(view + " :expandBeyondSafeArea: " + JSON.stringify(ios.getPositionFromFrame(adjustedFrame)), view_common_1.traceCategories.Layout);
    }

    return adjustedFrame;
  }

  ios.expandBeyondSafeArea = expandBeyondSafeArea;

  function layoutParent(view) {
    if (!view) {
      return;
    }

    if (view instanceof View && view.nativeViewProtected) {
      var frame = view.nativeViewProtected.frame;
      var origin_2 = frame.origin;
      var size = frame.size;
      var left = view_common_1.layout.toDevicePixels(origin_2.x);
      var top_1 = view_common_1.layout.toDevicePixels(origin_2.y);
      var width = view_common_1.layout.toDevicePixels(size.width);
      var height = view_common_1.layout.toDevicePixels(size.height);

      view._setLayoutFlags(left, top_1, width + left, height + top_1);
    }

    layoutParent(view.parent);
  }

  function getAvailableSpaceFromParent(view, frame) {
    if (!view) {
      return;
    }

    var scrollView = null;
    var viewControllerView = null;

    if (view.viewController) {
      viewControllerView = view.viewController.view;
    } else {
      var parent_1 = view.parent;

      while (parent_1 && !parent_1.viewController && !(parent_1.nativeViewProtected instanceof UIScrollView)) {
        parent_1 = parent_1.parent;
      }

      if (parent_1.nativeViewProtected instanceof UIScrollView) {
        scrollView = parent_1.nativeViewProtected;
      } else if (parent_1.viewController) {
        viewControllerView = parent_1.viewController.view;
      }
    }

    var fullscreen = null;
    var safeArea = null;

    if (viewControllerView) {
      safeArea = viewControllerView.safeAreaLayoutGuide.layoutFrame;
      fullscreen = viewControllerView.frame;
    } else if (scrollView) {
      var insets = scrollView.safeAreaInsets;
      safeArea = CGRectMake(insets.left, insets.top, scrollView.contentSize.width - insets.left - insets.right, scrollView.contentSize.height - insets.top - insets.bottom);
      fullscreen = CGRectMake(0, 0, scrollView.contentSize.width, scrollView.contentSize.height);
    }

    var locationInWindow = view.getLocationInWindow();
    var inWindowLeft = locationInWindow.x;
    var inWindowTop = locationInWindow.y;

    if (scrollView) {
      inWindowLeft += scrollView.contentOffset.x;
      inWindowTop += scrollView.contentOffset.y;
    }

    var inWindow = CGRectMake(inWindowLeft, inWindowTop, frame.size.width, frame.size.height);
    return {
      safeArea: safeArea,
      fullscreen: fullscreen,
      inWindow: inWindow
    };
  }

  var UILayoutViewController = function (_super) {
    __extends(UILayoutViewController, _super);

    function UILayoutViewController() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    UILayoutViewController.initWithOwner = function (owner) {
      var controller = UILayoutViewController.new();
      controller.owner = owner;
      return controller;
    };

    UILayoutViewController.prototype.viewWillLayoutSubviews = function () {
      _super.prototype.viewWillLayoutSubviews.call(this);

      var owner = this.owner.get();

      if (owner) {
        updateConstraints(this, owner);
      }
    };

    UILayoutViewController.prototype.viewDidLayoutSubviews = function () {
      _super.prototype.viewDidLayoutSubviews.call(this);

      var owner = this.owner.get();

      if (owner) {
        if (majorVersion >= 11) {
          var tabViewItem = owner.parent;
          var tabView = tabViewItem && tabViewItem.parent;
          var parent_2 = tabView && tabView.parent;

          while (parent_2 && !parent_2.nativeViewProtected) {
            parent_2 = parent_2.parent;
          }

          if (parent_2) {
            var parentPageInsetsTop = parent_2.nativeViewProtected.safeAreaInsets.top;
            var currentInsetsTop = this.view.safeAreaInsets.top;
            var additionalInsetsTop = Math.max(parentPageInsetsTop - currentInsetsTop, 0);
            var parentPageInsetsBottom = parent_2.nativeViewProtected.safeAreaInsets.bottom;
            var currentInsetsBottom = this.view.safeAreaInsets.bottom;
            var additionalInsetsBottom = Math.max(parentPageInsetsBottom - currentInsetsBottom, 0);

            if (additionalInsetsTop > 0 || additionalInsetsBottom > 0) {
              var additionalInsets = new UIEdgeInsets({
                top: additionalInsetsTop,
                left: 0,
                bottom: additionalInsetsBottom,
                right: 0
              });
              this.additionalSafeAreaInsets = additionalInsets;
            }
          }
        }

        layoutView(this, owner);
      }
    };

    UILayoutViewController.prototype.viewWillAppear = function (animated) {
      _super.prototype.viewWillAppear.call(this, animated);

      var owner = this.owner.get();

      if (!owner) {
        return;
      }

      this.extendedLayoutIncludesOpaqueBars = true;
      updateAutoAdjustScrollInsets(this, owner);

      if (!owner.parent) {
        owner.callLoaded();
      }
    };

    UILayoutViewController.prototype.viewDidDisappear = function (animated) {
      _super.prototype.viewDidDisappear.call(this, animated);

      var owner = this.owner.get();

      if (owner && !owner.parent) {
        owner.callUnloaded();
      }
    };

    return UILayoutViewController;
  }(UIViewController);

  ios.UILayoutViewController = UILayoutViewController;
})(ios = exports.ios || (exports.ios = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();

var TargetHandlerPair = function () {
  function TargetHandlerPair(target, handler) {
    this.tagetRef = new WeakRef(target);
    this.handler = handler;
  }

  return TargetHandlerPair;
}();

function getHandlerForEventName(eventName) {
  var handler = handlersForEventName.get(eventName);

  if (!handler) {
    handler = function (eventData) {
      var source = eventData.object;
      var sourceEventMap = sourcesMap.get(source);

      if (!sourceEventMap) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        return;
      }

      var targetHandlerPairList = sourceEventMap.get(eventName);

      if (!targetHandlerPairList) {
        return;
      }

      var deadPairsIndexes = [];

      for (var i = 0; i < targetHandlerPairList.length; i++) {
        var pair = targetHandlerPairList[i];
        var target = pair.tagetRef.get();

        if (target) {
          pair.handler.call(target, eventData);
        } else {
          deadPairsIndexes.push(i);
        }
      }

      if (deadPairsIndexes.length === targetHandlerPairList.length) {
        source.removeEventListener(eventName, handlersForEventName.get(eventName));
        sourceEventMap.delete(eventName);
      } else {
        for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
          targetHandlerPairList.splice(deadPairsIndexes[j], 1);
        }
      }
    };

    handlersForEventName.set(eventName, handler);
  }

  return handler;
}

function validateArgs(source, eventName, handler, target) {
  if (!source) {
    throw new Error("source is null or undefined");
  }

  if (!target) {
    throw new Error("target is null or undefined");
  }

  if (typeof eventName !== "string") {
    throw new Error("eventName is not a string");
  }

  if (typeof handler !== "function") {
    throw new Error("handler is not a function");
  }
}

function addWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var shouldAttach = false;
  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    sourceEventMap = new Map();
    sourcesMap.set(source, sourceEventMap);
    shouldAttach = true;
  }

  var pairList = sourceEventMap.get(eventName);

  if (!pairList) {
    pairList = new Array();
    sourceEventMap.set(eventName, pairList);
    shouldAttach = true;
  }

  pairList.push(new TargetHandlerPair(target, handler));

  if (shouldAttach) {
    source.addEventListener(eventName, getHandlerForEventName(eventName));
  }
}

exports.addWeakEventListener = addWeakEventListener;

function removeWeakEventListener(source, eventName, handler, target) {
  validateArgs(source, eventName, handler, target);
  var handlerForEventWithName = handlersForEventName.get(eventName);

  if (!handlerForEventWithName) {
    return;
  }

  var sourceEventMap = sourcesMap.get(source);

  if (!sourceEventMap) {
    return;
  }

  var targetHandlerPairList = sourceEventMap.get(eventName);

  if (!targetHandlerPairList) {
    return;
  }

  var targetHandlerPairsToRemove = [];

  for (var i = 0; i < targetHandlerPairList.length; i++) {
    var pair = targetHandlerPairList[i];
    var registeredTarget = pair.tagetRef.get();

    if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
      targetHandlerPairsToRemove.push(i);
    }
  }

  if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
    source.removeEventListener(eventName, handlerForEventWithName);
    sourceEventMap.delete(eventName);
  } else {
    for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
      targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
    }
  }
}

exports.removeWeakEventListener = removeWeakEventListener;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var defaultDate = new Date();

var dateComparer = function (x, y) {
  return x <= y && x >= y;
};

var DatePickerBase = function (_super) {
  __extends(DatePickerBase, _super);

  function DatePickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DatePickerBase = __decorate([view_1.CSSType("DatePicker")], DatePickerBase);
  return DatePickerBase;
}(view_1.View);

exports.DatePickerBase = DatePickerBase;
DatePickerBase.prototype.recycleNativeView = "auto";
exports.yearProperty = new view_1.Property({
  name: "year",
  defaultValue: defaultDate.getFullYear(),
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.yearProperty.register(DatePickerBase);
exports.monthProperty = new view_1.Property({
  name: "month",
  defaultValue: defaultDate.getMonth() + 1,
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.monthProperty.register(DatePickerBase);
exports.dayProperty = new view_1.Property({
  name: "day",
  defaultValue: defaultDate.getDate(),
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.dayProperty.register(DatePickerBase);
exports.maxDateProperty = new view_1.Property({
  name: "maxDate",
  equalityComparer: dateComparer,
  valueConverter: function (v) {
    return new Date(v);
  }
});
exports.maxDateProperty.register(DatePickerBase);
exports.minDateProperty = new view_1.Property({
  name: "minDate",
  equalityComparer: dateComparer,
  valueConverter: function (v) {
    return new Date(v);
  }
});
exports.minDateProperty.register(DatePickerBase);
exports.dateProperty = new view_1.Property({
  name: "date",
  defaultValue: defaultDate,
  equalityComparer: dateComparer,
  valueConverter: function (v) {
    return new Date(v);
  }
});
exports.dateProperty.register(DatePickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/date-picker/date-picker.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var date_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/date-picker/date-picker-common.js"));

var DatePicker = function (_super) {
  __extends(DatePicker, _super);

  function DatePicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DatePicker.prototype.createNativeView = function () {
    var picker = UIDatePicker.new();
    picker.datePickerMode = 1;
    return picker;
  };

  DatePicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    this._changeHandler = UIDatePickerChangeHandlerImpl.initWithOwner(new WeakRef(this));
    nativeView.addTargetActionForControlEvents(this._changeHandler, "valueChanged", 4096);
  };

  DatePicker.prototype.disposeNativeView = function () {
    this._changeHandler = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(DatePicker.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  DatePicker.prototype[date_picker_common_1.yearProperty.setNative] = function (value) {
    this.date = new Date(value, this.month - 1, this.day);
  };

  DatePicker.prototype[date_picker_common_1.monthProperty.setNative] = function (value) {
    this.date = new Date(this.year, value - 1, this.day);
  };

  DatePicker.prototype[date_picker_common_1.dayProperty.setNative] = function (value) {
    this.date = new Date(this.year, this.month - 1, value);
  };

  DatePicker.prototype[date_picker_common_1.dateProperty.setNative] = function (value) {
    var picker = this.nativeViewProtected;
    var comps = utils_1.ios.getter(NSCalendar, NSCalendar.currentCalendar).componentsFromDate(4 | 8 | 16, picker.date);
    comps.year = value.getFullYear();
    comps.month = value.getMonth() + 1;
    comps.day = value.getDate();
    picker.setDateAnimated(utils_1.ios.getter(NSCalendar, NSCalendar.currentCalendar).dateFromComponents(comps), false);
  };

  DatePicker.prototype[date_picker_common_1.maxDateProperty.getDefault] = function () {
    return this.nativeViewProtected.maximumDate;
  };

  DatePicker.prototype[date_picker_common_1.maxDateProperty.setNative] = function (value) {
    var picker = this.nativeViewProtected;
    var nsDate = NSDate.dateWithTimeIntervalSince1970(value.getTime() / 1000);
    picker.maximumDate = nsDate;
  };

  DatePicker.prototype[date_picker_common_1.minDateProperty.getDefault] = function () {
    return this.nativeViewProtected.minimumDate;
  };

  DatePicker.prototype[date_picker_common_1.minDateProperty.setNative] = function (value) {
    var picker = this.nativeViewProtected;
    var nsDate = NSDate.dateWithTimeIntervalSince1970(value.getTime() / 1000);
    picker.minimumDate = nsDate;
  };

  DatePicker.prototype[date_picker_common_1.colorProperty.getDefault] = function () {
    return this.nativeViewProtected.valueForKey("textColor");
  };

  DatePicker.prototype[date_picker_common_1.colorProperty.setNative] = function (value) {
    var picker = this.nativeViewProtected;
    picker.setValueForKey(value instanceof date_picker_common_1.Color ? value.ios : value, "textColor");
  };

  return DatePicker;
}(date_picker_common_1.DatePickerBase);

exports.DatePicker = DatePicker;

var UIDatePickerChangeHandlerImpl = function (_super) {
  __extends(UIDatePickerChangeHandlerImpl, _super);

  function UIDatePickerChangeHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIDatePickerChangeHandlerImpl.initWithOwner = function (owner) {
    var impl = UIDatePickerChangeHandlerImpl.new();
    impl._owner = owner;
    return impl;
  };

  UIDatePickerChangeHandlerImpl.prototype.valueChanged = function (sender) {
    var comps = utils_1.ios.getter(NSCalendar, NSCalendar.currentCalendar).componentsFromDate(4 | 8 | 16, sender.date);

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    var dateChanged = false;

    if (comps.year !== owner.year) {
      date_picker_common_1.yearProperty.nativeValueChange(owner, comps.year);
      dateChanged = true;
    }

    if (comps.month !== owner.month) {
      date_picker_common_1.monthProperty.nativeValueChange(owner, comps.month);
      dateChanged = true;
    }

    if (comps.day !== owner.day) {
      date_picker_common_1.dayProperty.nativeValueChange(owner, comps.day);
      dateChanged = true;
    }

    if (dateChanged) {
      date_picker_common_1.dateProperty.nativeValueChange(owner, new Date(comps.year, comps.month - 1, comps.day));
    }
  };

  UIDatePickerChangeHandlerImpl.ObjCExposedMethods = {
    "valueChanged": {
      returns: interop.types.void,
      params: [UIDatePicker]
    }
  };
  return UIDatePickerChangeHandlerImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.STRING = "string";
exports.PROMPT = "Prompt";
exports.CONFIRM = "Confirm";
exports.ALERT = "Alert";
exports.LOGIN = "Login";
exports.OK = "OK";
exports.CANCEL = "Cancel";
var inputType;

(function (inputType) {
  inputType.text = "text";
  inputType.password = "password";
  inputType.email = "email";
  inputType.number = "number";
  inputType.decimal = "decimal";
  inputType.phone = "phone";
})(inputType = exports.inputType || (exports.inputType = {}));

var capitalizationType;

(function (capitalizationType) {
  capitalizationType.none = "none";
  capitalizationType.all = "all";
  capitalizationType.sentences = "sentences";
  capitalizationType.words = "words";
})(capitalizationType = exports.capitalizationType || (exports.capitalizationType = {}));

var frame;

function getCurrentPage() {
  if (!frame) {
    frame = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");
  }

  var topmostFrame = frame.topmost();

  if (topmostFrame) {
    return topmostFrame.currentPage;
  }

  return undefined;
}

exports.getCurrentPage = getCurrentPage;

function applySelectors(view, callback) {
  var currentPage = getCurrentPage();

  if (currentPage) {
    var styleScope = currentPage._styleScope;

    if (styleScope) {
      view._inheritStyleScope(styleScope);

      view.onLoaded();
      callback(view);
      view.onUnloaded();
    }
  }
}

var button;
var label;
var textField;

function getButtonColors() {
  if (!button) {
    var Button = __webpack_require__("../node_modules/tns-core-modules/ui/button/button.js").Button;

    button = new Button();

    if (platform_1.isIOS) {
      button._setupUI({});
    }
  }

  var buttonColor;
  var buttonBackgroundColor;
  applySelectors(button, function (btn) {
    buttonColor = btn.color;
    buttonBackgroundColor = btn.backgroundColor;
  });
  return {
    color: buttonColor,
    backgroundColor: buttonBackgroundColor
  };
}

exports.getButtonColors = getButtonColors;

function getLabelColor() {
  if (!label) {
    var Label = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js").Label;

    label = new Label();

    if (platform_1.isIOS) {
      label._setupUI({});
    }
  }

  var labelColor;
  applySelectors(label, function (lbl) {
    labelColor = lbl.color;
  });
  return labelColor;
}

exports.getLabelColor = getLabelColor;

function getTextFieldColor() {
  if (!textField) {
    var TextField = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field.js").TextField;

    textField = new TextField();

    if (platform_1.isIOS) {
      textField._setupUI({});
    }
  }

  var textFieldColor;
  applySelectors(textField, function (tf) {
    textFieldColor = tf.color;
  });
  return textFieldColor;
}

exports.getTextFieldColor = getTextFieldColor;

function isDialogOptions(arg) {
  return arg && (arg.message || arg.title);
}

exports.isDialogOptions = isDialogOptions;

function parseLoginOptions(args) {
  if (args.length === 1 && types_1.isObject(args[0])) {
    return args[0];
  }

  var options = {
    title: exports.LOGIN,
    okButtonText: exports.OK,
    cancelButtonText: exports.CANCEL
  };

  if (types_1.isString(args[0])) {
    options.message = args[0];
  }

  if (types_1.isString(args[1])) {
    options.userNameHint = args[1];
  }

  if (types_1.isString(args[2])) {
    options.passwordHint = args[2];
  }

  if (types_1.isString(args[3])) {
    options.userName = args[3];
  }

  if (types_1.isString(args[4])) {
    options.password = args[4];
  }

  return options;
}

exports.parseLoginOptions = parseLoginOptions;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/dialogs/dialogs.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var dialogs_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var application_1 = __webpack_require__("../node_modules/tns-core-modules/application/application.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/dialogs/dialogs-common.js"));

function addButtonsToAlertController(alertController, options, callback) {
  if (!options) {
    return;
  }

  if (types_1.isString(options.cancelButtonText)) {
    alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.cancelButtonText, 0, function () {
      raiseCallback(callback, false);
    }));
  }

  if (types_1.isString(options.neutralButtonText)) {
    alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.neutralButtonText, 0, function () {
      raiseCallback(callback, undefined);
    }));
  }

  if (types_1.isString(options.okButtonText)) {
    alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.okButtonText, 0, function () {
      raiseCallback(callback, true);
    }));
  }
}

function raiseCallback(callback, result) {
  if (types_1.isFunction(callback)) {
    callback(result);
  }
}

function alert(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.ALERT,
        okButtonText: dialogs_common_1.OK,
        message: arg + ""
      } : arg;
      var alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, 1);
      addButtonsToAlertController(alertController, options, function () {
        resolve();
      });
      showUIAlertController(alertController);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.alert = alert;

function confirm(arg) {
  return new Promise(function (resolve, reject) {
    try {
      var options = !dialogs_common_1.isDialogOptions(arg) ? {
        title: dialogs_common_1.CONFIRM,
        okButtonText: dialogs_common_1.OK,
        cancelButtonText: dialogs_common_1.CANCEL,
        message: arg + ""
      } : arg;
      var alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, 1);
      addButtonsToAlertController(alertController, options, function (r) {
        resolve(r);
      });
      showUIAlertController(alertController);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.confirm = confirm;

function prompt(arg) {
  var options;
  var defaultOptions = {
    title: dialogs_common_1.PROMPT,
    okButtonText: dialogs_common_1.OK,
    cancelButtonText: dialogs_common_1.CANCEL,
    inputType: dialogs_common_1.inputType.text
  };

  if (arguments.length === 1) {
    if (types_1.isString(arg)) {
      options = defaultOptions;
      options.message = arg;
    } else {
      options = arg;
    }
  } else if (arguments.length === 2) {
    if (types_1.isString(arguments[0]) && types_1.isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.defaultText = arguments[1];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var textField_1;
      var alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, 1);
      alertController.addTextFieldWithConfigurationHandler(function (arg) {
        arg.text = types_1.isString(options.defaultText) ? options.defaultText : "";
        arg.secureTextEntry = options && options.inputType === dialogs_common_1.inputType.password;

        if (options && options.inputType === dialogs_common_1.inputType.email) {
          arg.keyboardType = 7;
        } else if (options && options.inputType === dialogs_common_1.inputType.number) {
          arg.keyboardType = 4;
        } else if (options && options.inputType === dialogs_common_1.inputType.decimal) {
          arg.keyboardType = 8;
        } else if (options && options.inputType === dialogs_common_1.inputType.phone) {
          arg.keyboardType = 5;
        }

        var color = dialogs_common_1.getTextFieldColor();

        if (color) {
          arg.textColor = arg.tintColor = color.ios;
        }
      });
      textField_1 = alertController.textFields.firstObject;

      if (options) {
        switch (options.capitalizationType) {
          case dialogs_common_1.capitalizationType.all:
            {
              textField_1.autocapitalizationType = 3;
              break;
            }

          case dialogs_common_1.capitalizationType.sentences:
            {
              textField_1.autocapitalizationType = 2;
              break;
            }

          case dialogs_common_1.capitalizationType.words:
            {
              textField_1.autocapitalizationType = 1;
              break;
            }

          default:
            {
              textField_1.autocapitalizationType = 0;
            }
        }
      }

      addButtonsToAlertController(alertController, options, function (r) {
        resolve({
          result: r,
          text: textField_1.text
        });
      });
      showUIAlertController(alertController);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.prompt = prompt;

function login() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var options = dialogs_common_1.parseLoginOptions(args);
  return new Promise(function (resolve, reject) {
    try {
      var userNameTextField_1;
      var passwordTextField_1;
      var alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, 1);
      var textFieldColor_1 = dialogs_common_1.getTextFieldColor();
      alertController.addTextFieldWithConfigurationHandler(function (arg) {
        arg.placeholder = "Login";
        arg.placeholder = options.userNameHint ? options.userNameHint : "";
        arg.text = types_1.isString(options.userName) ? options.userName : "";

        if (textFieldColor_1) {
          arg.textColor = arg.tintColor = textFieldColor_1.ios;
        }
      });
      alertController.addTextFieldWithConfigurationHandler(function (arg) {
        arg.placeholder = "Password";
        arg.secureTextEntry = true;
        arg.placeholder = options.passwordHint ? options.passwordHint : "";
        arg.text = types_1.isString(options.password) ? options.password : "";

        if (textFieldColor_1) {
          arg.textColor = arg.tintColor = textFieldColor_1.ios;
        }
      });
      userNameTextField_1 = alertController.textFields.firstObject;
      passwordTextField_1 = alertController.textFields.lastObject;
      addButtonsToAlertController(alertController, options, function (r) {
        resolve({
          result: r,
          userName: userNameTextField_1.text,
          password: passwordTextField_1.text
        });
      });
      showUIAlertController(alertController);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.login = login;

function showUIAlertController(alertController) {
  var _a, _b;

  var currentView = dialogs_common_1.getCurrentPage() || application_1.getRootView();

  if (currentView) {
    currentView = currentView.modal || currentView;
    var viewController = currentView.ios;

    if (!(currentView.ios instanceof UIViewController)) {
      var parentWithController = view_1.ios.getParentWithViewController(currentView);
      viewController = parentWithController ? parentWithController.viewController : undefined;
    }

    if (viewController) {
      if (alertController.popoverPresentationController) {
        alertController.popoverPresentationController.sourceView = viewController.view;
        alertController.popoverPresentationController.sourceRect = CGRectMake(viewController.view.bounds.size.width / 2.0, viewController.view.bounds.size.height / 2.0, 1.0, 1.0);
        alertController.popoverPresentationController.permittedArrowDirections = 0;
      }

      var color = dialogs_common_1.getButtonColors().color;

      if (color) {
        alertController.view.tintColor = color.ios;
      }

      var lblColor = dialogs_common_1.getLabelColor();

      if (lblColor) {
        if (alertController.title) {
          var title = NSAttributedString.alloc().initWithStringAttributes(alertController.title, (_a = {}, _a[NSForegroundColorAttributeName] = lblColor.ios, _a));
          alertController.setValueForKey(title, "attributedTitle");
        }

        if (alertController.message) {
          var message = NSAttributedString.alloc().initWithStringAttributes(alertController.message, (_b = {}, _b[NSForegroundColorAttributeName] = lblColor.ios, _b));
          alertController.setValueForKey(message, "attributedMessage");
        }
      }

      viewController.presentModalViewControllerAnimated(alertController, true);
    }
  }
}

function action() {
  var options;
  var defaultOptions = {
    title: null,
    cancelButtonText: dialogs_common_1.CANCEL
  };

  if (arguments.length === 1) {
    if (types_1.isString(arguments[0])) {
      options = defaultOptions;
      options.message = arguments[0];
    } else {
      options = arguments[0];
    }
  } else if (arguments.length === 2) {
    if (types_1.isString(arguments[0]) && types_1.isString(arguments[1])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
    }
  } else if (arguments.length === 3) {
    if (types_1.isString(arguments[0]) && types_1.isString(arguments[1]) && types_1.isDefined(arguments[2])) {
      options = defaultOptions;
      options.message = arguments[0];
      options.cancelButtonText = arguments[1];
      options.actions = arguments[2];
    }
  }

  return new Promise(function (resolve, reject) {
    try {
      var i = void 0;
      var action_1;
      var alertController = UIAlertController.alertControllerWithTitleMessagePreferredStyle(options.title, options.message, 0);

      if (options.actions) {
        for (i = 0; i < options.actions.length; i++) {
          action_1 = options.actions[i];

          if (types_1.isString(action_1)) {
            alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(action_1, 0, function (arg) {
              resolve(arg.title);
            }));
          }
        }
      }

      if (types_1.isString(options.cancelButtonText)) {
        alertController.addAction(UIAlertAction.actionWithTitleStyleHandler(options.cancelButtonText, 1, function (arg) {
          resolve(arg.title);
        }));
      }

      showUIAlertController(alertController);
    } catch (ex) {
      reject(ex);
    }
  });
}

exports.action = action;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.blurEvent = "blur";
  EditableTextBase.focusEvent = "focus";
  return EditableTextBase;
}(text_base_1.TextBase);

exports.EditableTextBase = EditableTextBase;
exports.placeholderColorProperty = new text_base_1.CssProperty({
  name: "placeholderColor",
  cssName: "placeholder-color",
  equalityComparer: text_base_1.Color.equals,
  valueConverter: function (v) {
    return new text_base_1.Color(v);
  }
});
exports.placeholderColorProperty.register(text_base_1.Style);
var keyboardTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("datetime", "phone", "number", "url", "email"));
exports.keyboardTypeProperty = new text_base_1.Property({
  name: "keyboardType",
  valueConverter: keyboardTypeConverter
});
exports.keyboardTypeProperty.register(EditableTextBase);
var returnKeyTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("done", "next", "go", "search", "send"));
exports.returnKeyTypeProperty = new text_base_1.Property({
  name: "returnKeyType",
  valueConverter: returnKeyTypeConverter
});
exports.returnKeyTypeProperty.register(EditableTextBase);
exports.editableProperty = new text_base_1.Property({
  name: "editable",
  defaultValue: true,
  valueConverter: text_base_1.booleanConverter
});
exports.editableProperty.register(EditableTextBase);
exports.updateTextTriggerProperty = new text_base_1.Property({
  name: "updateTextTrigger",
  defaultValue: "textChanged"
});
exports.updateTextTriggerProperty.register(EditableTextBase);
var autocapitalizationTypeConverter = text_base_1.makeParser(text_base_1.makeValidator("none", "words", "sentences", "allcharacters"));
exports.autocapitalizationTypeProperty = new text_base_1.Property({
  name: "autocapitalizationType",
  defaultValue: "sentences",
  valueConverter: autocapitalizationTypeConverter
});
exports.autocapitalizationTypeProperty.register(EditableTextBase);
exports.autocorrectProperty = new text_base_1.Property({
  name: "autocorrect",
  valueConverter: text_base_1.booleanConverter
});
exports.autocorrectProperty.register(EditableTextBase);
exports.hintProperty = new text_base_1.Property({
  name: "hint",
  defaultValue: ""
});
exports.hintProperty.register(EditableTextBase);
exports.maxLengthProperty = new text_base_1.Property({
  name: "maxLength",
  defaultValue: Number.POSITIVE_INFINITY,
  valueConverter: parseInt
});
exports.maxLengthProperty.register(EditableTextBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base-common.js"));

var EditableTextBase = function (_super) {
  __extends(EditableTextBase, _super);

  function EditableTextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  EditableTextBase.prototype.dismissSoftInput = function () {
    this.nativeTextViewProtected.resignFirstResponder();
    this.notify({
      eventName: EditableTextBase.blurEvent,
      object: this
    });
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.getDefault] = function () {
    var keyboardType = this.nativeTextViewProtected.keyboardType;

    switch (keyboardType) {
      case 2:
        return "number";

      case 5:
        return "phone";

      case 3:
        return "url";

      case 7:
        return "email";

      default:
        return keyboardType.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.keyboardTypeProperty.setNative] = function (value) {
    var newKeyboardType;

    switch (value) {
      case "datetime":
        newKeyboardType = 2;
        break;

      case "phone":
        newKeyboardType = 5;
        break;

      case "number":
        newKeyboardType = 2;
        break;

      case "url":
        newKeyboardType = 3;
        break;

      case "email":
        newKeyboardType = 7;
        break;

      default:
        var kt = +value;

        if (!isNaN(kt)) {
          newKeyboardType = kt;
        } else {
          newKeyboardType = 0;
        }

        break;
    }

    this.nativeTextViewProtected.keyboardType = newKeyboardType;
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.getDefault] = function () {
    var returnKeyType = this.nativeTextViewProtected.returnKeyType;

    switch (returnKeyType) {
      case 9:
        return "done";

      case 1:
        return "go";

      case 4:
        return "next";

      case 6:
        return "search";

      case 7:
        return "send";

      default:
        return returnKeyType.toString();
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.returnKeyTypeProperty.setNative] = function (value) {
    var newValue;

    switch (value) {
      case "done":
        newValue = 9;
        break;

      case "go":
        newValue = 1;
        break;

      case "next":
        newValue = 4;
        break;

      case "search":
        newValue = 6;
        break;

      case "send":
        newValue = 7;
        break;

      default:
        var rkt = +value;

        if (!isNaN(rkt)) {
          newValue = rkt;
        } else {
          newValue = 0;
        }

        break;
    }

    this.nativeTextViewProtected.returnKeyType = newValue;
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.getDefault] = function () {
    var autocapitalizationType = this.nativeTextViewProtected.autocapitalizationType;

    switch (autocapitalizationType) {
      case 0:
        return "none";

      case 1:
        return "words";

      case 2:
        return "sentences";

      case 3:
        return "allcharacters";

      default:
        throw new Error("Invalid autocapitalizationType value:" + autocapitalizationType);
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocapitalizationTypeProperty.setNative] = function (value) {
    var newValue;

    switch (value) {
      case "none":
        newValue = 0;
        break;

      case "words":
        newValue = 1;
        break;

      case "sentences":
        newValue = 2;
        break;

      case "allcharacters":
        newValue = 3;
        break;

      default:
        newValue = 2;
        break;
    }

    this.nativeTextViewProtected.autocapitalizationType = newValue;
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.getDefault] = function () {
    var autocorrectionType = this.nativeTextViewProtected.autocorrectionType;

    switch (autocorrectionType) {
      case 2:
        return true;

      case 1:
        return false;

      case 0:
        return autocorrectionType;
    }
  };

  EditableTextBase.prototype[editable_text_base_common_1.autocorrectProperty.setNative] = function (value) {
    var newValue;

    if (typeof value === "number") {
      newValue = 0;
    } else if (value) {
      newValue = 2;
    } else {
      newValue = 1;
    }

    this.nativeTextViewProtected.autocorrectionType = newValue;
  };

  return EditableTextBase;
}(editable_text_base_common_1.EditableTextBase);

exports.EditableTextBase = EditableTextBase;

function _updateCharactersInRangeReplacementString(formattedText, rangeLocation, rangeLength, replacementString) {
  var deletingText = !replacementString;
  var currentLocation = 0;

  for (var i = 0, length_1 = formattedText.spans.length; i < length_1; i++) {
    var span = formattedText.spans.getItem(i);

    if (currentLocation <= rangeLocation && rangeLocation < currentLocation + span.text.length) {
      var newText = splice(span.text, rangeLocation - currentLocation, deletingText ? rangeLength : 0, replacementString);

      span._setTextInternal(newText);

      return;
    }

    currentLocation += span.text.length;
  }
}

exports._updateCharactersInRangeReplacementString = _updateCharactersInRangeReplacementString;

function splice(value, start, delCount, newSubStr) {
  return value.slice(0, start) + newSubStr + value.slice(start + Math.abs(delCount));
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/enums/enums.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var KeyboardType;

(function (KeyboardType) {
  KeyboardType.datetime = "datetime";
  KeyboardType.phone = "phone";
  KeyboardType.number = "number";
  KeyboardType.url = "url";
  KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));

var ReturnKeyType;

(function (ReturnKeyType) {
  ReturnKeyType.done = "done";
  ReturnKeyType.next = "next";
  ReturnKeyType.go = "go";
  ReturnKeyType.search = "search";
  ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));

var TextAlignment;

(function (TextAlignment) {
  TextAlignment.left = "left";
  TextAlignment.center = "center";
  TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));

var TextDecoration;

(function (TextDecoration) {
  TextDecoration.none = "none";
  TextDecoration.underline = "underline";
  TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));

var TextTransform;

(function (TextTransform) {
  TextTransform.none = "none";
  TextTransform.capitalize = "capitalize";
  TextTransform.uppercase = "uppercase";
  TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));

var WhiteSpace;

(function (WhiteSpace) {
  WhiteSpace.normal = "normal";
  WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));

var Orientation;

(function (Orientation) {
  Orientation.horizontal = "horizontal";
  Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));

var DeviceOrientation;

(function (DeviceOrientation) {
  DeviceOrientation.portrait = "portrait";
  DeviceOrientation.landscape = "landscape";
  DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));

var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.left = "left";
  HorizontalAlignment.center = "center";
  HorizontalAlignment.right = "right";
  HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.top = "top";
  VerticalAlignment.middle = "middle";
  VerticalAlignment.bottom = "bottom";
  VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

var Stretch;

(function (Stretch) {
  Stretch.none = "none";
  Stretch.aspectFill = "aspectFill";
  Stretch.aspectFit = "aspectFit";
  Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));

var Visibility;

(function (Visibility) {
  Visibility.visible = "visible";
  Visibility.collapse = "collapse";
  Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));

var FontAttributes;

(function (FontAttributes) {
  FontAttributes.Normal = 0;
  FontAttributes.Bold = 1;
  FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));

var DeviceType;

(function (DeviceType) {
  DeviceType.Phone = "Phone";
  DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));

var UpdateTextTrigger;

(function (UpdateTextTrigger) {
  UpdateTextTrigger.focusLost = "focusLost";
  UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));

var Accuracy;

(function (Accuracy) {
  Accuracy.any = 300;
  Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));

var Dock;

(function (Dock) {
  Dock.left = "left";
  Dock.top = "top";
  Dock.right = "right";
  Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));

var AutocapitalizationType;

(function (AutocapitalizationType) {
  AutocapitalizationType.none = "none";
  AutocapitalizationType.words = "words";
  AutocapitalizationType.sentences = "sentences";
  AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));

var NavigationBarVisibility;

(function (NavigationBarVisibility) {
  NavigationBarVisibility.auto = "auto";
  NavigationBarVisibility.never = "never";
  NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));

var AndroidActionBarIconVisibility;

(function (AndroidActionBarIconVisibility) {
  AndroidActionBarIconVisibility.auto = "auto";
  AndroidActionBarIconVisibility.never = "never";
  AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));

var AndroidActionItemPosition;

(function (AndroidActionItemPosition) {
  AndroidActionItemPosition.actionBar = "actionBar";
  AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
  AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));

var IOSActionItemPosition;

(function (IOSActionItemPosition) {
  IOSActionItemPosition.left = "left";
  IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));

var ImageFormat;

(function (ImageFormat) {
  ImageFormat.png = "png";
  ImageFormat.jpeg = "jpeg";
  ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));

var FontStyle;

(function (FontStyle) {
  FontStyle.normal = "normal";
  FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.thin = "100";
  FontWeight.extraLight = "200";
  FontWeight.light = "300";
  FontWeight.normal = "normal";
  FontWeight.medium = "500";
  FontWeight.semiBold = "600";
  FontWeight.bold = "bold";
  FontWeight.extraBold = "800";
  FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.repeat = "repeat";
  BackgroundRepeat.repeatX = "repeat-x";
  BackgroundRepeat.repeatY = "repeat-y";
  BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

var animationModule;
var AnimationCurve;

(function (AnimationCurve) {
  AnimationCurve.ease = "ease";
  AnimationCurve.easeIn = "easeIn";
  AnimationCurve.easeOut = "easeOut";
  AnimationCurve.easeInOut = "easeInOut";
  AnimationCurve.linear = "linear";
  AnimationCurve.spring = "spring";

  function cubicBezier(x1, y1, x2, y2) {
    animationModule = animationModule || __webpack_require__("../node_modules/tns-core-modules/ui/animation/animation.js");
    return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
  }

  AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));

var StatusBarStyle;

(function (StatusBarStyle) {
  StatusBarStyle.light = "light";
  StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/fragment.transitions.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var slide_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/slide-transition.js");

var fade_transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/fade-transition.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var UIViewControllerAnimatedTransitioningMethods;

(function (UIViewControllerAnimatedTransitioningMethods) {
  var methodSignature = NSMethodSignature.signatureWithObjCTypes("v@:c");
  var invocation = NSInvocation.invocationWithMethodSignature(methodSignature);
  invocation.selector = "completeTransition:";

  function completeTransition(didComplete) {
    var didCompleteReference = new interop.Reference(interop.types.bool, didComplete);
    invocation.setArgumentAtIndex(didCompleteReference, 2);
    invocation.invokeWithTarget(this);
  }

  UIViewControllerAnimatedTransitioningMethods.completeTransition = completeTransition;
})(UIViewControllerAnimatedTransitioningMethods || (UIViewControllerAnimatedTransitioningMethods = {}));

var AnimatedTransitioning = function (_super) {
  __extends(AnimatedTransitioning, _super);

  function AnimatedTransitioning() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AnimatedTransitioning.init = function (transition, operation, fromVC, toVC) {
    var impl = AnimatedTransitioning.new();
    impl._transition = transition;
    impl._operation = operation;
    impl._fromVC = fromVC;
    impl._toVC = toVC;
    return impl;
  };

  AnimatedTransitioning.prototype.animateTransition = function (transitionContext) {
    var containerView = transitionContext.valueForKey("containerView");
    var completion = UIViewControllerAnimatedTransitioningMethods.completeTransition.bind(transitionContext);

    switch (this._operation) {
      case 1:
        this._transitionType = "push";
        break;

      case 2:
        this._transitionType = "pop";
        break;

      case 0:
        this._transitionType = "none";
        break;
    }

    if (trace_1.isEnabled()) {
      trace_1.write("START " + this._transition + " " + this._transitionType, trace_1.categories.Transition);
    }

    this._transition.animateIOSTransition(containerView, this._fromVC.view, this._toVC.view, this._operation, completion);
  };

  AnimatedTransitioning.prototype.transitionDuration = function (transitionContext) {
    return this._transition.getDuration();
  };

  AnimatedTransitioning.prototype.animationEnded = function (transitionCompleted) {
    if (transitionCompleted) {
      if (trace_1.isEnabled()) {
        trace_1.write("END " + this._transition + " " + this._transitionType, trace_1.categories.Transition);
      }
    } else {
      if (trace_1.isEnabled()) {
        trace_1.write("CANCEL " + this._transition + " " + this._transitionType, trace_1.categories.Transition);
      }
    }
  };

  AnimatedTransitioning.ObjCProtocols = [UIViewControllerAnimatedTransitioning];
  return AnimatedTransitioning;
}(NSObject);

function _createIOSAnimatedTransitioning(navigationTransition, nativeCurve, operation, fromVC, toVC) {
  var instance = navigationTransition.instance;
  var transition;

  if (instance) {
    transition = instance;
  } else if (navigationTransition.name) {
    var name_1 = navigationTransition.name.toLowerCase();

    if (name_1.indexOf("slide") === 0) {
      var direction = name_1.substr("slide".length) || "left";
      transition = new slide_transition_1.SlideTransition(direction, navigationTransition.duration, nativeCurve);
    } else if (name_1 === "fade") {
      transition = new fade_transition_1.FadeTransition(navigationTransition.duration, nativeCurve);
    }
  }

  return transition ? AnimatedTransitioning.init(transition, operation, fromVC, toVC) : undefined;
}

exports._createIOSAnimatedTransitioning = _createIOSAnimatedTransitioning;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view-common.js");

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_stack_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-stack.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

function buildEntryFromArgs(arg) {
  var entry;

  if (typeof arg === "string") {
    entry = {
      moduleName: arg
    };
  } else if (typeof arg === "function") {
    entry = {
      create: arg
    };
  } else {
    entry = arg;
  }

  return entry;
}

var FrameBase = function (_super) {
  __extends(FrameBase, _super);

  function FrameBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._backStack = new Array();
    _this._navigationQueue = new Array();
    _this._isInFrameStack = false;
    return _this;
  }

  FrameBase_1 = FrameBase;

  FrameBase.prototype._addChildFromBuilder = function (name, value) {
    throw new Error("Frame should not have a view. Use 'defaultPage' property instead.");
  };

  FrameBase.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.canGoBack = function () {
    var _this = this;

    var backstack = this._backStack.length;
    var previousForwardNotInBackstack = false;

    this._navigationQueue.forEach(function (item) {
      var entry = item.entry;

      if (item.isBackNavigation) {
        previousForwardNotInBackstack = false;

        if (!entry) {
          backstack--;
        } else {
          var backstackIndex = _this._backStack.indexOf(entry);

          if (backstackIndex !== -1) {
            backstack = backstackIndex;
          } else {
            backstack--;
          }
        }
      } else if (entry.entry.clearHistory) {
        previousForwardNotInBackstack = false;
        backstack = 0;
      } else {
        backstack++;

        if (previousForwardNotInBackstack) {
          backstack--;
        }

        previousForwardNotInBackstack = entry.entry.backstackVisible === false;
      }
    });

    if (this._navigationQueue.length > 0 && !this._currentEntry) {
      backstack--;
    }

    return backstack > 0;
  };

  FrameBase.prototype.goBack = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK", view_1.traceCategories.Navigation);
    }

    if (!this.canGoBack()) {
      return;
    }

    if (backstackEntry) {
      var index_1 = this._backStack.indexOf(backstackEntry);

      if (index_1 < 0) {
        return;
      }
    }

    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: true
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype._removeEntry = function (removed) {
    var page = removed.resolvedPage;
    var frame = page.frame;
    page._frame = null;

    if (frame) {
      frame._removeView(page);
    } else {
      page._tearDownUI(true);
    }
  };

  FrameBase.prototype.navigate = function (param) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE", view_1.traceCategories.Navigation);
    }

    var entry = buildEntryFromArgs(param);
    var page = builder_1.createViewFromEntry(entry);

    this._pushInFrameStack();

    var backstackEntry = {
      entry: entry,
      resolvedPage: page,
      navDepth: undefined,
      fragmentTag: undefined
    };
    var navigationContext = {
      entry: backstackEntry,
      isBackNavigation: false
    };

    this._navigationQueue.push(navigationContext);

    this._processNextNavigationEntry();
  };

  FrameBase.prototype.isCurrent = function (entry) {
    return this._currentEntry === entry;
  };

  FrameBase.prototype.setCurrent = function (entry, isBack) {
    var newPage = entry.resolvedPage;

    if (!newPage.frame) {
      this._addView(newPage);

      newPage._frame = this;
    }

    this._currentEntry = entry;

    if (isBack) {
      this._pushInFrameStack();
    }

    newPage.onNavigatedTo(isBack);
    this._executingEntry = null;
  };

  FrameBase.prototype._updateBackstack = function (entry, isBack) {
    var _this = this;

    this.raiseCurrentPageNavigatedEvents(isBack);
    var current = this._currentEntry;

    if (isBack) {
      var index_2 = this._backStack.indexOf(entry);

      this._backStack.splice(index_2 + 1).forEach(function (e) {
        return _this._removeEntry(e);
      });

      this._backStack.pop();
    } else {
      if (entry.entry.clearHistory) {
        this._backStack.forEach(function (e) {
          return _this._removeEntry(e);
        });

        this._backStack.length = 0;
      } else if (FrameBase_1._isEntryBackstackVisible(current)) {
        this._backStack.push(current);
      }
    }

    if (current && this._backStack.indexOf(current) < 0) {
      this._removeEntry(current);
    }
  };

  FrameBase.prototype.isNestedWithin = function (parentFrameCandidate) {
    var frameAncestor = this;

    while (frameAncestor) {
      frameAncestor = view_common_1.getAncestor(frameAncestor, FrameBase_1);

      if (frameAncestor === parentFrameCandidate) {
        return true;
      }
    }

    return false;
  };

  FrameBase.prototype.raiseCurrentPageNavigatedEvents = function (isBack) {
    var page = this.currentPage;

    if (page) {
      if (page.isLoaded) {
        page.callUnloaded();
      }

      page.onNavigatedFrom(isBack);
    }
  };

  FrameBase.prototype._processNavigationQueue = function (page) {
    if (this._navigationQueue.length === 0) {
      return;
    }

    var entry = this._navigationQueue[0].entry;
    var currentNavigationPage = entry.resolvedPage;

    if (page !== currentNavigationPage) {
      return;
    }

    this._navigationQueue.shift();

    this._processNextNavigationEntry();

    this._updateActionBar();
  };

  FrameBase.prototype._findEntryForTag = function (fragmentTag) {
    var entry;

    if (this._currentEntry && this._currentEntry.fragmentTag === fragmentTag) {
      entry = this._currentEntry;
    } else {
      entry = this._backStack.find(function (value) {
        return value.fragmentTag === fragmentTag;
      });

      if (!entry) {
        var navigationItem = this._navigationQueue.find(function (value) {
          return value.entry.fragmentTag === fragmentTag;
        });

        entry = navigationItem ? navigationItem.entry : undefined;
      }
    }

    return entry;
  };

  FrameBase.prototype.navigationQueueIsEmpty = function () {
    return this._navigationQueue.length === 0;
  };

  FrameBase._isEntryBackstackVisible = function (entry) {
    if (!entry) {
      return false;
    }

    var backstackVisibleValue = entry.entry.backstackVisible;
    var backstackHidden = backstackVisibleValue !== undefined && !backstackVisibleValue;
    return !backstackHidden;
  };

  FrameBase.prototype._updateActionBar = function (page, disableNavBarAnimation) {};

  FrameBase.prototype._processNextNavigationEntry = function () {
    if (!this.isLoaded || this._executingEntry) {
      return;
    }

    if (this._navigationQueue.length > 0) {
      var navigationContext = this._navigationQueue[0];

      if (navigationContext.isBackNavigation) {
        this.performGoBack(navigationContext);
      } else {
        this.performNavigation(navigationContext);
      }
    }
  };

  FrameBase.prototype.performNavigation = function (navigationContext) {
    var navContext = navigationContext.entry;
    this._executingEntry = navContext;

    this._onNavigatingTo(navContext, navigationContext.isBackNavigation);

    this._navigateCore(navContext);
  };

  FrameBase.prototype.performGoBack = function (navigationContext) {
    var backstackEntry = navigationContext.entry;
    var backstack = this._backStack;

    if (!backstackEntry) {
      backstackEntry = backstack[backstack.length - 1];
      navigationContext.entry = backstackEntry;
    }

    this._executingEntry = backstackEntry;

    this._onNavigatingTo(backstackEntry, true);

    this._goBackCore(backstackEntry);
  };

  FrameBase.prototype._goBackCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._navigateCore = function (backstackEntry) {
    if (view_1.traceEnabled()) {
      view_1.traceWrite("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, view_1.traceCategories.Navigation);
    }
  };

  FrameBase.prototype._onNavigatingTo = function (backstackEntry, isBack) {
    if (this.currentPage) {
      this.currentPage.onNavigatingFrom(isBack);
    }

    backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
  };

  Object.defineProperty(FrameBase.prototype, "animated", {
    get: function () {
      return this._animated;
    },
    set: function (value) {
      this._animated = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "transition", {
    get: function () {
      return this._transition;
    },
    set: function (value) {
      this._transition = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "backStack", {
    get: function () {
      return this._backStack.slice();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentPage", {
    get: function () {
      if (this._currentEntry) {
        return this._currentEntry.resolvedPage;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FrameBase.prototype, "currentEntry", {
    get: function () {
      if (this._currentEntry) {
        return this._currentEntry.entry;
      }

      return null;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._pushInFrameStackRecursive = function () {
    this._pushInFrameStack();

    var framesToPush = [];

    for (var _i = 0, frameStack_1 = frame_stack_1.frameStack; _i < frameStack_1.length; _i++) {
      var frame = frameStack_1[_i];

      if (frame.isNestedWithin(this)) {
        framesToPush.push(frame);
      }
    }

    for (var _a = 0, framesToPush_1 = framesToPush; _a < framesToPush_1.length; _a++) {
      var frame = framesToPush_1[_a];

      frame._pushInFrameStack();
    }
  };

  FrameBase.prototype._pushInFrameStack = function () {
    frame_stack_1._pushInFrameStack(this);
  };

  FrameBase.prototype._popFromFrameStack = function () {
    frame_stack_1._popFromFrameStack(this);
  };

  FrameBase.prototype._removeFromFrameStack = function () {
    frame_stack_1._removeFromFrameStack(this);
  };

  FrameBase.prototype._dialogClosed = function () {
    this._removeFromFrameStack();
  };

  FrameBase.prototype._onRootViewReset = function () {
    _super.prototype._onRootViewReset.call(this);

    this._removeFromFrameStack();
  };

  Object.defineProperty(FrameBase.prototype, "_childrenCount", {
    get: function () {
      if (this.currentPage) {
        return 1;
      }

      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype.eachChildView = function (callback) {
    var page = this.currentPage;

    if (page) {
      callback(page);
    }
  };

  FrameBase.prototype._getIsAnimatedNavigation = function (entry) {
    if (entry && entry.animated !== undefined) {
      return entry.animated;
    }

    if (this.animated !== undefined) {
      return this.animated;
    }

    return FrameBase_1.defaultAnimatedNavigation;
  };

  FrameBase.prototype._getNavigationTransition = function (entry) {
    if (entry) {
      if (view_1.isIOS && entry.transitioniOS !== undefined) {
        return entry.transitioniOS;
      }

      if (view_1.isAndroid && entry.transitionAndroid !== undefined) {
        return entry.transitionAndroid;
      }

      if (entry.transition !== undefined) {
        return entry.transition;
      }
    }

    if (this.transition !== undefined) {
      return this.transition;
    }

    return FrameBase_1.defaultTransition;
  };

  Object.defineProperty(FrameBase.prototype, "navigationBarHeight", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });

  FrameBase.prototype._getNavBarVisible = function (page) {
    throw new Error();
  };

  FrameBase.prototype._addViewToNativeVisualTree = function (child) {
    return true;
  };

  FrameBase.prototype._removeViewFromNativeVisualTree = function (child) {
    child._isAddedToNativeVisualTree = false;
  };

  FrameBase.prototype._printFrameBackStack = function () {
    var length = this.backStack.length;
    var i = length - 1;
    console.log("Frame Back Stack: ");

    while (i >= 0) {
      var backstackEntry = this.backStack[i--];
      console.log("\t" + backstackEntry.resolvedPage);
    }
  };

  FrameBase.prototype._backstackEntryTrace = function (b) {
    var result = "" + b.resolvedPage;

    var backstackVisible = FrameBase_1._isEntryBackstackVisible(b);

    if (!backstackVisible) {
      result += " | INVISIBLE";
    }

    if (b.entry.clearHistory) {
      result += " | CLEAR HISTORY";
    }

    var animated = this._getIsAnimatedNavigation(b.entry);

    if (!animated) {
      result += " | NOT ANIMATED";
    }

    var t = this._getNavigationTransition(b.entry);

    if (t) {
      result += " | Transition[" + JSON.stringify(t) + "]";
    }

    return result;
  };

  FrameBase.prototype._onLivesync = function (context) {
    if (!_super.prototype._onLivesync.call(this, context)) {
      if (!this._currentEntry || !this._currentEntry.entry) {
        return false;
      }

      var currentEntry = this._currentEntry.entry;
      var newEntry = {
        animated: false,
        clearHistory: true,
        context: currentEntry.context,
        create: currentEntry.create,
        moduleName: currentEntry.moduleName,
        backstackVisible: currentEntry.backstackVisible
      };

      if (newEntry.create) {
        var page = newEntry.create();

        if (page === this.currentPage) {
          return false;
        }
      }

      this.navigate(newEntry);
    }

    return true;
  };

  var FrameBase_1;
  FrameBase.androidOptionSelectedEvent = "optionSelected";
  FrameBase.defaultAnimatedNavigation = true;

  __decorate([profiling_1.profile], FrameBase.prototype, "onLoaded", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performNavigation", null);

  __decorate([profiling_1.profile], FrameBase.prototype, "performGoBack", null);

  FrameBase = FrameBase_1 = __decorate([view_1.CSSType("Frame")], FrameBase);
  return FrameBase;
}(view_1.CustomLayoutView);

exports.FrameBase = FrameBase;

function getFrameById(id) {
  return frame_stack_1.frameStack.find(function (frame) {
    return frame.id && frame.id === id;
  });
}

exports.getFrameById = getFrameById;

function topmost() {
  return frame_stack_1.topmost();
}

exports.topmost = topmost;

function goBack() {
  var top = topmost();

  if (top && top.canGoBack()) {
    top.goBack();
    return true;
  } else if (top) {
    var parentFrameCanGoBack = false;
    var parentFrame = view_common_1.getAncestor(top, "Frame");

    while (parentFrame && !parentFrameCanGoBack) {
      if (parentFrame && parentFrame.canGoBack()) {
        parentFrameCanGoBack = true;
      } else {
        parentFrame = view_common_1.getAncestor(parentFrame, "Frame");
      }
    }

    if (parentFrame && parentFrameCanGoBack) {
      parentFrame.goBack();
      return true;
    }
  }

  if (frame_stack_1.frameStack.length > 1) {
    top._popFromFrameStack();
  }

  return false;
}

exports.goBack = goBack;

function stack() {
  return frame_stack_1.frameStack;
}

exports.stack = stack;
exports.defaultPage = new view_1.Property({
  name: "defaultPage",
  valueChanged: function (frame, oldValue, newValue) {
    frame.navigate({
      moduleName: newValue
    });
  }
});
exports.defaultPage.register(FrameBase);
exports.actionBarVisibilityProperty = new view_1.Property({
  name: "actionBarVisibility",
  defaultValue: "auto",
  affectsLayout: view_1.isIOS
});
exports.actionBarVisibilityProperty.register(FrameBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame-stack.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.frameStack = [];

function topmost() {
  if (exports.frameStack.length > 0) {
    return exports.frameStack[exports.frameStack.length - 1];
  }

  return undefined;
}

exports.topmost = topmost;

function _pushInFrameStack(frame) {
  if (frame._isInFrameStack && exports.frameStack[exports.frameStack.length - 1] === frame) {
    return;
  }

  if (frame._isInFrameStack) {
    var indexOfFrame = exports.frameStack.indexOf(frame);
    exports.frameStack.splice(indexOfFrame, 1);
  }

  exports.frameStack.push(frame);
  frame._isInFrameStack = true;
}

exports._pushInFrameStack = _pushInFrameStack;

function _popFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var top = topmost();

  if (top !== frame) {
    throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
  }

  exports.frameStack.pop();
  frame._isInFrameStack = false;
}

exports._popFromFrameStack = _popFromFrameStack;

function _removeFromFrameStack(frame) {
  if (!frame._isInFrameStack) {
    return;
  }

  var index = exports.frameStack.indexOf(frame);
  exports.frameStack.splice(index, 1);
  frame._isInFrameStack = false;
}

exports._removeFromFrameStack = _removeFromFrameStack;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/frame/frame.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js");

var fragment_transitions_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/fragment.transitions.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/frame/frame-common.js"));

var majorVersion = utils.ios.MajorVersion;
var ENTRY = "_entry";
var NAV_DEPTH = "_navDepth";
var TRANSITION = "_transition";
var DELEGATE = "_delegate";
var navDepth = -1;

var Frame = function (_super) {
  __extends(Frame, _super);

  function Frame() {
    var _this = _super.call(this) || this;

    _this._animatedDelegate = UINavigationControllerAnimatedDelegate.new();
    _this._ios = new iOSFrame(_this);
    _this.viewController = _this._ios.controller;
    return _this;
  }

  Frame.prototype.createNativeView = function () {
    return this.viewController.view;
  };

  Frame.prototype.disposeNativeView = function () {
    this._removeFromFrameStack();

    this.viewController = null;
    this._ios.controller = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(Frame.prototype, "ios", {
    get: function () {
      return this._ios;
    },
    enumerable: true,
    configurable: true
  });

  Frame.prototype.setCurrent = function (entry, isBack) {
    var current = this._currentEntry;
    var currentEntryChanged = current !== entry;

    if (currentEntryChanged) {
      this._updateBackstack(entry, isBack);

      _super.prototype.setCurrent.call(this, entry, isBack);
    }
  };

  Frame.prototype._navigateCore = function (backstackEntry) {
    _super.prototype._navigateCore.call(this, backstackEntry);

    var viewController = backstackEntry.resolvedPage.ios;

    if (!viewController) {
      throw new Error("Required page does not have a viewController created.");
    }

    var clearHistory = backstackEntry.entry.clearHistory;

    if (clearHistory) {
      navDepth = -1;
    }

    navDepth++;
    var navigationTransition;
    var animated = this.currentPage ? this._getIsAnimatedNavigation(backstackEntry.entry) : false;

    if (animated) {
      navigationTransition = this._getNavigationTransition(backstackEntry.entry);

      if (navigationTransition) {
        viewController[TRANSITION] = navigationTransition;
      }
    } else {
      viewController[TRANSITION] = {
        name: "non-animated"
      };
    }

    var nativeTransition = _getNativeTransition(navigationTransition, true);

    if (!nativeTransition && navigationTransition) {
      this._ios.controller.delegate = this._animatedDelegate;
      viewController[DELEGATE] = this._animatedDelegate;
    } else {
      viewController[DELEGATE] = null;
      this._ios.controller.delegate = null;
    }

    backstackEntry[NAV_DEPTH] = navDepth;
    viewController[ENTRY] = backstackEntry;

    if (!animated && majorVersion > 10) {
      var barButtonItem = UIBarButtonItem.alloc().initWithTitleStyleTargetAction("", 0, null, null);
      viewController.navigationItem.backBarButtonItem = barButtonItem;
    }

    if (!this._currentEntry) {
      this._updateActionBar(backstackEntry.resolvedPage, true);

      this._ios.controller.pushViewControllerAnimated(viewController, animated);

      if (frame_common_1.traceEnabled()) {
        frame_common_1.traceWrite(this + ".pushViewControllerAnimated(" + viewController + ", " + animated + "); depth = " + navDepth, frame_common_1.traceCategories.Navigation);
      }

      return;
    }

    if (clearHistory) {
      viewController.navigationItem.hidesBackButton = true;
      var newControllers = NSMutableArray.alloc().initWithCapacity(1);
      newControllers.addObject(viewController);
      var oldControllers = this._ios.controller.viewControllers;

      for (var i = 0; i < oldControllers.count; i++) {
        oldControllers.objectAtIndex(i).isBackstackCleared = true;
      }

      this._ios.controller.setViewControllersAnimated(newControllers, animated);

      if (frame_common_1.traceEnabled()) {
        frame_common_1.traceWrite(this + ".setViewControllersAnimated([" + viewController + "], " + animated + "); depth = " + navDepth, frame_common_1.traceCategories.Navigation);
      }

      return;
    }

    if (!Frame._isEntryBackstackVisible(this._currentEntry)) {
      var newControllers = NSMutableArray.alloc().initWithArray(this._ios.controller.viewControllers);

      if (newControllers.count === 0) {
        throw new Error("Wrong controllers count.");
      }

      viewController.navigationItem.hidesBackButton = this.backStack.length === 0;
      var skippedNavController = newControllers.lastObject;
      skippedNavController.isBackstackSkipped = true;
      newControllers.removeLastObject();
      newControllers.addObject(viewController);

      this._ios.controller.setViewControllersAnimated(newControllers, animated);

      if (frame_common_1.traceEnabled()) {
        frame_common_1.traceWrite(this + ".setViewControllersAnimated([originalControllers - lastController + " + viewController + "], " + animated + "); depth = " + navDepth, frame_common_1.traceCategories.Navigation);
      }

      return;
    }

    this._ios.controller.pushViewControllerAnimated(viewController, animated);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(this + ".pushViewControllerAnimated(" + viewController + ", " + animated + "); depth = " + navDepth, frame_common_1.traceCategories.Navigation);
    }
  };

  Frame.prototype._goBackCore = function (backstackEntry) {
    _super.prototype._goBackCore.call(this, backstackEntry);

    navDepth = backstackEntry[NAV_DEPTH];
    var controller = backstackEntry.resolvedPage.ios;
    var animated = this._currentEntry ? this._getIsAnimatedNavigation(this._currentEntry.entry) : false;

    this._updateActionBar(backstackEntry.resolvedPage);

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite(this + ".popToViewControllerAnimated(" + controller + ", " + animated + "); depth = " + navDepth, frame_common_1.traceCategories.Navigation);
    }

    this._ios.controller.popToViewControllerAnimated(controller, animated);
  };

  Frame.prototype._updateActionBar = function (page, disableNavBarAnimation) {
    if (disableNavBarAnimation === void 0) {
      disableNavBarAnimation = false;
    }

    _super.prototype._updateActionBar.call(this, page);

    if (page && this.currentPage && this.currentPage.modal === page) {
      return;
    }

    page = page || this.currentPage;

    var newValue = this._getNavBarVisible(page);

    var disableNavBarAnimationCache = this._ios._disableNavBarAnimation;

    if (disableNavBarAnimation) {
      this._ios._disableNavBarAnimation = true;
    }

    this._ios.showNavigationBar = newValue;

    if (disableNavBarAnimation) {
      this._ios._disableNavBarAnimation = disableNavBarAnimationCache;
    }

    if (this._ios.controller.navigationBar) {
      this._ios.controller.navigationBar.userInteractionEnabled = this.navigationQueueIsEmpty();
    }
  };

  Frame.prototype._getNavBarVisible = function (page) {
    switch (this.actionBarVisibility) {
      case "always":
        return true;

      case "never":
        return false;

      case "auto":
        switch (this._ios.navBarVisibility) {
          case "always":
            return true;

          case "never":
            return false;

          case "auto":
            var newValue = void 0;

            if (page && page.actionBarHidden !== undefined) {
              newValue = !page.actionBarHidden;
            } else {
              newValue = this.ios.controller.viewControllers.count > 1 || page && page.actionBar && !page.actionBar._isEmpty();
            }

            newValue = !!newValue;
            return newValue;
        }

    }
  };

  Object.defineProperty(Frame, "defaultAnimatedNavigation", {
    get: function () {
      return frame_common_1.FrameBase.defaultAnimatedNavigation;
    },
    set: function (value) {
      frame_common_1.FrameBase.defaultAnimatedNavigation = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Frame, "defaultTransition", {
    get: function () {
      return frame_common_1.FrameBase.defaultTransition;
    },
    set: function (value) {
      frame_common_1.FrameBase.defaultTransition = value;
    },
    enumerable: true,
    configurable: true
  });

  Frame.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = frame_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = frame_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = frame_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = frame_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var widthAndState = frame_common_1.View.resolveSizeAndState(width, width, widthMode, 0);
    var heightAndState = frame_common_1.View.resolveSizeAndState(height, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Frame.prototype.layoutNativeView = function (left, top, right, bottom) {};

  Frame.prototype._setNativeViewFrame = function (nativeView, frame) {};

  Frame.prototype._onNavigatingTo = function (backstackEntry, isBack) {};

  __decorate([profiling_1.profile], Frame.prototype, "_navigateCore", null);

  return Frame;
}(frame_common_1.FrameBase);

exports.Frame = Frame;
var transitionDelegates = new Array();

var TransitionDelegate = function (_super) {
  __extends(TransitionDelegate, _super);

  function TransitionDelegate() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TransitionDelegate.initWithOwnerId = function (id) {
    var delegate = TransitionDelegate.new();
    delegate._id = id;
    transitionDelegates.push(delegate);
    return delegate;
  };

  TransitionDelegate.prototype.animationWillStart = function (animationID, context) {
    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("START " + this._id, frame_common_1.traceCategories.Transition);
    }
  };

  TransitionDelegate.prototype.animationDidStop = function (animationID, finished, context) {
    if (finished) {
      if (frame_common_1.traceEnabled()) {
        frame_common_1.traceWrite("END " + this._id, frame_common_1.traceCategories.Transition);
      }
    } else {
      if (frame_common_1.traceEnabled()) {
        frame_common_1.traceWrite("CANCEL " + this._id, frame_common_1.traceCategories.Transition);
      }
    }

    var index = transitionDelegates.indexOf(this);

    if (index > -1) {
      transitionDelegates.splice(index, 1);
    }
  };

  TransitionDelegate.ObjCExposedMethods = {
    "animationWillStart": {
      returns: interop.types.void,
      params: [NSString, NSObject]
    },
    "animationDidStop": {
      returns: interop.types.void,
      params: [NSString, NSNumber, NSObject]
    }
  };
  return TransitionDelegate;
}(NSObject);

var _defaultTransitionDuration = 0.35;

var UINavigationControllerAnimatedDelegate = function (_super) {
  __extends(UINavigationControllerAnimatedDelegate, _super);

  function UINavigationControllerAnimatedDelegate() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UINavigationControllerAnimatedDelegate.prototype.navigationControllerAnimationControllerForOperationFromViewControllerToViewController = function (navigationController, operation, fromVC, toVC) {
    var viewController;

    switch (operation) {
      case 1:
        viewController = toVC;
        break;

      case 2:
        viewController = fromVC;
        break;
    }

    if (!viewController) {
      return null;
    }

    var navigationTransition = viewController[TRANSITION];

    if (!navigationTransition) {
      return null;
    }

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("UINavigationControllerImpl.navigationControllerAnimationControllerForOperationFromViewControllerToViewController(" + operation + ", " + fromVC + ", " + toVC + "), transition: " + JSON.stringify(navigationTransition), frame_common_1.traceCategories.NativeLifecycle);
    }

    var curve = _getNativeCurve(navigationTransition);

    var animationController = fragment_transitions_1._createIOSAnimatedTransitioning(navigationTransition, curve, operation, fromVC, toVC);

    return animationController;
  };

  UINavigationControllerAnimatedDelegate.ObjCProtocols = [UINavigationControllerDelegate];
  return UINavigationControllerAnimatedDelegate;
}(NSObject);

var UINavigationControllerImpl = function (_super) {
  __extends(UINavigationControllerImpl, _super);

  function UINavigationControllerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UINavigationControllerImpl.initWithOwner = function (owner) {
    var controller = UINavigationControllerImpl.new();
    controller._owner = owner;
    return controller;
  };

  Object.defineProperty(UINavigationControllerImpl.prototype, "owner", {
    get: function () {
      return this._owner.get();
    },
    enumerable: true,
    configurable: true
  });

  UINavigationControllerImpl.prototype.viewWillAppear = function (animated) {
    _super.prototype.viewWillAppear.call(this, animated);

    var owner = this._owner.get();

    if (owner && !owner.isLoaded && !owner.parent) {
      owner.callLoaded();
    }
  };

  UINavigationControllerImpl.prototype.viewDidDisappear = function (animated) {
    _super.prototype.viewDidDisappear.call(this, animated);

    var owner = this._owner.get();

    if (owner && owner.isLoaded && !owner.parent && !this.presentedViewController) {
      owner.callUnloaded();

      owner._tearDownUI(true);
    }
  };

  UINavigationControllerImpl.prototype.animateWithDuration = function (navigationTransition, nativeTransition, transitionType, baseCallback) {
    var _this = this;

    var duration = navigationTransition.duration ? navigationTransition.duration / 1000 : _defaultTransitionDuration;

    var curve = _getNativeCurve(navigationTransition);

    var transitionTraced = frame_common_1.isCategorySet(frame_common_1.traceCategories.Transition);
    var transitionDelegate;

    if (transitionTraced) {
      var id = _getTransitionId(nativeTransition, transitionType);

      transitionDelegate = TransitionDelegate.initWithOwnerId(id);
    }

    UIView.animateWithDurationAnimations(duration, function () {
      if (transitionTraced) {
        UIView.setAnimationDelegate(transitionDelegate);
      }

      UIView.setAnimationWillStartSelector("animationWillStart");
      UIView.setAnimationDidStopSelector("animationDidStop");
      UIView.setAnimationCurve(curve);
      baseCallback();
      UIView.setAnimationTransitionForViewCache(nativeTransition, _this.view, true);
    });
  };

  UINavigationControllerImpl.prototype.pushViewControllerAnimated = function (viewController, animated) {
    var _this = this;

    var navigationTransition = viewController[TRANSITION];

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("UINavigationControllerImpl.pushViewControllerAnimated(" + viewController + ", " + animated + "); transition: " + JSON.stringify(navigationTransition), frame_common_1.traceCategories.NativeLifecycle);
    }

    var nativeTransition = _getNativeTransition(navigationTransition, true);

    if (!animated || !navigationTransition || !nativeTransition) {
      _super.prototype.pushViewControllerAnimated.call(this, viewController, animated);

      return;
    }

    this.animateWithDuration(navigationTransition, nativeTransition, "push", function () {
      _super.prototype.pushViewControllerAnimated.call(_this, viewController, false);
    });
  };

  UINavigationControllerImpl.prototype.setViewControllersAnimated = function (viewControllers, animated) {
    var _this = this;

    var viewController = viewControllers.lastObject;
    var navigationTransition = viewController[TRANSITION];

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("UINavigationControllerImpl.setViewControllersAnimated(" + viewControllers + ", " + animated + "); transition: " + JSON.stringify(navigationTransition), frame_common_1.traceCategories.NativeLifecycle);
    }

    var nativeTransition = _getNativeTransition(navigationTransition, true);

    if (!animated || !navigationTransition || !nativeTransition) {
      _super.prototype.setViewControllersAnimated.call(this, viewControllers, animated);

      return;
    }

    this.animateWithDuration(navigationTransition, nativeTransition, "set", function () {
      _super.prototype.setViewControllersAnimated.call(_this, viewControllers, false);
    });
  };

  UINavigationControllerImpl.prototype.popViewControllerAnimated = function (animated) {
    var _this = this;

    var lastViewController = this.viewControllers.lastObject;
    var navigationTransition = lastViewController[TRANSITION];

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("UINavigationControllerImpl.popViewControllerAnimated(" + animated + "); transition: " + JSON.stringify(navigationTransition), frame_common_1.traceCategories.NativeLifecycle);
    }

    if (navigationTransition && navigationTransition.name === "non-animated") {
      return _super.prototype.popViewControllerAnimated.call(this, false);
    }

    var nativeTransition = _getNativeTransition(navigationTransition, false);

    if (!animated || !navigationTransition || !nativeTransition) {
      return _super.prototype.popViewControllerAnimated.call(this, animated);
    }

    this.animateWithDuration(navigationTransition, nativeTransition, "pop", function () {
      _super.prototype.popViewControllerAnimated.call(_this, false);
    });
    return null;
  };

  UINavigationControllerImpl.prototype.popToViewControllerAnimated = function (viewController, animated) {
    var _this = this;

    var lastViewController = this.viewControllers.lastObject;
    var navigationTransition = lastViewController[TRANSITION];

    if (frame_common_1.traceEnabled()) {
      frame_common_1.traceWrite("UINavigationControllerImpl.popToViewControllerAnimated(" + viewController + ", " + animated + "); transition: " + JSON.stringify(navigationTransition), frame_common_1.traceCategories.NativeLifecycle);
    }

    if (navigationTransition && navigationTransition.name === "non-animated") {
      return _super.prototype.popToViewControllerAnimated.call(this, viewController, false);
    }

    var nativeTransition = _getNativeTransition(navigationTransition, false);

    if (!animated || !navigationTransition || !nativeTransition) {
      return _super.prototype.popToViewControllerAnimated.call(this, viewController, animated);
    }

    this.animateWithDuration(navigationTransition, nativeTransition, "popTo", function () {
      _super.prototype.popToViewControllerAnimated.call(_this, viewController, false);
    });
    return null;
  };

  __decorate([profiling_1.profile], UINavigationControllerImpl.prototype, "viewWillAppear", null);

  __decorate([profiling_1.profile], UINavigationControllerImpl.prototype, "viewDidDisappear", null);

  __decorate([profiling_1.profile], UINavigationControllerImpl.prototype, "pushViewControllerAnimated", null);

  __decorate([profiling_1.profile], UINavigationControllerImpl.prototype, "setViewControllersAnimated", null);

  return UINavigationControllerImpl;
}(UINavigationController);

function _getTransitionId(nativeTransition, transitionType) {
  var name;

  switch (nativeTransition) {
    case 4:
      name = "CurlDown";
      break;

    case 3:
      name = "CurlUp";
      break;

    case 1:
      name = "FlipFromLeft";
      break;

    case 2:
      name = "FlipFromRight";
      break;

    case 0:
      name = "None";
      break;
  }

  return name + " " + transitionType;
}

function _getNativeTransition(navigationTransition, push) {
  if (navigationTransition && navigationTransition.name) {
    switch (navigationTransition.name.toLowerCase()) {
      case "flip":
      case "flipright":
        return push ? 2 : 1;

      case "flipleft":
        return push ? 1 : 2;

      case "curl":
      case "curlup":
        return push ? 3 : 4;

      case "curldown":
        return push ? 4 : 3;
    }
  }

  return null;
}

function _getNativeCurve(transition) {
  if (transition.curve) {
    switch (transition.curve) {
      case "easeIn":
        if (frame_common_1.traceEnabled()) {
          frame_common_1.traceWrite("Transition curve resolved to UIViewAnimationCurve.EaseIn.", frame_common_1.traceCategories.Transition);
        }

        return 1;

      case "easeOut":
        if (frame_common_1.traceEnabled()) {
          frame_common_1.traceWrite("Transition curve resolved to UIViewAnimationCurve.EaseOut.", frame_common_1.traceCategories.Transition);
        }

        return 2;

      case "easeInOut":
        if (frame_common_1.traceEnabled()) {
          frame_common_1.traceWrite("Transition curve resolved to UIViewAnimationCurve.EaseInOut.", frame_common_1.traceCategories.Transition);
        }

        return 0;

      case "linear":
        if (frame_common_1.traceEnabled()) {
          frame_common_1.traceWrite("Transition curve resolved to UIViewAnimationCurve.Linear.", frame_common_1.traceCategories.Transition);
        }

        return 3;

      default:
        if (frame_common_1.traceEnabled()) {
          frame_common_1.traceWrite("Transition curve resolved to original: " + transition.curve, frame_common_1.traceCategories.Transition);
        }

        return transition.curve;
    }
  }

  return 0;
}

exports._getNativeCurve = _getNativeCurve;

var iOSFrame = function () {
  function iOSFrame(frame) {
    this._navBarVisibility = "auto";
    this._controller = UINavigationControllerImpl.initWithOwner(new WeakRef(frame));
  }

  Object.defineProperty(iOSFrame.prototype, "controller", {
    get: function () {
      return this._controller;
    },
    set: function (value) {
      this._controller = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(iOSFrame.prototype, "showNavigationBar", {
    get: function () {
      return this._showNavigationBar;
    },
    set: function (value) {
      this._showNavigationBar = value;

      this._controller.setNavigationBarHiddenAnimated(!value, !this._disableNavBarAnimation);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(iOSFrame.prototype, "navBarVisibility", {
    get: function () {
      return this._navBarVisibility;
    },
    set: function (value) {
      this._navBarVisibility = value;
    },
    enumerable: true,
    configurable: true
  });
  return iOSFrame;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures-common.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var GestureTypes;

(function (GestureTypes) {
  GestureTypes[GestureTypes["tap"] = 1] = "tap";
  GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
  GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
  GestureTypes[GestureTypes["pan"] = 8] = "pan";
  GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
  GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
  GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
  GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(GestureTypes = exports.GestureTypes || (exports.GestureTypes = {}));

var GestureStateTypes;

(function (GestureStateTypes) {
  GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
  GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
  GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
  GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(GestureStateTypes = exports.GestureStateTypes || (exports.GestureStateTypes = {}));

var SwipeDirection;

(function (SwipeDirection) {
  SwipeDirection[SwipeDirection["right"] = 1] = "right";
  SwipeDirection[SwipeDirection["left"] = 2] = "left";
  SwipeDirection[SwipeDirection["up"] = 4] = "up";
  SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));

var TouchAction;

(function (TouchAction) {
  TouchAction.down = "down";
  TouchAction.up = "up";
  TouchAction.move = "move";
  TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));

function toString(type, separator) {
  var types = new Array();

  if (type & GestureTypes.tap) {
    types.push("tap");
  }

  if (type & GestureTypes.doubleTap) {
    types.push("doubleTap");
  }

  if (type & GestureTypes.pinch) {
    types.push("pinch");
  }

  if (type & GestureTypes.pan) {
    types.push("pan");
  }

  if (type & GestureTypes.swipe) {
    types.push("swipe");
  }

  if (type & GestureTypes.rotation) {
    types.push("rotation");
  }

  if (type & GestureTypes.longPress) {
    types.push("longPress");
  }

  if (type & GestureTypes.touch) {
    types.push("touch");
  }

  return types.join(separator);
}

exports.toString = toString;

function fromString(type) {
  var t = type.trim().toLowerCase();

  if (t === "tap") {
    return GestureTypes.tap;
  } else if (t === "doubletap") {
    return GestureTypes.doubleTap;
  } else if (t === "pinch") {
    return GestureTypes.pinch;
  } else if (t === "pan") {
    return GestureTypes.pan;
  } else if (t === "swipe") {
    return GestureTypes.swipe;
  } else if (t === "rotation") {
    return GestureTypes.rotation;
  } else if (t === "longpress") {
    return GestureTypes.longPress;
  } else if (t === "touch") {
    return GestureTypes.touch;
  }

  return undefined;
}

exports.fromString = fromString;

var GesturesObserverBase = function () {
  function GesturesObserverBase(target, callback, context) {
    this._target = target;
    this._callback = callback;
    this._context = context;
  }

  Object.defineProperty(GesturesObserverBase.prototype, "callback", {
    get: function () {
      return this._callback;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "target", {
    get: function () {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GesturesObserverBase.prototype, "context", {
    get: function () {
      return this._context;
    },
    enumerable: true,
    configurable: true
  });

  GesturesObserverBase.prototype.disconnect = function () {
    if (this.target) {
      var list = this.target.getGestureObservers(this.type);

      if (list && list.length > 0) {
        for (var i = 0; i < list.length; i++) {
          if (list[i].callback === this.callback) {
            break;
          }
        }

        list.length = 0;
        this.target._gestureObservers[this.type] = undefined;
        delete this.target._gestureObservers[this.type];
      }
    }

    this._target = null;
    this._callback = null;
    this._context = null;
  };

  return GesturesObserverBase;
}();

exports.GesturesObserverBase = GesturesObserverBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/gestures/gestures.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var gestures_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var getter = utils_1.ios.getter;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/gestures/gestures-common.js"));

function observe(target, type, callback, context) {
  var observer = new GesturesObserver(target, callback, context);
  observer.observe(type);
  return observer;
}

exports.observe = observe;

var UIGestureRecognizerDelegateImpl = function (_super) {
  __extends(UIGestureRecognizerDelegateImpl, _super);

  function UIGestureRecognizerDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIGestureRecognizerDelegateImpl.prototype.gestureRecognizerShouldRecognizeSimultaneouslyWithGestureRecognizer = function (gestureRecognizer, otherGestureRecognizer) {
    return true;
  };

  UIGestureRecognizerDelegateImpl.ObjCProtocols = [UIGestureRecognizerDelegate];
  return UIGestureRecognizerDelegateImpl;
}(NSObject);

var recognizerDelegateInstance = UIGestureRecognizerDelegateImpl.new();

var UIGestureRecognizerImpl = function (_super) {
  __extends(UIGestureRecognizerImpl, _super);

  function UIGestureRecognizerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIGestureRecognizerImpl.initWithOwnerTypeCallback = function (owner, type, callback, thisArg) {
    var handler = UIGestureRecognizerImpl.new();
    handler._owner = owner;
    handler._type = type;

    if (callback) {
      handler._callback = callback;
    }

    if (thisArg) {
      handler._context = thisArg;
    }

    return handler;
  };

  UIGestureRecognizerImpl.prototype.recognize = function (recognizer) {
    var owner = this._owner.get();

    var callback = this._callback ? this._callback : owner ? owner.callback : null;
    var typeParam = this._type;
    var target = owner ? owner.target : undefined;
    var args = {
      type: typeParam,
      view: target,
      ios: recognizer,
      android: undefined,
      object: target,
      eventName: gestures_common_1.toString(typeParam)
    };

    if (callback) {
      callback.call(this._context, args);
    }
  };

  UIGestureRecognizerImpl.ObjCExposedMethods = {
    "recognize": {
      returns: interop.types.void,
      params: [UIGestureRecognizer]
    }
  };
  return UIGestureRecognizerImpl;
}(NSObject);

var GesturesObserver = function (_super) {
  __extends(GesturesObserver, _super);

  function GesturesObserver(target, callback, context) {
    var _this = _super.call(this, target, callback, context) || this;

    _this._recognizers = {};
    return _this;
  }

  GesturesObserver.prototype.androidOnTouchEvent = function (motionEvent) {};

  GesturesObserver.prototype.observe = function (type) {
    var _this = this;

    if (this.target) {
      this.type = type;

      this._onTargetLoaded = function (args) {
        _this._attach(_this.target, type);
      };

      this._onTargetUnloaded = function (args) {
        _this._detach();
      };

      this.target.on("loaded", this._onTargetLoaded);
      this.target.on("unloaded", this._onTargetUnloaded);

      if (this.target.isLoaded) {
        this._attach(this.target, type);
      }
    }
  };

  GesturesObserver.prototype._attach = function (target, type) {
    var _this = this;

    this._detach();

    if (target && target.nativeViewProtected && target.nativeViewProtected.addGestureRecognizer) {
      var nativeView = target.nativeViewProtected;

      if (type & gestures_common_1.GestureTypes.tap) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.tap));
      }

      if (type & gestures_common_1.GestureTypes.doubleTap) {
        var r = this._createRecognizer(gestures_common_1.GestureTypes.doubleTap);

        r.numberOfTapsRequired = 2;
        nativeView.addGestureRecognizer(r);
      }

      if (type & gestures_common_1.GestureTypes.pinch) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.pinch, function (args) {
          _this._executeCallback(_getPinchData(args));
        }));
      }

      if (type & gestures_common_1.GestureTypes.pan) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.pan, function (args) {
          _this._executeCallback(_getPanData(args, target.nativeViewProtected));
        }));
      }

      if (type & gestures_common_1.GestureTypes.swipe) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.swipe, function (args) {
          _this._executeCallback(_getSwipeData(args));
        }, 8));
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.swipe, function (args) {
          _this._executeCallback(_getSwipeData(args));
        }, 2));
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.swipe, function (args) {
          _this._executeCallback(_getSwipeData(args));
        }, 1));
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.swipe, function (args) {
          _this._executeCallback(_getSwipeData(args));
        }, 4));
      }

      if (type & gestures_common_1.GestureTypes.rotation) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.rotation, function (args) {
          _this._executeCallback(_getRotationData(args));
        }));
      }

      if (type & gestures_common_1.GestureTypes.longPress) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.longPress));
      }

      if (type & gestures_common_1.GestureTypes.touch) {
        nativeView.addGestureRecognizer(this._createRecognizer(gestures_common_1.GestureTypes.touch));
      }
    }
  };

  GesturesObserver.prototype._detach = function () {
    if (this.target && this.target.nativeViewProtected) {
      for (var name_1 in this._recognizers) {
        if (this._recognizers.hasOwnProperty(name_1)) {
          var item = this._recognizers[name_1];
          this.target.nativeViewProtected.removeGestureRecognizer(item.recognizer);
          item.recognizer = null;
          item.target = null;
        }
      }

      this._recognizers = {};
    }
  };

  GesturesObserver.prototype.disconnect = function () {
    this._detach();

    if (this.target) {
      this.target.off("loaded", this._onTargetLoaded);
      this.target.off("unloaded", this._onTargetUnloaded);
      this._onTargetLoaded = null;
      this._onTargetUnloaded = null;
    }

    _super.prototype.disconnect.call(this);
  };

  GesturesObserver.prototype._executeCallback = function (args) {
    if (this.callback) {
      this.callback.call(this.context, args);
    }
  };

  GesturesObserver.prototype._createRecognizer = function (type, callback, swipeDirection) {
    var recognizer;
    var name = gestures_common_1.toString(type);

    var target = _createUIGestureRecognizerTarget(this, type, callback, this.context);

    var recognizerType = _getUIGestureRecognizerType(type);

    if (recognizerType) {
      recognizer = recognizerType.alloc().initWithTargetAction(target, "recognize");

      if (type === gestures_common_1.GestureTypes.swipe && swipeDirection) {
        name = name + swipeDirection.toString();
        recognizer.direction = swipeDirection;
      } else if (type === gestures_common_1.GestureTypes.touch) {
        recognizer.observer = this;
      }

      if (recognizer) {
        recognizer.delegate = recognizerDelegateInstance;
        this._recognizers[name] = {
          recognizer: recognizer,
          target: target
        };
      }
    }

    return recognizer;
  };

  return GesturesObserver;
}(gestures_common_1.GesturesObserverBase);

exports.GesturesObserver = GesturesObserver;

function _createUIGestureRecognizerTarget(owner, type, callback, context) {
  return UIGestureRecognizerImpl.initWithOwnerTypeCallback(new WeakRef(owner), type, callback, context);
}

function _getUIGestureRecognizerType(type) {
  var nativeType = null;

  if (type === gestures_common_1.GestureTypes.tap) {
    nativeType = UITapGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.doubleTap) {
    nativeType = UITapGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.pinch) {
    nativeType = UIPinchGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.pan) {
    nativeType = UIPanGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.swipe) {
    nativeType = UISwipeGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.rotation) {
    nativeType = UIRotationGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.longPress) {
    nativeType = UILongPressGestureRecognizer;
  } else if (type === gestures_common_1.GestureTypes.touch) {
    nativeType = TouchGestureRecognizer;
  }

  return nativeType;
}

function getState(recognizer) {
  if (recognizer.state === 1) {
    return gestures_common_1.GestureStateTypes.began;
  } else if (recognizer.state === 4) {
    return gestures_common_1.GestureStateTypes.cancelled;
  } else if (recognizer.state === 2) {
    return gestures_common_1.GestureStateTypes.changed;
  } else if (recognizer.state === 3) {
    return gestures_common_1.GestureStateTypes.ended;
  }
}

function _getSwipeDirection(direction) {
  if (direction === 8) {
    return gestures_common_1.SwipeDirection.down;
  } else if (direction === 2) {
    return gestures_common_1.SwipeDirection.left;
  } else if (direction === 1) {
    return gestures_common_1.SwipeDirection.right;
  } else if (direction === 4) {
    return gestures_common_1.SwipeDirection.up;
  }
}

function _getPinchData(args) {
  var recognizer = args.ios;
  var center = recognizer.locationInView(args.view.nativeViewProtected);
  return {
    type: args.type,
    view: args.view,
    ios: args.ios,
    android: undefined,
    scale: recognizer.scale,
    getFocusX: function () {
      return center.x;
    },
    getFocusY: function () {
      return center.y;
    },
    object: args.view,
    eventName: gestures_common_1.toString(args.type),
    state: getState(recognizer)
  };
}

function _getSwipeData(args) {
  var recognizer = args.ios;
  return {
    type: args.type,
    view: args.view,
    ios: args.ios,
    android: undefined,
    direction: _getSwipeDirection(recognizer.direction),
    object: args.view,
    eventName: gestures_common_1.toString(args.type)
  };
}

function _getPanData(args, view) {
  var recognizer = args.ios;
  return {
    type: args.type,
    view: args.view,
    ios: args.ios,
    android: undefined,
    deltaX: recognizer.translationInView(view).x,
    deltaY: recognizer.translationInView(view).y,
    object: args.view,
    eventName: gestures_common_1.toString(args.type),
    state: getState(recognizer)
  };
}

function _getRotationData(args) {
  var recognizer = args.ios;
  return {
    type: args.type,
    view: args.view,
    ios: args.ios,
    android: undefined,
    rotation: recognizer.rotation * (180.0 / Math.PI),
    object: args.view,
    eventName: gestures_common_1.toString(args.type),
    state: getState(recognizer)
  };
}

var TouchGestureRecognizer = function (_super) {
  __extends(TouchGestureRecognizer, _super);

  function TouchGestureRecognizer() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TouchGestureRecognizer.prototype.touchesBeganWithEvent = function (touches, event) {
    this.executeCallback(gestures_common_1.TouchAction.down, touches, event);
    this.view.touchesBeganWithEvent(touches, event);
  };

  TouchGestureRecognizer.prototype.touchesMovedWithEvent = function (touches, event) {
    this.executeCallback(gestures_common_1.TouchAction.move, touches, event);
    this.view.touchesMovedWithEvent(touches, event);
  };

  TouchGestureRecognizer.prototype.touchesEndedWithEvent = function (touches, event) {
    this.executeCallback(gestures_common_1.TouchAction.up, touches, event);
    this.view.touchesEndedWithEvent(touches, event);
  };

  TouchGestureRecognizer.prototype.touchesCancelledWithEvent = function (touches, event) {
    this.executeCallback(gestures_common_1.TouchAction.cancel, touches, event);
    this.view.touchesCancelledWithEvent(touches, event);
  };

  TouchGestureRecognizer.prototype.executeCallback = function (action, touches, event) {
    if (!this._eventData) {
      this._eventData = new TouchGestureEventData();
    }

    this._eventData.prepare(this.observer.target, action, touches, event);

    this.observer._executeCallback(this._eventData);
  };

  return TouchGestureRecognizer;
}(UIGestureRecognizer);

var Pointer = function () {
  function Pointer(touch, targetView) {
    this.android = undefined;
    this.ios = undefined;
    this.ios = touch;
    this._view = targetView;
  }

  Object.defineProperty(Pointer.prototype, "location", {
    get: function () {
      if (!this._location) {
        this._location = this.ios.locationInView(this._view.nativeViewProtected);
      }

      return this._location;
    },
    enumerable: true,
    configurable: true
  });

  Pointer.prototype.getX = function () {
    return this.location.x;
  };

  Pointer.prototype.getY = function () {
    return this.location.y;
  };

  return Pointer;
}();

var TouchGestureEventData = function () {
  function TouchGestureEventData() {
    this.eventName = gestures_common_1.toString(gestures_common_1.GestureTypes.touch);
    this.type = gestures_common_1.GestureTypes.touch;
    this.android = undefined;
  }

  TouchGestureEventData.prototype.prepare = function (view, action, touches, event) {
    this.action = action;
    this.view = view;
    this.object = view;
    this.ios = {
      touches: touches,
      event: event
    };
    this._mainPointer = undefined;
    this._activePointers = undefined;
    this._allPointers = undefined;
  };

  TouchGestureEventData.prototype.getPointerCount = function () {
    return getter(this.ios.event, this.ios.event.allTouches).count;
  };

  TouchGestureEventData.prototype.getMainPointer = function () {
    if (this._mainPointer === undefined) {
      this._mainPointer = this.ios.touches.anyObject();
    }

    return this._mainPointer;
  };

  TouchGestureEventData.prototype.getActivePointers = function () {
    if (!this._activePointers) {
      this._activePointers = [];

      for (var i = 0, nsArr = this.ios.touches.allObjects; i < nsArr.count; i++) {
        this._activePointers.push(new Pointer(nsArr.objectAtIndex(i), this.view));
      }
    }

    return this._activePointers;
  };

  TouchGestureEventData.prototype.getAllPointers = function () {
    if (!this._allPointers) {
      this._allPointers = [];
      var nsArr = getter(this.ios.event, this.ios.event.allTouches).allObjects;

      for (var i = 0; i < nsArr.count; i++) {
        this._allPointers.push(new Pointer(nsArr.objectAtIndex(i), this.view));
      }
    }

    return this._allPointers;
  };

  TouchGestureEventData.prototype.getX = function () {
    return this.getMainPointer().locationInView(this.view.nativeViewProtected).x;
  };

  TouchGestureEventData.prototype.getY = function () {
    return this.getMainPointer().locationInView(this.view.nativeViewProtected).y;
  };

  return TouchGestureEventData;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/html-view/html-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var HtmlViewBase = function (_super) {
  __extends(HtmlViewBase, _super);

  function HtmlViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HtmlViewBase = __decorate([view_1.CSSType("HtmlView")], HtmlViewBase);
  return HtmlViewBase;
}(view_1.View);

exports.HtmlViewBase = HtmlViewBase;
HtmlViewBase.prototype.recycleNativeView = "auto";
exports.htmlProperty = new view_1.Property({
  name: "html",
  defaultValue: "",
  affectsLayout: true
});
exports.htmlProperty.register(HtmlViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/html-view/html-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var html_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/html-view/html-view-common.js"));

var HtmlView = function (_super) {
  __extends(HtmlView, _super);

  function HtmlView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  HtmlView.prototype.createNativeView = function () {
    var view = UITextView.new();
    view.scrollEnabled = false;
    view.editable = false;
    view.selectable = true;
    view.userInteractionEnabled = true;
    view.dataDetectorTypes = 18446744073709552000;
    return view;
  };

  Object.defineProperty(HtmlView.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  HtmlView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var nativeView = this.nativeViewProtected;

    if (nativeView) {
      var width = html_view_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
      var widthMode = html_view_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
      var height = html_view_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
      var heightMode = html_view_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
      var desiredSize = html_view_common_1.layout.measureNativeView(nativeView, width, widthMode, height, heightMode);
      var labelWidth = widthMode === html_view_common_1.layout.AT_MOST ? Math.min(desiredSize.width, width) : desiredSize.width;
      var measureWidth = Math.max(labelWidth, this.effectiveMinWidth);
      var measureHeight = Math.max(desiredSize.height, this.effectiveMinHeight);
      var widthAndState = html_view_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
      var heightAndState = html_view_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
      this.setMeasuredDimension(widthAndState, heightAndState);
    }
  };

  HtmlView.prototype[html_view_common_1.htmlProperty.getDefault] = function () {
    return "";
  };

  HtmlView.prototype[html_view_common_1.htmlProperty.setNative] = function (value) {
    var _a;

    var htmlString = NSString.stringWithString(value + "");
    var nsData = htmlString.dataUsingEncoding(NSUnicodeStringEncoding);
    this.nativeViewProtected.attributedText = NSAttributedString.alloc().initWithDataOptionsDocumentAttributesError(nsData, (_a = {}, _a[NSDocumentTypeDocumentAttribute] = NSHTMLTextDocumentType, _a), null);
  };

  return HtmlView;
}(html_view_common_1.HtmlViewBase);

exports.HtmlView = HtmlView;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/image/image-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var image_asset_1 = __webpack_require__("../node_modules/tns-core-modules/image-asset/image-asset.js");

exports.ImageAsset = image_asset_1.ImageAsset;

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

exports.ImageSource = image_source_1.ImageSource;
exports.fromAsset = image_source_1.fromAsset;
exports.fromNativeSource = image_source_1.fromNativeSource;
exports.fromUrl = image_source_1.fromUrl;

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

exports.isDataURI = utils_1.isDataURI;
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
exports.RESOURCE_PREFIX = utils_1.RESOURCE_PREFIX;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ImageBase = function (_super) {
  __extends(ImageBase, _super);

  function ImageBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ImageBase.prototype, "tintColor", {
    get: function () {
      return this.style.tintColor;
    },
    set: function (value) {
      this.style.tintColor = value;
    },
    enumerable: true,
    configurable: true
  });

  ImageBase.prototype._createImageSourceFromSrc = function (value) {
    var _this = this;

    var originalValue = value;
    var sync = this.loadMode === "sync";

    if (typeof value === "string" || value instanceof String) {
      value = value.trim();
      this.imageSource = null;
      this["_url"] = value;
      this.isLoading = true;
      var source_1 = new image_source_1.ImageSource();

      var imageLoaded = function () {
        var currentValue = _this.src;

        if (currentValue !== originalValue) {
          return;
        }

        _this.imageSource = source_1;
        _this.isLoading = false;
      };

      if (utils_1.isDataURI(value)) {
        var base64Data = value.split(",")[1];

        if (base64Data !== undefined) {
          if (sync) {
            source_1.loadFromBase64(base64Data);
            imageLoaded();
          } else {
            source_1.fromBase64(base64Data).then(imageLoaded);
          }
        }
      } else if (utils_1.isFileOrResourcePath(value)) {
        if (value.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
          var resPath = value.substr(utils_1.RESOURCE_PREFIX.length);

          if (sync) {
            source_1.loadFromResource(resPath);
            imageLoaded();
          } else {
            this.imageSource = null;
            source_1.fromResource(resPath).then(imageLoaded);
          }
        } else {
          if (sync) {
            source_1.loadFromFile(value);
            imageLoaded();
          } else {
            this.imageSource = null;
            source_1.fromFile(value).then(imageLoaded);
          }
        }
      } else {
        this.imageSource = null;
        image_source_1.fromUrl(value).then(function (r) {
          if (_this["_url"] === value) {
            _this.imageSource = r;
            _this.isLoading = false;
          }
        }, function (err) {
          _this.isLoading = false;

          if (view_1.traceEnabled()) {
            if (typeof err === "object" && err.message) {
              err = err.message;
            }

            view_1.traceWrite(err, view_1.traceCategories.Debug);
          }
        });
      }
    } else if (value instanceof image_source_1.ImageSource) {
      this.imageSource = value;
      this.isLoading = false;
    } else if (value instanceof image_asset_1.ImageAsset) {
      image_source_1.fromAsset(value).then(function (result) {
        _this.imageSource = result;
        _this.isLoading = false;
      });
    } else {
      this.imageSource = image_source_1.fromNativeSource(value);
      this.isLoading = false;
    }
  };

  ImageBase = __decorate([view_1.CSSType("Image")], ImageBase);
  return ImageBase;
}(view_1.View);

exports.ImageBase = ImageBase;
ImageBase.prototype.recycleNativeView = "auto";
exports.imageSourceProperty = new view_1.Property({
  name: "imageSource"
});
exports.imageSourceProperty.register(ImageBase);
exports.srcProperty = new view_1.Property({
  name: "src"
});
exports.srcProperty.register(ImageBase);
exports.loadModeProperty = new view_1.Property({
  name: "loadMode",
  defaultValue: "sync"
});
exports.loadModeProperty.register(ImageBase);
exports.isLoadingProperty = new view_1.Property({
  name: "isLoading",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.isLoadingProperty.register(ImageBase);
exports.stretchProperty = new view_1.Property({
  name: "stretch",
  defaultValue: "aspectFit",
  affectsLayout: view_1.isIOS
});
exports.stretchProperty.register(ImageBase);
exports.tintColorProperty = new view_1.InheritedCssProperty({
  name: "tintColor",
  cssName: "tint-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (value) {
    return new view_1.Color(value);
  }
});
exports.tintColorProperty.register(view_1.Style);
exports.decodeHeightProperty = new view_1.Property({
  name: "decodeHeight",
  defaultValue: {
    value: 0,
    unit: "dip"
  },
  valueConverter: view_1.Length.parse
});
exports.decodeHeightProperty.register(ImageBase);
exports.decodeWidthProperty = new view_1.Property({
  name: "decodeWidth",
  defaultValue: {
    value: 0,
    unit: "dip"
  },
  valueConverter: view_1.Length.parse
});
exports.decodeWidthProperty.register(ImageBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/image/image.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var image_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/image/image-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/image/image-common.js"));

var Image = function (_super) {
  __extends(Image, _super);

  function Image() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._imageSourceAffectsLayout = true;
    return _this;
  }

  Image.prototype.createNativeView = function () {
    var imageView = UIImageView.new();
    imageView.contentMode = 1;
    imageView.userInteractionEnabled = true;
    return imageView;
  };

  Image.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._setNativeClipToBounds();
  };

  Image.prototype.setTintColor = function (value) {
    if (value && this.nativeViewProtected.image && !this._templateImageWasCreated) {
      this.nativeViewProtected.image = this.nativeViewProtected.image.imageWithRenderingMode(2);
      this._templateImageWasCreated = true;
    } else if (!value && this.nativeViewProtected.image && this._templateImageWasCreated) {
      this._templateImageWasCreated = false;
      this.nativeViewProtected.image = this.nativeViewProtected.image.imageWithRenderingMode(0);
    }

    this.nativeViewProtected.tintColor = value ? value.ios : null;
  };

  Image.prototype._setNativeImage = function (nativeImage) {
    this.nativeViewProtected.image = nativeImage;
    this._templateImageWasCreated = false;
    this.setTintColor(this.style.tintColor);

    if (this._imageSourceAffectsLayout) {
      this.requestLayout();
    }
  };

  Image.prototype._setNativeClipToBounds = function () {
    this.nativeViewProtected.clipsToBounds = true;
  };

  Image.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = image_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = image_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = image_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = image_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var nativeWidth = this.imageSource ? image_common_1.layout.toDevicePixels(this.imageSource.width) : 0;
    var nativeHeight = this.imageSource ? image_common_1.layout.toDevicePixels(this.imageSource.height) : 0;
    var measureWidth = Math.max(nativeWidth, this.effectiveMinWidth);
    var measureHeight = Math.max(nativeHeight, this.effectiveMinHeight);
    var finiteWidth = widthMode !== image_common_1.layout.UNSPECIFIED;
    var finiteHeight = heightMode !== image_common_1.layout.UNSPECIFIED;
    this._imageSourceAffectsLayout = widthMode !== image_common_1.layout.EXACTLY || heightMode !== image_common_1.layout.EXACTLY;

    if (nativeWidth !== 0 && nativeHeight !== 0 && (finiteWidth || finiteHeight)) {
      var scale = Image.computeScaleFactor(width, height, finiteWidth, finiteHeight, nativeWidth, nativeHeight, this.stretch);
      var resultW = Math.round(nativeWidth * scale.width);
      var resultH = Math.round(nativeHeight * scale.height);
      measureWidth = finiteWidth ? Math.min(resultW, width) : resultW;
      measureHeight = finiteHeight ? Math.min(resultH, height) : resultH;

      if (image_common_1.traceEnabled()) {
        image_common_1.traceWrite("Image stretch: " + this.stretch + ", nativeWidth: " + nativeWidth + ", nativeHeight: " + nativeHeight, image_common_1.traceCategories.Layout);
      }
    }

    var widthAndState = Image.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = Image.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Image.computeScaleFactor = function (measureWidth, measureHeight, widthIsFinite, heightIsFinite, nativeWidth, nativeHeight, imageStretch) {
    var scaleW = 1;
    var scaleH = 1;

    if ((imageStretch === "aspectFill" || imageStretch === "aspectFit" || imageStretch === "fill") && (widthIsFinite || heightIsFinite)) {
      scaleW = nativeWidth > 0 ? measureWidth / nativeWidth : 0;
      scaleH = nativeHeight > 0 ? measureHeight / nativeHeight : 0;

      if (!widthIsFinite) {
        scaleW = scaleH;
      } else if (!heightIsFinite) {
        scaleH = scaleW;
      } else {
        switch (imageStretch) {
          case "aspectFit":
            scaleH = scaleW < scaleH ? scaleW : scaleH;
            scaleW = scaleH;
            break;

          case "aspectFill":
            scaleH = scaleW > scaleH ? scaleW : scaleH;
            scaleW = scaleH;
            break;
        }
      }
    }

    return {
      width: scaleW,
      height: scaleH
    };
  };

  Image.prototype[image_common_1.stretchProperty.setNative] = function (value) {
    switch (value) {
      case "aspectFit":
        this.nativeViewProtected.contentMode = 1;
        break;

      case "aspectFill":
        this.nativeViewProtected.contentMode = 2;
        break;

      case "fill":
        this.nativeViewProtected.contentMode = 0;
        break;

      case "none":
      default:
        this.nativeViewProtected.contentMode = 9;
        break;
    }
  };

  Image.prototype[image_common_1.tintColorProperty.setNative] = function (value) {
    this.setTintColor(value);
  };

  Image.prototype[image_common_1.imageSourceProperty.setNative] = function (value) {
    this._setNativeImage(value ? value.ios : null);
  };

  Image.prototype[image_common_1.srcProperty.setNative] = function (value) {
    this._createImageSourceFromSrc(value);
  };

  return Image;
}(image_common_1.ImageBase);

exports.Image = Image;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/label/label.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

var background_2 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js"));

var FixedSize;

(function (FixedSize) {
  FixedSize[FixedSize["NONE"] = 0] = "NONE";
  FixedSize[FixedSize["WIDTH"] = 1] = "WIDTH";
  FixedSize[FixedSize["HEIGHT"] = 2] = "HEIGHT";
  FixedSize[FixedSize["BOTH"] = 3] = "BOTH";
})(FixedSize || (FixedSize = {}));

var Label = function (_super) {
  __extends(Label, _super);

  function Label() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Label.prototype.createNativeView = function () {
    var view = TNSLabel.new();
    view.userInteractionEnabled = true;
    return view;
  };

  Object.defineProperty(Label.prototype, "ios", {
    get: function () {
      return this.nativeTextViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Label.prototype, "textWrap", {
    get: function () {
      return this.style.whiteSpace === "normal";
    },
    set: function (value) {
      if (typeof value === "string") {
        value = text_base_1.booleanConverter(value);
      }

      this.style.whiteSpace = value ? "normal" : "nowrap";
    },
    enumerable: true,
    configurable: true
  });

  Label.prototype._requestLayoutOnTextChanged = function () {
    if (this._fixedSize === FixedSize.BOTH) {
      return;
    }

    if (this._fixedSize === FixedSize.WIDTH && !this.textWrap && this.getMeasuredHeight() > 0) {
      return;
    }

    _super.prototype._requestLayoutOnTextChanged.call(this);
  };

  Label.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var nativeView = this.nativeTextViewProtected;

    if (nativeView) {
      var width = text_base_1.layout.getMeasureSpecSize(widthMeasureSpec);
      var widthMode = text_base_1.layout.getMeasureSpecMode(widthMeasureSpec);
      var height = text_base_1.layout.getMeasureSpecSize(heightMeasureSpec);
      var heightMode = text_base_1.layout.getMeasureSpecMode(heightMeasureSpec);
      this._fixedSize = (widthMode === text_base_1.layout.EXACTLY ? FixedSize.WIDTH : FixedSize.NONE) | (heightMode === text_base_1.layout.EXACTLY ? FixedSize.HEIGHT : FixedSize.NONE);
      var nativeSize = void 0;

      if (this.textWrap) {
        nativeSize = this._measureNativeView(width, widthMode, height, heightMode);
      } else {
        nativeSize = text_base_1.layout.measureNativeView(nativeView, width, widthMode, height, heightMode);
      }

      var labelWidth = nativeSize.width;

      if (this.textWrap && widthMode === text_base_1.layout.AT_MOST) {
        labelWidth = Math.min(labelWidth, width);
      }

      var measureWidth = Math.max(labelWidth, this.effectiveMinWidth);
      var measureHeight = Math.max(nativeSize.height, this.effectiveMinHeight);
      var widthAndState = text_base_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
      var heightAndState = text_base_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
      this.setMeasuredDimension(widthAndState, heightAndState);
    }
  };

  Label.prototype._measureNativeView = function (width, widthMode, height, heightMode) {
    var view = this.nativeTextViewProtected;
    var nativeSize = view.textRectForBoundsLimitedToNumberOfLines(CGRectMake(0, 0, widthMode === 0 ? Number.POSITIVE_INFINITY : text_base_1.layout.toDeviceIndependentPixels(width), heightMode === 0 ? Number.POSITIVE_INFINITY : text_base_1.layout.toDeviceIndependentPixels(height)), 0).size;
    nativeSize.width = text_base_1.layout.round(text_base_1.layout.toDevicePixels(nativeSize.width));
    nativeSize.height = text_base_1.layout.round(text_base_1.layout.toDevicePixels(nativeSize.height));
    return nativeSize;
  };

  Label.prototype[text_base_1.whiteSpaceProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    switch (value) {
      case "normal":
        nativeView.lineBreakMode = 0;
        nativeView.numberOfLines = 0;
        break;

      case "nowrap":
      case "initial":
        nativeView.lineBreakMode = 4;
        nativeView.numberOfLines = 1;
        break;
    }
  };

  Label.prototype._redrawNativeBackground = function (value) {
    var _this = this;

    if (value instanceof background_1.Background) {
      background_2.ios.createBackgroundUIColor(this, function (color) {
        var cgColor = color ? color.CGColor : null;
        _this.nativeTextViewProtected.layer.backgroundColor = cgColor;
      }, true);
    }

    this._setNativeClipToBounds();
  };

  Label.prototype[text_base_1.borderTopWidthProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var border = nativeView.borderThickness;
    nativeView.borderThickness = {
      top: text_base_1.layout.toDeviceIndependentPixels(this.effectiveBorderTopWidth),
      right: border.right,
      bottom: border.bottom,
      left: border.left
    };
  };

  Label.prototype[text_base_1.borderRightWidthProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var border = nativeView.borderThickness;
    nativeView.borderThickness = {
      top: border.top,
      right: text_base_1.layout.toDeviceIndependentPixels(this.effectiveBorderRightWidth),
      bottom: border.bottom,
      left: border.left
    };
  };

  Label.prototype[text_base_1.borderBottomWidthProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var border = nativeView.borderThickness;
    nativeView.borderThickness = {
      top: border.top,
      right: border.right,
      bottom: text_base_1.layout.toDeviceIndependentPixels(this.effectiveBorderBottomWidth),
      left: border.left
    };
  };

  Label.prototype[text_base_1.borderLeftWidthProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var border = nativeView.borderThickness;
    nativeView.borderThickness = {
      top: border.top,
      right: border.right,
      bottom: border.bottom,
      left: text_base_1.layout.toDeviceIndependentPixels(this.effectiveBorderLeftWidth)
    };
  };

  Label.prototype[text_base_1.paddingTopProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var padding = nativeView.padding;
    nativeView.padding = {
      top: text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingTop),
      right: padding.right,
      bottom: padding.bottom,
      left: padding.left
    };
  };

  Label.prototype[text_base_1.paddingRightProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var padding = nativeView.padding;
    nativeView.padding = {
      top: padding.top,
      right: text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingRight),
      bottom: padding.bottom,
      left: padding.left
    };
  };

  Label.prototype[text_base_1.paddingBottomProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var padding = nativeView.padding;
    nativeView.padding = {
      top: padding.top,
      right: padding.right,
      bottom: text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingBottom),
      left: padding.left
    };
  };

  Label.prototype[text_base_1.paddingLeftProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;
    var padding = nativeView.padding;
    nativeView.padding = {
      top: padding.top,
      right: padding.right,
      bottom: padding.bottom,
      left: text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingLeft)
    };
  };

  Label = __decorate([text_base_1.CSSType("Label")], Label);
  return Label;
}(text_base_1.TextBase);

exports.Label = Label;
Label.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

layout_base_1.View.prototype.effectiveLeft = 0;
layout_base_1.View.prototype.effectiveTop = 0;

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

var AbsoluteLayoutBase = function (_super) {
  __extends(AbsoluteLayoutBase, _super);

  function AbsoluteLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbsoluteLayoutBase.getLeft = function (element) {
    return validateArgs(element).left;
  };

  AbsoluteLayoutBase.setLeft = function (element, value) {
    validateArgs(element).left = value;
  };

  AbsoluteLayoutBase.getTop = function (element) {
    return validateArgs(element).top;
  };

  AbsoluteLayoutBase.setTop = function (element, value) {
    validateArgs(element).top = value;
  };

  AbsoluteLayoutBase.prototype.onLeftChanged = function (view, oldValue, newValue) {};

  AbsoluteLayoutBase.prototype.onTopChanged = function (view, oldValue, newValue) {};

  AbsoluteLayoutBase = __decorate([layout_base_1.CSSType("AbsoluteLayout")], AbsoluteLayoutBase);
  return AbsoluteLayoutBase;
}(layout_base_1.LayoutBase);

exports.AbsoluteLayoutBase = AbsoluteLayoutBase;
AbsoluteLayoutBase.prototype.recycleNativeView = "auto";
exports.leftProperty = new layout_base_1.Property({
  name: "left",
  defaultValue: layout_base_1.zeroLength,
  valueChanged: function (target, oldValue, newValue) {
    target.effectiveLeft = layout_base_1.Length.toDevicePixels(newValue, 0);
    var layout = target.parent;

    if (layout instanceof AbsoluteLayoutBase) {
      layout.onLeftChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return layout_base_1.Length.parse(v);
  }
});
exports.leftProperty.register(layout_base_1.View);
exports.topProperty = new layout_base_1.Property({
  name: "top",
  defaultValue: layout_base_1.zeroLength,
  valueChanged: function (target, oldValue, newValue) {
    target.effectiveTop = layout_base_1.Length.toDevicePixels(newValue, 0);
    var layout = target.parent;

    if (layout instanceof AbsoluteLayoutBase) {
      layout.onTopChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return layout_base_1.Length.parse(v);
  }
});
exports.topProperty.register(layout_base_1.View);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var absolute_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/absolute-layout/absolute-layout-common.js"));

var AbsoluteLayout = function (_super) {
  __extends(AbsoluteLayout, _super);

  function AbsoluteLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AbsoluteLayout.prototype.onLeftChanged = function (view, oldValue, newValue) {
    this.requestLayout();
  };

  AbsoluteLayout.prototype.onTopChanged = function (view, oldValue, newValue) {
    this.requestLayout();
  };

  AbsoluteLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    var measureWidth = 0;
    var measureHeight = 0;
    var width = absolute_layout_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = absolute_layout_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = absolute_layout_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = absolute_layout_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var childMeasureSpec = absolute_layout_common_1.layout.makeMeasureSpec(0, absolute_layout_common_1.layout.UNSPECIFIED);
    this.eachLayoutChild(function (child, last) {
      var childSize = absolute_layout_common_1.View.measureChild(_this, child, childMeasureSpec, childMeasureSpec);
      measureWidth = Math.max(measureWidth, child.effectiveLeft + childSize.measuredWidth);
      measureHeight = Math.max(measureHeight, child.effectiveTop + childSize.measuredHeight);
    });
    measureWidth += this.effectiveBorderLeftWidth + this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderRightWidth;
    measureHeight += this.effectiveBorderTopWidth + this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderBottomWidth;
    measureWidth = Math.max(measureWidth, this.effectiveMinWidth);
    measureHeight = Math.max(measureHeight, this.effectiveMinHeight);
    var widthAndState = absolute_layout_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = absolute_layout_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  AbsoluteLayout.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    _super.prototype.onLayout.call(this, left, top, right, bottom);

    var insets = this.getSafeAreaInsets();
    this.eachLayoutChild(function (child, last) {
      var childWidth = child.getMeasuredWidth();
      var childHeight = child.getMeasuredHeight();
      var childLeft = _this.effectiveBorderLeftWidth + _this.effectivePaddingLeft + child.effectiveLeft + insets.left;
      var childTop = _this.effectiveBorderTopWidth + _this.effectivePaddingTop + child.effectiveTop + insets.top;
      var childRight = childLeft + childWidth + child.effectiveMarginLeft + child.effectiveMarginRight;
      var childBottom = childTop + childHeight + child.effectiveMarginTop + child.effectiveMarginBottom;
      absolute_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childRight, childBottom);
    });
  };

  return AbsoluteLayout;
}(absolute_layout_common_1.AbsoluteLayoutBase);

exports.AbsoluteLayout = AbsoluteLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var DockLayoutBase = function (_super) {
  __extends(DockLayoutBase, _super);

  function DockLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DockLayoutBase.getDock = function (element) {
    return validateArgs(element).dock;
  };

  DockLayoutBase.setDock = function (element, value) {
    validateArgs(element).dock = value;
  };

  DockLayoutBase.prototype.onDockChanged = function (view, oldValue, newValue) {};

  DockLayoutBase = __decorate([layout_base_1.CSSType("DockLayout")], DockLayoutBase);
  return DockLayoutBase;
}(layout_base_1.LayoutBase);

exports.DockLayoutBase = DockLayoutBase;
DockLayoutBase.prototype.recycleNativeView = "auto";
var dockConverter = layout_base_1.makeParser(layout_base_1.makeValidator("left", "top", "right", "bottom"));
exports.dockProperty = new layout_base_1.Property({
  name: "dock",
  defaultValue: "left",
  valueChanged: function (target, oldValue, newValue) {
    if (target instanceof layout_base_1.View) {
      var layout = target.parent;

      if (layout instanceof DockLayoutBase) {
        layout.onDockChanged(target, oldValue, newValue);
      }
    }
  },
  valueConverter: dockConverter
});
exports.dockProperty.register(layout_base_1.View);
exports.stretchLastChildProperty = new layout_base_1.Property({
  name: "stretchLastChild",
  defaultValue: true,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: layout_base_1.booleanConverter
});
exports.stretchLastChildProperty.register(DockLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var dock_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/dock-layout/dock-layout-common.js"));

var DockLayout = function (_super) {
  __extends(DockLayout, _super);

  function DockLayout() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DockLayout.prototype.onDockChanged = function (view, oldValue, newValue) {
    this.requestLayout();
  };

  DockLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    var measureWidth = 0;
    var measureHeight = 0;
    var width = dock_layout_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = dock_layout_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = dock_layout_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = dock_layout_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var horizontalPaddingsAndMargins = this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalPaddingsAndMargins = this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var remainingWidth = widthMode === dock_layout_common_1.layout.UNSPECIFIED ? Number.MAX_VALUE : width - horizontalPaddingsAndMargins;
    var remainingHeight = heightMode === dock_layout_common_1.layout.UNSPECIFIED ? Number.MAX_VALUE : height - verticalPaddingsAndMargins;
    var tempHeight = 0;
    var tempWidth = 0;
    var childWidthMeasureSpec;
    var childHeightMeasureSpec;
    this.eachLayoutChild(function (child, last) {
      if (_this.stretchLastChild && last) {
        childWidthMeasureSpec = dock_layout_common_1.layout.makeMeasureSpec(remainingWidth, widthMode);
        childHeightMeasureSpec = dock_layout_common_1.layout.makeMeasureSpec(remainingHeight, heightMode);
      } else {
        childWidthMeasureSpec = dock_layout_common_1.layout.makeMeasureSpec(remainingWidth, widthMode === dock_layout_common_1.layout.EXACTLY ? dock_layout_common_1.layout.AT_MOST : widthMode);
        childHeightMeasureSpec = dock_layout_common_1.layout.makeMeasureSpec(remainingHeight, heightMode === dock_layout_common_1.layout.EXACTLY ? dock_layout_common_1.layout.AT_MOST : heightMode);
      }

      var childSize = dock_layout_common_1.View.measureChild(_this, child, childWidthMeasureSpec, childHeightMeasureSpec);

      switch (child.dock) {
        case "top":
        case "bottom":
          remainingHeight = Math.max(0, remainingHeight - childSize.measuredHeight);
          tempHeight += childSize.measuredHeight;
          measureWidth = Math.max(measureWidth, tempWidth + childSize.measuredWidth);
          measureHeight = Math.max(measureHeight, tempHeight);
          break;

        case "left":
        case "right":
        default:
          remainingWidth = Math.max(0, remainingWidth - childSize.measuredWidth);
          tempWidth += childSize.measuredWidth;
          measureWidth = Math.max(measureWidth, tempWidth);
          measureHeight = Math.max(measureHeight, tempHeight + childSize.measuredHeight);
          break;
      }
    });
    measureWidth += horizontalPaddingsAndMargins;
    measureHeight += verticalPaddingsAndMargins;
    measureWidth = Math.max(measureWidth, this.effectiveMinWidth);
    measureHeight = Math.max(measureHeight, this.effectiveMinHeight);
    var widthAndState = dock_layout_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = dock_layout_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  DockLayout.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    _super.prototype.onLayout.call(this, left, top, right, bottom);

    var insets = this.getSafeAreaInsets();
    var horizontalPaddingsAndMargins = this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth + insets.left + insets.right;
    var verticalPaddingsAndMargins = this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth + insets.top + insets.bottom;
    var childLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var childTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var x = childLeft;
    var y = childTop;
    var remainingWidth = Math.max(0, right - left - horizontalPaddingsAndMargins);
    var remainingHeight = Math.max(0, bottom - top - verticalPaddingsAndMargins);
    this.eachLayoutChild(function (child, last) {
      var childWidth = child.getMeasuredWidth() + child.effectiveMarginLeft + child.effectiveMarginRight;
      var childHeight = child.getMeasuredHeight() + child.effectiveMarginTop + child.effectiveMarginBottom;

      if (last && _this.stretchLastChild) {
        dock_layout_common_1.View.layoutChild(_this, child, x, y, x + remainingWidth, y + remainingHeight);
        return;
      }

      var dock = DockLayout.getDock(child);

      switch (dock) {
        case "top":
          childLeft = x;
          childTop = y;
          childWidth = remainingWidth;
          y += childHeight;
          remainingHeight = Math.max(0, remainingHeight - childHeight);
          break;

        case "bottom":
          childLeft = x;
          childTop = y + remainingHeight - childHeight;
          childWidth = remainingWidth;
          remainingHeight = Math.max(0, remainingHeight - childHeight);
          break;

        case "right":
          childLeft = x + remainingWidth - childWidth;
          childTop = y;
          childHeight = remainingHeight;
          remainingWidth = Math.max(0, remainingWidth - childWidth);
          break;

        case "left":
        default:
          childLeft = x;
          childTop = y;
          childHeight = remainingHeight;
          x += childWidth;
          remainingWidth = Math.max(0, remainingWidth - childWidth);
          break;
      }

      dock_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childLeft + childWidth, childTop + childHeight);
    });
  };

  return DockLayout;
}(dock_layout_common_1.DockLayoutBase);

exports.DockLayout = DockLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

exports.ORDER_DEFAULT = 1;
exports.FLEX_GROW_DEFAULT = 0.0;
exports.FLEX_SHRINK_DEFAULT = 1.0;
var FlexDirection;

(function (FlexDirection) {
  FlexDirection.ROW = "row";
  FlexDirection.ROW_REVERSE = "row-reverse";
  FlexDirection.COLUMN = "column";
  FlexDirection.COLUMN_REVERSE = "column-reverse";
  FlexDirection.isValid = layout_base_1.makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
  FlexDirection.parse = layout_base_1.makeParser(FlexDirection.isValid);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));

var FlexWrap;

(function (FlexWrap) {
  FlexWrap.NOWRAP = "nowrap";
  FlexWrap.WRAP = "wrap";
  FlexWrap.WRAP_REVERSE = "wrap-reverse";
  FlexWrap.isValid = layout_base_1.makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
  FlexWrap.parse = layout_base_1.makeParser(FlexWrap.isValid);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));

var JustifyContent;

(function (JustifyContent) {
  JustifyContent.FLEX_START = "flex-start";
  JustifyContent.FLEX_END = "flex-end";
  JustifyContent.CENTER = "center";
  JustifyContent.SPACE_BETWEEN = "space-between";
  JustifyContent.SPACE_AROUND = "space-around";
  JustifyContent.isValid = layout_base_1.makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
  JustifyContent.parse = layout_base_1.makeParser(JustifyContent.isValid);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));

var FlexBasisPercent;

(function (FlexBasisPercent) {
  FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));

var AlignItems;

(function (AlignItems) {
  AlignItems.FLEX_START = "flex-start";
  AlignItems.FLEX_END = "flex-end";
  AlignItems.CENTER = "center";
  AlignItems.BASELINE = "baseline";
  AlignItems.STRETCH = "stretch";
  AlignItems.isValid = layout_base_1.makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
  AlignItems.parse = layout_base_1.makeParser(AlignItems.isValid);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));

var AlignContent;

(function (AlignContent) {
  AlignContent.FLEX_START = "flex-start";
  AlignContent.FLEX_END = "flex-end";
  AlignContent.CENTER = "center";
  AlignContent.SPACE_BETWEEN = "space-between";
  AlignContent.SPACE_AROUND = "space-around";
  AlignContent.STRETCH = "stretch";
  AlignContent.isValid = layout_base_1.makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
  AlignContent.parse = layout_base_1.makeParser(AlignContent.isValid);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));

var Order;

(function (Order) {
  function isValid(value) {
    return isFinite(parseInt(value));
  }

  Order.isValid = isValid;
  Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));

var FlexGrow;

(function (FlexGrow) {
  function isValid(value) {
    var parsed = parseInt(value);
    return isFinite(parsed) && value >= 0;
  }

  FlexGrow.isValid = isValid;
  FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));

var FlexShrink;

(function (FlexShrink) {
  function isValid(value) {
    var parsed = parseInt(value);
    return isFinite(parsed) && value >= 0;
  }

  FlexShrink.isValid = isValid;
  FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));

var FlexWrapBefore;

(function (FlexWrapBefore) {
  function isValid(value) {
    if (typeof value === "boolean") {
      return true;
    }

    if (typeof value === "string") {
      var str = value.trim().toLowerCase();
      return str === "true" || str === "false";
    }

    return false;
  }

  FlexWrapBefore.isValid = isValid;

  function parse(value) {
    return value && value.toString().trim().toLowerCase() === "true";
  }

  FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));

var AlignSelf;

(function (AlignSelf) {
  AlignSelf.AUTO = "auto";
  AlignSelf.FLEX_START = "flex-start";
  AlignSelf.FLEX_END = "flex-end";
  AlignSelf.CENTER = "center";
  AlignSelf.BASELINE = "baseline";
  AlignSelf.STRETCH = "stretch";
  AlignSelf.isValid = layout_base_1.makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
  AlignSelf.parse = layout_base_1.makeParser(AlignSelf.isValid);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

var FlexboxLayoutBase = function (_super) {
  __extends(FlexboxLayoutBase, _super);

  function FlexboxLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
    get: function () {
      return this.style.flexDirection;
    },
    set: function (value) {
      this.style.flexDirection = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
    get: function () {
      return this.style.flexWrap;
    },
    set: function (value) {
      this.style.flexWrap = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
    get: function () {
      return this.style.justifyContent;
    },
    set: function (value) {
      this.style.justifyContent = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
    get: function () {
      return this.style.alignItems;
    },
    set: function (value) {
      this.style.alignItems = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
    get: function () {
      return this.style.alignContent;
    },
    set: function (value) {
      this.style.alignContent = value;
    },
    enumerable: true,
    configurable: true
  });

  FlexboxLayoutBase.setOrder = function (view, order) {
    validateArgs(view).style.order = order;
  };

  FlexboxLayoutBase.getOrder = function (view) {
    return validateArgs(view).style.order;
  };

  FlexboxLayoutBase.setFlexGrow = function (view, grow) {
    validateArgs(view).style.flexGrow = grow;
  };

  FlexboxLayoutBase.getFlexGrow = function (view) {
    return validateArgs(view).style.flexGrow;
  };

  FlexboxLayoutBase.setFlexShrink = function (view, shrink) {
    validateArgs(view).style.flexShrink = shrink;
  };

  FlexboxLayoutBase.getFlexShrink = function (view) {
    return validateArgs(view).style.flexShrink;
  };

  FlexboxLayoutBase.setAlignSelf = function (view, align) {
    validateArgs(view).style.alignSelf = align;
  };

  FlexboxLayoutBase.getAlignSelf = function (view) {
    return validateArgs(view).style.alignSelf;
  };

  FlexboxLayoutBase.setFlexWrapBefore = function (view, wrap) {
    validateArgs(view).style.flexWrapBefore = wrap;
  };

  FlexboxLayoutBase.getFlexWrapBefore = function (view) {
    return validateArgs(view).style.flexWrapBefore;
  };

  FlexboxLayoutBase = __decorate([layout_base_1.CSSType("FlexboxLayout")], FlexboxLayoutBase);
  return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);

exports.FlexboxLayoutBase = FlexboxLayoutBase;
FlexboxLayoutBase.prototype.recycleNativeView = "auto";
exports.flexDirectionProperty = new layout_base_1.CssProperty({
  name: "flexDirection",
  cssName: "flex-direction",
  defaultValue: FlexDirection.ROW,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: FlexDirection.parse
});
exports.flexDirectionProperty.register(layout_base_1.Style);
exports.flexWrapProperty = new layout_base_1.CssProperty({
  name: "flexWrap",
  cssName: "flex-wrap",
  defaultValue: "nowrap",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: FlexWrap.parse
});
exports.flexWrapProperty.register(layout_base_1.Style);
exports.justifyContentProperty = new layout_base_1.CssProperty({
  name: "justifyContent",
  cssName: "justify-content",
  defaultValue: JustifyContent.FLEX_START,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: JustifyContent.parse
});
exports.justifyContentProperty.register(layout_base_1.Style);
exports.alignItemsProperty = new layout_base_1.CssProperty({
  name: "alignItems",
  cssName: "align-items",
  defaultValue: AlignItems.STRETCH,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: AlignItems.parse
});
exports.alignItemsProperty.register(layout_base_1.Style);
exports.alignContentProperty = new layout_base_1.CssProperty({
  name: "alignContent",
  cssName: "align-content",
  defaultValue: AlignContent.STRETCH,
  affectsLayout: layout_base_1.isIOS,
  valueConverter: AlignContent.parse
});
exports.alignContentProperty.register(layout_base_1.Style);
exports.orderProperty = new layout_base_1.CssProperty({
  name: "order",
  cssName: "order",
  defaultValue: exports.ORDER_DEFAULT,
  valueConverter: Order.parse
});
exports.orderProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "order", {
  get: function () {
    return this.style.order;
  },
  set: function (value) {
    this.style.order = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexGrowProperty = new layout_base_1.CssProperty({
  name: "flexGrow",
  cssName: "flex-grow",
  defaultValue: exports.FLEX_GROW_DEFAULT,
  valueConverter: FlexGrow.parse
});
exports.flexGrowProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexGrow", {
  get: function () {
    return this.style.flexGrow;
  },
  set: function (value) {
    this.style.flexGrow = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexShrinkProperty = new layout_base_1.CssProperty({
  name: "flexShrink",
  cssName: "flex-shrink",
  defaultValue: exports.FLEX_SHRINK_DEFAULT,
  valueConverter: FlexShrink.parse
});
exports.flexShrinkProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexShrink", {
  get: function () {
    return this.style.flexShrink;
  },
  set: function (value) {
    this.style.flexShrink = value;
  },
  enumerable: true,
  configurable: true
});
exports.flexWrapBeforeProperty = new layout_base_1.CssProperty({
  name: "flexWrapBefore",
  cssName: "flex-wrap-before",
  defaultValue: false,
  valueConverter: FlexWrapBefore.parse
});
exports.flexWrapBeforeProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "flexWrapBefore", {
  get: function () {
    return this.style.flexWrapBefore;
  },
  set: function (value) {
    this.style.flexWrapBefore = value;
  },
  enumerable: true,
  configurable: true
});
exports.alignSelfProperty = new layout_base_1.CssProperty({
  name: "alignSelf",
  cssName: "align-self",
  defaultValue: AlignSelf.AUTO,
  valueConverter: AlignSelf.parse
});
exports.alignSelfProperty.register(layout_base_1.Style);
Object.defineProperty(layout_base_1.View.prototype, "alignSelf", {
  get: function () {
    return this.style.alignSelf;
  },
  set: function (value) {
    this.style.alignSelf = value;
  },
  enumerable: true,
  configurable: true
});
var flexFlowProperty = new layout_base_1.ShorthandProperty({
  name: "flexFlow",
  cssName: "flex-flow",
  getter: function () {
    return this.flexDirection + " " + this.flexWrap;
  },
  converter: function (value) {
    var properties = [];

    if (value === layout_base_1.unsetValue) {
      properties.push([exports.flexDirectionProperty, value]);
      properties.push([exports.flexWrapProperty, value]);
    } else {
      var trimmed = value && value.trim();

      if (trimmed) {
        var values = trimmed.split(/\s+/);

        if (values.length >= 1 && FlexDirection.isValid(values[0])) {
          properties.push([exports.flexDirectionProperty, FlexDirection.parse(values[0])]);
        }

        if (value.length >= 2 && FlexWrap.isValid(values[1])) {
          properties.push([exports.flexWrapProperty, FlexWrap.parse(values[1])]);
        }
      }
    }

    return properties;
  }
});
flexFlowProperty.register(layout_base_1.Style);
var flexProperty = new layout_base_1.ShorthandProperty({
  name: "flex",
  cssName: "flex",
  getter: function () {
    return this.flexGrow + " " + this.flexShrink;
  },
  converter: function (value) {
    var properties = [];

    if (value === layout_base_1.unsetValue) {
      properties.push([exports.flexGrowProperty, value]);
      properties.push([exports.flexShrinkProperty, value]);
    } else {
      var trimmed = value && value.trim();

      if (trimmed) {
        var values = trimmed.split(/\s+/);

        if (values.length === 1) {
          switch (values[0]) {
            case "inital":
              properties.push([exports.flexGrowProperty, 0]);
              properties.push([exports.flexShrinkProperty, 1]);
              break;

            case "auto":
              properties.push([exports.flexGrowProperty, 1]);
              properties.push([exports.flexShrinkProperty, 1]);
              break;

            case "none":
              properties.push([exports.flexGrowProperty, 0]);
              properties.push([exports.flexShrinkProperty, 0]);
              break;

            default:
              if (FlexGrow.isValid(values[0])) {
                properties.push([exports.flexGrowProperty, FlexGrow.parse(values[0])]);
                properties.push([exports.flexShrinkProperty, 1]);
              }

          }
        }

        if (values.length >= 2) {
          if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
            properties.push([exports.flexGrowProperty, FlexGrow.parse(values[0])]);
            properties.push([exports.flexShrinkProperty, FlexShrink.parse(values[1])]);
          }
        }
      }
    }

    return properties;
  }
});
flexProperty.register(layout_base_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var flexbox_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/flexbox-layout/flexbox-layout-common.js"));

var EXACTLY = flexbox_layout_common_1.layout.EXACTLY;
var AT_MOST = flexbox_layout_common_1.layout.AT_MOST;
var UNSPECIFIED = flexbox_layout_common_1.layout.UNSPECIFIED;
var MEASURED_SIZE_MASK = flexbox_layout_common_1.layout.MEASURED_SIZE_MASK;
var MEASURED_STATE_TOO_SMALL = flexbox_layout_common_1.layout.MEASURED_STATE_TOO_SMALL;

function requestFlexboxLayout(value) {
  var flexbox = this.parent;

  if (flexbox instanceof flexbox_layout_common_1.FlexboxLayoutBase) {
    flexbox.requestLayout();
  }
}

flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.orderProperty.setNative] = requestFlexboxLayout;
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexGrowProperty.setNative] = requestFlexboxLayout;
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexShrinkProperty.setNative] = requestFlexboxLayout;
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.flexWrapBeforeProperty.setNative] = requestFlexboxLayout;
flexbox_layout_common_1.View.prototype[flexbox_layout_common_1.alignSelfProperty.setNative] = requestFlexboxLayout;
var MATCH_PARENT = -1;
var WRAP_CONTENT = -2;
var View_sUseZeroUnspecifiedMeasureSpec = true;
var MAX_SIZE = 0x00FFFFFF & MEASURED_SIZE_MASK;
var makeMeasureSpec = flexbox_layout_common_1.layout.makeMeasureSpec;
var getMeasureSpecMode = flexbox_layout_common_1.layout.getMeasureSpecMode;
var getMeasureSpecSize = flexbox_layout_common_1.layout.getMeasureSpecSize;

var MeasureContext = function () {
  function MeasureContext(owner) {
    var _this = this;

    this.owner = owner;
    this.children = [];
    this.owner.eachLayoutChild(function (child) {
      _this.children.push(child);
    });
  }

  Object.defineProperty(MeasureContext.prototype, "childrenCount", {
    get: function () {
      return this.children.length;
    },
    enumerable: true,
    configurable: true
  });

  MeasureContext.prototype.childAt = function (index) {
    return this.children[index];
  };

  return MeasureContext;
}();

var FlexLine = function () {
  function FlexLine() {
    this._left = Number.MAX_VALUE;
    this._top = Number.MAX_VALUE;
    this._right = Number.MAX_VALUE;
    this._bottom = Number.MAX_VALUE;
    this._mainSize = 0;
    this._dividerLengthInMainSize = 0;
    this._crossSize = 0;
    this._itemCount = 0;
    this._totalFlexGrow = 0;
    this._totalFlexShrink = 0;
    this._maxBaseline = 0;
    this._indicesAlignSelfStretch = [];
  }

  Object.defineProperty(FlexLine.prototype, "left", {
    get: function () {
      return this._left;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "top", {
    get: function () {
      return this._top;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "right", {
    get: function () {
      return this._right;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "bottom", {
    get: function () {
      return this._bottom;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "mainSize", {
    get: function () {
      return this._mainSize;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "crossSize", {
    get: function () {
      return this._crossSize;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "itemCount", {
    get: function () {
      return this._itemCount;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "totalFlexGrow", {
    get: function () {
      return this._totalFlexGrow;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FlexLine.prototype, "totalFlexShrink", {
    get: function () {
      return this._totalFlexShrink;
    },
    enumerable: true,
    configurable: true
  });
  return FlexLine;
}();

var Order = function () {
  function Order() {}

  Order.prototype.compareTo = function (another) {
    if (this.order !== another.order) {
      return this.order - another.order;
    }

    return this.index - another.index;
  };

  return Order;
}();

var FlexboxLayout = function (_super) {
  __extends(FlexboxLayout, _super);

  function FlexboxLayout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._flexLines = [];
    return _this;
  }

  FlexboxLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    this.measureContext = new MeasureContext(this);

    if (this._isOrderChangedFromLastMeasurement) {
      this._reorderedIndices = this._createReorderedIndices();
    }

    if (!this._childrenFrozen || this._childrenFrozen.length < this.measureContext.childrenCount) {
      this._childrenFrozen = new Array(this.measureContext.childrenCount);
    }

    switch (this.flexDirection) {
      case flexbox_layout_common_1.FlexDirection.ROW:
      case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
        this._measureHorizontal(widthMeasureSpec, heightMeasureSpec);

        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN:
      case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
        this._measureVertical(widthMeasureSpec, heightMeasureSpec);

        break;

      default:
        throw new Error("Invalid value for the flex direction is set: " + this.flexDirection);
    }

    this._childrenFrozen.length = 0;
  };

  FlexboxLayout.prototype._getReorderedChildAt = function (index) {
    var child;

    if (index < 0 || index >= this._reorderedIndices.length) {
      child = null;
    } else {
      var reorderedIndex = this._reorderedIndices[index];
      child = this.measureContext.childAt(reorderedIndex);
    }

    return child;
  };

  FlexboxLayout.prototype._createReorderedIndices = function () {
    var childCount = this.measureContext.childrenCount;

    var orders = this._createOrders(childCount);

    return this._sortOrdersIntoReorderedIndices(childCount, orders);
  };

  FlexboxLayout.prototype._sortOrdersIntoReorderedIndices = function (childCount, orders) {
    var _this = this;

    orders.sort(function (a, b) {
      return a.compareTo(b);
    });

    if (!this._orderCache) {
      this._orderCache = [];
    }

    this._orderCache.length = 0;
    var reorderedIndices = [];
    orders.forEach(function (order, i) {
      reorderedIndices[i] = order.index;
      _this._orderCache[i] = order.order;
    });
    return reorderedIndices;
  };

  FlexboxLayout.prototype._createOrders = function (childCount) {
    var orders = [];

    for (var i = 0; i < childCount; i++) {
      var child = this.measureContext.childAt(i);
      var order = new Order();
      order.order = FlexboxLayout.getOrder(child);
      order.index = i;
      orders.push(order);
    }

    return orders;
  };

  Object.defineProperty(FlexboxLayout.prototype, "_isOrderChangedFromLastMeasurement", {
    get: function () {
      var childCount = this.measureContext.childrenCount;

      if (!this._orderCache) {
        this._orderCache = [];
      }

      if (this._orderCache.length !== childCount) {
        return true;
      }

      for (var i = 0; i < childCount; i++) {
        var view = this.measureContext.childAt(i);

        if (view === null) {
          continue;
        }

        if (FlexboxLayout.getOrder(view) !== this._orderCache[i]) {
          return true;
        }
      }

      return false;
    },
    enumerable: true,
    configurable: true
  });

  FlexboxLayout.prototype._measureHorizontal = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    var widthSize = getMeasureSpecSize(widthMeasureSpec);
    var widthMode = getMeasureSpecMode(widthMeasureSpec);
    var heightSize = getMeasureSpecSize(heightMeasureSpec);
    var heightMode = getMeasureSpecMode(heightMeasureSpec);
    var childState = 0;
    this._flexLines.length = 0;

    (function () {
      var childCount = _this.measureContext.childrenCount;
      var paddingStart = FlexboxLayout.getPaddingStart(_this);
      var paddingEnd = FlexboxLayout.getPaddingEnd(_this);
      var largestHeightInRow = Number.MIN_VALUE;
      var flexLine = new FlexLine();
      var indexInFlexLine = 0;
      flexLine._mainSize = paddingStart + paddingEnd;

      for (var i = 0; i < childCount; i++) {
        var child = _this._getReorderedChildAt(i);

        if (child === null) {
          _this._addFlexLineIfLastFlexItem(i, childCount, flexLine);

          continue;
        } else if (child.isCollapsed) {
          flexLine._itemCount++;

          _this._addFlexLineIfLastFlexItem(i, childCount, flexLine);

          continue;
        }

        child._updateEffectiveLayoutValues(widthSize, widthMode, heightSize, heightMode);

        var lp = child;

        if (FlexboxLayout.getAlignSelf(child) === "stretch") {
          flexLine._indicesAlignSelfStretch.push(i);
        }

        var childWidth = lp.effectiveWidth;

        if (flexbox_layout_common_1.FlexBasisPercent.DEFAULT !== flexbox_layout_common_1.FlexBasisPercent.DEFAULT && widthMode === EXACTLY) {
          childWidth = Math.round(widthSize * flexbox_layout_common_1.FlexBasisPercent.DEFAULT);
        }

        var childWidthMeasureSpec = FlexboxLayout.getChildMeasureSpec(widthMeasureSpec, lp.effectivePaddingLeft + lp.effectivePaddingRight + lp.effectiveMarginLeft + lp.effectiveMarginRight, childWidth < 0 ? WRAP_CONTENT : childWidth);
        var childHeightMeasureSpec = FlexboxLayout.getChildMeasureSpec(heightMeasureSpec, lp.effectivePaddingTop + lp.effectivePaddingBottom + lp.effectiveMarginTop + lp.effectiveMarginBottom, lp.effectiveHeight < 0 ? WRAP_CONTENT : lp.effectiveHeight);
        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);

        _this._checkSizeConstraints(child);

        childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, child.getMeasuredState());
        largestHeightInRow = Math.max(largestHeightInRow, child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom);

        if (_this._isWrapRequired(child, widthMode, widthSize, flexLine._mainSize, child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight, i, indexInFlexLine)) {
          if (flexLine.itemCount > 0) {
            _this._addFlexLine(flexLine);
          }

          flexLine = new FlexLine();
          flexLine._itemCount = 1;
          flexLine._mainSize = paddingStart + paddingEnd;
          largestHeightInRow = child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom;
          indexInFlexLine = 0;
        } else {
          flexLine._itemCount++;
          indexInFlexLine++;
        }

        flexLine._mainSize += child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight;
        flexLine._totalFlexGrow += FlexboxLayout.getFlexGrow(child);
        flexLine._totalFlexShrink += FlexboxLayout.getFlexShrink(child);
        flexLine._crossSize = Math.max(flexLine._crossSize, largestHeightInRow);

        if (_this.flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          flexLine._maxBaseline = Math.max(flexLine._maxBaseline, FlexboxLayout.getBaseline(child) + lp.effectiveMarginTop);
        } else {
          flexLine._maxBaseline = Math.max(flexLine._maxBaseline, child.getMeasuredHeight() - FlexboxLayout.getBaseline(child) + lp.effectiveMarginBottom);
        }

        _this._addFlexLineIfLastFlexItem(i, childCount, flexLine);
      }
    })();

    this._determineMainSize(this.flexDirection, widthMeasureSpec, heightMeasureSpec);

    if (this.alignItems === flexbox_layout_common_1.AlignItems.BASELINE) {
      var viewIndex_1 = 0;

      this._flexLines.forEach(function (flexLine) {
        var largestHeightInLine = Number.MIN_VALUE;

        for (var i = viewIndex_1; i < viewIndex_1 + flexLine._itemCount; i++) {
          var child = _this._getReorderedChildAt(i);

          var lp = child;

          if (_this.flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
            var marginTop = flexLine._maxBaseline - FlexboxLayout.getBaseline(child);
            marginTop = Math.max(marginTop, lp.effectiveMarginTop);
            largestHeightInLine = Math.max(largestHeightInLine, child.getActualSize().height + marginTop + lp.effectiveMarginBottom);
          } else {
            var marginBottom = flexLine._maxBaseline - child.getMeasuredHeight() + FlexboxLayout.getBaseline(child);
            marginBottom = Math.max(marginBottom, lp.effectiveMarginBottom);
            largestHeightInLine = Math.max(largestHeightInLine, child.getActualSize().height + lp.effectiveMarginTop + marginBottom);
          }
        }

        flexLine._crossSize = largestHeightInLine;
        viewIndex_1 += flexLine.itemCount;
      });
    }

    this._determineCrossSize(this.flexDirection, widthMeasureSpec, heightMeasureSpec, this.effectivePaddingTop + this.effectivePaddingBottom);

    this._stretchViews(this.flexDirection, this.alignItems);

    this._setMeasuredDimensionForFlex(this.flexDirection, widthMeasureSpec, heightMeasureSpec, childState);
  };

  FlexboxLayout.prototype._measureVertical = function (widthMeasureSpec, heightMeasureSpec) {
    var widthSize = getMeasureSpecSize(widthMeasureSpec);
    var widthMode = getMeasureSpecMode(widthMeasureSpec);
    var heightSize = getMeasureSpecSize(heightMeasureSpec);
    var heightMode = getMeasureSpecMode(heightMeasureSpec);
    var childState = 0;
    this._flexLines.length = 0;
    var childCount = this.measureContext.childrenCount;
    var paddingTop = this.effectivePaddingTop;
    var paddingBottom = this.effectivePaddingBottom;
    var largestWidthInColumn = Number.MIN_VALUE;
    var flexLine = new FlexLine();
    flexLine._mainSize = paddingTop + paddingBottom;
    var indexInFlexLine = 0;

    for (var i = 0; i < childCount; i++) {
      var child = this._getReorderedChildAt(i);

      if (child === null) {
        this._addFlexLineIfLastFlexItem(i, childCount, flexLine);

        continue;
      } else if (child.isCollapsed) {
        flexLine._itemCount++;

        this._addFlexLineIfLastFlexItem(i, childCount, flexLine);

        continue;
      }

      child._updateEffectiveLayoutValues(widthSize, widthMode, heightSize, heightMode);

      var lp = child;

      if (FlexboxLayout.getAlignSelf(child) === "stretch") {
        flexLine._indicesAlignSelfStretch.push(i);
      }

      var childHeight = lp.effectiveHeight;

      if (flexbox_layout_common_1.FlexBasisPercent.DEFAULT !== flexbox_layout_common_1.FlexBasisPercent.DEFAULT && heightMode === EXACTLY) {
        childHeight = Math.round(heightSize * flexbox_layout_common_1.FlexBasisPercent.DEFAULT);
      }

      var childWidthMeasureSpec = FlexboxLayout.getChildMeasureSpec(widthMeasureSpec, this.effectivePaddingLeft + this.effectivePaddingRight + lp.effectiveMarginLeft + lp.effectiveMarginRight, lp.effectiveWidth < 0 ? WRAP_CONTENT : lp.effectiveWidth);
      var childHeightMeasureSpec = FlexboxLayout.getChildMeasureSpec(heightMeasureSpec, this.effectivePaddingTop + this.effectivePaddingBottom + lp.effectiveMarginTop + lp.effectiveMarginBottom, childHeight < 0 ? WRAP_CONTENT : childHeight);
      child.measure(childWidthMeasureSpec, childHeightMeasureSpec);

      this._checkSizeConstraints(child);

      childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, child.getMeasuredState());
      largestWidthInColumn = Math.max(largestWidthInColumn, child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight);

      if (this._isWrapRequired(child, heightMode, heightSize, flexLine.mainSize, child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom, i, indexInFlexLine)) {
        if (flexLine._itemCount > 0) {
          this._addFlexLine(flexLine);
        }

        flexLine = new FlexLine();
        flexLine._itemCount = 1;
        flexLine._mainSize = paddingTop + paddingBottom;
        largestWidthInColumn = child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight;
        indexInFlexLine = 0;
      } else {
        flexLine._itemCount++;
        indexInFlexLine++;
      }

      flexLine._mainSize += child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom;
      flexLine._totalFlexGrow += FlexboxLayout.getFlexGrow(child);
      flexLine._totalFlexShrink += FlexboxLayout.getFlexShrink(child);
      flexLine._crossSize = Math.max(flexLine._crossSize, largestWidthInColumn);

      this._addFlexLineIfLastFlexItem(i, childCount, flexLine);
    }

    this._determineMainSize(this.flexDirection, widthMeasureSpec, heightMeasureSpec);

    this._determineCrossSize(this.flexDirection, widthMeasureSpec, heightMeasureSpec, this.effectivePaddingLeft + this.effectivePaddingRight);

    this._stretchViews(this.flexDirection, this.alignItems);

    this._setMeasuredDimensionForFlex(this.flexDirection, widthMeasureSpec, heightMeasureSpec, childState);
  };

  FlexboxLayout.prototype._checkSizeConstraints = function (view) {
    var needsMeasure = false;
    var childWidth = view.getMeasuredWidth();
    var childHeight = view.getMeasuredHeight();
    var minWidth = view.effectiveMinWidth;
    view.effectiveMinWidth = 0;

    if (view.getMeasuredWidth() < minWidth) {
      needsMeasure = true;
      childWidth = minWidth;
    } else if (view.getMeasuredWidth() > MAX_SIZE) {
      needsMeasure = true;
      childWidth = MAX_SIZE;
    }

    var minHeight = view.effectiveMinHeight;
    view.effectiveMinHeight = 0;

    if (childHeight < minHeight) {
      needsMeasure = true;
      childHeight = minHeight;
    } else if (childHeight > MAX_SIZE) {
      needsMeasure = true;
      childHeight = MAX_SIZE;
    }

    if (needsMeasure) {
      view.measure(makeMeasureSpec(childWidth, EXACTLY), makeMeasureSpec(childHeight, EXACTLY));
    }

    view.effectiveMinWidth = minWidth;
    view.effectiveMinHeight = minHeight;
  };

  FlexboxLayout.prototype._addFlexLineIfLastFlexItem = function (childIndex, childCount, flexLine) {
    if (childIndex === childCount - 1 && flexLine.itemCount !== 0) {
      this._addFlexLine(flexLine);
    }
  };

  FlexboxLayout.prototype._addFlexLine = function (flexLine) {
    this._flexLines.push(flexLine);
  };

  FlexboxLayout.prototype._determineMainSize = function (flexDirection, widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    var mainSize;
    var paddingAlongMainAxis;

    switch (flexDirection) {
      case flexbox_layout_common_1.FlexDirection.ROW:
      case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
        var widthMode = getMeasureSpecMode(widthMeasureSpec);
        var widthSize = getMeasureSpecSize(widthMeasureSpec);

        if (widthMode === EXACTLY) {
          mainSize = widthSize;
        } else {
          mainSize = this._getLargestMainSize();
        }

        paddingAlongMainAxis = this.effectivePaddingLeft + this.effectivePaddingRight;
        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN:
      case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
        var heightMode = getMeasureSpecMode(heightMeasureSpec);
        var heightSize = getMeasureSpecSize(heightMeasureSpec);

        if (heightMode === EXACTLY) {
          mainSize = heightSize;
        } else {
          mainSize = this._getLargestMainSize();
        }

        paddingAlongMainAxis = this.effectivePaddingTop + this.effectivePaddingBottom;
        break;

      default:
        throw new Error("Invalid flex direction: " + flexDirection);
    }

    var childIndex = 0;

    this._flexLines.forEach(function (flexLine) {
      if (flexLine.mainSize < mainSize) {
        childIndex = _this._expandFlexItems(flexLine, flexDirection, mainSize, paddingAlongMainAxis, childIndex);
      } else {
        childIndex = _this._shrinkFlexItems(flexLine, flexDirection, mainSize, paddingAlongMainAxis, childIndex);
      }
    });
  };

  FlexboxLayout.prototype._expandFlexItems = function (flexLine, flexDirection, maxMainSize, paddingAlongMainAxis, startIndex) {
    var childIndex = startIndex;

    if (flexLine._totalFlexGrow <= 0 || maxMainSize < flexLine._mainSize) {
      childIndex += flexLine._itemCount;
      return childIndex;
    }

    var sizeBeforeExpand = flexLine._mainSize;
    var needsReexpand = false;
    var pendingSpace = maxMainSize - flexLine._mainSize;
    var unitSpace = pendingSpace / flexLine._totalFlexGrow;
    flexLine._mainSize = paddingAlongMainAxis + flexLine._dividerLengthInMainSize;
    var accumulatedRoundError = 0;

    for (var i = 0; i < flexLine.itemCount; i++) {
      var child = this._getReorderedChildAt(childIndex);

      if (child === null) {
        continue;
      } else if (child.isCollapsed) {
        childIndex++;
        continue;
      }

      var lp = child;

      if (this._isMainAxisDirectionHorizontal(flexDirection)) {
        if (!this._childrenFrozen[childIndex]) {
          var flexGrow = FlexboxLayout.getFlexGrow(child);
          var rawCalculatedWidth = child.getMeasuredWidth() + unitSpace * flexGrow + accumulatedRoundError;
          var roundedCalculatedWidth = Math.round(rawCalculatedWidth);

          if (roundedCalculatedWidth > MAX_SIZE) {
            needsReexpand = true;
            roundedCalculatedWidth = MAX_SIZE;
            this._childrenFrozen[childIndex] = true;
            flexLine._totalFlexGrow -= flexGrow;
          } else {
            accumulatedRoundError = rawCalculatedWidth - roundedCalculatedWidth;
          }

          child.measure(makeMeasureSpec(roundedCalculatedWidth, EXACTLY), makeMeasureSpec(child.getMeasuredHeight(), EXACTLY));
        }

        flexLine._mainSize += child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight;
      } else {
        if (!this._childrenFrozen[childIndex]) {
          var flexGrow = FlexboxLayout.getFlexGrow(child);
          var rawCalculatedHeight = child.getMeasuredHeight() + unitSpace * flexGrow + accumulatedRoundError;
          var roundedCalculatedHeight = Math.round(rawCalculatedHeight);

          if (roundedCalculatedHeight > MAX_SIZE) {
            needsReexpand = true;
            roundedCalculatedHeight = MAX_SIZE;
            this._childrenFrozen[childIndex] = true;
            flexLine._totalFlexGrow -= flexGrow;
          } else {
            accumulatedRoundError = rawCalculatedHeight - roundedCalculatedHeight;
          }

          child.measure(makeMeasureSpec(child.getMeasuredWidth(), EXACTLY), makeMeasureSpec(roundedCalculatedHeight, EXACTLY));
        }

        flexLine._mainSize += child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom;
      }

      childIndex++;
    }

    if (needsReexpand && sizeBeforeExpand !== flexLine._mainSize) {
      this._expandFlexItems(flexLine, flexDirection, maxMainSize, paddingAlongMainAxis, startIndex);
    }

    return childIndex;
  };

  FlexboxLayout.prototype._shrinkFlexItems = function (flexLine, flexDirection, maxMainSize, paddingAlongMainAxis, startIndex) {
    var childIndex = startIndex;
    var sizeBeforeShrink = flexLine._mainSize;

    if (flexLine._totalFlexShrink <= 0 || maxMainSize > flexLine._mainSize) {
      childIndex += flexLine.itemCount;
      return childIndex;
    }

    var needsReshrink = false;
    var unitShrink = (flexLine._mainSize - maxMainSize) / flexLine._totalFlexShrink;
    var accumulatedRoundError = 0;
    flexLine._mainSize = paddingAlongMainAxis + flexLine._dividerLengthInMainSize;

    for (var i = 0; i < flexLine.itemCount; i++) {
      var child = this._getReorderedChildAt(childIndex);

      if (child === null) {
        continue;
      } else if (child.isCollapsed) {
        childIndex++;
        continue;
      }

      var lp = child;

      if (this._isMainAxisDirectionHorizontal(flexDirection)) {
        if (!this._childrenFrozen[childIndex]) {
          var flexShrink = FlexboxLayout.getFlexShrink(child);
          var rawCalculatedWidth = child.getMeasuredWidth() - unitShrink * flexShrink + accumulatedRoundError;
          var roundedCalculatedWidth = Math.round(rawCalculatedWidth);
          var minWidth = child.effectiveMinWidth;
          child.effectiveMinWidth = 0;

          if (roundedCalculatedWidth < minWidth) {
            needsReshrink = true;
            roundedCalculatedWidth = minWidth;
            this._childrenFrozen[childIndex] = true;
            flexLine._totalFlexShrink -= flexShrink;
          } else {
            accumulatedRoundError = rawCalculatedWidth - roundedCalculatedWidth;
          }

          var childWidthMeasureSpec = makeMeasureSpec(roundedCalculatedWidth, EXACTLY);
          var childHeightMeasureSpec = FlexboxLayout.getChildMeasureSpec(this._currentHeightMeasureSpec, lp.effectivePaddingTop + lp.effectivePaddingBottom + lp.effectiveMarginTop + lp.effectiveMarginBottom, lp.effectiveHeight < 0 ? WRAP_CONTENT : lp.effectiveHeight);
          child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
          child.effectiveMinWidth = minWidth;
          flexLine._crossSize = Math.max(flexLine._crossSize, child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom);
        }

        flexLine._mainSize += child.getMeasuredWidth() + lp.effectiveMarginLeft + lp.effectiveMarginRight;
      } else {
        if (!this._childrenFrozen[childIndex]) {
          var flexShrink = FlexboxLayout.getFlexShrink(child);
          var rawCalculatedHeight = child.getMeasuredHeight() - unitShrink * flexShrink + accumulatedRoundError;
          var roundedCalculatedHeight = Math.round(rawCalculatedHeight);
          var minHeight = child.effectiveMinHeight;
          child.effectiveMinHeight = 0;

          if (roundedCalculatedHeight < minHeight) {
            needsReshrink = true;
            roundedCalculatedHeight = minHeight;
            this._childrenFrozen[childIndex] = true;
            flexLine._totalFlexShrink -= flexShrink;
          } else {
            accumulatedRoundError = rawCalculatedHeight - roundedCalculatedHeight;
          }

          child.measure(makeMeasureSpec(child.getMeasuredWidth(), EXACTLY), makeMeasureSpec(roundedCalculatedHeight, EXACTLY));
          child.effectiveMinHeight = minHeight;
        }

        flexLine._mainSize += child.getMeasuredHeight() + lp.effectiveMarginTop + lp.effectiveMarginBottom;
      }

      childIndex++;
    }

    if (needsReshrink && sizeBeforeShrink !== flexLine._mainSize) {
      this._shrinkFlexItems(flexLine, flexDirection, maxMainSize, paddingAlongMainAxis, startIndex);
    }

    return childIndex;
  };

  FlexboxLayout.prototype._determineCrossSize = function (flexDirection, widthMeasureSpec, heightMeasureSpec, paddingAlongCrossAxis) {
    var _this = this;

    var mode;
    var size;

    switch (flexDirection) {
      case flexbox_layout_common_1.FlexDirection.ROW:
      case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
        mode = getMeasureSpecMode(heightMeasureSpec);
        size = getMeasureSpecSize(heightMeasureSpec);
        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN:
      case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
        mode = getMeasureSpecMode(widthMeasureSpec);
        size = getMeasureSpecSize(widthMeasureSpec);
        break;

      default:
        throw new Error("Invalid flex direction: " + flexDirection);
    }

    if (mode === EXACTLY) {
      var totalCrossSize_1 = this._getSumOfCrossSize() + paddingAlongCrossAxis;

      if (this._flexLines.length === 1) {
        this._flexLines[0]._crossSize = size - paddingAlongCrossAxis;
      } else if (this._flexLines.length >= 2 && totalCrossSize_1 < size) {
        switch (this.alignContent) {
          case flexbox_layout_common_1.AlignContent.STRETCH:
            (function () {
              var freeSpaceUnit = (size - totalCrossSize_1) / _this._flexLines.length;
              var accumulatedError = 0;

              for (var i = 0, flexLinesSize = _this._flexLines.length; i < flexLinesSize; i++) {
                var flexLine = _this._flexLines[i];
                var newCrossSizeAsFloat = flexLine._crossSize + freeSpaceUnit;

                if (i === _this._flexLines.length - 1) {
                  newCrossSizeAsFloat += accumulatedError;
                  accumulatedError = 0;
                }

                var newCrossSize = Math.round(newCrossSizeAsFloat);
                accumulatedError += newCrossSizeAsFloat - newCrossSize;

                if (accumulatedError > 1) {
                  newCrossSize += 1;
                  accumulatedError -= 1;
                } else if (accumulatedError < -1) {
                  newCrossSize -= 1;
                  accumulatedError += 1;
                }

                flexLine._crossSize = newCrossSize;
              }
            })();

            break;

          case flexbox_layout_common_1.AlignContent.SPACE_AROUND:
            (function () {
              var spaceTopAndBottom = size - totalCrossSize_1;
              var numberOfSpaces = _this._flexLines.length * 2;
              spaceTopAndBottom = spaceTopAndBottom / numberOfSpaces;
              var newFlexLines = [];
              var dummySpaceFlexLine = new FlexLine();
              dummySpaceFlexLine._crossSize = spaceTopAndBottom;

              _this._flexLines.forEach(function (flexLine) {
                newFlexLines.push(dummySpaceFlexLine);
                newFlexLines.push(flexLine);
                newFlexLines.push(dummySpaceFlexLine);
              });

              _this._flexLines = newFlexLines;
            })();

            break;

          case flexbox_layout_common_1.AlignContent.SPACE_BETWEEN:
            (function () {
              var spaceBetweenFlexLine = size - totalCrossSize_1;
              var numberOfSpaces = _this._flexLines.length - 1;
              spaceBetweenFlexLine = spaceBetweenFlexLine / numberOfSpaces;
              var accumulatedError = 0;
              var newFlexLines = [];

              for (var i = 0, flexLineSize = _this._flexLines.length; i < flexLineSize; i++) {
                var flexLine = _this._flexLines[i];
                newFlexLines.push(flexLine);

                if (i !== _this._flexLines.length - 1) {
                  var dummySpaceFlexLine = new FlexLine();

                  if (i === _this._flexLines.length - 2) {
                    dummySpaceFlexLine._crossSize = Math.round(spaceBetweenFlexLine + accumulatedError);
                    accumulatedError = 0;
                  } else {
                    dummySpaceFlexLine._crossSize = Math.round(spaceBetweenFlexLine);
                  }

                  accumulatedError += spaceBetweenFlexLine - dummySpaceFlexLine._crossSize;

                  if (accumulatedError > 1) {
                    dummySpaceFlexLine._crossSize += 1;
                    accumulatedError -= 1;
                  } else if (accumulatedError < -1) {
                    dummySpaceFlexLine._crossSize -= 1;
                    accumulatedError += 1;
                  }

                  newFlexLines.push(dummySpaceFlexLine);
                }
              }

              _this._flexLines = newFlexLines;
            })();

            break;

          case flexbox_layout_common_1.AlignContent.CENTER:
            {
              var spaceAboveAndBottom = size - totalCrossSize_1;
              spaceAboveAndBottom = spaceAboveAndBottom / 2;
              var newFlexLines = [];
              var dummySpaceFlexLine = new FlexLine();
              dummySpaceFlexLine._crossSize = spaceAboveAndBottom;

              for (var i = 0, flexLineSize = this._flexLines.length; i < flexLineSize; i++) {
                if (i === 0) {
                  newFlexLines.push(dummySpaceFlexLine);
                }

                var flexLine = this._flexLines[i];
                newFlexLines.push(flexLine);

                if (i === this._flexLines.length - 1) {
                  newFlexLines.push(dummySpaceFlexLine);
                }
              }

              this._flexLines = newFlexLines;
              break;
            }

          case flexbox_layout_common_1.AlignContent.FLEX_END:
            {
              var spaceTop = size - totalCrossSize_1;
              var dummySpaceFlexLine = new FlexLine();
              dummySpaceFlexLine._crossSize = spaceTop;

              this._flexLines.unshift(dummySpaceFlexLine);

              break;
            }
        }
      }
    }
  };

  FlexboxLayout.prototype._stretchViews = function (flexDirection, alignItems) {
    var _this = this;

    if (alignItems === flexbox_layout_common_1.AlignItems.STRETCH) {
      var viewIndex_2 = 0;

      this._flexLines.forEach(function (flexLine) {
        for (var i = 0; i < flexLine.itemCount; i++, viewIndex_2++) {
          var view = _this._getReorderedChildAt(viewIndex_2);

          var alignSelf = FlexboxLayout.getAlignSelf(view);

          if (alignSelf !== "auto" && alignSelf !== "stretch") {
            continue;
          }

          switch (flexDirection) {
            case flexbox_layout_common_1.FlexDirection.ROW:
            case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
              _this._stretchViewVertically(view, flexLine._crossSize);

              break;

            case flexbox_layout_common_1.FlexDirection.COLUMN:
            case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
              _this._stretchViewHorizontally(view, flexLine._crossSize);

              break;

            default:
              throw new Error("Invalid flex direction: " + flexDirection);
          }
        }
      });
    } else {
      this._flexLines.forEach(function (flexLine) {
        flexLine._indicesAlignSelfStretch.forEach(function (index) {
          var view = _this._getReorderedChildAt(index);

          switch (flexDirection) {
            case flexbox_layout_common_1.FlexDirection.ROW:
            case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
              _this._stretchViewVertically(view, flexLine._crossSize);

              break;

            case flexbox_layout_common_1.FlexDirection.COLUMN:
            case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
              _this._stretchViewHorizontally(view, flexLine._crossSize);

              break;

            default:
              throw new Error("Invalid flex direction: " + flexDirection);
          }
        });
      });
    }
  };

  FlexboxLayout.prototype._stretchViewVertically = function (view, crossSize) {
    var newHeight = crossSize - view.effectiveMarginTop - view.effectiveMarginBottom;
    newHeight = Math.max(newHeight, 0);
    var originalMeasuredWidth = view.getMeasuredWidth();
    var childWidthMeasureSpec = FlexboxLayout.getChildMeasureSpec(this._currentWidthMeasureSpec, view.effectivePaddingLeft + view.effectivePaddingRight + view.effectiveMarginLeft + view.effectiveMarginRight, view.effectiveWidth < 0 ? WRAP_CONTENT : Math.min(view.effectiveWidth, originalMeasuredWidth));
    view.measure(childWidthMeasureSpec, makeMeasureSpec(newHeight, EXACTLY));

    if (originalMeasuredWidth > view.getMeasuredWidth()) {
      childWidthMeasureSpec = makeMeasureSpec(originalMeasuredWidth, EXACTLY);
      view.measure(childWidthMeasureSpec, makeMeasureSpec(newHeight, EXACTLY));
    }
  };

  FlexboxLayout.prototype._stretchViewHorizontally = function (view, crossSize) {
    var newWidth = crossSize - view.effectiveMarginLeft - view.effectiveMarginRight;
    newWidth = Math.max(newWidth, 0);
    view.measure(makeMeasureSpec(newWidth, EXACTLY), makeMeasureSpec(view.getMeasuredHeight(), EXACTLY));
  };

  FlexboxLayout.prototype._setMeasuredDimensionForFlex = function (flexDirection, widthMeasureSpec, heightMeasureSpec, childState) {
    var widthMode = getMeasureSpecMode(widthMeasureSpec);
    var widthSize = getMeasureSpecSize(widthMeasureSpec);
    var heightMode = getMeasureSpecMode(heightMeasureSpec);
    var heightSize = getMeasureSpecSize(heightMeasureSpec);
    var calculatedMaxHeight;
    var calculatedMaxWidth;

    switch (flexDirection) {
      case flexbox_layout_common_1.FlexDirection.ROW:
      case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
        calculatedMaxHeight = this._getSumOfCrossSize() + this.effectivePaddingTop + this.effectivePaddingBottom;
        calculatedMaxWidth = this._getLargestMainSize();
        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN:
      case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
        calculatedMaxHeight = this._getLargestMainSize();
        calculatedMaxWidth = this._getSumOfCrossSize() + this.effectivePaddingLeft + this.effectivePaddingRight;
        break;

      default:
        throw new Error("Invalid flex direction: " + flexDirection);
    }

    var widthSizeAndState;

    switch (widthMode) {
      case EXACTLY:
        if (widthSize < calculatedMaxWidth) {
          childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, MEASURED_STATE_TOO_SMALL);
        }

        widthSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(widthSize, widthSize, widthMode, childState);
        break;

      case AT_MOST:
        {
          if (widthSize < calculatedMaxWidth) {
            childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, MEASURED_STATE_TOO_SMALL);
          } else {
            widthSize = calculatedMaxWidth;
          }

          widthSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(widthSize, widthSize, widthMode, childState);
          break;
        }

      case UNSPECIFIED:
        {
          widthSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(calculatedMaxWidth, widthSize, widthMode, childState);
          break;
        }

      default:
        throw new Error("Unknown width mode is set: " + widthMode);
    }

    var heightSizeAndState;

    switch (heightMode) {
      case EXACTLY:
        if (heightSize < calculatedMaxHeight) {
          childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, MEASURED_STATE_TOO_SMALL >> flexbox_layout_common_1.layout.MEASURED_HEIGHT_STATE_SHIFT);
        }

        heightSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(heightSize, heightSize, heightMode, childState);
        break;

      case AT_MOST:
        {
          if (heightSize < calculatedMaxHeight) {
            childState = flexbox_layout_common_1.View.combineMeasuredStates(childState, MEASURED_STATE_TOO_SMALL >> flexbox_layout_common_1.layout.MEASURED_HEIGHT_STATE_SHIFT);
          } else {
            heightSize = calculatedMaxHeight;
          }

          heightSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(heightSize, heightSize, heightMode, childState);
          break;
        }

      case UNSPECIFIED:
        {
          heightSizeAndState = flexbox_layout_common_1.View.resolveSizeAndState(calculatedMaxHeight, heightSize, heightMode, childState);
          break;
        }

      default:
        throw new Error("Unknown height mode is set: " + heightMode);
    }

    this.setMeasuredDimension(widthSizeAndState, heightSizeAndState);
  };

  FlexboxLayout.prototype._isWrapRequired = function (child, mode, maxSize, currentLength, childLength, childAbsoluteIndex, childRelativeIndexInFlexLine) {
    if (this.flexWrap === flexbox_layout_common_1.FlexWrap.NOWRAP) {
      return false;
    }

    if (FlexboxLayout.getFlexWrapBefore(child)) {
      return true;
    }

    if (mode === UNSPECIFIED) {
      return false;
    }

    return maxSize < currentLength + childLength;
  };

  FlexboxLayout.prototype._getLargestMainSize = function () {
    return this._flexLines.reduce(function (max, flexLine) {
      return Math.max(max, flexLine.mainSize);
    }, Number.MIN_VALUE);
  };

  FlexboxLayout.prototype._getSumOfCrossSize = function () {
    return this._flexLines.reduce(function (sum, flexLine) {
      return sum + flexLine._crossSize;
    }, 0);
  };

  FlexboxLayout.prototype._isMainAxisDirectionHorizontal = function (flexDirection) {
    return flexDirection === flexbox_layout_common_1.FlexDirection.ROW || flexDirection === flexbox_layout_common_1.FlexDirection.ROW_REVERSE;
  };

  FlexboxLayout.prototype.onLayout = function (left, top, right, bottom) {
    var insets = this.getSafeAreaInsets();
    var isRtl;

    switch (this.flexDirection) {
      case flexbox_layout_common_1.FlexDirection.ROW:
        isRtl = false;

        this._layoutHorizontal(isRtl, left, top, right, bottom, insets);

        break;

      case flexbox_layout_common_1.FlexDirection.ROW_REVERSE:
        isRtl = true;

        this._layoutHorizontal(isRtl, left, top, right, bottom, insets);

        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN:
        isRtl = false;

        if (this.flexWrap === flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          isRtl = !isRtl;
        }

        this._layoutVertical(isRtl, false, left, top, right, bottom, insets);

        break;

      case flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE:
        isRtl = false;

        if (this.flexWrap === flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          isRtl = !isRtl;
        }

        this._layoutVertical(isRtl, true, left, top, right, bottom, insets);

        break;

      default:
        throw new Error("Invalid flex direction is set: " + this.flexDirection);
    }
  };

  FlexboxLayout.prototype._layoutHorizontal = function (isRtl, left, top, right, bottom, insets) {
    var _this = this;

    var paddingLeft = this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectivePaddingBottom + insets.bottom;
    var childLeft;
    var currentViewIndex = 0;
    var height = bottom - top;
    var width = right - left;
    var childBottom = height - paddingBottom;
    var childTop = paddingTop;
    var childRight;

    this._flexLines.forEach(function (flexLine, i) {
      var spaceBetweenItem = 0.0;

      switch (_this.justifyContent) {
        case flexbox_layout_common_1.JustifyContent.FLEX_START:
          childLeft = paddingLeft;
          childRight = width - paddingRight;
          break;

        case flexbox_layout_common_1.JustifyContent.FLEX_END:
          childLeft = width - flexLine._mainSize + paddingRight;
          childRight = flexLine._mainSize - paddingLeft;
          break;

        case flexbox_layout_common_1.JustifyContent.CENTER:
          childLeft = paddingLeft + (width - insets.left - insets.right - flexLine._mainSize) / 2.0;
          childRight = width - paddingRight - (width - insets.left - insets.right - flexLine._mainSize) / 2.0;
          break;

        case flexbox_layout_common_1.JustifyContent.SPACE_AROUND:
          if (flexLine._itemCount !== 0) {
            spaceBetweenItem = (width - insets.left - insets.right - flexLine.mainSize) / flexLine._itemCount;
          }

          childLeft = paddingLeft + spaceBetweenItem / 2.0;
          childRight = width - paddingRight - spaceBetweenItem / 2.0;
          break;

        case flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN:
          childLeft = paddingLeft;
          var denominator = flexLine.itemCount !== 1 ? flexLine.itemCount - 1 : 1.0;
          spaceBetweenItem = (width - insets.left - insets.right - flexLine.mainSize) / denominator;
          childRight = width - paddingRight;
          break;

        default:
          throw new Error("Invalid justifyContent is set: " + _this.justifyContent);
      }

      spaceBetweenItem = Math.max(spaceBetweenItem, 0);

      for (var j = 0; j < flexLine.itemCount; j++) {
        var child = _this._getReorderedChildAt(currentViewIndex);

        if (child === null) {
          continue;
        } else if (child.isCollapsed) {
          currentViewIndex++;
          continue;
        }

        var lp = child;
        childLeft += lp.effectiveMarginLeft;
        childRight -= lp.effectiveMarginRight;

        if (_this.flexWrap === flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          if (isRtl) {
            _this._layoutSingleChildHorizontal(child, flexLine, _this.flexWrap, _this.alignItems, Math.round(childRight) - child.getMeasuredWidth(), childBottom - child.getMeasuredHeight(), Math.round(childRight), childBottom);
          } else {
            _this._layoutSingleChildHorizontal(child, flexLine, _this.flexWrap, _this.alignItems, Math.round(childLeft), childBottom - child.getMeasuredHeight(), Math.round(childLeft) + child.getMeasuredWidth(), childBottom);
          }
        } else {
          if (isRtl) {
            _this._layoutSingleChildHorizontal(child, flexLine, _this.flexWrap, _this.alignItems, Math.round(childRight) - child.getMeasuredWidth(), childTop, Math.round(childRight), childTop + child.getMeasuredHeight());
          } else {
            _this._layoutSingleChildHorizontal(child, flexLine, _this.flexWrap, _this.alignItems, Math.round(childLeft), childTop, Math.round(childLeft) + child.getMeasuredWidth(), childTop + child.getMeasuredHeight());
          }
        }

        childLeft += child.getMeasuredWidth() + spaceBetweenItem + lp.effectiveMarginRight;
        childRight -= child.getMeasuredWidth() + spaceBetweenItem + lp.effectiveMarginLeft;
        currentViewIndex++;

        var bounds = child._getCurrentLayoutBounds();

        flexLine._left = Math.min(flexLine._left, bounds.left - lp.effectiveMarginLeft);
        flexLine._top = Math.min(flexLine._top, bounds.top - lp.effectiveMarginTop);
        flexLine._right = Math.max(flexLine._right, bounds.right + lp.effectiveMarginRight);
        flexLine._bottom = Math.max(flexLine._bottom, bounds.bottom + lp.effectiveMarginBottom);
      }

      childTop += flexLine._crossSize;
      childBottom -= flexLine._crossSize;
    });
  };

  FlexboxLayout.prototype._layoutSingleChildHorizontal = function (view, flexLine, flexWrap, alignItems, left, top, right, bottom) {
    var lp = view;
    var alignSelf = FlexboxLayout.getAlignSelf(view);

    if (alignSelf !== "auto") {
      alignItems = alignSelf;
    }

    var crossSize = flexLine._crossSize;

    switch (alignItems) {
      case flexbox_layout_common_1.AlignItems.FLEX_START:
      case flexbox_layout_common_1.AlignItems.STRETCH:
        if (flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          view.layout(left, top + lp.effectiveMarginTop, right, bottom + lp.effectiveMarginTop);
        } else {
          view.layout(left, top - lp.effectiveMarginBottom, right, bottom - lp.effectiveMarginBottom);
        }

        break;

      case flexbox_layout_common_1.AlignItems.BASELINE:
        if (flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          var marginTop = flexLine._maxBaseline - FlexboxLayout.getBaseline(view);
          marginTop = Math.max(marginTop, lp.effectiveMarginTop);
          view.layout(left, top + marginTop, right, bottom + marginTop);
        } else {
          var marginBottom = flexLine._maxBaseline - view.getMeasuredHeight() + FlexboxLayout.getBaseline(view);
          marginBottom = Math.max(marginBottom, lp.effectiveMarginBottom);
          view.layout(left, top - marginBottom, right, bottom - marginBottom);
        }

        break;

      case flexbox_layout_common_1.AlignItems.FLEX_END:
        if (flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          view.layout(left, top + crossSize - view.getMeasuredHeight() - lp.effectiveMarginBottom, right, top + crossSize - lp.effectiveMarginBottom);
        } else {
          view.layout(left, top - crossSize + view.getMeasuredHeight() + lp.effectiveMarginTop, right, bottom - crossSize + view.getMeasuredHeight() + lp.effectiveMarginTop);
        }

        break;

      case flexbox_layout_common_1.AlignItems.CENTER:
        var topFromCrossAxis = (crossSize - view.getMeasuredHeight()) / 2;

        if (flexWrap !== flexbox_layout_common_1.FlexWrap.WRAP_REVERSE) {
          view.layout(left, top + topFromCrossAxis + lp.effectiveMarginTop - lp.effectiveMarginBottom, right, top + topFromCrossAxis + view.getMeasuredHeight() + lp.effectiveMarginTop - lp.effectiveMarginBottom);
        } else {
          view.layout(left, top - topFromCrossAxis + lp.effectiveMarginTop - lp.effectiveMarginBottom, right, top - topFromCrossAxis + view.getMeasuredHeight() + lp.effectiveMarginTop - lp.effectiveMarginBottom);
        }

        break;
    }
  };

  FlexboxLayout.prototype._layoutVertical = function (isRtl, fromBottomToTop, left, top, right, bottom, insets) {
    var _this = this;

    var paddingLeft = this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectivePaddingBottom + insets.bottom;
    var childLeft = paddingLeft;
    var currentViewIndex = 0;
    var width = right - left;
    var height = bottom - top;
    var childRight = width - paddingRight;
    var childTop;
    var childBottom;

    this._flexLines.forEach(function (flexLine) {
      var spaceBetweenItem = 0.0;

      switch (_this.justifyContent) {
        case flexbox_layout_common_1.JustifyContent.FLEX_START:
          childTop = paddingTop;
          childBottom = height - paddingBottom;
          break;

        case flexbox_layout_common_1.JustifyContent.FLEX_END:
          childTop = height - flexLine._mainSize + paddingBottom;
          childBottom = flexLine._mainSize - paddingTop;
          break;

        case flexbox_layout_common_1.JustifyContent.CENTER:
          childTop = paddingTop + (height - insets.top - insets.bottom - flexLine._mainSize) / 2.0;
          childBottom = height - paddingBottom - (height - insets.top - insets.bottom - flexLine._mainSize) / 2.0;
          break;

        case flexbox_layout_common_1.JustifyContent.SPACE_AROUND:
          if (flexLine._itemCount !== 0) {
            spaceBetweenItem = (height - insets.top - insets.bottom - flexLine._mainSize) / flexLine.itemCount;
          }

          childTop = paddingTop + spaceBetweenItem / 2.0;
          childBottom = height - paddingBottom - spaceBetweenItem / 2.0;
          break;

        case flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN:
          childTop = paddingTop;
          var denominator = flexLine.itemCount !== 1 ? flexLine.itemCount - 1 : 1.0;
          spaceBetweenItem = (height - insets.top - insets.bottom - flexLine.mainSize) / denominator;
          childBottom = height - paddingBottom;
          break;

        default:
          throw new Error("Invalid justifyContent is set: " + _this.justifyContent);
      }

      spaceBetweenItem = Math.max(spaceBetweenItem, 0);

      for (var j = 0; j < flexLine.itemCount; j++) {
        var child = _this._getReorderedChildAt(currentViewIndex);

        if (child === null) {
          continue;
        } else if (child.isCollapsed) {
          currentViewIndex++;
          continue;
        }

        var lp = child;
        childTop += lp.effectiveMarginTop;
        childBottom -= lp.effectiveMarginBottom;

        if (isRtl) {
          if (fromBottomToTop) {
            _this._layoutSingleChildVertical(child, flexLine, true, _this.alignItems, childRight - child.getMeasuredWidth(), Math.round(childBottom) - child.getMeasuredHeight(), childRight, Math.round(childBottom));
          } else {
            _this._layoutSingleChildVertical(child, flexLine, true, _this.alignItems, childRight - child.getMeasuredWidth(), Math.round(childTop), childRight, Math.round(childTop) + child.getMeasuredHeight());
          }
        } else {
          if (fromBottomToTop) {
            _this._layoutSingleChildVertical(child, flexLine, false, _this.alignItems, childLeft, Math.round(childBottom) - child.getMeasuredHeight(), childLeft + child.getMeasuredWidth(), Math.round(childBottom));
          } else {
            _this._layoutSingleChildVertical(child, flexLine, false, _this.alignItems, childLeft, Math.round(childTop), childLeft + child.getMeasuredWidth(), Math.round(childTop) + child.getMeasuredHeight());
          }
        }

        childTop += child.getMeasuredHeight() + spaceBetweenItem + lp.effectiveMarginBottom;
        childBottom -= child.getMeasuredHeight() + spaceBetweenItem + lp.effectiveMarginTop;
        currentViewIndex++;

        var bounds = child._getCurrentLayoutBounds();

        flexLine._left = Math.min(flexLine._left, bounds.left - lp.effectiveMarginLeft);
        flexLine._top = Math.min(flexLine._top, bounds.top - lp.effectiveMarginTop);
        flexLine._right = Math.max(flexLine._right, bounds.right + lp.effectiveMarginRight);
        flexLine._bottom = Math.max(flexLine._bottom, bounds.bottom + lp.effectiveMarginBottom);
      }

      childLeft += flexLine.crossSize;
      childRight -= flexLine.crossSize;
    });
  };

  FlexboxLayout.prototype._layoutSingleChildVertical = function (view, flexLine, isRtl, alignItems, left, top, right, bottom) {
    var lp = view;
    var alignSelf = FlexboxLayout.getAlignSelf(view);

    if (alignSelf !== "auto") {
      alignItems = alignSelf;
    }

    var crossSize = flexLine.crossSize;

    switch (alignItems) {
      case flexbox_layout_common_1.AlignItems.FLEX_START:
      case flexbox_layout_common_1.AlignItems.STRETCH:
      case flexbox_layout_common_1.AlignItems.BASELINE:
        if (!isRtl) {
          view.layout(left + lp.effectiveMarginLeft, top, right + lp.effectiveMarginLeft, bottom);
        } else {
          view.layout(left - lp.effectiveMarginRight, top, right - lp.effectiveMarginRight, bottom);
        }

        break;

      case flexbox_layout_common_1.AlignItems.FLEX_END:
        if (!isRtl) {
          view.layout(left + crossSize - view.getMeasuredWidth() - lp.effectiveMarginRight, top, right + crossSize - view.getMeasuredWidth() - lp.effectiveMarginRight, bottom);
        } else {
          view.layout(left - crossSize + view.getMeasuredWidth() + lp.effectiveMarginLeft, top, right - crossSize + view.getMeasuredWidth() + lp.effectiveMarginLeft, bottom);
        }

        break;

      case flexbox_layout_common_1.AlignItems.CENTER:
        var leftFromCrossAxis = (crossSize - view.getMeasuredWidth()) / 2;

        if (!isRtl) {
          view.layout(left + leftFromCrossAxis + lp.effectiveMarginLeft - lp.effectiveMarginRight, top, right + leftFromCrossAxis + lp.effectiveMarginLeft - lp.effectiveMarginRight, bottom);
        } else {
          view.layout(left - leftFromCrossAxis + lp.effectiveMarginLeft - lp.effectiveMarginRight, top, right - leftFromCrossAxis + lp.effectiveMarginLeft - lp.effectiveMarginRight, bottom);
        }

        break;
    }
  };

  FlexboxLayout.getChildMeasureSpec = function (spec, padding, childDimension) {
    var specMode = flexbox_layout_common_1.layout.getMeasureSpecMode(spec);
    var specSize = flexbox_layout_common_1.layout.getMeasureSpecSize(spec);
    var size = Math.max(0, specSize - padding);
    var resultSize = 0;
    var resultMode = 0;

    switch (specMode) {
      case EXACTLY:
        if (childDimension >= 0) {
          resultSize = childDimension;
          resultMode = EXACTLY;
        } else if (childDimension === MATCH_PARENT) {
          resultSize = size;
          resultMode = EXACTLY;
        } else if (childDimension === WRAP_CONTENT) {
          resultSize = size;
          resultMode = AT_MOST;
        }

        break;

      case AT_MOST:
        if (childDimension >= 0) {
          resultSize = childDimension;
          resultMode = EXACTLY;
        } else if (childDimension === MATCH_PARENT) {
          resultSize = size;
          resultMode = AT_MOST;
        } else if (childDimension === WRAP_CONTENT) {
          resultSize = size;
          resultMode = AT_MOST;
        }

        break;

      case UNSPECIFIED:
        if (childDimension >= 0) {
          resultSize = childDimension;
          resultMode = EXACTLY;
        } else if (childDimension === MATCH_PARENT) {
          resultSize = View_sUseZeroUnspecifiedMeasureSpec ? 0 : size;
          resultMode = UNSPECIFIED;
        } else if (childDimension === WRAP_CONTENT) {
          resultSize = View_sUseZeroUnspecifiedMeasureSpec ? 0 : size;
          resultMode = UNSPECIFIED;
        }

        break;
    }

    return flexbox_layout_common_1.layout.makeMeasureSpec(resultSize, resultMode);
  };

  return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);

exports.FlexboxLayout = FlexboxLayout;

(function (FlexboxLayout) {
  function getBaseline(child) {
    return 0;
  }

  FlexboxLayout.getBaseline = getBaseline;

  function getPaddingStart(child) {
    return child.effectivePaddingLeft;
  }

  FlexboxLayout.getPaddingStart = getPaddingStart;

  function getPaddingEnd(child) {
    return child.effectivePaddingRight;
  }

  FlexboxLayout.getPaddingEnd = getPaddingEnd;
})(FlexboxLayout = exports.FlexboxLayout || (exports.FlexboxLayout = {}));

exports.FlexboxLayout = FlexboxLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

function validateArgs(element) {
  if (!element) {
    throw new Error("element cannot be null or undefinied.");
  }

  return element;
}

layout_base_1.View.prototype.row = 0;
layout_base_1.View.prototype.col = 0;
layout_base_1.View.prototype.rowSpan = 1;
layout_base_1.View.prototype.colSpan = 1;

function validateItemSpec(itemSpec) {
  if (!itemSpec) {
    throw new Error("Value cannot be undefined.");
  }

  if (itemSpec.owner) {
    throw new Error("itemSpec is already added to GridLayout.");
  }
}

function convertGridLength(value) {
  if (value === GridUnitType.AUTO) {
    return ItemSpec.create(1, GridUnitType.AUTO);
  } else if (value.indexOf("*") !== -1) {
    var starCount = parseInt(value.replace("*", "") || "1");
    return ItemSpec.create(starCount, GridUnitType.STAR);
  } else if (!isNaN(parseInt(value))) {
    return ItemSpec.create(parseInt(value), GridUnitType.PIXEL);
  } else {
    throw new Error("Cannot parse item spec from string: " + value);
  }
}

function parseAndAddItemSpecs(value, func) {
  var arr = value.split(/[\s,]+/);

  for (var i = 0, length_1 = arr.length; i < length_1; i++) {
    var str = arr[i].trim();

    if (str.length > 0) {
      func(convertGridLength(arr[i].trim()));
    }
  }
}

var ItemSpec = function (_super) {
  __extends(ItemSpec, _super);

  function ItemSpec() {
    var _this = _super.call(this) || this;

    _this._actualLength = 0;

    if (arguments.length === 0) {
      _this._value = 1;
      _this._unitType = GridUnitType.STAR;
    } else if (arguments.length === 2) {
      var value = arguments[0];
      var type = arguments[1];

      if (typeof value === "number" && typeof type === "string") {
        if (value < 0 || isNaN(value) || !isFinite(value)) {
          throw new Error("Value should not be negative, NaN or Infinity: " + value);
        }

        _this._value = value;
        _this._unitType = GridUnitType.parse(type);
      } else {
        throw new Error("First argument should be number, second argument should be string.");
      }
    } else {
      throw new Error("ItemSpec expects 0 or 2 arguments");
    }

    _this.index = -1;
    return _this;
  }

  ItemSpec.create = function (value, type) {
    var spec = new ItemSpec();
    spec._value = value;
    spec._unitType = type;
    return spec;
  };

  Object.defineProperty(ItemSpec.prototype, "actualLength", {
    get: function () {
      return this._actualLength;
    },
    enumerable: true,
    configurable: true
  });

  ItemSpec.equals = function (value1, value2) {
    return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
  };

  Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
    get: function () {
      return this._unitType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
    get: function () {
      return this._unitType === GridUnitType.PIXEL;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isAuto", {
    get: function () {
      return this._unitType === GridUnitType.AUTO;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "isStar", {
    get: function () {
      return this._unitType === GridUnitType.STAR;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ItemSpec.prototype, "value", {
    get: function () {
      return this._value;
    },
    enumerable: true,
    configurable: true
  });
  return ItemSpec;
}(layout_base_1.Observable);

exports.ItemSpec = ItemSpec;

var GridLayoutBase = function (_super) {
  __extends(GridLayoutBase, _super);

  function GridLayoutBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._rows = new Array();
    _this._cols = new Array();
    return _this;
  }

  GridLayoutBase_1 = GridLayoutBase;

  GridLayoutBase.getColumn = function (element) {
    return validateArgs(element).col;
  };

  GridLayoutBase.setColumn = function (element, value) {
    validateArgs(element).col = value;
  };

  GridLayoutBase.getColumnSpan = function (element) {
    return validateArgs(element).colSpan;
  };

  GridLayoutBase.setColumnSpan = function (element, value) {
    validateArgs(element).colSpan = value;
  };

  GridLayoutBase.getRow = function (element) {
    return validateArgs(element).row;
  };

  GridLayoutBase.setRow = function (element, value) {
    validateArgs(element).row = value;
  };

  GridLayoutBase.getRowSpan = function (element) {
    return validateArgs(element).rowSpan;
  };

  GridLayoutBase.setRowSpan = function (element, value) {
    validateArgs(element).rowSpan = value;
  };

  GridLayoutBase.prototype.addRow = function (itemSpec) {
    validateItemSpec(itemSpec);
    itemSpec.owner = this;

    this._rows.push(itemSpec);

    this._onRowAdded(itemSpec);

    this.invalidate();
  };

  GridLayoutBase.prototype.addColumn = function (itemSpec) {
    validateItemSpec(itemSpec);
    itemSpec.owner = this;

    this._cols.push(itemSpec);

    this._onColumnAdded(itemSpec);

    this.invalidate();
  };

  GridLayoutBase.prototype.addChildAtCell = function (view, row, column, rowSpan, columnSpan) {
    this.addChild(view);
    GridLayoutBase_1.setRow(view, row);
    GridLayoutBase_1.setColumn(view, column);

    if (rowSpan) {
      GridLayoutBase_1.setRowSpan(view, rowSpan);
    }

    if (columnSpan) {
      GridLayoutBase_1.setColumnSpan(view, columnSpan);
    }
  };

  GridLayoutBase.prototype.removeRow = function (itemSpec) {
    if (!itemSpec) {
      throw new Error("Value is null.");
    }

    var index = this._rows.indexOf(itemSpec);

    if (itemSpec.owner !== this || index < 0) {
      throw new Error("Row is not child of this GridLayout");
    }

    itemSpec.index = -1;

    this._rows.splice(index, 1);

    this._onRowRemoved(itemSpec, index);

    this.invalidate();
  };

  GridLayoutBase.prototype.removeColumn = function (itemSpec) {
    if (!itemSpec) {
      throw new Error("Value is null.");
    }

    var index = this._cols.indexOf(itemSpec);

    if (itemSpec.owner !== this || index < 0) {
      throw new Error("Column is not child of this GridLayout");
    }

    itemSpec.index = -1;

    this._cols.splice(index, 1);

    this._onColumnRemoved(itemSpec, index);

    this.invalidate();
  };

  GridLayoutBase.prototype.removeColumns = function () {
    for (var i = this._cols.length - 1; i >= 0; i--) {
      var colSpec = this._cols[i];

      this._onColumnRemoved(colSpec, i);

      colSpec.index = -1;
    }

    this._cols.length = 0;
    this.invalidate();
  };

  GridLayoutBase.prototype.removeRows = function () {
    for (var i = this._rows.length - 1; i >= 0; i--) {
      var rowSpec = this._rows[i];

      this._onRowRemoved(rowSpec, i);

      rowSpec.index = -1;
    }

    this._rows.length = 0;
    this.invalidate();
  };

  GridLayoutBase.prototype.onRowChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onRowSpanChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onColumnChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype.onColumnSpanChanged = function (element, oldValue, newValue) {
    this.invalidate();
  };

  GridLayoutBase.prototype._onRowAdded = function (itemSpec) {};

  GridLayoutBase.prototype._onColumnAdded = function (itemSpec) {};

  GridLayoutBase.prototype._onRowRemoved = function (itemSpec, index) {};

  GridLayoutBase.prototype._onColumnRemoved = function (itemSpec, index) {};

  GridLayoutBase.prototype.getColumns = function () {
    return this._cols.slice();
  };

  GridLayoutBase.prototype.getRows = function () {
    return this._rows.slice();
  };

  Object.defineProperty(GridLayoutBase.prototype, "columnsInternal", {
    get: function () {
      return this._cols;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GridLayoutBase.prototype, "rowsInternal", {
    get: function () {
      return this._rows;
    },
    enumerable: true,
    configurable: true
  });

  GridLayoutBase.prototype.invalidate = function () {};

  Object.defineProperty(GridLayoutBase.prototype, "rows", {
    set: function (value) {
      var _this = this;

      this.removeRows();
      parseAndAddItemSpecs(value, function (spec) {
        return _this.addRow(spec);
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GridLayoutBase.prototype, "columns", {
    set: function (value) {
      var _this = this;

      this.removeColumns();
      parseAndAddItemSpecs(value, function (spec) {
        return _this.addColumn(spec);
      });
    },
    enumerable: true,
    configurable: true
  });
  var GridLayoutBase_1;
  GridLayoutBase = GridLayoutBase_1 = __decorate([layout_base_1.CSSType("GridLayout")], GridLayoutBase);
  return GridLayoutBase;
}(layout_base_1.LayoutBase);

exports.GridLayoutBase = GridLayoutBase;
GridLayoutBase.prototype.recycleNativeView = "auto";
exports.columnProperty = new layout_base_1.Property({
  name: "col",
  defaultValue: 0,
  valueChanged: function (target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onColumnChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return Math.max(0, parseInt(v));
  }
});
exports.columnProperty.register(layout_base_1.View);
exports.columnSpanProperty = new layout_base_1.Property({
  name: "colSpan",
  defaultValue: 1,
  valueChanged: function (target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onColumnSpanChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return Math.max(1, parseInt(v));
  }
});
exports.columnSpanProperty.register(layout_base_1.View);
exports.rowProperty = new layout_base_1.Property({
  name: "row",
  defaultValue: 0,
  valueChanged: function (target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onRowChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return Math.max(0, parseInt(v));
  }
});
exports.rowProperty.register(layout_base_1.View);
exports.rowSpanProperty = new layout_base_1.Property({
  name: "rowSpan",
  defaultValue: 1,
  valueChanged: function (target, oldValue, newValue) {
    var grid = target.parent;

    if (grid instanceof GridLayoutBase) {
      grid.onRowSpanChanged(target, oldValue, newValue);
    }
  },
  valueConverter: function (v) {
    return Math.max(1, parseInt(v));
  }
});
exports.rowSpanProperty.register(layout_base_1.View);
var GridUnitType;

(function (GridUnitType) {
  GridUnitType.PIXEL = "pixel";
  GridUnitType.STAR = "star";
  GridUnitType.AUTO = "auto";
  GridUnitType.isValid = layout_base_1.makeValidator(GridUnitType.PIXEL, GridUnitType.STAR, GridUnitType.AUTO);
  GridUnitType.parse = layout_base_1.makeParser(GridUnitType.isValid);
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var grid_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/grid-layout/grid-layout-common.js"));

var GridLayout = function (_super) {
  __extends(GridLayout, _super);

  function GridLayout() {
    var _this = _super.call(this) || this;

    _this.columnOffsets = new Array();
    _this.rowOffsets = new Array();
    _this.map = new Map();
    _this.helper = new MeasureHelper(_this);
    return _this;
  }

  GridLayout.prototype._onRowAdded = function (itemSpec) {
    this.helper.rows.push(new ItemGroup(itemSpec));
  };

  GridLayout.prototype._onColumnAdded = function (itemSpec) {
    this.helper.columns.push(new ItemGroup(itemSpec));
  };

  GridLayout.prototype._onRowRemoved = function (itemSpec, index) {
    this.helper.rows[index].children.length = 0;
    this.helper.rows.splice(index, 1);
  };

  GridLayout.prototype._onColumnRemoved = function (itemSpec, index) {
    this.helper.columns[index].children.length = 0;
    this.helper.columns.splice(index, 1);
  };

  GridLayout.prototype._registerLayoutChild = function (child) {
    this.addToMap(child);
  };

  GridLayout.prototype._unregisterLayoutChild = function (child) {
    this.removeFromMap(child);
  };

  GridLayout.prototype.invalidate = function () {
    _super.prototype.invalidate.call(this);

    this.requestLayout();
  };

  GridLayout.prototype.getColumnIndex = function (view) {
    return Math.max(0, Math.min(GridLayout.getColumn(view), this.columnsInternal.length - 1));
  };

  GridLayout.prototype.getRowIndex = function (view) {
    return Math.max(0, Math.min(GridLayout.getRow(view), this.rowsInternal.length - 1));
  };

  GridLayout.prototype.getColumnSpan = function (view, columnIndex) {
    return Math.max(1, Math.min(GridLayout.getColumnSpan(view), this.columnsInternal.length - columnIndex));
  };

  GridLayout.prototype.getRowSpan = function (view, rowIndex) {
    return Math.max(1, Math.min(GridLayout.getRowSpan(view), this.rowsInternal.length - rowIndex));
  };

  GridLayout.prototype.getColumnSpec = function (view) {
    return this.columnsInternal[this.getColumnIndex(view)] || this.helper.singleColumn;
  };

  GridLayout.prototype.getRowSpec = function (view) {
    return this.rowsInternal[this.getRowIndex(view)] || this.helper.singleRow;
  };

  GridLayout.prototype.updateMeasureSpecs = function (child, measureSpec) {
    var column = this.getColumnSpec(child);
    var columnIndex = this.getColumnIndex(child);
    var columnSpan = this.getColumnSpan(child, columnIndex);
    var row = this.getRowSpec(child);
    var rowIndex = this.getRowIndex(child);
    var rowSpan = this.getRowSpan(child, rowIndex);
    measureSpec.setColumn(column);
    measureSpec.setColumnIndex(columnIndex);
    measureSpec.setColumnSpan(columnSpan);
    measureSpec.setRow(row);
    measureSpec.setRowIndex(rowIndex);
    measureSpec.setRowSpan(rowSpan);
    measureSpec.autoColumnsCount = 0;
    measureSpec.autoRowsCount = 0;
    measureSpec.measured = false;
    measureSpec.pixelHeight = 0;
    measureSpec.pixelWidth = 0;
    measureSpec.starColumnsCount = 0;
    measureSpec.starRowsCount = 0;
  };

  GridLayout.prototype.addToMap = function (child) {
    this.map.set(child, new MeasureSpecs(child));
  };

  GridLayout.prototype.removeFromMap = function (child) {
    this.map.delete(child);
  };

  GridLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    var measureWidth = 0;
    var measureHeight = 0;
    var width = grid_layout_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = grid_layout_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = grid_layout_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = grid_layout_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var horizontalPaddingsAndMargins = this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalPaddingsAndMargins = this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var infinityWidth = widthMode === grid_layout_common_1.layout.UNSPECIFIED;
    var infinityHeight = heightMode === grid_layout_common_1.layout.UNSPECIFIED;
    this.helper.width = Math.max(0, width - horizontalPaddingsAndMargins);
    this.helper.height = Math.max(0, height - verticalPaddingsAndMargins);
    this.helper.stretchedHorizontally = widthMode === grid_layout_common_1.layout.EXACTLY || this.horizontalAlignment === "stretch" && !infinityWidth;
    this.helper.stretchedVertically = heightMode === grid_layout_common_1.layout.EXACTLY || this.verticalAlignment === "stretch" && !infinityHeight;
    this.helper.setInfinityWidth(infinityWidth);
    this.helper.setInfinityHeight(infinityHeight);
    this.helper.clearMeasureSpecs();
    this.helper.init();
    this.eachLayoutChild(function (child, last) {
      var measureSpecs = _this.map.get(child);

      _this.updateMeasureSpecs(child, measureSpecs);

      _this.helper.addMeasureSpec(measureSpecs);
    });
    this.helper.measure();
    measureWidth = this.helper.measuredWidth + horizontalPaddingsAndMargins;
    measureHeight = this.helper.measuredHeight + verticalPaddingsAndMargins;
    measureWidth = Math.max(measureWidth, this.effectiveMinWidth);
    measureHeight = Math.max(measureHeight, this.effectiveMinHeight);
    var widthSizeAndState = grid_layout_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightSizeAndState = grid_layout_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthSizeAndState, heightSizeAndState);
  };

  GridLayout.prototype.onLayout = function (left, top, right, bottom) {
    _super.prototype.onLayout.call(this, left, top, right, bottom);

    var insets = this.getSafeAreaInsets();
    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    this.columnOffsets.length = 0;
    this.rowOffsets.length = 0;
    this.columnOffsets.push(paddingLeft);
    this.rowOffsets.push(paddingTop);
    var offset = this.columnOffsets[0];
    var roundedOffset = paddingLeft;
    var roundedLength = 0;
    var actualLength = 0;

    for (var i = 0, size = this.helper.columns.length; i < size; i++) {
      var columnGroup = this.helper.columns[i];
      offset += columnGroup.length;
      actualLength = offset - roundedOffset;
      roundedLength = Math.round(actualLength);
      columnGroup.rowOrColumn._actualLength = grid_layout_common_1.layout.round(grid_layout_common_1.layout.toDeviceIndependentPixels(roundedLength));
      roundedOffset += roundedLength;
      this.columnOffsets.push(roundedOffset);
    }

    offset = this.rowOffsets[0];
    roundedOffset = paddingTop;
    roundedLength = 0;
    actualLength = 0;

    for (var i = 0, size = this.helper.rows.length; i < size; i++) {
      var rowGroup = this.helper.rows[i];
      offset += rowGroup.length;
      actualLength = offset - roundedOffset;
      roundedLength = Math.round(actualLength);
      rowGroup.rowOrColumn._actualLength = grid_layout_common_1.layout.round(grid_layout_common_1.layout.toDeviceIndependentPixels(roundedLength));
      roundedOffset += roundedLength;
      this.rowOffsets.push(roundedOffset);
    }

    for (var i = 0, columns = this.helper.columns.length; i < columns; i++) {
      var columnGroup = this.helper.columns[i];

      for (var j = 0, children = columnGroup.children.length; j < children; j++) {
        var measureSpec = columnGroup.children[j];
        var childLeft = this.columnOffsets[measureSpec.getColumnIndex()];
        var childRight = this.columnOffsets[measureSpec.getColumnIndex() + measureSpec.getColumnSpan()];
        var childTop = this.rowOffsets[measureSpec.getRowIndex()];
        var childBottom = this.rowOffsets[measureSpec.getRowIndex() + measureSpec.getRowSpan()];
        grid_layout_common_1.View.layoutChild(this, measureSpec.child, childLeft, childTop, childRight, childBottom);
      }
    }
  };

  return GridLayout;
}(grid_layout_common_1.GridLayoutBase);

exports.GridLayout = GridLayout;

var MeasureSpecs = function () {
  function MeasureSpecs(child) {
    this._columnSpan = 1;
    this._rowSpan = 1;
    this.pixelWidth = 0;
    this.pixelHeight = 0;
    this.starColumnsCount = 0;
    this.starRowsCount = 0;
    this.autoColumnsCount = 0;
    this.autoRowsCount = 0;
    this.measured = false;
    this.columnIndex = 0;
    this.rowIndex = 0;
    this.child = child;
  }

  MeasureSpecs.prototype.getSpanned = function () {
    return this._columnSpan > 1 || this._rowSpan > 1;
  };

  MeasureSpecs.prototype.getIsStar = function () {
    return this.starRowsCount > 0 || this.starColumnsCount > 0;
  };

  MeasureSpecs.prototype.getColumnSpan = function () {
    return this._columnSpan;
  };

  MeasureSpecs.prototype.getRowSpan = function () {
    return this._rowSpan;
  };

  MeasureSpecs.prototype.setRowSpan = function (value) {
    this._rowSpan = Math.max(1, value);
  };

  MeasureSpecs.prototype.setColumnSpan = function (value) {
    this._columnSpan = Math.max(1, value);
  };

  MeasureSpecs.prototype.getRowIndex = function () {
    return this.rowIndex;
  };

  MeasureSpecs.prototype.getColumnIndex = function () {
    return this.columnIndex;
  };

  MeasureSpecs.prototype.setRowIndex = function (value) {
    this.rowIndex = value;
  };

  MeasureSpecs.prototype.setColumnIndex = function (value) {
    this.columnIndex = value;
  };

  MeasureSpecs.prototype.getRow = function () {
    return this.row;
  };

  MeasureSpecs.prototype.getColumn = function () {
    return this.column;
  };

  MeasureSpecs.prototype.setRow = function (value) {
    this.row = value;
  };

  MeasureSpecs.prototype.setColumn = function (value) {
    this.column = value;
  };

  return MeasureSpecs;
}();

var ItemGroup = function () {
  function ItemGroup(spec) {
    this.length = 0;
    this.measuredCount = 0;
    this.children = new Array();
    this.measureToFix = 0;
    this.currentMeasureToFixCount = 0;
    this.infinityLength = false;
    this.rowOrColumn = spec;
  }

  ItemGroup.prototype.setIsLengthInfinity = function (infinityLength) {
    this.infinityLength = infinityLength;
  };

  ItemGroup.prototype.init = function (density) {
    this.measuredCount = 0;
    this.currentMeasureToFixCount = 0;
    this.length = this.rowOrColumn.isAbsolute ? this.rowOrColumn.value * density : 0;
  };

  ItemGroup.prototype.getAllMeasured = function () {
    return this.measuredCount === this.children.length;
  };

  ItemGroup.prototype.getCanBeFixed = function () {
    return this.currentMeasureToFixCount === this.measureToFix;
  };

  ItemGroup.prototype.getIsAuto = function () {
    return this.rowOrColumn.isAuto || this.rowOrColumn.isStar && this.infinityLength;
  };

  ItemGroup.prototype.getIsStar = function () {
    return this.rowOrColumn.isStar && !this.infinityLength;
  };

  ItemGroup.prototype.getIsAbsolute = function () {
    return this.rowOrColumn.isAbsolute;
  };

  return ItemGroup;
}();

var MeasureHelper = function () {
  function MeasureHelper(grid) {
    this.infinity = grid_layout_common_1.layout.makeMeasureSpec(0, grid_layout_common_1.layout.UNSPECIFIED);
    this.rows = new Array();
    this.columns = new Array();
    this.width = 0;
    this.height = 0;
    this.stretchedHorizontally = false;
    this.stretchedVertically = false;
    this.infinityWidth = false;
    this.infinityHeight = false;
    this.minColumnStarValue = 0;
    this.maxColumnStarValue = 0;
    this.minRowStarValue = 0;
    this.maxRowStarValue = 0;
    this.measuredWidth = 0;
    this.measuredHeight = 0;
    this.fakeRowAdded = false;
    this.fakeColumnAdded = false;
    this.grid = grid;
    this.singleRow = new grid_layout_common_1.ItemSpec();
    this.singleColumn = new grid_layout_common_1.ItemSpec();
    this.singleRowGroup = new ItemGroup(this.singleRow);
    this.singleColumnGroup = new ItemGroup(this.singleColumn);
  }

  MeasureHelper.prototype.setInfinityWidth = function (value) {
    this.infinityWidth = value;

    for (var i = 0, size = this.columns.length; i < size; i++) {
      var columnGroup = this.columns[i];
      columnGroup.setIsLengthInfinity(value);
    }
  };

  MeasureHelper.prototype.setInfinityHeight = function (value) {
    this.infinityHeight = value;

    for (var i = 0, size = this.rows.length; i < size; i++) {
      var rowGroup = this.rows[i];
      rowGroup.setIsLengthInfinity(value);
    }
  };

  MeasureHelper.prototype.addMeasureSpec = function (measureSpec) {
    var size = measureSpec.getColumnIndex() + measureSpec.getColumnSpan();

    for (var i = measureSpec.getColumnIndex(); i < size; i++) {
      var columnGroup = this.columns[i];

      if (columnGroup.getIsAuto()) {
        measureSpec.autoColumnsCount++;
      } else if (columnGroup.getIsStar()) {
        measureSpec.starColumnsCount += columnGroup.rowOrColumn.value;
      } else if (columnGroup.getIsAbsolute()) {
        measureSpec.pixelWidth += grid_layout_common_1.layout.toDevicePixels(columnGroup.rowOrColumn.value);
      }
    }

    if (measureSpec.autoColumnsCount > 0 && measureSpec.starColumnsCount === 0) {
      for (var i = measureSpec.getColumnIndex(); i < size; i++) {
        var columnGroup = this.columns[i];

        if (columnGroup.getIsAuto()) {
          columnGroup.measureToFix++;
        }
      }
    }

    size = measureSpec.getRowIndex() + measureSpec.getRowSpan();

    for (var i = measureSpec.getRowIndex(); i < size; i++) {
      var rowGroup = this.rows[i];

      if (rowGroup.getIsAuto()) {
        measureSpec.autoRowsCount++;
      } else if (rowGroup.getIsStar()) {
        measureSpec.starRowsCount += rowGroup.rowOrColumn.value;
      } else if (rowGroup.getIsAbsolute()) {
        measureSpec.pixelHeight += grid_layout_common_1.layout.toDevicePixels(rowGroup.rowOrColumn.value);
      }
    }

    if (measureSpec.autoRowsCount > 0 && measureSpec.starRowsCount === 0) {
      for (var i = measureSpec.getRowIndex(); i < size; i++) {
        var rowGroup = this.rows[i];

        if (rowGroup.getIsAuto()) {
          rowGroup.measureToFix++;
        }
      }
    }

    this.columns[measureSpec.getColumnIndex()].children.push(measureSpec);
    this.rows[measureSpec.getRowIndex()].children.push(measureSpec);
  };

  MeasureHelper.prototype.clearMeasureSpecs = function () {
    for (var i = 0, size = this.columns.length; i < size; i++) {
      this.columns[i].children.length = 0;
    }

    for (var i = 0, size = this.rows.length; i < size; i++) {
      this.rows[i].children.length = 0;
    }
  };

  MeasureHelper.initList = function (list) {
    var density = grid_layout_common_1.layout.getDisplayDensity();

    for (var i = 0, size = list.length; i < size; i++) {
      var item = list[i];
      item.init(density);
    }
  };

  MeasureHelper.prototype.init = function () {
    var rows = this.rows.length;

    if (rows === 0) {
      this.singleRowGroup.setIsLengthInfinity(this.infinityHeight);
      this.rows.push(this.singleRowGroup);
      this.fakeRowAdded = true;
    } else if (rows > 1 && this.fakeRowAdded) {
      this.rows.splice(0, 1);
      this.fakeRowAdded = false;
    }

    var cols = this.columns.length;

    if (cols === 0) {
      this.fakeColumnAdded = true;
      this.singleColumnGroup.setIsLengthInfinity(this.infinityWidth);
      this.columns.push(this.singleColumnGroup);
    } else if (cols > 1 && this.fakeColumnAdded) {
      this.columns.splice(0, 1);
      this.fakeColumnAdded = false;
    }

    MeasureHelper.initList(this.rows);
    MeasureHelper.initList(this.columns);
    this.minColumnStarValue = -1;
    this.minRowStarValue = -1;
    this.maxColumnStarValue = -1;
    this.maxRowStarValue = -1;
  };

  MeasureHelper.prototype.itemMeasured = function (measureSpec, isFakeMeasure) {
    if (!isFakeMeasure) {
      this.columns[measureSpec.getColumnIndex()].measuredCount++;
      this.rows[measureSpec.getRowIndex()].measuredCount++;
      measureSpec.measured = true;
    }

    if (measureSpec.autoColumnsCount > 0 && measureSpec.starColumnsCount === 0) {
      var size = measureSpec.getColumnIndex() + measureSpec.getColumnSpan();

      for (var i = measureSpec.getColumnIndex(); i < size; i++) {
        var columnGroup = this.columns[i];

        if (columnGroup.getIsAuto()) {
          columnGroup.currentMeasureToFixCount++;
        }
      }
    }

    if (measureSpec.autoRowsCount > 0 && measureSpec.starRowsCount === 0) {
      var size = measureSpec.getRowIndex() + measureSpec.getRowSpan();

      for (var i = measureSpec.getRowIndex(); i < size; i++) {
        var rowGroup = this.rows[i];

        if (rowGroup.getIsAuto()) {
          rowGroup.currentMeasureToFixCount++;
        }
      }
    }
  };

  MeasureHelper.prototype.fixColumns = function () {
    var currentColumnWidth = 0;
    var columnStarCount = 0;
    var columnCount = this.columns.length;

    for (var i = 0; i < columnCount; i++) {
      var item = this.columns[i];

      if (item.rowOrColumn.isStar) {
        columnStarCount += item.rowOrColumn.value;
      } else {
        currentColumnWidth += item.length;
      }
    }

    var widthForStarColumns = Math.max(0, this.width - currentColumnWidth);
    this.maxColumnStarValue = columnStarCount > 0 ? widthForStarColumns / columnStarCount : 0;
    MeasureHelper.updateStarLength(this.columns, this.maxColumnStarValue);
  };

  MeasureHelper.prototype.fixRows = function () {
    var currentRowHeight = 0;
    var rowStarCount = 0;
    var rowCount = this.rows.length;

    for (var i = 0; i < rowCount; i++) {
      var item = this.rows[i];

      if (item.rowOrColumn.isStar) {
        rowStarCount += item.rowOrColumn.value;
      } else {
        currentRowHeight += item.length;
      }
    }

    var heightForStarRows = Math.max(0, this.height - currentRowHeight);
    this.maxRowStarValue = rowStarCount > 0 ? heightForStarRows / rowStarCount : 0;
    MeasureHelper.updateStarLength(this.rows, this.maxRowStarValue);
  };

  MeasureHelper.updateStarLength = function (list, starValue) {
    var offset = 0;
    var roundedOffset = 0;

    for (var i = 0, rowCount = list.length; i < rowCount; i++) {
      var item = list[i];

      if (item.getIsStar()) {
        offset += item.rowOrColumn.value * starValue;
        var actualLength = offset - roundedOffset;
        var roundedLength = Math.round(actualLength);
        item.length = roundedLength;
        roundedOffset += roundedLength;
      }
    }
  };

  MeasureHelper.prototype.fakeMeasure = function () {
    for (var i = 0, size = this.columns.length; i < size; i++) {
      var columnGroup = this.columns[i];

      if (columnGroup.getAllMeasured()) {
        continue;
      }

      for (var j = 0, childrenCount = columnGroup.children.length; j < childrenCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (measureSpec.starRowsCount > 0 && measureSpec.autoColumnsCount > 0 && measureSpec.starColumnsCount === 0) {
          this.measureChild(measureSpec, true);
        }
      }
    }
  };

  MeasureHelper.prototype.measureFixedColumnsNoStarRows = function () {
    for (var i = 0, size = this.columns.length; i < size; i++) {
      var columnGroup = this.columns[i];

      for (var j = 0, childrenCount = columnGroup.children.length; j < childrenCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (measureSpec.starColumnsCount > 0 && measureSpec.starRowsCount === 0) {
          this.measureChildFixedColumns(measureSpec);
        }
      }
    }
  };

  MeasureHelper.prototype.measureNoStarColumnsFixedRows = function () {
    for (var i = 0, size = this.columns.length; i < size; i++) {
      var columnGroup = this.columns[i];

      for (var j = 0, childrenCount = columnGroup.children.length; j < childrenCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (measureSpec.starRowsCount > 0 && measureSpec.starColumnsCount === 0) {
          this.measureChildFixedRows(measureSpec);
        }
      }
    }
  };

  MeasureHelper.canFix = function (list) {
    for (var i = 0, size = list.length; i < size; i++) {
      var item = list[i];

      if (!item.getCanBeFixed()) {
        return false;
      }
    }

    return true;
  };

  MeasureHelper.getMeasureLength = function (list) {
    var result = 0;

    for (var i = 0, size = list.length; i < size; i++) {
      var item = list[i];
      result += item.length;
    }

    return result;
  };

  MeasureHelper.prototype.measure = function () {
    var size = this.columns.length;

    for (var i = 0; i < size; i++) {
      var columnGroup = this.columns[i];

      for (var j = 0, childrenCount = columnGroup.children.length; j < childrenCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (measureSpec.getIsStar() || measureSpec.getSpanned()) {
          continue;
        }

        this.measureChild(measureSpec, false);
      }
    }

    for (var i = 0; i < size; i++) {
      var columnGroup = this.columns[i];

      for (var j = 0, childrenCount = columnGroup.children.length; j < childrenCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (measureSpec.getIsStar() || !measureSpec.getSpanned()) {
          continue;
        }

        this.measureChild(measureSpec, false);
      }
    }

    var fixColumns = MeasureHelper.canFix(this.columns);
    var fixRows = MeasureHelper.canFix(this.rows);

    if (fixColumns) {
      this.fixColumns();
    }

    if (fixRows) {
      this.fixRows();
    }

    if (!fixColumns && !fixRows) {
      this.fakeMeasure();
      this.fixColumns();
      this.measureFixedColumnsNoStarRows();
      this.fixRows();
    } else if (fixColumns && !fixRows) {
      this.measureFixedColumnsNoStarRows();
      this.fixRows();
    } else if (!fixColumns && fixRows) {
      this.measureNoStarColumnsFixedRows();
      this.fixColumns();
    }

    size = this.columns.length;

    for (var i = 0; i < size; i++) {
      var columnGroup = this.columns[i];

      for (var j = 0, childCount = columnGroup.children.length; j < childCount; j++) {
        var measureSpec = columnGroup.children[j];

        if (!measureSpec.measured) {
          this.measureChildFixedColumnsAndRows(measureSpec);
        }
      }
    }

    if (!this.stretchedHorizontally && this.minColumnStarValue !== -1 && this.minColumnStarValue < this.maxColumnStarValue) {
      MeasureHelper.updateStarLength(this.columns, this.minColumnStarValue);
    }

    if (!this.stretchedVertically && this.minRowStarValue !== -1 && this.minRowStarValue < this.maxRowStarValue) {
      MeasureHelper.updateStarLength(this.rows, this.minRowStarValue);
    }

    this.measuredWidth = MeasureHelper.getMeasureLength(this.columns);
    this.measuredHeight = MeasureHelper.getMeasureLength(this.rows);
  };

  MeasureHelper.prototype.measureChild = function (measureSpec, isFakeMeasure) {
    var widthMeasureSpec = measureSpec.autoColumnsCount > 0 ? this.infinity : grid_layout_common_1.layout.makeMeasureSpec(measureSpec.pixelWidth, grid_layout_common_1.layout.EXACTLY);
    var heightMeasureSpec = isFakeMeasure || measureSpec.autoRowsCount > 0 ? this.infinity : grid_layout_common_1.layout.makeMeasureSpec(measureSpec.pixelHeight, grid_layout_common_1.layout.EXACTLY);
    var childSize = grid_layout_common_1.View.measureChild(this.grid, measureSpec.child, widthMeasureSpec, heightMeasureSpec);
    var childMeasuredWidth = childSize.measuredWidth;
    var childMeasuredHeight = childSize.measuredHeight;
    var columnSpanEnd = measureSpec.getColumnIndex() + measureSpec.getColumnSpan();
    var rowSpanEnd = measureSpec.getRowIndex() + measureSpec.getRowSpan();

    if (measureSpec.autoColumnsCount > 0) {
      var remainingSpace = childMeasuredWidth;

      for (var i = measureSpec.getColumnIndex(); i < columnSpanEnd; i++) {
        var columnGroup = this.columns[i];
        remainingSpace -= columnGroup.length;
      }

      if (remainingSpace > 0) {
        var growSize = remainingSpace / measureSpec.autoColumnsCount;

        for (var i = measureSpec.getColumnIndex(); i < columnSpanEnd; i++) {
          var columnGroup = this.columns[i];

          if (columnGroup.getIsAuto()) {
            columnGroup.length += growSize;
          }
        }
      }
    }

    if (!isFakeMeasure && measureSpec.autoRowsCount > 0) {
      var remainingSpace = childMeasuredHeight;

      for (var i = measureSpec.getRowIndex(); i < rowSpanEnd; i++) {
        var rowGroup = this.rows[i];
        remainingSpace -= rowGroup.length;
      }

      if (remainingSpace > 0) {
        var growSize = remainingSpace / measureSpec.autoRowsCount;

        for (var i = measureSpec.getRowIndex(); i < rowSpanEnd; i++) {
          var rowGroup = this.rows[i];

          if (rowGroup.getIsAuto()) {
            rowGroup.length += growSize;
          }
        }
      }
    }

    this.itemMeasured(measureSpec, isFakeMeasure);
  };

  MeasureHelper.prototype.measureChildFixedColumns = function (measureSpec) {
    var columnIndex = measureSpec.getColumnIndex();
    var columnSpanEnd = columnIndex + measureSpec.getColumnSpan();
    var rowIndex = measureSpec.getRowIndex();
    var rowSpanEnd = rowIndex + measureSpec.getRowSpan();
    var measureWidth = 0;
    var growSize = 0;

    for (var i = columnIndex; i < columnSpanEnd; i++) {
      var columnGroup = this.columns[i];
      measureWidth += columnGroup.length;
    }

    var widthMeasureSpec = grid_layout_common_1.layout.makeMeasureSpec(measureWidth, this.stretchedHorizontally ? grid_layout_common_1.layout.EXACTLY : grid_layout_common_1.layout.AT_MOST);
    var heightMeasureSpec = measureSpec.autoRowsCount > 0 ? this.infinity : grid_layout_common_1.layout.makeMeasureSpec(measureSpec.pixelHeight, grid_layout_common_1.layout.EXACTLY);
    var childSize = grid_layout_common_1.View.measureChild(this.grid, measureSpec.child, widthMeasureSpec, heightMeasureSpec);
    var childMeasuredWidth = childSize.measuredWidth;
    var childMeasuredHeight = childSize.measuredHeight;
    this.updateMinColumnStarValueIfNeeded(measureSpec, childMeasuredWidth);

    if (measureSpec.autoRowsCount > 0) {
      var remainingSpace = childMeasuredHeight;

      for (var i = rowIndex; i < rowSpanEnd; i++) {
        var rowGroup = this.rows[i];
        remainingSpace -= rowGroup.length;
      }

      if (remainingSpace > 0) {
        growSize = remainingSpace / measureSpec.autoRowsCount;

        for (var i = rowIndex; i < rowSpanEnd; i++) {
          var rowGroup = this.rows[i];

          if (rowGroup.getIsAuto()) {
            rowGroup.length += growSize;
          }
        }
      }
    }

    this.itemMeasured(measureSpec, false);
  };

  MeasureHelper.prototype.measureChildFixedRows = function (measureSpec) {
    var columnIndex = measureSpec.getColumnIndex();
    var columnSpanEnd = columnIndex + measureSpec.getColumnSpan();
    var rowIndex = measureSpec.getRowIndex();
    var rowSpanEnd = rowIndex + measureSpec.getRowSpan();
    var measureHeight = 0;

    for (var i = rowIndex; i < rowSpanEnd; i++) {
      var rowGroup = this.rows[i];
      measureHeight += rowGroup.length;
    }

    var widthMeasureSpec = measureSpec.autoColumnsCount > 0 ? this.infinity : grid_layout_common_1.layout.makeMeasureSpec(measureSpec.pixelWidth, grid_layout_common_1.layout.EXACTLY);
    var heightMeasureSpec = grid_layout_common_1.layout.makeMeasureSpec(measureHeight, this.stretchedVertically ? grid_layout_common_1.layout.EXACTLY : grid_layout_common_1.layout.AT_MOST);
    var childSize = grid_layout_common_1.View.measureChild(this.grid, measureSpec.child, widthMeasureSpec, heightMeasureSpec);
    var childMeasuredWidth = childSize.measuredWidth;
    var childMeasuredHeight = childSize.measuredHeight;
    var remainingSpace = 0;
    var growSize = 0;

    if (measureSpec.autoColumnsCount > 0) {
      remainingSpace = childMeasuredWidth;

      for (var i = columnIndex; i < columnSpanEnd; i++) {
        var columnGroup = this.columns[i];
        remainingSpace -= columnGroup.length;
      }

      if (remainingSpace > 0) {
        growSize = remainingSpace / measureSpec.autoColumnsCount;

        for (var i = columnIndex; i < columnSpanEnd; i++) {
          var columnGroup = this.columns[i];

          if (columnGroup.getIsAuto()) {
            columnGroup.length += growSize;
          }
        }
      }
    }

    this.updateMinRowStarValueIfNeeded(measureSpec, childMeasuredHeight);
    this.itemMeasured(measureSpec, false);
  };

  MeasureHelper.prototype.measureChildFixedColumnsAndRows = function (measureSpec) {
    var columnIndex = measureSpec.getColumnIndex();
    var columnSpanEnd = columnIndex + measureSpec.getColumnSpan();
    var rowIndex = measureSpec.getRowIndex();
    var rowSpanEnd = rowIndex + measureSpec.getRowSpan();
    var measureWidth = 0;

    for (var i = columnIndex; i < columnSpanEnd; i++) {
      var columnGroup = this.columns[i];
      measureWidth += columnGroup.length;
    }

    var measureHeight = 0;

    for (var i = rowIndex; i < rowSpanEnd; i++) {
      var rowGroup = this.rows[i];
      measureHeight += rowGroup.length;
    }

    var widthMeasureSpec = grid_layout_common_1.layout.makeMeasureSpec(measureWidth, measureSpec.starColumnsCount > 0 && !this.stretchedHorizontally ? grid_layout_common_1.layout.AT_MOST : grid_layout_common_1.layout.EXACTLY);
    var heightMeasureSpec = grid_layout_common_1.layout.makeMeasureSpec(measureHeight, measureSpec.starRowsCount > 0 && !this.stretchedVertically ? grid_layout_common_1.layout.AT_MOST : grid_layout_common_1.layout.EXACTLY);
    var childSize = grid_layout_common_1.View.measureChild(this.grid, measureSpec.child, widthMeasureSpec, heightMeasureSpec);
    var childMeasuredWidth = childSize.measuredWidth;
    var childMeasuredHeight = childSize.measuredHeight;
    this.updateMinColumnStarValueIfNeeded(measureSpec, childMeasuredWidth);
    this.updateMinRowStarValueIfNeeded(measureSpec, childMeasuredHeight);
    this.itemMeasured(measureSpec, false);
  };

  MeasureHelper.prototype.updateMinRowStarValueIfNeeded = function (measureSpec, childMeasuredHeight) {
    if (!this.stretchedVertically && measureSpec.starRowsCount > 0) {
      var remainingSpace = childMeasuredHeight;
      var rowIndex = measureSpec.getRowIndex();
      var rowSpanEnd = rowIndex + measureSpec.getRowSpan();

      for (var i = rowIndex; i < rowSpanEnd; i++) {
        var rowGroup = this.rows[i];

        if (!rowGroup.getIsStar()) {
          remainingSpace -= rowGroup.length;
        }
      }

      if (remainingSpace > 0) {
        this.minRowStarValue = Math.max(remainingSpace / measureSpec.starRowsCount, this.minRowStarValue);
      }
    }
  };

  MeasureHelper.prototype.updateMinColumnStarValueIfNeeded = function (measureSpec, childMeasuredWidth) {
    if (!this.stretchedHorizontally && measureSpec.starColumnsCount > 0) {
      var remainingSpace = childMeasuredWidth;
      var columnIndex = measureSpec.getColumnIndex();
      var columnSpanEnd = columnIndex + measureSpec.getColumnSpan();

      for (var i = columnIndex; i < columnSpanEnd; i++) {
        var columnGroup = this.columns[i];

        if (!columnGroup.getIsStar()) {
          remainingSpace -= columnGroup.length;
        }
      }

      if (remainingSpace > 0) {
        this.minColumnStarValue = Math.max(remainingSpace / measureSpec.starColumnsCount, this.minColumnStarValue);
      }
    }
  };

  return MeasureHelper;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/layout-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var LayoutBaseCommon = function (_super) {
  __extends(LayoutBaseCommon, _super);

  function LayoutBaseCommon() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._subViews = new Array();
    return _this;
  }

  LayoutBaseCommon.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.addChild(value);
    }
  };

  LayoutBaseCommon.prototype.getChildrenCount = function () {
    return this._subViews.length;
  };

  Object.defineProperty(LayoutBaseCommon.prototype, "_childrenCount", {
    get: function () {
      return this._subViews.length;
    },
    enumerable: true,
    configurable: true
  });

  LayoutBaseCommon.prototype.getChildAt = function (index) {
    return this._subViews[index];
  };

  LayoutBaseCommon.prototype.getChildIndex = function (child) {
    return this._subViews.indexOf(child);
  };

  LayoutBaseCommon.prototype.getChildById = function (id) {
    return view_1.getViewById(this, id);
  };

  LayoutBaseCommon.prototype._registerLayoutChild = function (child) {};

  LayoutBaseCommon.prototype._unregisterLayoutChild = function (child) {};

  LayoutBaseCommon.prototype.addChild = function (child) {
    this._subViews.push(child);

    this._addView(child);

    this._registerLayoutChild(child);
  };

  LayoutBaseCommon.prototype.insertChild = function (child, atIndex) {
    this._subViews.splice(atIndex, 0, child);

    this._addView(child, atIndex);

    this._registerLayoutChild(child);
  };

  LayoutBaseCommon.prototype.removeChild = function (child) {
    this._removeView(child);

    var index = this._subViews.indexOf(child);

    this._subViews.splice(index, 1);

    this._unregisterLayoutChild(child);
  };

  LayoutBaseCommon.prototype.removeChildren = function () {
    while (this.getChildrenCount() !== 0) {
      this.removeChild(this._subViews[this.getChildrenCount() - 1]);
    }
  };

  Object.defineProperty(LayoutBaseCommon.prototype, "padding", {
    get: function () {
      return this.style.padding;
    },
    set: function (value) {
      this.style.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingTop", {
    get: function () {
      return this.style.paddingTop;
    },
    set: function (value) {
      this.style.paddingTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingRight", {
    get: function () {
      return this.style.paddingRight;
    },
    set: function (value) {
      this.style.paddingRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingBottom", {
    get: function () {
      return this.style.paddingBottom;
    },
    set: function (value) {
      this.style.paddingBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LayoutBaseCommon.prototype, "paddingLeft", {
    get: function () {
      return this.style.paddingLeft;
    },
    set: function (value) {
      this.style.paddingLeft = value;
    },
    enumerable: true,
    configurable: true
  });

  LayoutBaseCommon.prototype._childIndexToNativeChildIndex = function (index) {
    if (index === undefined) {
      return undefined;
    }

    var result = 0;

    for (var i = 0; i < index && i < this._subViews.length; i++) {
      result += this._subViews[i]._getNativeViewsCount();
    }

    return result;
  };

  LayoutBaseCommon.prototype.eachChildView = function (callback) {
    for (var i = 0, length_1 = this._subViews.length; i < length_1; i++) {
      var retVal = callback(this._subViews[i]);

      if (retVal === false) {
        break;
      }
    }
  };

  LayoutBaseCommon.prototype.eachLayoutChild = function (callback) {
    var lastChild = null;
    this.eachChildView(function (cv) {
      cv._eachLayoutView(function (lv) {
        if (lastChild && !lastChild.isCollapsed) {
          callback(lastChild, false);
        }

        lastChild = lv;
      });

      return true;
    });

    if (lastChild && !lastChild.isCollapsed) {
      callback(lastChild, true);
    }
  };

  return LayoutBaseCommon;
}(view_1.CustomLayoutView);

exports.LayoutBaseCommon = LayoutBaseCommon;
exports.clipToBoundsProperty = new view_1.Property({
  name: "clipToBounds",
  defaultValue: true,
  valueConverter: view_1.booleanConverter
});
exports.clipToBoundsProperty.register(LayoutBaseCommon);
exports.isPassThroughParentEnabledProperty = new view_1.Property({
  name: "isPassThroughParentEnabled",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.isPassThroughParentEnabledProperty.register(LayoutBaseCommon);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/layout-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base-common.js"));

var LayoutBase = function (_super) {
  __extends(LayoutBase, _super);

  function LayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  LayoutBase.prototype.addChild = function (child) {
    _super.prototype.addChild.call(this, child);

    this.requestLayout();
  };

  LayoutBase.prototype.insertChild = function (child, atIndex) {
    _super.prototype.insertChild.call(this, child, atIndex);

    this.requestLayout();
  };

  LayoutBase.prototype.removeChild = function (child) {
    _super.prototype.removeChild.call(this, child);

    this.requestLayout();
  };

  LayoutBase.prototype._setNativeClipToBounds = function () {
    if (this.clipToBounds) {
      this.nativeViewProtected.clipsToBounds = true;
    } else {
      _super.prototype._setNativeClipToBounds.call(this);
    }
  };

  LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.getDefault] = function () {
    return false;
  };

  LayoutBase.prototype[layout_base_common_1.clipToBoundsProperty.setNative] = function (value) {
    this._setNativeClipToBounds();
  };

  LayoutBase.prototype[layout_base_common_1.isPassThroughParentEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.setPassThroughParent(value);
  };

  return LayoutBase;
}(layout_base_common_1.LayoutBaseCommon);

exports.LayoutBase = LayoutBase;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var StackLayoutBase = function (_super) {
  __extends(StackLayoutBase, _super);

  function StackLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  StackLayoutBase = __decorate([layout_base_1.CSSType("StackLayout")], StackLayoutBase);
  return StackLayoutBase;
}(layout_base_1.LayoutBase);

exports.StackLayoutBase = StackLayoutBase;
StackLayoutBase.prototype.recycleNativeView = "auto";
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
  name: "orientation",
  defaultValue: "vertical",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: converter
});
exports.orientationProperty.register(StackLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var stack_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js");

var trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout-common.js"));

var StackLayout = function (_super) {
  __extends(StackLayout, _super);

  function StackLayout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._totalLength = 0;
    return _this;
  }

  StackLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    var measureWidth = 0;
    var measureHeight = 0;
    var width = stack_layout_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = stack_layout_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = stack_layout_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = stack_layout_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var isVertical = this.orientation === "vertical";
    var horizontalPaddingsAndMargins = this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalPaddingsAndMargins = this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var measureSpec;
    var mode = isVertical ? heightMode : widthMode;
    var remainingLength;

    if (mode === stack_layout_common_1.layout.UNSPECIFIED) {
      measureSpec = stack_layout_common_1.layout.UNSPECIFIED;
      remainingLength = 0;
    } else {
      measureSpec = stack_layout_common_1.layout.AT_MOST;
      remainingLength = isVertical ? height - verticalPaddingsAndMargins : width - horizontalPaddingsAndMargins;
    }

    var childMeasureSpec;

    if (isVertical) {
      var childWidth = widthMode === stack_layout_common_1.layout.UNSPECIFIED ? 0 : width - horizontalPaddingsAndMargins;
      childWidth = Math.max(0, childWidth);
      childMeasureSpec = stack_layout_common_1.layout.makeMeasureSpec(childWidth, widthMode);
    } else {
      var childHeight = heightMode === stack_layout_common_1.layout.UNSPECIFIED ? 0 : height - verticalPaddingsAndMargins;
      childHeight = Math.max(0, childHeight);
      childMeasureSpec = stack_layout_common_1.layout.makeMeasureSpec(childHeight, heightMode);
    }

    var childSize;
    this.eachLayoutChild(function (child, last) {
      if (isVertical) {
        childSize = stack_layout_common_1.View.measureChild(_this, child, childMeasureSpec, stack_layout_common_1.layout.makeMeasureSpec(remainingLength, measureSpec));

        if (measureSpec === stack_layout_common_1.layout.AT_MOST && _this.isUnsizedScrollableView(child)) {
          trace.write("Avoid using ListView or ScrollView with no explicit height set inside StackLayout. Doing so might result in poor user interface performance and poor user experience.", trace.categories.Layout, trace.messageType.warn);
        }

        measureWidth = Math.max(measureWidth, childSize.measuredWidth);
        var viewHeight = childSize.measuredHeight;
        measureHeight += viewHeight;
        remainingLength = Math.max(0, remainingLength - viewHeight);
      } else {
        childSize = stack_layout_common_1.View.measureChild(_this, child, stack_layout_common_1.layout.makeMeasureSpec(remainingLength, measureSpec), childMeasureSpec);
        measureHeight = Math.max(measureHeight, childSize.measuredHeight);
        var viewWidth = childSize.measuredWidth;
        measureWidth += viewWidth;
        remainingLength = Math.max(0, remainingLength - viewWidth);
      }
    });
    measureWidth += horizontalPaddingsAndMargins;
    measureHeight += verticalPaddingsAndMargins;
    measureWidth = Math.max(measureWidth, this.effectiveMinWidth);
    measureHeight = Math.max(measureHeight, this.effectiveMinHeight);
    this._totalLength = isVertical ? measureHeight : measureWidth;
    var widthAndState = stack_layout_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = stack_layout_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  StackLayout.prototype.onLayout = function (left, top, right, bottom) {
    _super.prototype.onLayout.call(this, left, top, right, bottom);

    var insets = this.getSafeAreaInsets();

    if (this.orientation === "vertical") {
      this.layoutVertical(left, top, right, bottom, insets);
    } else {
      this.layoutHorizontal(left, top, right, bottom, insets);
    }
  };

  StackLayout.prototype.layoutVertical = function (left, top, right, bottom, insets) {
    var _this = this;

    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectiveBorderRightWidth + this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectiveBorderBottomWidth + this.effectivePaddingBottom + insets.bottom;
    var childTop;
    var childLeft = paddingLeft;
    var childRight = right - left - paddingRight;

    switch (this.verticalAlignment) {
      case stack_layout_common_1.VerticalAlignment.MIDDLE:
        childTop = (bottom - top - this._totalLength) / 2 + paddingTop - paddingBottom;
        break;

      case stack_layout_common_1.VerticalAlignment.BOTTOM:
        childTop = bottom - top - this._totalLength + paddingTop - paddingBottom;
        break;

      case stack_layout_common_1.VerticalAlignment.TOP:
      case stack_layout_common_1.VerticalAlignment.STRETCH:
      default:
        childTop = paddingTop;
        break;
    }

    this.eachLayoutChild(function (child, last) {
      var childHeight = child.getMeasuredHeight() + child.effectiveMarginTop + child.effectiveMarginBottom;
      stack_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childRight, childTop + childHeight);
      childTop += childHeight;
    });
  };

  StackLayout.prototype.layoutHorizontal = function (left, top, right, bottom, insets) {
    var _this = this;

    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectiveBorderRightWidth + this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectiveBorderBottomWidth + this.effectivePaddingBottom + insets.bottom;
    var childTop = paddingTop;
    var childLeft;
    var childBottom = bottom - top - paddingBottom;

    switch (this.horizontalAlignment) {
      case stack_layout_common_1.HorizontalAlignment.CENTER:
        childLeft = (right - left - this._totalLength) / 2 + paddingLeft - paddingRight;
        break;

      case stack_layout_common_1.HorizontalAlignment.RIGHT:
        childLeft = right - left - this._totalLength + paddingLeft - paddingRight;
        break;

      case stack_layout_common_1.HorizontalAlignment.LEFT:
      case stack_layout_common_1.HorizontalAlignment.STRETCH:
      default:
        childLeft = paddingLeft;
        break;
    }

    this.eachLayoutChild(function (child, last) {
      var childWidth = child.getMeasuredWidth() + child.effectiveMarginLeft + child.effectiveMarginRight;
      stack_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childLeft + childWidth, childBottom);
      childLeft += childWidth;
    });
  };

  StackLayout.prototype.isUnsizedScrollableView = function (child) {
    if (child.height === "auto" && (child.ios instanceof UITableView || child.ios instanceof UIScrollView)) {
      return true;
    }

    return false;
  };

  return StackLayout;
}(stack_layout_common_1.StackLayoutBase);

exports.StackLayout = StackLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var WrapLayoutBase = function (_super) {
  __extends(WrapLayoutBase, _super);

  function WrapLayoutBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WrapLayoutBase = __decorate([layout_base_1.CSSType("WrapLayout")], WrapLayoutBase);
  return WrapLayoutBase;
}(layout_base_1.LayoutBase);

exports.WrapLayoutBase = WrapLayoutBase;
WrapLayoutBase.prototype.recycleNativeView = "auto";
exports.itemWidthProperty = new layout_base_1.Property({
  name: "itemWidth",
  defaultValue: "auto",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: function (v) {
    return layout_base_1.Length.parse(v);
  },
  valueChanged: function (target, oldValue, newValue) {
    return target.effectiveItemWidth = layout_base_1.Length.toDevicePixels(newValue, -1);
  }
});
exports.itemWidthProperty.register(WrapLayoutBase);
exports.itemHeightProperty = new layout_base_1.Property({
  name: "itemHeight",
  defaultValue: "auto",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: function (v) {
    return layout_base_1.Length.parse(v);
  },
  valueChanged: function (target, oldValue, newValue) {
    return target.effectiveItemHeight = layout_base_1.Length.toDevicePixels(newValue, -1);
  }
});
exports.itemHeightProperty.register(WrapLayoutBase);
var converter = layout_base_1.makeParser(layout_base_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new layout_base_1.Property({
  name: "orientation",
  defaultValue: "horizontal",
  affectsLayout: layout_base_1.isIOS,
  valueConverter: converter
});
exports.orientationProperty.register(WrapLayoutBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var wrap_layout_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/wrap-layout/wrap-layout-common.js"));

var WrapLayout = function (_super) {
  __extends(WrapLayout, _super);

  function WrapLayout() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._lengths = new Array();
    return _this;
  }

  WrapLayout.getChildMeasureSpec = function (parentMode, parentLength, itemLength) {
    if (itemLength > 0) {
      return wrap_layout_common_1.layout.makeMeasureSpec(itemLength, wrap_layout_common_1.layout.EXACTLY);
    } else if (parentMode === wrap_layout_common_1.layout.UNSPECIFIED) {
      return wrap_layout_common_1.layout.makeMeasureSpec(0, wrap_layout_common_1.layout.UNSPECIFIED);
    } else {
      return wrap_layout_common_1.layout.makeMeasureSpec(parentLength, wrap_layout_common_1.layout.AT_MOST);
    }
  };

  WrapLayout.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    var measureWidth = 0;
    var measureHeight = 0;
    var width = wrap_layout_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = wrap_layout_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = wrap_layout_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = wrap_layout_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var horizontalPaddingsAndMargins = this.effectivePaddingLeft + this.effectivePaddingRight + this.effectiveBorderLeftWidth + this.effectiveBorderRightWidth;
    var verticalPaddingsAndMargins = this.effectivePaddingTop + this.effectivePaddingBottom + this.effectiveBorderTopWidth + this.effectiveBorderBottomWidth;
    var availableWidth = widthMode === wrap_layout_common_1.layout.UNSPECIFIED ? Number.MAX_VALUE : width - horizontalPaddingsAndMargins;
    var availableHeight = heightMode === wrap_layout_common_1.layout.UNSPECIFIED ? Number.MAX_VALUE : height - verticalPaddingsAndMargins;
    var childWidthMeasureSpec = WrapLayout.getChildMeasureSpec(widthMode, availableWidth, this.effectiveItemWidth);
    var childHeightMeasureSpec = WrapLayout.getChildMeasureSpec(heightMode, availableHeight, this.effectiveItemHeight);
    var remainingWidth = availableWidth;
    var remainingHeight = availableHeight;
    this._lengths.length = 0;
    var rowOrColumn = 0;
    var maxLength = 0;
    var isVertical = this.orientation === "vertical";
    var useItemWidth = this.effectiveItemWidth > 0;
    var useItemHeight = this.effectiveItemHeight > 0;
    var itemWidth = this.effectiveItemWidth;
    var itemHeight = this.effectiveItemHeight;
    this.eachLayoutChild(function (child, last) {
      var desiredSize = wrap_layout_common_1.View.measureChild(_this, child, childWidthMeasureSpec, childHeightMeasureSpec);
      var childMeasuredWidth = useItemWidth ? itemWidth : desiredSize.measuredWidth;
      var childMeasuredHeight = useItemHeight ? itemHeight : desiredSize.measuredHeight;
      var isFirst = _this._lengths.length <= rowOrColumn;

      if (isVertical) {
        if (childMeasuredHeight > remainingHeight) {
          rowOrColumn++;
          maxLength = Math.max(maxLength, measureHeight);
          measureHeight = childMeasuredHeight;
          remainingHeight = availableHeight - childMeasuredHeight;
          _this._lengths[isFirst ? rowOrColumn - 1 : rowOrColumn] = childMeasuredWidth;
        } else {
          remainingHeight -= childMeasuredHeight;
          measureHeight += childMeasuredHeight;
        }
      } else {
        if (childMeasuredWidth > remainingWidth) {
          rowOrColumn++;
          maxLength = Math.max(maxLength, measureWidth);
          measureWidth = childMeasuredWidth;
          remainingWidth = availableWidth - childMeasuredWidth;
          _this._lengths[isFirst ? rowOrColumn - 1 : rowOrColumn] = childMeasuredHeight;
        } else {
          remainingWidth -= childMeasuredWidth;
          measureWidth += childMeasuredWidth;
        }
      }

      if (isFirst) {
        _this._lengths[rowOrColumn] = isVertical ? childMeasuredWidth : childMeasuredHeight;
      } else {
        _this._lengths[rowOrColumn] = Math.max(_this._lengths[rowOrColumn], isVertical ? childMeasuredWidth : childMeasuredHeight);
      }
    });

    if (isVertical) {
      measureHeight = Math.max(maxLength, measureHeight);

      this._lengths.forEach(function (value, index, array) {
        measureWidth += value;
      });
    } else {
      measureWidth = Math.max(maxLength, measureWidth);

      this._lengths.forEach(function (value, index, array) {
        measureHeight += value;
      });
    }

    measureWidth += horizontalPaddingsAndMargins;
    measureHeight += verticalPaddingsAndMargins;
    measureWidth = Math.max(measureWidth, this.effectiveMinWidth);
    measureHeight = Math.max(measureHeight, this.effectiveMinHeight);
    var widthAndState = wrap_layout_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = wrap_layout_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  WrapLayout.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    _super.prototype.onLayout.call(this, left, top, right, bottom);

    var insets = this.getSafeAreaInsets();
    var isVertical = this.orientation === "vertical";
    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectiveBorderRightWidth + this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectiveBorderBottomWidth + this.effectivePaddingBottom + insets.bottom;
    var childLeft = paddingLeft;
    var childTop = paddingTop;
    var childrenHeight = bottom - top - paddingBottom;
    var childrenWidth = right - left - paddingRight;
    var rowOrColumn = 0;
    this.eachLayoutChild(function (child, last) {
      var childHeight = child.getMeasuredHeight() + child.effectiveMarginTop + child.effectiveMarginBottom;
      var childWidth = child.getMeasuredWidth() + child.effectiveMarginLeft + child.effectiveMarginRight;
      var length = _this._lengths[rowOrColumn];

      if (isVertical) {
        childWidth = length;
        childHeight = _this.effectiveItemHeight > 0 ? _this.effectiveItemHeight : childHeight;
        var isFirst = childTop === paddingTop;

        if (childTop + childHeight > childrenHeight && childLeft + childWidth <= childrenWidth) {
          childTop = paddingTop;

          if (!isFirst) {
            childLeft += length;
          }

          rowOrColumn++;
          childWidth = _this._lengths[isFirst ? rowOrColumn - 1 : rowOrColumn];
        }

        if (childLeft < childrenWidth && childTop < childrenHeight) {
          wrap_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childLeft + childWidth, childTop + childHeight);
        }

        childTop += childHeight;
      } else {
        childWidth = _this.effectiveItemWidth > 0 ? _this.effectiveItemWidth : childWidth;
        childHeight = length;
        var isFirst = childLeft === paddingLeft;

        if (childLeft + childWidth > childrenWidth && childTop + childHeight <= childrenHeight) {
          childLeft = paddingLeft;

          if (!isFirst) {
            childTop += length;
          }

          rowOrColumn++;
          childHeight = _this._lengths[isFirst ? rowOrColumn - 1 : rowOrColumn];
        }

        if (childLeft < childrenWidth && childTop < childrenHeight) {
          wrap_layout_common_1.View.layoutChild(_this, child, childLeft, childTop, childLeft + childWidth, childTop + childHeight);
        }

        childLeft += childWidth;
      }
    });
  };

  return WrapLayout;
}(wrap_layout_common_1.WrapLayoutBase);

exports.WrapLayout = WrapLayout;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ListPickerBase = function (_super) {
  __extends(ListPickerBase, _super);

  function ListPickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPickerBase.prototype._getItemAsString = function (index) {
    var items = this.items;

    if (!items) {
      return " ";
    }

    var item = this.isItemsSource ? this.items.getItem(index) : this.items[index];
    return item === undefined || item === null ? index + "" : this.parseItem(item);
  };

  ListPickerBase.prototype.parseItem = function (item) {
    return this.textField ? item[this.textField] + "" : item + "";
  };

  ListPickerBase.prototype.updateSelectedValue = function (index) {
    var newVal = null;

    if (index >= 0) {
      var item = this.items[index];
      newVal = this.valueField ? item[this.valueField] : item;
    }

    if (this.selectedValue !== newVal) {
      this.set("selectedValue", newVal);
    }
  };

  ListPickerBase = __decorate([view_1.CSSType("ListPicker")], ListPickerBase);
  return ListPickerBase;
}(view_1.View);

exports.ListPickerBase = ListPickerBase;
ListPickerBase.prototype.recycleNativeView = "auto";
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  valueConverter: function (v) {
    return parseInt(v);
  },
  coerceValue: function (target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    target.updateSelectedValue(value);
    return value;
  }
});
exports.selectedIndexProperty.register(ListPickerBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function (target, oldValue, newValue) {
    var getItem = newValue && newValue.getItem;
    target.isItemsSource = typeof getItem === "function";
  }
});
exports.itemsProperty.register(ListPickerBase);
exports.textFieldProperty = new view_1.Property({
  name: "textField",
  defaultValue: ""
});
exports.textFieldProperty.register(ListPickerBase);
exports.valueFieldProperty = new view_1.Property({
  name: "valueField",
  defaultValue: ""
});
exports.valueFieldProperty.register(ListPickerBase);
exports.selectedValueProperty = new view_1.Property({
  name: "selectedValue",
  defaultValue: null
});
exports.selectedValueProperty.register(ListPickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-picker/list-picker.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var list_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/list-picker/list-picker-common.js"));

var ListPicker = function (_super) {
  __extends(ListPicker, _super);

  function ListPicker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPicker.prototype.createNativeView = function () {
    return UIPickerView.new();
  };

  ListPicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.dataSource = this._dataSource = ListPickerDataSource.initWithOwner(new WeakRef(this));
    this._delegate = ListPickerDelegateImpl.initWithOwner(new WeakRef(this));
  };

  ListPicker.prototype.disposeNativeView = function () {
    this._dataSource = null;
    this._delegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(ListPicker.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  ListPicker.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.ios.delegate = this._delegate;
  };

  ListPicker.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  ListPicker.prototype[list_picker_common_1.selectedIndexProperty.getDefault] = function () {
    return -1;
  };

  ListPicker.prototype[list_picker_common_1.selectedIndexProperty.setNative] = function (value) {
    if (value >= 0) {
      this.ios.selectRowInComponentAnimated(value, 0, false);
    }
  };

  ListPicker.prototype[list_picker_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  ListPicker.prototype[list_picker_common_1.itemsProperty.setNative] = function (value) {
    this.ios.reloadAllComponents();
    list_picker_common_1.selectedIndexProperty.coerce(this);
  };

  ListPicker.prototype[list_picker_common_1.backgroundColorProperty.getDefault] = function () {
    return this.ios.backgroundColor;
  };

  ListPicker.prototype[list_picker_common_1.backgroundColorProperty.setNative] = function (value) {
    this.ios.backgroundColor = value instanceof list_picker_common_1.Color ? value.ios : value;
  };

  ListPicker.prototype[list_picker_common_1.colorProperty.getDefault] = function () {
    return this.ios.tintColor;
  };

  ListPicker.prototype[list_picker_common_1.colorProperty.setNative] = function (value) {
    this.ios.tintColor = value instanceof list_picker_common_1.Color ? value.ios : value;
  };

  __decorate([profiling_1.profile], ListPicker.prototype, "onLoaded", null);

  return ListPicker;
}(list_picker_common_1.ListPickerBase);

exports.ListPicker = ListPicker;

var ListPickerDataSource = function (_super) {
  __extends(ListPickerDataSource, _super);

  function ListPickerDataSource() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPickerDataSource.initWithOwner = function (owner) {
    var dataSource = ListPickerDataSource.new();
    dataSource._owner = owner;
    return dataSource;
  };

  ListPickerDataSource.prototype.numberOfComponentsInPickerView = function (pickerView) {
    return 1;
  };

  ListPickerDataSource.prototype.pickerViewNumberOfRowsInComponent = function (pickerView, component) {
    var owner = this._owner.get();

    return owner && owner.items ? owner.items.length : 0;
  };

  ListPickerDataSource.ObjCProtocols = [UIPickerViewDataSource];
  return ListPickerDataSource;
}(NSObject);

var ListPickerDelegateImpl = function (_super) {
  __extends(ListPickerDelegateImpl, _super);

  function ListPickerDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListPickerDelegateImpl.initWithOwner = function (owner) {
    var delegate = ListPickerDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  ListPickerDelegateImpl.prototype.pickerViewAttributedTitleForRowForComponent = function (pickerView, row, component) {
    var _a, _b;

    var owner = this._owner.get();

    if (owner) {
      var title = NSAttributedString.alloc().initWithStringAttributes(owner._getItemAsString(row), (_a = {}, _a[NSForegroundColorAttributeName] = pickerView.tintColor, _a));
      return title;
    }

    return NSAttributedString.alloc().initWithStringAttributes(row.toString(), (_b = {}, _b[NSForegroundColorAttributeName] = pickerView.tintColor, _b));
  };

  ListPickerDelegateImpl.prototype.pickerViewDidSelectRowInComponent = function (pickerView, row, component) {
    var owner = this._owner.get();

    if (owner) {
      list_picker_common_1.selectedIndexProperty.nativeValueChange(owner, row);
      owner.updateSelectedValue(row);
    }
  };

  ListPickerDelegateImpl.ObjCProtocols = [UIPickerViewDelegate];
  return ListPickerDelegateImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-view/list-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var label_1 = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var knownTemplates;

(function (knownTemplates) {
  knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));

var knownMultiTemplates;

(function (knownMultiTemplates) {
  knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));

var autoEffectiveRowHeight = -1;

var ListViewBase = function (_super) {
  __extends(ListViewBase, _super);

  function ListViewBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._itemIdGenerator = function (_item, index) {
      return index;
    };

    _this._itemTemplateSelectorBindable = new label_1.Label();
    _this._defaultTemplate = {
      key: "default",
      createView: function () {
        if (_this.itemTemplate) {
          return builder_1.parse(_this.itemTemplate, _this);
        }

        return undefined;
      }
    };
    _this._itemTemplatesInternal = new Array(_this._defaultTemplate);
    _this._effectiveRowHeight = autoEffectiveRowHeight;
    return _this;
  }

  Object.defineProperty(ListViewBase.prototype, "separatorColor", {
    get: function () {
      return this.style.separatorColor;
    },
    set: function (value) {
      this.style.separatorColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ListViewBase.prototype, "itemTemplateSelector", {
    get: function () {
      return this._itemTemplateSelector;
    },
    set: function (value) {
      var _this = this;

      if (typeof value === "string") {
        this._itemTemplateSelectorBindable.bind({
          sourceProperty: null,
          targetProperty: "templateKey",
          expression: value
        });

        this._itemTemplateSelector = function (item, index, items) {
          item["$index"] = index;

          if (_this._itemTemplateSelectorBindable.bindingContext === item) {
            _this._itemTemplateSelectorBindable.bindingContext = null;
          }

          _this._itemTemplateSelectorBindable.bindingContext = item;
          return _this._itemTemplateSelectorBindable.get("templateKey");
        };
      } else if (typeof value === "function") {
        this._itemTemplateSelector = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ListViewBase.prototype, "itemIdGenerator", {
    get: function () {
      return this._itemIdGenerator;
    },
    set: function (generatorFn) {
      this._itemIdGenerator = generatorFn;
    },
    enumerable: true,
    configurable: true
  });

  ListViewBase.prototype.refresh = function () {};

  ListViewBase.prototype.scrollToIndex = function (index) {};

  ListViewBase.prototype.scrollToIndexAnimated = function (index) {};

  ListViewBase.prototype._getItemTemplate = function (index) {
    var templateKey = "default";

    if (this.itemTemplateSelector) {
      var dataItem = this._getDataItem(index);

      templateKey = this._itemTemplateSelector(dataItem, index, this.items);
    }

    for (var i = 0, length_1 = this._itemTemplatesInternal.length; i < length_1; i++) {
      if (this._itemTemplatesInternal[i].key === templateKey) {
        return this._itemTemplatesInternal[i];
      }
    }

    return this._itemTemplatesInternal[0];
  };

  ListViewBase.prototype._prepareItem = function (item, index) {
    if (item) {
      item.bindingContext = this._getDataItem(index);
    }
  };

  ListViewBase.prototype._getDataItem = function (index) {
    var thisItems = this.items;
    return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
  };

  ListViewBase.prototype._getDefaultItemContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: "text",
      sourceProperty: "$value"
    });
    return lbl;
  };

  ListViewBase.prototype._onItemsChanged = function (args) {
    this.refresh();
  };

  ListViewBase.prototype._onRowHeightPropertyChanged = function (oldValue, newValue) {
    this.refresh();
  };

  ListViewBase.prototype.isItemAtIndexVisible = function (index) {
    return false;
  };

  ListViewBase.prototype.updateEffectiveRowHeight = function () {
    exports.rowHeightProperty.coerce(this);
  };

  ListViewBase.itemLoadingEvent = "itemLoading";
  ListViewBase.itemTapEvent = "itemTap";
  ListViewBase.loadMoreItemsEvent = "loadMoreItems";
  ListViewBase.knownFunctions = ["itemTemplateSelector", "itemIdGenerator"];
  ListViewBase = __decorate([view_1.CSSType("ListView")], ListViewBase);
  return ListViewBase;
}(view_1.ContainerView);

exports.ListViewBase = ListViewBase;
ListViewBase.prototype.recycleNativeView = "auto";
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function (target, oldValue, newValue) {
    if (oldValue instanceof view_1.Observable) {
      weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    if (newValue instanceof view_1.Observable) {
      weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    target.refresh();
  }
});
exports.itemsProperty.register(ListViewBase);
exports.itemTemplateProperty = new view_1.Property({
  name: "itemTemplate",
  valueChanged: function (target) {
    target.refresh();
  }
});
exports.itemTemplateProperty.register(ListViewBase);
exports.itemTemplatesProperty = new view_1.Property({
  name: "itemTemplates",
  valueConverter: function (value) {
    if (typeof value === "string") {
      return builder_1.parseMultipleTemplates(value);
    }

    return value;
  }
});
exports.itemTemplatesProperty.register(ListViewBase);
var defaultRowHeight = "auto";
exports.rowHeightProperty = new view_1.CoercibleProperty({
  name: "rowHeight",
  defaultValue: defaultRowHeight,
  equalityComparer: view_1.Length.equals,
  coerceValue: function (target, value) {
    return target.nativeViewProtected ? value : defaultRowHeight;
  },
  valueChanged: function (target, oldValue, newValue) {
    target._effectiveRowHeight = view_1.Length.toDevicePixels(newValue, autoEffectiveRowHeight);

    target._onRowHeightPropertyChanged(oldValue, newValue);
  },
  valueConverter: view_1.Length.parse
});
exports.rowHeightProperty.register(ListViewBase);
exports.iosEstimatedRowHeightProperty = new view_1.Property({
  name: "iosEstimatedRowHeight",
  valueConverter: function (v) {
    return view_1.Length.parse(v);
  }
});
exports.iosEstimatedRowHeightProperty.register(ListViewBase);
exports.separatorColorProperty = new view_1.CssProperty({
  name: "separatorColor",
  cssName: "separator-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.separatorColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/list-view/list-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var list_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view-common.js");

var stack_layout_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");

var proxy_view_container_1 = __webpack_require__("../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var trace = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/list-view/list-view-common.js"));

var ITEMLOADING = list_view_common_1.ListViewBase.itemLoadingEvent;
var LOADMOREITEMS = list_view_common_1.ListViewBase.loadMoreItemsEvent;
var ITEMTAP = list_view_common_1.ListViewBase.itemTapEvent;
var DEFAULT_HEIGHT = 44;
var infinity = list_view_common_1.layout.makeMeasureSpec(0, list_view_common_1.layout.UNSPECIFIED);

var ListViewCell = function (_super) {
  __extends(ListViewCell, _super);

  function ListViewCell() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ListViewCell.initWithEmptyBackground = function () {
    var cell = ListViewCell.new();
    cell.backgroundColor = null;
    return cell;
  };

  ListViewCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
    var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);

    cell.backgroundColor = null;
    return cell;
  };

  ListViewCell.prototype.willMoveToSuperview = function (newSuperview) {
    var parent = this.view ? this.view.parent : null;

    if (parent && !newSuperview) {
      parent._removeContainer(this);
    }
  };

  Object.defineProperty(ListViewCell.prototype, "view", {
    get: function () {
      return this.owner ? this.owner.get() : null;
    },
    enumerable: true,
    configurable: true
  });
  return ListViewCell;
}(UITableViewCell);

function notifyForItemAtIndex(listView, cell, view, eventName, indexPath) {
  var args = {
    eventName: eventName,
    object: listView,
    index: indexPath.row,
    view: view,
    ios: cell,
    android: undefined
  };
  listView.notify(args);
  return args;
}

var DataSource = function (_super) {
  __extends(DataSource, _super);

  function DataSource() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  DataSource.initWithOwner = function (owner) {
    var dataSource = DataSource.new();
    dataSource._owner = owner;
    return dataSource;
  };

  DataSource.prototype.tableViewNumberOfRowsInSection = function (tableView, section) {
    var owner = this._owner.get();

    return owner && owner.items ? owner.items.length : 0;
  };

  DataSource.prototype.tableViewCellForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    var cell;

    if (owner) {
      var template = owner._getItemTemplate(indexPath.row);

      cell = tableView.dequeueReusableCellWithIdentifier(template.key) || ListViewCell.initWithEmptyBackground();

      owner._prepareCell(cell, indexPath);

      var cellView = cell.view;

      if (cellView && cellView.isLayoutRequired) {
        var width = list_view_common_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
        var rowHeight = owner._effectiveRowHeight;
        var cellHeight = rowHeight > 0 ? rowHeight : owner.getHeight(indexPath.row);
        cellView.iosOverflowSafeAreaEnabled = false;
        list_view_common_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight);
      }
    } else {
      cell = ListViewCell.initWithEmptyBackground();
    }

    return cell;
  };

  DataSource.ObjCProtocols = [UITableViewDataSource];
  return DataSource;
}(NSObject);

var UITableViewDelegateImpl = function (_super) {
  __extends(UITableViewDelegateImpl, _super);

  function UITableViewDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITableViewDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITableViewDelegateImpl.new();
    delegate._owner = owner;
    delegate._measureCellMap = new Map();
    return delegate;
  };

  UITableViewDelegateImpl.prototype.tableViewWillDisplayCellForRowAtIndexPath = function (tableView, cell, indexPath) {
    var owner = this._owner.get();

    if (owner && indexPath.row === owner.items.length - 1) {
      owner.notify({
        eventName: LOADMOREITEMS,
        object: owner
      });
    }
  };

  UITableViewDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
    var cell = tableView.cellForRowAtIndexPath(indexPath);

    var owner = this._owner.get();

    if (owner) {
      notifyForItemAtIndex(owner, cell, cell.view, ITEMTAP, indexPath);
    }

    return indexPath;
  };

  UITableViewDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
    tableView.deselectRowAtIndexPathAnimated(indexPath, true);
    return indexPath;
  };

  UITableViewDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    if (!owner) {
      return tableView.estimatedRowHeight;
    }

    var height = owner.getHeight(indexPath.row);

    if (height === undefined) {
      var template = owner._getItemTemplate(indexPath.row);

      var cell = this._measureCellMap.get(template.key);

      if (!cell) {
        cell = tableView.dequeueReusableCellWithIdentifier(template.key) || ListViewCell.initWithEmptyBackground();

        this._measureCellMap.set(template.key, cell);
      }

      height = owner._prepareCell(cell, indexPath);
    }

    return list_view_common_1.layout.toDeviceIndependentPixels(height);
  };

  UITableViewDelegateImpl.ObjCProtocols = [UITableViewDelegate];
  return UITableViewDelegateImpl;
}(NSObject);

var UITableViewRowHeightDelegateImpl = function (_super) {
  __extends(UITableViewRowHeightDelegateImpl, _super);

  function UITableViewRowHeightDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITableViewRowHeightDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITableViewRowHeightDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewWillDisplayCellForRowAtIndexPath = function (tableView, cell, indexPath) {
    var owner = this._owner.get();

    if (owner && indexPath.row === owner.items.length - 1) {
      owner.notify({
        eventName: LOADMOREITEMS,
        object: owner
      });
    }
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
    var cell = tableView.cellForRowAtIndexPath(indexPath);

    var owner = this._owner.get();

    if (owner) {
      notifyForItemAtIndex(owner, cell, cell.view, ITEMTAP, indexPath);
    }

    return indexPath;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
    tableView.deselectRowAtIndexPathAnimated(indexPath, true);
    return indexPath;
  };

  UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
    var owner = this._owner.get();

    if (!owner) {
      return tableView.estimatedRowHeight;
    }

    return list_view_common_1.layout.toDeviceIndependentPixels(owner._effectiveRowHeight);
  };

  UITableViewRowHeightDelegateImpl.ObjCProtocols = [UITableViewDelegate];
  return UITableViewRowHeightDelegateImpl;
}(NSObject);

var ListView = function (_super) {
  __extends(ListView, _super);

  function ListView() {
    var _this = _super.call(this) || this;

    _this.widthMeasureSpec = 0;
    _this._map = new Map();
    _this._heights = new Array();
    return _this;
  }

  ListView.prototype.createNativeView = function () {
    return UITableView.new();
  };

  ListView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.registerClassForCellReuseIdentifier(ListViewCell.class(), this._defaultTemplate.key);
    nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
    nativeView.rowHeight = UITableViewAutomaticDimension;
    nativeView.dataSource = this._dataSource = DataSource.initWithOwner(new WeakRef(this));
    this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));

    this._setNativeClipToBounds();
  };

  ListView.prototype.disposeNativeView = function () {
    this._delegate = null;
    this._dataSource = null;

    _super.prototype.disposeNativeView.call(this);
  };

  ListView.prototype._setNativeClipToBounds = function () {
    this.ios.clipsToBounds = true;
  };

  ListView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    if (this._isDataDirty) {
      this.refresh();
    }

    this.ios.delegate = this._delegate;
  };

  ListView.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Object.defineProperty(ListView.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ListView.prototype, "_childrenCount", {
    get: function () {
      return this._map.size;
    },
    enumerable: true,
    configurable: true
  });

  ListView.prototype.eachChildView = function (callback) {
    this._map.forEach(function (view, key) {
      callback(view);
    });
  };

  ListView.prototype.scrollToIndex = function (index) {
    this._scrollToIndex(index, false);
  };

  ListView.prototype.scrollToIndexAnimated = function (index) {
    this._scrollToIndex(index);
  };

  ListView.prototype._scrollToIndex = function (index, animated) {
    if (animated === void 0) {
      animated = true;
    }

    if (!this.ios) {
      return;
    }

    var itemsLength = this.items ? this.items.length : 0;

    if (itemsLength > 0) {
      if (index < 0) {
        index = 0;
      } else if (index >= itemsLength) {
        index = itemsLength - 1;
      }

      this.ios.scrollToRowAtIndexPathAtScrollPositionAnimated(NSIndexPath.indexPathForItemInSection(index, 0), 1, animated);
    } else if (trace.isEnabled()) {
      trace.write("Cannot scroll listview to index " + index + " when listview items not set", trace.categories.Binding);
    }
  };

  ListView.prototype.refresh = function () {
    this._map.forEach(function (view, nativeView, map) {
      if (!(view.bindingContext instanceof list_view_common_1.Observable)) {
        view.bindingContext = null;
      }
    });

    if (this.isLoaded) {
      this.ios.reloadData();
      this.requestLayout();
      this._isDataDirty = false;
    } else {
      this._isDataDirty = true;
    }
  };

  ListView.prototype.isItemAtIndexVisible = function (itemIndex) {
    var indexes = Array.from(this.ios.indexPathsForVisibleRows);
    return indexes.some(function (visIndex) {
      return visIndex.row === itemIndex;
    });
  };

  ListView.prototype.getHeight = function (index) {
    return this._heights[index];
  };

  ListView.prototype.setHeight = function (index, value) {
    this._heights[index] = value;
  };

  ListView.prototype._onRowHeightPropertyChanged = function (oldValue, newValue) {
    var value = list_view_common_1.layout.toDeviceIndependentPixels(this._effectiveRowHeight);
    var nativeView = this.ios;

    if (value < 0) {
      nativeView.rowHeight = UITableViewAutomaticDimension;
      nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
      this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
    } else {
      nativeView.rowHeight = value;
      nativeView.estimatedRowHeight = value;
      this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
    }

    if (this.isLoaded) {
      nativeView.delegate = this._delegate;
    }

    _super.prototype._onRowHeightPropertyChanged.call(this, oldValue, newValue);
  };

  ListView.prototype.requestLayout = function () {
    if (!this._preparingCell) {
      _super.prototype.requestLayout.call(this);
    }
  };

  ListView.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
    this.widthMeasureSpec = widthMeasureSpec;

    var changed = this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);

    _super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);

    if (changed) {
      this.ios.reloadData();
    }
  };

  ListView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var _this = this;

    _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);

    this._map.forEach(function (childView, listViewCell) {
      list_view_common_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
    });
  };

  ListView.prototype.onLayout = function (left, top, right, bottom) {
    var _this = this;

    _super.prototype.onLayout.call(this, left, top, right, bottom);

    this._map.forEach(function (childView, listViewCell) {
      var rowHeight = _this._effectiveRowHeight;
      var cellHeight = rowHeight > 0 ? rowHeight : _this.getHeight(childView._listViewItemIndex);

      if (cellHeight) {
        var width = list_view_common_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
        childView.iosOverflowSafeAreaEnabled = false;
        list_view_common_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
      }
    });
  };

  ListView.prototype._layoutCell = function (cellView, indexPath) {
    if (cellView) {
      var rowHeight = this._effectiveRowHeight;
      var heightMeasureSpec = rowHeight >= 0 ? list_view_common_1.layout.makeMeasureSpec(rowHeight, list_view_common_1.layout.EXACTLY) : infinity;
      var measuredSize = list_view_common_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
      var height = measuredSize.measuredHeight;
      this.setHeight(indexPath.row, height);
      return height;
    }

    return this.ios.estimatedRowHeight;
  };

  ListView.prototype._prepareCell = function (cell, indexPath) {
    var cellHeight;

    try {
      this._preparingCell = true;
      var view = cell.view;

      if (!view) {
        view = this._getItemTemplate(indexPath.row).createView();
      }

      var args = notifyForItemAtIndex(this, cell, view, ITEMLOADING, indexPath);
      view = args.view || this._getDefaultItemContent(indexPath.row);

      if (view instanceof proxy_view_container_1.ProxyViewContainer) {
        var sp = new stack_layout_1.StackLayout();
        sp.addChild(view);
        view = sp;
      }

      if (!cell.view) {
        cell.owner = new WeakRef(view);
      } else if (cell.view !== view) {
        this._removeContainer(cell);

        cell.view.nativeViewProtected.removeFromSuperview();
        cell.owner = new WeakRef(view);
      }

      this._prepareItem(view, indexPath.row);

      view._listViewItemIndex = indexPath.row;

      this._map.set(cell, view);

      if (view && !view.parent) {
        this._addView(view);

        cell.contentView.addSubview(view.nativeViewProtected);
      }

      cellHeight = this._layoutCell(view, indexPath);
    } finally {
      this._preparingCell = false;
    }

    return cellHeight;
  };

  ListView.prototype._removeContainer = function (cell) {
    var view = cell.view;

    if (!(view.parent instanceof ListView)) {
      this._removeView(view.parent);
    }

    var preparing = this._preparingCell;
    this._preparingCell = true;

    view.parent._removeView(view);

    view._listViewItemIndex = undefined;
    this._preparingCell = preparing;

    this._map.delete(cell);
  };

  ListView.prototype[list_view_common_1.separatorColorProperty.getDefault] = function () {
    return this.ios.separatorColor;
  };

  ListView.prototype[list_view_common_1.separatorColorProperty.setNative] = function (value) {
    this.ios.separatorColor = value instanceof list_view_common_1.Color ? value.ios : value;
  };

  ListView.prototype[list_view_common_1.itemTemplatesProperty.getDefault] = function () {
    return null;
  };

  ListView.prototype[list_view_common_1.itemTemplatesProperty.setNative] = function (value) {
    this._itemTemplatesInternal = new Array(this._defaultTemplate);

    if (value) {
      for (var i = 0, length_1 = value.length; i < length_1; i++) {
        this.ios.registerClassForCellReuseIdentifier(ListViewCell.class(), value[i].key);
      }

      this._itemTemplatesInternal = this._itemTemplatesInternal.concat(value);
    }

    this.refresh();
  };

  ListView.prototype[list_view_common_1.iosEstimatedRowHeightProperty.getDefault] = function () {
    return DEFAULT_HEIGHT;
  };

  ListView.prototype[list_view_common_1.iosEstimatedRowHeightProperty.setNative] = function (value) {
    var nativeView = this.ios;
    var estimatedHeight = list_view_common_1.Length.toDevicePixels(value, 0);
    nativeView.estimatedRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
  };

  __decorate([profiling_1.profile], ListView.prototype, "onLoaded", null);

  return ListView;
}(list_view_common_1.ListViewBase);

exports.ListView = ListView;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/page/page-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var action_bar_1 = __webpack_require__("../node_modules/tns-core-modules/ui/action-bar/action-bar.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js"));

var PageBase = function (_super) {
  __extends(PageBase, _super);

  function PageBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  PageBase_1 = PageBase;
  Object.defineProperty(PageBase.prototype, "navigationContext", {
    get: function () {
      return this._navigationContext;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "actionBar", {
    get: function () {
      if (!this._actionBar) {
        this.hasActionBar = true;
        this._actionBar = new action_bar_1.ActionBar();

        this._addView(this._actionBar);
      }

      return this._actionBar;
    },
    set: function (value) {
      if (!value) {
        throw new Error("ActionBar cannot be null or undefined.");
      }

      if (this._actionBar !== value) {
        if (this._actionBar) {
          this._removeView(this._actionBar);
        }

        this.hasActionBar = true;
        this._actionBar = value;

        this._addView(this._actionBar);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "statusBarStyle", {
    get: function () {
      return this.style.statusBarStyle;
    },
    set: function (value) {
      this.style.statusBarStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "androidStatusBarBackground", {
    get: function () {
      return this.style.androidStatusBarBackground;
    },
    set: function (value) {
      this.style.androidStatusBarBackground = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PageBase.prototype, "page", {
    get: function () {
      return this;
    },
    enumerable: true,
    configurable: true
  });

  PageBase.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof action_bar_1.ActionBar) {
      this.actionBar = value;
    } else {
      _super.prototype._addChildFromBuilder.call(this, name, value);
    }
  };

  PageBase.prototype.getKeyframeAnimationWithName = function (animationName) {
    return this._styleScope.getKeyframeAnimationWithName(animationName);
  };

  Object.defineProperty(PageBase.prototype, "frame", {
    get: function () {
      var frame = this.parent;
      return frame instanceof frame_1.Frame ? frame : undefined;
    },
    enumerable: true,
    configurable: true
  });

  PageBase.prototype.createNavigatedData = function (eventName, isBackNavigation) {
    return {
      eventName: eventName,
      object: this,
      context: this.navigationContext,
      isBackNavigation: isBackNavigation
    };
  };

  PageBase.prototype.onNavigatingTo = function (context, isBackNavigation, bindingContext) {
    this._navigationContext = context;

    if (isBackNavigation && this._styleScope) {
      this._styleScope.ensureSelectors();

      if (!this._cssState.isSelectorsLatestVersionApplied()) {
        this._onCssStateChange();
      }
    }

    if (!isBackNavigation && bindingContext !== undefined && bindingContext !== null) {
      this.bindingContext = bindingContext;
    }

    this.notify(this.createNavigatedData(PageBase_1.navigatingToEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatedTo = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatedToEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatingFrom = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatingFromEvent, isBackNavigation));
  };

  PageBase.prototype.onNavigatedFrom = function (isBackNavigation) {
    this.notify(this.createNavigatedData(PageBase_1.navigatedFromEvent, isBackNavigation));
    this._navigationContext = undefined;
  };

  PageBase.prototype.eachChildView = function (callback) {
    _super.prototype.eachChildView.call(this, callback);

    if (this.actionBar) {
      callback(this.actionBar);
    }
  };

  Object.defineProperty(PageBase.prototype, "_childrenCount", {
    get: function () {
      return (this.content ? 1 : 0) + (this._actionBar ? 1 : 0);
    },
    enumerable: true,
    configurable: true
  });
  var PageBase_1;
  PageBase.navigatingToEvent = "navigatingTo";
  PageBase.navigatedToEvent = "navigatedTo";
  PageBase.navigatingFromEvent = "navigatingFrom";
  PageBase.navigatedFromEvent = "navigatedFrom";

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatingTo", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatedTo", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatingFrom", null);

  __decorate([profiling_1.profile], PageBase.prototype, "onNavigatedFrom", null);

  PageBase = PageBase_1 = __decorate([content_view_1.CSSType("Page")], PageBase);
  return PageBase;
}(content_view_1.ContentView);

exports.PageBase = PageBase;
PageBase.prototype.recycleNativeView = "never";
exports.actionBarHiddenProperty = new content_view_1.Property({
  name: "actionBarHidden",
  affectsLayout: content_view_1.isIOS,
  valueConverter: content_view_1.booleanConverter
});
exports.actionBarHiddenProperty.register(PageBase);
exports.backgroundSpanUnderStatusBarProperty = new content_view_1.Property({
  name: "backgroundSpanUnderStatusBar",
  defaultValue: false,
  affectsLayout: content_view_1.isIOS,
  valueConverter: content_view_1.booleanConverter
});
exports.backgroundSpanUnderStatusBarProperty.register(PageBase);
exports.enableSwipeBackNavigationProperty = new content_view_1.Property({
  name: "enableSwipeBackNavigation",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.enableSwipeBackNavigationProperty.register(PageBase);
exports.statusBarStyleProperty = new content_view_1.CssProperty({
  name: "statusBarStyle",
  cssName: "status-bar-style"
});
exports.statusBarStyleProperty.register(content_view_1.Style);
exports.androidStatusBarBackgroundProperty = new content_view_1.CssProperty({
  name: "androidStatusBarBackground",
  cssName: "android-status-bar-background",
  equalityComparer: content_view_1.Color.equals,
  valueConverter: function (v) {
    return new content_view_1.Color(v);
  }
});
exports.androidStatusBarBackgroundProperty.register(content_view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/page/page.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var page_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/page/page-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/page/page-common.js"));

var ENTRY = "_entry";
var DELEGATE = "_delegate";
var majorVersion = utils_1.ios.MajorVersion;

function isBackNavigationTo(page, entry) {
  var frame = page.frame;

  if (!frame) {
    return false;
  }

  if (frame.navigationQueueIsEmpty()) {
    return true;
  } else {
    var navigationQueue = frame._navigationQueue;

    for (var i = 0; i < navigationQueue.length; i++) {
      if (navigationQueue[i].entry === entry) {
        return navigationQueue[i].isBackNavigation;
      }
    }
  }

  return false;
}

function isBackNavigationFrom(controller, page) {
  if (!page.frame) {
    return false;
  }

  if (controller.isBackstackCleared || controller.isBackstackSkipped) {
    return false;
  }

  if (controller.navigationController && controller.navigationController.viewControllers.containsObject(controller)) {
    return false;
  }

  return true;
}

var UIViewControllerImpl = function (_super) {
  __extends(UIViewControllerImpl, _super);

  function UIViewControllerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIViewControllerImpl.initWithOwner = function (owner) {
    var controller = UIViewControllerImpl.new();
    controller._owner = owner;
    return controller;
  };

  UIViewControllerImpl.prototype.viewWillAppear = function (animated) {
    _super.prototype.viewWillAppear.call(this, animated);

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    var frame = this.navigationController ? this.navigationController.owner : null;
    var newEntry = this[ENTRY];

    if (!owner._presentedViewController && newEntry && (!frame || frame.currentPage !== owner)) {
      var isBack = isBackNavigationTo(owner, newEntry);
      owner.onNavigatingTo(newEntry.entry.context, isBack, newEntry.entry.bindingContext);
    }

    if (frame) {
      if (!owner.parent) {
        owner._frame = frame;

        if (!frame._styleScope) {
          owner._updateStyleScope();
        }

        frame._addView(owner);
      } else if (owner.parent !== frame) {
        throw new Error("Page is already shown on another frame.");
      }

      frame._updateActionBar(owner);
    }

    this.extendedLayoutIncludesOpaqueBars = true;
    view_1.ios.updateAutoAdjustScrollInsets(this, owner);

    if (!owner.isLoaded) {
      owner.callLoaded();
    }
  };

  UIViewControllerImpl.prototype.viewDidAppear = function (animated) {
    _super.prototype.viewDidAppear.call(this, animated);

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    var navigationController = this.navigationController;
    var frame = navigationController ? navigationController.owner : null;

    if (!owner._presentedViewController && frame) {
      var newEntry = this[ENTRY];
      var isBack = void 0;

      if (frame.currentPage === owner && frame._navigationQueue.length === 0) {
        isBack = false;
      } else {
        isBack = isBackNavigationTo(owner, newEntry);
      }

      frame.setCurrent(newEntry, isBack);
      frame.ios.controller.delegate = this[DELEGATE];

      frame._processNavigationQueue(owner);

      if (frame.canGoBack()) {
        navigationController.interactivePopGestureRecognizer.delegate = navigationController;
        navigationController.interactivePopGestureRecognizer.enabled = owner.enableSwipeBackNavigation;
      } else {
        navigationController.interactivePopGestureRecognizer.enabled = false;
      }
    }

    if (!this.presentedViewController) {
      owner._presentedViewController = null;
    }
  };

  UIViewControllerImpl.prototype.viewWillDisappear = function (animated) {
    _super.prototype.viewWillDisappear.call(this, animated);

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    if (!owner._presentedViewController) {
      owner._presentedViewController = this.presentedViewController;
    }

    var frame = owner.frame;
    var tab = this.tabBarController;

    if (owner.onNavigatingFrom && !owner._presentedViewController && !this.presentingViewController && frame && frame.currentPage === owner) {
      var willSelectViewController = tab && tab._willSelectViewController;

      if (!willSelectViewController || willSelectViewController === tab.selectedViewController) {
        var isBack = isBackNavigationFrom(this, owner);
        owner.onNavigatingFrom(isBack);
      }
    }
  };

  UIViewControllerImpl.prototype.viewDidDisappear = function (animated) {
    _super.prototype.viewDidDisappear.call(this, animated);

    var page = this._owner.get();

    if (!page || page.modal || page._presentedViewController) {
      return;
    }

    if (page.isLoaded) {
      page.callUnloaded();
    }
  };

  UIViewControllerImpl.prototype.viewWillLayoutSubviews = function () {
    _super.prototype.viewWillLayoutSubviews.call(this);

    var owner = this._owner.get();

    if (owner) {
      view_1.ios.updateConstraints(this, owner);
    }
  };

  UIViewControllerImpl.prototype.viewDidLayoutSubviews = function () {
    _super.prototype.viewDidLayoutSubviews.call(this);

    var owner = this._owner.get();

    if (owner) {
      if (majorVersion >= 11) {
        var frame = owner.parent;
        var frameParent = frame && frame.parent;

        while (frameParent && !frameParent.nativeViewProtected) {
          frameParent = frameParent.parent;
        }

        if (frameParent) {
          var parentPageInsetsTop = frameParent.nativeViewProtected.safeAreaInsets.top;
          var currentInsetsTop = this.view.safeAreaInsets.top;
          var additionalInsetsTop = Math.max(parentPageInsetsTop - currentInsetsTop, 0);
          var parentPageInsetsBottom = frameParent.nativeViewProtected.safeAreaInsets.bottom;
          var currentInsetsBottom = this.view.safeAreaInsets.bottom;
          var additionalInsetsBottom = Math.max(parentPageInsetsBottom - currentInsetsBottom, 0);

          if (additionalInsetsTop > 0 || additionalInsetsBottom > 0) {
            var additionalInsets = new UIEdgeInsets({
              top: additionalInsetsTop,
              left: 0,
              bottom: additionalInsetsBottom,
              right: 0
            });
            this.additionalSafeAreaInsets = additionalInsets;
          }
        }
      }

      view_1.ios.layoutView(this, owner);
    }
  };

  __decorate([profiling_1.profile], UIViewControllerImpl.prototype, "viewDidAppear", null);

  __decorate([profiling_1.profile], UIViewControllerImpl.prototype, "viewWillDisappear", null);

  __decorate([profiling_1.profile], UIViewControllerImpl.prototype, "viewDidDisappear", null);

  return UIViewControllerImpl;
}(UIViewController);

var whiteColor = new page_common_1.Color("white").ios;

var Page = function (_super) {
  __extends(Page, _super);

  function Page() {
    var _this = _super.call(this) || this;

    var controller = UIViewControllerImpl.initWithOwner(new WeakRef(_this));
    _this.viewController = _this._ios = controller;
    controller.view.backgroundColor = whiteColor;
    return _this;
  }

  Page.prototype.createNativeView = function () {
    return this.viewController.view;
  };

  Object.defineProperty(Page.prototype, "ios", {
    get: function () {
      return this._ios;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Page.prototype, "frame", {
    get: function () {
      return this._frame;
    },
    enumerable: true,
    configurable: true
  });

  Page.prototype.layoutNativeView = function (left, top, right, bottom) {};

  Page.prototype._setNativeViewFrame = function (nativeView, frame) {};

  Page.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    if (this.hasActionBar) {
      this.actionBar.update();
    }
  };

  Page.prototype.updateStatusBar = function () {
    this._updateStatusBarStyle(this.statusBarStyle);
  };

  Page.prototype._updateStatusBarStyle = function (value) {
    var frame = this.frame;

    if (this.frame && value) {
      var navigationController = frame.ios.controller;
      var navigationBar = navigationController.navigationBar;
      navigationBar.barStyle = value === "dark" ? 1 : 0;
    }
  };

  Page.prototype._updateEnableSwipeBackNavigation = function (enabled) {
    var navController = this._ios.navigationController;

    if (this.frame && navController && navController.interactivePopGestureRecognizer) {
      enabled = enabled && this.frame.canGoBack();
      navController.interactivePopGestureRecognizer.enabled = enabled;
    }
  };

  Page.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = page_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = page_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = page_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = page_common_1.layout.getMeasureSpecMode(heightMeasureSpec);

    if (this.frame && this.frame._getNavBarVisible(this)) {
      var _a = this.actionBar._getActualSize,
          width_1 = _a.width,
          height_1 = _a.height;
      var widthSpec = page_common_1.layout.makeMeasureSpec(width_1, page_common_1.layout.EXACTLY);
      var heightSpec = page_common_1.layout.makeMeasureSpec(height_1, page_common_1.layout.EXACTLY);
      page_common_1.View.measureChild(this, this.actionBar, widthSpec, heightSpec);
    }

    var result = page_common_1.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
    var measureWidth = Math.max(result.measuredWidth, this.effectiveMinWidth);
    var measureHeight = Math.max(result.measuredHeight, this.effectiveMinHeight);
    var widthAndState = page_common_1.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
    var heightAndState = page_common_1.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Page.prototype.onLayout = function (left, top, right, bottom) {
    var _a = this.actionBar._getActualSize,
        actionBarWidth = _a.width,
        actionBarHeight = _a.height;
    page_common_1.View.layoutChild(this, this.actionBar, 0, 0, actionBarWidth, actionBarHeight);
    var insets = this.getSafeAreaInsets();

    if (majorVersion <= 10) {
      insets.top = page_common_1.layout.round(page_common_1.layout.toDevicePixels(this.viewController.view.safeAreaLayoutGuide.layoutFrame.origin.y));
    }

    var childLeft = 0 + insets.left;
    var childTop = 0 + insets.top;
    var childRight = right - insets.right;
    var childBottom = bottom - insets.bottom;
    page_common_1.View.layoutChild(this, this.layoutView, childLeft, childTop, childRight, childBottom);
  };

  Page.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (child === this.actionBar) {
      return true;
    }

    var nativeParent = this.nativeViewProtected;
    var nativeChild = child.nativeViewProtected;
    var viewController = child.ios instanceof UIViewController ? child.ios : child.viewController;

    if (viewController) {
      if (this.viewController.presentedViewController === viewController) {
        return true;
      }

      this.viewController.addChildViewController(viewController);
    }

    if (nativeParent && nativeChild) {
      if (typeof atIndex !== "number" || atIndex >= nativeParent.subviews.count) {
        nativeParent.addSubview(nativeChild);
      } else {
        nativeParent.insertSubviewAtIndex(nativeChild, atIndex);
      }

      return true;
    }

    return false;
  };

  Page.prototype._removeViewFromNativeVisualTree = function (child) {
    if (child === this.actionBar) {
      return;
    }

    var viewController = child.ios instanceof UIViewController ? child.ios : child.viewController;

    if (viewController) {
      viewController.removeFromParentViewController();
    }

    _super.prototype._removeViewFromNativeVisualTree.call(this, child);
  };

  Page.prototype[page_common_1.actionBarHiddenProperty.setNative] = function (value) {
    this._updateEnableSwipeBackNavigation(value);

    invalidateTopmostController(this.viewController);
    var frame = this.frame;

    if (frame) {
      frame._updateActionBar(this, true);
    }
  };

  Page.prototype[page_common_1.statusBarStyleProperty.getDefault] = function () {
    return 0;
  };

  Page.prototype[page_common_1.statusBarStyleProperty.setNative] = function (value) {
    var frame = this.frame;

    if (frame) {
      var navigationBar = frame.ios.controller.navigationBar;

      if (typeof value === "string") {
        navigationBar.barStyle = value === "dark" ? 1 : 0;
      } else {
        navigationBar.barStyle = value;
      }
    }
  };

  return Page;
}(page_common_1.PageBase);

exports.Page = Page;

function invalidateTopmostController(controller) {
  if (!controller) {
    return;
  }

  controller.view.setNeedsLayout();
  var presentedViewController = controller.presentedViewController;

  if (presentedViewController) {
    return invalidateTopmostController(presentedViewController);
  }

  var childControllers = controller.childViewControllers;
  var size = controller.childViewControllers.count;

  while (size > 0) {
    var childController = childControllers[--size];

    if (childController instanceof UITabBarController) {
      invalidateTopmostController(childController.selectedViewController);
    } else if (childController instanceof UINavigationController) {
      invalidateTopmostController(childController.topViewController);
    } else if (childController instanceof UISplitViewController) {
      invalidateTopmostController(childController.viewControllers.lastObject);
    } else {
      invalidateTopmostController(childController);
    }
  }
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/placeholder/placeholder.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var Placeholder = function (_super) {
  __extends(Placeholder, _super);

  function Placeholder() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Placeholder.prototype.createNativeView = function () {
    var args = {
      eventName: Placeholder.creatingViewEvent,
      object: this,
      view: undefined,
      context: this._context
    };
    this.notify(args);
    return args.view;
  };

  Placeholder.creatingViewEvent = "creatingView";
  return Placeholder;
}(view_1.View);

exports.Placeholder = Placeholder;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/progress/progress-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var ProgressBase = function (_super) {
  __extends(ProgressBase, _super);

  function ProgressBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ProgressBase = __decorate([view_1.CSSType("Progress")], ProgressBase);
  return ProgressBase;
}(view_1.View);

exports.ProgressBase = ProgressBase;
ProgressBase.prototype.recycleNativeView = "auto";
exports.valueProperty = new view_1.CoercibleProperty({
  name: "value",
  defaultValue: 0,
  coerceValue: function (t, v) {
    return v < 0 ? 0 : Math.min(v, t.maxValue);
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.valueProperty.register(ProgressBase);
exports.maxValueProperty = new view_1.Property({
  name: "maxValue",
  defaultValue: 100,
  valueChanged: function (target, oldValue, newValue) {
    exports.valueProperty.coerce(target);
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.maxValueProperty.register(ProgressBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/progress/progress.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var progress_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/progress/progress-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/progress/progress-common.js"));

var Progress = function (_super) {
  __extends(Progress, _super);

  function Progress() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Progress.prototype.createNativeView = function () {
    return UIProgressView.new();
  };

  Object.defineProperty(Progress.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  Progress.prototype[progress_common_1.valueProperty.getDefault] = function () {
    return 0;
  };

  Progress.prototype[progress_common_1.valueProperty.setNative] = function (value) {
    this.ios.progress = value / this.maxValue;
  };

  Progress.prototype[progress_common_1.maxValueProperty.getDefault] = function () {
    return 100;
  };

  Progress.prototype[progress_common_1.maxValueProperty.setNative] = function (value) {
    this.ios.progress = this.value / value;
  };

  Progress.prototype[progress_common_1.colorProperty.getDefault] = function () {
    return this.ios.progressTintColor;
  };

  Progress.prototype[progress_common_1.colorProperty.setNative] = function (value) {
    this.ios.progressTintColor = value instanceof progress_common_1.Color ? value.ios : value;
  };

  Progress.prototype[progress_common_1.backgroundColorProperty.getDefault] = function () {
    return this.ios.trackTintColor;
  };

  Progress.prototype[progress_common_1.backgroundColorProperty.setNative] = function (value) {
    var color = value instanceof progress_common_1.Color ? value.ios : value;
    this.ios.trackTintColor = color;
  };

  Progress.prototype[progress_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Progress.prototype[progress_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Progress;
}(progress_common_1.ProgressBase);

exports.Progress = Progress;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/proxy-view-container/proxy-view-container.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var ProxyViewContainer = function (_super) {
  __extends(ProxyViewContainer, _super);

  function ProxyViewContainer() {
    var _this = _super.call(this) || this;

    _this.nativeViewProtected = undefined;
    return _this;
  }

  Object.defineProperty(ProxyViewContainer.prototype, "ios", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ProxyViewContainer.prototype, "android", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
    get: function () {
      return false;
    },
    enumerable: true,
    configurable: true
  });

  ProxyViewContainer.prototype.createNativeView = function () {
    return undefined;
  };

  ProxyViewContainer.prototype._getNativeViewsCount = function () {
    var result = 0;
    this.eachChildView(function (cv) {
      result += cv._getNativeViewsCount();
      return true;
    });
    return result;
  };

  ProxyViewContainer.prototype._eachLayoutView = function (callback) {
    this.eachChildView(function (cv) {
      if (!cv.isCollapsed) {
        cv._eachLayoutView(callback);
      }

      return true;
    });
  };

  ProxyViewContainer.prototype._addViewToNativeVisualTree = function (child, atIndex) {
    if (layout_base_1.traceEnabled()) {
      layout_base_1.traceWrite("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
    }

    _super.prototype._addViewToNativeVisualTree.call(this, child);

    var parent = this.parent;

    if (parent instanceof layout_base_1.View) {
      var baseIndex = 0;
      var insideIndex = 0;

      if (parent instanceof layout_base_1.LayoutBase) {
        baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
      }

      if (atIndex !== undefined) {
        insideIndex = this._childIndexToNativeChildIndex(atIndex);
      } else {
        insideIndex = this._getNativeViewsCount();
      }

      if (layout_base_1.traceEnabled()) {
        layout_base_1.traceWrite("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, layout_base_1.traceCategories.ViewHierarchy);
      }

      return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
    }

    return false;
  };

  ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function (child) {
    if (layout_base_1.traceEnabled()) {
      layout_base_1.traceWrite("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, layout_base_1.traceCategories.ViewHierarchy);
    }

    _super.prototype._removeViewFromNativeVisualTree.call(this, child);

    var parent = this.parent;

    if (parent instanceof layout_base_1.View) {
      return parent._removeViewFromNativeVisualTree(child);
    }
  };

  ProxyViewContainer.prototype._registerLayoutChild = function (child) {
    var parent = this.parent;

    if (parent instanceof layout_base_1.LayoutBase) {
      parent._registerLayoutChild(child);
    }
  };

  ProxyViewContainer.prototype._unregisterLayoutChild = function (child) {
    var parent = this.parent;

    if (parent instanceof layout_base_1.LayoutBase) {
      parent._unregisterLayoutChild(child);
    }
  };

  ProxyViewContainer.prototype._parentChanged = function (oldParent) {
    _super.prototype._parentChanged.call(this, oldParent);

    var addingToParent = this.parent && !oldParent;
    var newLayout = this.parent;
    var oldLayout = oldParent;

    if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
      this.eachChildView(function (child) {
        newLayout._registerLayoutChild(child);

        return true;
      });
    } else if (oldLayout instanceof layout_base_1.LayoutBase) {
      this.eachChildView(function (child) {
        oldLayout._unregisterLayoutChild(child);

        return true;
      });
    }
  };

  ProxyViewContainer = __decorate([layout_base_1.CSSType("ProxyViewContainer")], ProxyViewContainer);
  return ProxyViewContainer;
}(layout_base_1.LayoutBase);

exports.ProxyViewContainer = ProxyViewContainer;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/repeater/repeater.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var label_1 = __webpack_require__("../node_modules/tns-core-modules/ui/label/label.js");

var layout_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js");

var stack_layout_1 = __webpack_require__("../node_modules/tns-core-modules/ui/layouts/stack-layout/stack-layout.js");

var observable_array_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable-array/observable-array.js");

var weak_event_listener_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/weak-event-listener/weak-event-listener.js");

var builder_1 = __webpack_require__("../node_modules/tns-core-modules/ui/builder/builder.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/layouts/layout-base.js"));

var knownTemplates;

(function (knownTemplates) {
  knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));

var Repeater = function (_super) {
  __extends(Repeater, _super);

  function Repeater() {
    var _this = _super.call(this) || this;

    _this._isDirty = false;
    _this.itemsLayout = new stack_layout_1.StackLayout();
    return _this;
  }

  Repeater.prototype.onLoaded = function () {
    if (this._isDirty) {
      this.refresh();
    }

    _super.prototype.onLoaded.call(this);
  };

  Repeater.prototype._requestRefresh = function () {
    this._isDirty = true;

    if (this.isLoaded) {
      this.refresh();
    }
  };

  Repeater.prototype.refresh = function () {
    if (this.itemsLayout) {
      this.itemsLayout.removeChildren();
    }

    if (!this.items) {
      return;
    }

    var length = this.items.length;

    for (var i = 0; i < length; i++) {
      var viewToAdd = this.itemTemplate ? builder_1.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);

      var dataItem = this._getDataItem(i);

      viewToAdd.bindingContext = dataItem;
      this.itemsLayout.addChild(viewToAdd);
    }

    this._isDirty = false;
  };

  Repeater.prototype._onItemsChanged = function (data) {
    this._requestRefresh();
  };

  Repeater.prototype._getDefaultItemContent = function (index) {
    var lbl = new label_1.Label();
    lbl.bind({
      targetProperty: "text",
      sourceProperty: "$value"
    });
    return lbl;
  };

  Repeater.prototype._getDataItem = function (index) {
    var items = this.items;
    return items.getItem ? items.getItem(index) : this.items[index];
  };

  Object.defineProperty(Repeater.prototype, "_childrenCount", {
    get: function () {
      var count = 0;

      if (this.itemsLayout) {
        count++;
      }

      return count;
    },
    enumerable: true,
    configurable: true
  });

  Repeater.prototype.eachChildView = function (callback) {
    if (this.itemsLayout) {
      callback(this.itemsLayout);
    }
  };

  Repeater.prototype.onLayout = function (left, top, right, bottom) {
    var insets = this.getSafeAreaInsets();
    var paddingLeft = this.effectiveBorderLeftWidth + this.effectivePaddingLeft + insets.left;
    var paddingTop = this.effectiveBorderTopWidth + this.effectivePaddingTop + insets.top;
    var paddingRight = this.effectiveBorderRightWidth + this.effectivePaddingRight + insets.right;
    var paddingBottom = this.effectiveBorderBottomWidth + this.effectivePaddingBottom + insets.bottom;
    var childLeft = paddingLeft;
    var childTop = paddingTop;
    var childRight = right - left - paddingRight;
    var childBottom = bottom - top - paddingBottom;
    layout_base_1.View.layoutChild(this, this.itemsLayout, childLeft, childTop, childRight, childBottom);
  };

  Repeater.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var result = layout_base_1.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
    var width = layout_base_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = layout_base_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = layout_base_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = layout_base_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var widthAndState = layout_base_1.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
    var heightAndState = layout_base_1.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  __decorate([profiling_1.profile], Repeater.prototype, "onLoaded", null);

  Repeater = __decorate([layout_base_1.CSSType("Repeater")], Repeater);
  return Repeater;
}(layout_base_1.CustomLayoutView);

exports.Repeater = Repeater;
Repeater.prototype.recycleNativeView = "auto";
exports.itemTemplateProperty = new layout_base_1.Property({
  name: "itemTemplate",
  affectsLayout: true,
  valueChanged: function (target) {
    target._requestRefresh();
  }
});
exports.itemTemplateProperty.register(Repeater);
exports.itemsProperty = new layout_base_1.Property({
  name: "items",
  affectsLayout: true,
  valueChanged: function (target, oldValue, newValue) {
    if (oldValue instanceof observable_array_1.ObservableArray) {
      weak_event_listener_1.removeWeakEventListener(oldValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    if (newValue instanceof observable_array_1.ObservableArray) {
      weak_event_listener_1.addWeakEventListener(newValue, observable_array_1.ObservableArray.changeEvent, target._onItemsChanged, target);
    }

    target._requestRefresh();
  }
});
exports.itemsProperty.register(Repeater);
exports.itemsLayoutProperty = new layout_base_1.Property({
  name: "itemsLayout",
  affectsLayout: true,
  valueChanged: function (target, oldValue, newValue) {
    if (oldValue) {
      target._removeView(oldValue);

      oldValue.removeChildren();
    }

    if (newValue) {
      target._addView(newValue);
    }

    target._requestRefresh();
  }
});
exports.itemsLayoutProperty.register(Repeater);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var content_view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/content-view/content-view.js"));

var ScrollViewBase = function (_super) {
  __extends(ScrollViewBase, _super);

  function ScrollViewBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._scrollChangeCount = 0;
    return _this;
  }

  ScrollViewBase_1 = ScrollViewBase;

  ScrollViewBase.prototype.addEventListener = function (arg, callback, thisArg) {
    _super.prototype.addEventListener.call(this, arg, callback, thisArg);

    if (arg === ScrollViewBase_1.scrollEvent) {
      this._scrollChangeCount++;
      this.attach();
    }
  };

  ScrollViewBase.prototype.removeEventListener = function (arg, callback, thisArg) {
    _super.prototype.removeEventListener.call(this, arg, callback, thisArg);

    if (arg === ScrollViewBase_1.scrollEvent) {
      this._scrollChangeCount--;
      this.dettach();
    }
  };

  ScrollViewBase.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.attach();
  };

  ScrollViewBase.prototype.onUnloaded = function () {
    _super.prototype.onUnloaded.call(this);

    this.dettach();
  };

  ScrollViewBase.prototype.attach = function () {
    if (this._scrollChangeCount > 0 && this.isLoaded) {
      this.attachNative();
    }
  };

  ScrollViewBase.prototype.dettach = function () {
    if (this._scrollChangeCount === 0 && this.isLoaded) {
      this.dettachNative();
    }
  };

  ScrollViewBase.prototype.attachNative = function () {};

  ScrollViewBase.prototype.dettachNative = function () {};

  Object.defineProperty(ScrollViewBase.prototype, "horizontalOffset", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "verticalOffset", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "scrollableWidth", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollViewBase.prototype, "scrollableHeight", {
    get: function () {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  var ScrollViewBase_1;
  ScrollViewBase.scrollEvent = "scroll";

  __decorate([profiling_1.profile], ScrollViewBase.prototype, "onLoaded", null);

  ScrollViewBase = ScrollViewBase_1 = __decorate([content_view_1.CSSType("ScrollView")], ScrollViewBase);
  return ScrollViewBase;
}(content_view_1.ContentView);

exports.ScrollViewBase = ScrollViewBase;
var converter = content_view_1.makeParser(content_view_1.makeValidator("horizontal", "vertical"));
exports.orientationProperty = new content_view_1.Property({
  name: "orientation",
  defaultValue: "vertical",
  affectsLayout: true,
  valueChanged: function (target, oldValue, newValue) {
    target._onOrientationChanged();
  },
  valueConverter: converter
});
exports.orientationProperty.register(ScrollViewBase);
exports.scrollBarIndicatorVisibleProperty = new content_view_1.Property({
  name: "scrollBarIndicatorVisible",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.scrollBarIndicatorVisibleProperty.register(ScrollViewBase);
exports.isScrollEnabledProperty = new content_view_1.Property({
  name: "isScrollEnabled",
  defaultValue: true,
  valueConverter: content_view_1.booleanConverter
});
exports.isScrollEnabledProperty.register(ScrollViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/scroll-view/scroll-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var scroll_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/scroll-view/scroll-view-common.js"));

var majorVersion = utils_1.ios.MajorVersion;

var UIScrollViewDelegateImpl = function (_super) {
  __extends(UIScrollViewDelegateImpl, _super);

  function UIScrollViewDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIScrollViewDelegateImpl.initWithOwner = function (owner) {
    var impl = UIScrollViewDelegateImpl.new();
    impl._owner = owner;
    return impl;
  };

  UIScrollViewDelegateImpl.prototype.scrollViewDidScroll = function (sv) {
    var owner = this._owner.get();

    if (owner) {
      owner.notify({
        object: owner,
        eventName: "scroll",
        scrollX: owner.horizontalOffset,
        scrollY: owner.verticalOffset
      });
    }
  };

  UIScrollViewDelegateImpl.ObjCProtocols = [UIScrollViewDelegate];
  return UIScrollViewDelegateImpl;
}(NSObject);

var ScrollView = function (_super) {
  __extends(ScrollView, _super);

  function ScrollView() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._contentMeasuredWidth = 0;
    _this._contentMeasuredHeight = 0;
    return _this;
  }

  ScrollView.prototype.createNativeView = function () {
    var view = UIScrollView.new();
    return view;
  };

  ScrollView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this.updateScrollBarVisibility(this.scrollBarIndicatorVisible);

    this._setNativeClipToBounds();
  };

  ScrollView.prototype._setNativeClipToBounds = function () {
    this.nativeViewProtected.clipsToBounds = true;
  };

  ScrollView.prototype.attachNative = function () {
    this._delegate = UIScrollViewDelegateImpl.initWithOwner(new WeakRef(this));
    this.nativeViewProtected.delegate = this._delegate;
  };

  ScrollView.prototype.dettachNative = function () {
    this.nativeViewProtected.delegate = null;
  };

  ScrollView.prototype.updateScrollBarVisibility = function (value) {
    if (!this.nativeViewProtected) {
      return;
    }

    if (this.orientation === "horizontal") {
      this.nativeViewProtected.showsHorizontalScrollIndicator = value;
    } else {
      this.nativeViewProtected.showsVerticalScrollIndicator = value;
    }
  };

  Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
    get: function () {
      return this.nativeViewProtected ? this.nativeViewProtected.contentOffset.x : 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "verticalOffset", {
    get: function () {
      return this.nativeViewProtected ? this.nativeViewProtected.contentOffset.y : 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
    get: function () {
      if (!this.nativeViewProtected || this.orientation !== "horizontal") {
        return 0;
      }

      return Math.max(0, this.nativeViewProtected.contentSize.width - this.nativeViewProtected.bounds.size.width);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
    get: function () {
      if (!this.nativeViewProtected || this.orientation !== "vertical") {
        return 0;
      }

      return Math.max(0, this.nativeViewProtected.contentSize.height - this.nativeViewProtected.bounds.size.height);
    },
    enumerable: true,
    configurable: true
  });

  ScrollView.prototype[scroll_view_common_1.isScrollEnabledProperty.getDefault] = function () {
    return this.nativeViewProtected.scrollEnabled;
  };

  ScrollView.prototype[scroll_view_common_1.isScrollEnabledProperty.setNative] = function (value) {
    this.nativeViewProtected.scrollEnabled = value;
  };

  ScrollView.prototype[scroll_view_common_1.scrollBarIndicatorVisibleProperty.getDefault] = function () {
    return true;
  };

  ScrollView.prototype[scroll_view_common_1.scrollBarIndicatorVisibleProperty.setNative] = function (value) {
    this.updateScrollBarVisibility(value);
  };

  ScrollView.prototype.scrollToVerticalOffset = function (value, animated) {
    if (this.nativeViewProtected && this.orientation === "vertical" && this.isScrollEnabled) {
      var bounds = this.nativeViewProtected.bounds.size;
      this.nativeViewProtected.scrollRectToVisibleAnimated(CGRectMake(0, value, bounds.width, bounds.height), animated);
    }
  };

  ScrollView.prototype.scrollToHorizontalOffset = function (value, animated) {
    if (this.nativeViewProtected && this.orientation === "horizontal" && this.isScrollEnabled) {
      var bounds = this.nativeViewProtected.bounds.size;
      this.nativeViewProtected.scrollRectToVisibleAnimated(CGRectMake(value, 0, bounds.width, bounds.height), animated);
    }
  };

  ScrollView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = scroll_view_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = scroll_view_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = scroll_view_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = scroll_view_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var child = this.layoutView;
    this._contentMeasuredWidth = this.effectiveMinWidth;
    this._contentMeasuredHeight = this.effectiveMinHeight;

    if (child) {
      var childSize = void 0;

      if (this.orientation === "vertical") {
        childSize = scroll_view_common_1.View.measureChild(this, child, widthMeasureSpec, scroll_view_common_1.layout.makeMeasureSpec(0, scroll_view_common_1.layout.UNSPECIFIED));
      } else {
        childSize = scroll_view_common_1.View.measureChild(this, child, scroll_view_common_1.layout.makeMeasureSpec(0, scroll_view_common_1.layout.UNSPECIFIED), heightMeasureSpec);
      }

      this._contentMeasuredWidth = Math.max(childSize.measuredWidth, this.effectiveMinWidth);
      this._contentMeasuredHeight = Math.max(childSize.measuredHeight, this.effectiveMinHeight);
    }

    var widthAndState = scroll_view_common_1.View.resolveSizeAndState(this._contentMeasuredWidth, width, widthMode, 0);
    var heightAndState = scroll_view_common_1.View.resolveSizeAndState(this._contentMeasuredHeight, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  ScrollView.prototype.onLayout = function (left, top, right, bottom) {
    var insets = this.getSafeAreaInsets();
    var width = right - left - insets.right - insets.left;
    var height = bottom - top - insets.bottom - insets.top;
    var nativeView = this.nativeViewProtected;

    if (majorVersion > 10) {
      nativeView.contentInsetAdjustmentBehavior = 2;
    }

    var scrollWidth = width + insets.left + insets.right;
    var scrollHeight = height + insets.top + insets.bottom;

    if (this.orientation === "horizontal") {
      scrollWidth = Math.max(this._contentMeasuredWidth + insets.left + insets.right, scrollWidth);
      width = Math.max(this._contentMeasuredWidth, width);
    } else {
      scrollHeight = Math.max(this._contentMeasuredHeight + insets.top + insets.bottom, scrollHeight);
      height = Math.max(this._contentMeasuredHeight, height);
    }

    nativeView.contentSize = CGSizeMake(scroll_view_common_1.layout.toDeviceIndependentPixels(scrollWidth), scroll_view_common_1.layout.toDeviceIndependentPixels(scrollHeight));
    scroll_view_common_1.View.layoutChild(this, this.layoutView, insets.left, insets.top, insets.left + width, insets.top + height);
  };

  ScrollView.prototype._onOrientationChanged = function () {
    this.updateScrollBarVisibility(this.scrollBarIndicatorVisible);
  };

  return ScrollView;
}(scroll_view_common_1.ScrollViewBase);

exports.ScrollView = ScrollView;
ScrollView.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SearchBarBase = function (_super) {
  __extends(SearchBarBase, _super);

  function SearchBarBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SearchBarBase.submitEvent = "submit";
  SearchBarBase.clearEvent = "clear";
  SearchBarBase = __decorate([view_1.CSSType("SearchBar")], SearchBarBase);
  return SearchBarBase;
}(view_1.View);

exports.SearchBarBase = SearchBarBase;
SearchBarBase.prototype.recycleNativeView = "auto";
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  affectsLayout: view_1.isIOS
});
exports.textProperty.register(SearchBarBase);
exports.hintProperty = new view_1.Property({
  name: "hint",
  defaultValue: ""
});
exports.hintProperty.register(SearchBarBase);
exports.textFieldHintColorProperty = new view_1.Property({
  name: "textFieldHintColor",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.textFieldHintColorProperty.register(SearchBarBase);
exports.textFieldBackgroundColorProperty = new view_1.Property({
  name: "textFieldBackgroundColor",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.textFieldBackgroundColorProperty.register(SearchBarBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/search-bar/search-bar.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var search_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/search-bar/search-bar-common.js"));

var majorVersion = utils_1.ios.MajorVersion;

var UISearchBarDelegateImpl = function (_super) {
  __extends(UISearchBarDelegateImpl, _super);

  function UISearchBarDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UISearchBarDelegateImpl.initWithOwner = function (owner) {
    var delegate = UISearchBarDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UISearchBarDelegateImpl.prototype.searchBarTextDidChange = function (searchBar, searchText) {
    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    search_bar_common_1.textProperty.nativeValueChange(owner, searchText);

    if (searchText === "") {
      owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
    }
  };

  UISearchBarDelegateImpl.prototype.searchBarCancelButtonClicked = function (searchBar) {
    searchBar.resignFirstResponder();

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    owner._emit(search_bar_common_1.SearchBarBase.clearEvent);
  };

  UISearchBarDelegateImpl.prototype.searchBarSearchButtonClicked = function (searchBar) {
    searchBar.resignFirstResponder();

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    owner._emit(search_bar_common_1.SearchBarBase.submitEvent);
  };

  UISearchBarDelegateImpl.ObjCProtocols = [UISearchBarDelegate];
  return UISearchBarDelegateImpl;
}(NSObject);

var UISearchBarImpl = function (_super) {
  __extends(UISearchBarImpl, _super);

  function UISearchBarImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UISearchBarImpl.prototype.sizeThatFits = function (size) {
    if (majorVersion >= 11 && size.width === Number.POSITIVE_INFINITY) {
      size.width = 0;
    }

    return _super.prototype.sizeThatFits.call(this, size);
  };

  return UISearchBarImpl;
}(UISearchBar);

var SearchBar = function (_super) {
  __extends(SearchBar, _super);

  function SearchBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SearchBar.prototype.createNativeView = function () {
    return UISearchBarImpl.new();
  };

  SearchBar.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._delegate = UISearchBarDelegateImpl.initWithOwner(new WeakRef(this));
  };

  SearchBar.prototype.disposeNativeView = function () {
    this._delegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  SearchBar.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.ios.delegate = this._delegate;
  };

  SearchBar.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  SearchBar.prototype.dismissSoftInput = function () {
    this.ios.resignFirstResponder();
  };

  Object.defineProperty(SearchBar.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SearchBar.prototype, "_textField", {
    get: function () {
      if (!this.__textField) {
        this.__textField = this.ios.valueForKey("searchField");
      }

      return this.__textField;
    },
    enumerable: true,
    configurable: true
  });

  SearchBar.prototype[search_bar_common_1.isEnabledProperty.setNative] = function (value) {
    var nativeView = this.nativeViewProtected;

    if (nativeView instanceof UIControl) {
      nativeView.enabled = value;
    }

    var textField = this._textField;

    if (textField) {
      textField.enabled = value;
    }
  };

  SearchBar.prototype[search_bar_common_1.backgroundColorProperty.getDefault] = function () {
    return this.ios.barTintColor;
  };

  SearchBar.prototype[search_bar_common_1.backgroundColorProperty.setNative] = function (value) {
    var color = value instanceof search_bar_common_1.Color ? value.ios : value;
    this.ios.barTintColor = color;
  };

  SearchBar.prototype[search_bar_common_1.colorProperty.getDefault] = function () {
    var sf = this._textField;

    if (sf) {
      return sf.textColor;
    }

    return null;
  };

  SearchBar.prototype[search_bar_common_1.colorProperty.setNative] = function (value) {
    var sf = this._textField;
    var color = value instanceof search_bar_common_1.Color ? value.ios : value;

    if (sf) {
      sf.textColor = color;
      sf.tintColor = color;
    }
  };

  SearchBar.prototype[search_bar_common_1.fontInternalProperty.getDefault] = function () {
    var sf = this._textField;
    return sf ? sf.font : null;
  };

  SearchBar.prototype[search_bar_common_1.fontInternalProperty.setNative] = function (value) {
    var sf = this._textField;

    if (sf) {
      sf.font = value instanceof font_1.Font ? value.getUIFont(sf.font) : value;
    }
  };

  SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  SearchBar.prototype[search_bar_common_1.backgroundInternalProperty.setNative] = function (value) {};

  SearchBar.prototype[search_bar_common_1.textProperty.getDefault] = function () {
    return "";
  };

  SearchBar.prototype[search_bar_common_1.textProperty.setNative] = function (value) {
    var text = value === null || value === undefined ? "" : value.toString();
    this.ios.text = text;
  };

  SearchBar.prototype[search_bar_common_1.hintProperty.getDefault] = function () {
    return "";
  };

  SearchBar.prototype[search_bar_common_1.hintProperty.setNative] = function (value) {
    this._updateAttributedPlaceholder();
  };

  SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.getDefault] = function () {
    var textField = this._textField;

    if (textField) {
      return textField.backgroundColor;
    }

    return null;
  };

  SearchBar.prototype[search_bar_common_1.textFieldBackgroundColorProperty.setNative] = function (value) {
    var color = value instanceof search_bar_common_1.Color ? value.ios : value;
    var textField = this._textField;

    if (textField) {
      textField.backgroundColor = color;
    }
  };

  SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.getDefault] = function () {
    return null;
  };

  SearchBar.prototype[search_bar_common_1.textFieldHintColorProperty.setNative] = function (value) {
    this._updateAttributedPlaceholder();
  };

  SearchBar.prototype._updateAttributedPlaceholder = function () {
    var stringValue = this.hint;

    if (stringValue === null || stringValue === void 0) {
      stringValue = "";
    } else {
      stringValue = stringValue + "";
    }

    if (stringValue === "") {
      stringValue = " ";
    }

    var attributes = {};

    if (this.textFieldHintColor) {
      attributes[NSForegroundColorAttributeName] = this.textFieldHintColor.ios;
    }

    var attributedPlaceholder = NSAttributedString.alloc().initWithStringAttributes(stringValue, attributes);
    this._textField.attributedPlaceholder = attributedPlaceholder;
  };

  return SearchBar;
}(search_bar_common_1.SearchBarBase);

exports.SearchBar = SearchBar;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var knownCollections;

(function (knownCollections) {
  knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var SegmentedBarItemBase = function (_super) {
  __extends(SegmentedBarItemBase, _super);

  function SegmentedBarItemBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._title = "";
    return _this;
  }

  Object.defineProperty(SegmentedBarItemBase.prototype, "title", {
    get: function () {
      return this._title;
    },
    set: function (value) {
      var strValue = value !== null && value !== undefined ? value.toString() : "";

      if (this._title !== strValue) {
        this._title = strValue;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });
  SegmentedBarItemBase = __decorate([view_1.CSSType("SegmentedBarItem")], SegmentedBarItemBase);
  return SegmentedBarItemBase;
}(view_1.ViewBase);

exports.SegmentedBarItemBase = SegmentedBarItemBase;

var SegmentedBarBase = function (_super) {
  __extends(SegmentedBarBase, _super);

  function SegmentedBarBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(SegmentedBarBase.prototype, "selectedBackgroundColor", {
    get: function () {
      return this.style.selectedBackgroundColor;
    },
    set: function (value) {
      this.style.selectedBackgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });

  SegmentedBarBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "items") {
      this.items = value;
    }
  };

  SegmentedBarBase.prototype._addChildFromBuilder = function (name, value) {
    if (name === "SegmentedBarItem") {
      var item = value;
      var items = this.items;

      if (!items) {
        items = new Array();
        items.push(item);
        this.items = items;
      } else {
        items.push(item);

        this._addView(item);
      }

      if (this.nativeViewProtected) {
        this[exports.itemsProperty.setNative](items);
      }
    }
  };

  SegmentedBarBase.prototype.onItemsChanged = function (oldItems, newItems) {
    if (oldItems) {
      for (var i = 0, count = oldItems.length; i < count; i++) {
        this._removeView(oldItems[i]);
      }
    }

    if (newItems) {
      for (var i = 0, count = newItems.length; i < count; i++) {
        this._addView(newItems[i]);
      }
    }
  };

  SegmentedBarBase.prototype.eachChild = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item);
      });
    }
  };

  SegmentedBarBase.selectedIndexChangedEvent = "selectedIndexChanged";
  SegmentedBarBase = __decorate([view_1.CSSType("SegmentedBar")], SegmentedBarBase);
  return SegmentedBarBase;
}(view_1.View);

exports.SegmentedBarBase = SegmentedBarBase;
SegmentedBarBase.prototype.recycleNativeView = "auto";
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  valueChanged: function (target, oldValue, newValue) {
    target.notify({
      eventName: SegmentedBarBase.selectedIndexChangedEvent,
      object: target,
      oldIndex: oldValue,
      newIndex: newValue
    });
  },
  coerceValue: function (target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    return value;
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.selectedIndexProperty.register(SegmentedBarBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function (target, oldValue, newValue) {
    target.onItemsChanged(oldValue, newValue);
  }
});
exports.itemsProperty.register(SegmentedBarBase);
exports.selectedBackgroundColorProperty = new view_1.InheritedCssProperty({
  name: "selectedBackgroundColor",
  cssName: "selected-background-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.selectedBackgroundColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var segmented_bar_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/segmented-bar/segmented-bar-common.js"));

var SegmentedBarItem = function (_super) {
  __extends(SegmentedBarItem, _super);

  function SegmentedBarItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SegmentedBarItem.prototype._update = function () {
    var parent = this.parent;

    if (parent) {
      var tabIndex = parent.items.indexOf(this);
      var title = this.title;
      title = title === null || title === undefined ? "" : title;
      parent.ios.setTitleForSegmentAtIndex(title, tabIndex);
    }
  };

  return SegmentedBarItem;
}(segmented_bar_common_1.SegmentedBarItemBase);

exports.SegmentedBarItem = SegmentedBarItem;

var SegmentedBar = function (_super) {
  __extends(SegmentedBar, _super);

  function SegmentedBar() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SegmentedBar.prototype.createNativeView = function () {
    return UISegmentedControl.new();
  };

  SegmentedBar.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._selectionHandler = SelectionHandlerImpl.initWithOwner(new WeakRef(this));
    this.nativeViewProtected.addTargetActionForControlEvents(this._selectionHandler, "selected", 4096);
  };

  SegmentedBar.prototype.disposeNativeView = function () {
    this._selectionHandler = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(SegmentedBar.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.getDefault] = function () {
    return -1;
  };

  SegmentedBar.prototype[segmented_bar_common_1.selectedIndexProperty.setNative] = function (value) {
    this.ios.selectedSegmentIndex = value;
  };

  SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  SegmentedBar.prototype[segmented_bar_common_1.itemsProperty.setNative] = function (value) {
    var segmentedControl = this.ios;
    segmentedControl.removeAllSegments();
    var newItems = value;

    if (newItems && newItems.length) {
      newItems.forEach(function (item, index, arr) {
        var title = item.title;
        title = title === null || title === undefined ? "" : title;
        segmentedControl.insertSegmentWithTitleAtIndexAnimated(title, index, false);
      });
    }

    segmented_bar_common_1.selectedIndexProperty.coerce(this);
  };

  SegmentedBar.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.getDefault] = function () {
    return this.ios.tintColor;
  };

  SegmentedBar.prototype[segmented_bar_common_1.selectedBackgroundColorProperty.setNative] = function (value) {
    var color = value instanceof segmented_bar_common_1.Color ? value.ios : value;
    this.ios.tintColor = color;
  };

  SegmentedBar.prototype[segmented_bar_common_1.colorProperty.getDefault] = function () {
    return null;
  };

  SegmentedBar.prototype[segmented_bar_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof segmented_bar_common_1.Color ? value.ios : value;
    var bar = this.ios;
    var currentAttrs = bar.titleTextAttributesForState(0);
    var attrs = currentAttrs ? currentAttrs.mutableCopy() : NSMutableDictionary.new();
    attrs.setValueForKey(color, NSForegroundColorAttributeName);
    bar.setTitleTextAttributesForState(attrs, 0);
  };

  SegmentedBar.prototype[segmented_bar_common_1.fontInternalProperty.getDefault] = function () {
    return null;
  };

  SegmentedBar.prototype[segmented_bar_common_1.fontInternalProperty.setNative] = function (value) {
    var font = value ? value.getUIFont(UIFont.systemFontOfSize(utils_1.ios.getter(UIFont, UIFont.labelFontSize))) : null;
    var bar = this.ios;
    var currentAttrs = bar.titleTextAttributesForState(0);
    var attrs = currentAttrs ? currentAttrs.mutableCopy() : NSMutableDictionary.new();
    attrs.setValueForKey(font, NSFontAttributeName);
    bar.setTitleTextAttributesForState(attrs, 0);
  };

  return SegmentedBar;
}(segmented_bar_common_1.SegmentedBarBase);

exports.SegmentedBar = SegmentedBar;

var SelectionHandlerImpl = function (_super) {
  __extends(SelectionHandlerImpl, _super);

  function SelectionHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SelectionHandlerImpl.initWithOwner = function (owner) {
    var handler = SelectionHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  SelectionHandlerImpl.prototype.selected = function (sender) {
    var owner = this._owner.get();

    if (owner) {
      owner.selectedIndex = sender.selectedSegmentIndex;
    }
  };

  SelectionHandlerImpl.ObjCExposedMethods = {
    "selected": {
      returns: interop.types.void,
      params: [UISegmentedControl]
    }
  };
  return SelectionHandlerImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/slider/slider-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SliderBase = function (_super) {
  __extends(SliderBase, _super);

  function SliderBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SliderBase = __decorate([view_1.CSSType("Slider")], SliderBase);
  return SliderBase;
}(view_1.View);

exports.SliderBase = SliderBase;
SliderBase.prototype.recycleNativeView = "auto";
exports.valueProperty = new view_1.CoercibleProperty({
  name: "value",
  defaultValue: 0,
  coerceValue: function (target, value) {
    value = Math.max(value, target.minValue);
    value = Math.min(value, target.maxValue);
    return value;
  },
  valueConverter: function (v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.valueProperty.register(SliderBase);
exports.minValueProperty = new view_1.Property({
  name: "minValue",
  defaultValue: 0,
  valueChanged: function (target, oldValue, newValue) {
    exports.maxValueProperty.coerce(target);
    exports.valueProperty.coerce(target);
  },
  valueConverter: function (v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.minValueProperty.register(SliderBase);
exports.maxValueProperty = new view_1.CoercibleProperty({
  name: "maxValue",
  defaultValue: 100,
  coerceValue: function (target, value) {
    var minValue = target.minValue;

    if (value < minValue) {
      value = minValue;
    }

    return value;
  },
  valueChanged: function (target, oldValue, newValue) {
    return exports.valueProperty.coerce(target);
  },
  valueConverter: function (v) {
    return view_1.isIOS ? parseFloat(v) : parseInt(v);
  }
});
exports.maxValueProperty.register(SliderBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/slider/slider.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var slider_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/slider/slider-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/slider/slider-common.js"));

var SliderChangeHandlerImpl = function (_super) {
  __extends(SliderChangeHandlerImpl, _super);

  function SliderChangeHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SliderChangeHandlerImpl.initWithOwner = function (owner) {
    var handler = SliderChangeHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  SliderChangeHandlerImpl.prototype.sliderValueChanged = function (sender) {
    var owner = this._owner.get();

    if (owner) {
      slider_common_1.valueProperty.nativeValueChange(owner, sender.value);
    }
  };

  SliderChangeHandlerImpl.ObjCExposedMethods = {
    "sliderValueChanged": {
      returns: interop.types.void,
      params: [UISlider]
    }
  };
  return SliderChangeHandlerImpl;
}(NSObject);

var Slider = function (_super) {
  __extends(Slider, _super);

  function Slider() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Slider.prototype.createNativeView = function () {
    return UISlider.new();
  };

  Slider.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    nativeView.minimumValue = 0;
    nativeView.maximumValue = this.maxValue;
    this._changeHandler = SliderChangeHandlerImpl.initWithOwner(new WeakRef(this));
    nativeView.addTargetActionForControlEvents(this._changeHandler, "sliderValueChanged", 4096);
  };

  Slider.prototype.disposeNativeView = function () {
    this._changeHandler = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(Slider.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  Slider.prototype[slider_common_1.valueProperty.getDefault] = function () {
    return 0;
  };

  Slider.prototype[slider_common_1.valueProperty.setNative] = function (value) {
    this.ios.value = value;
  };

  Slider.prototype[slider_common_1.minValueProperty.getDefault] = function () {
    return 0;
  };

  Slider.prototype[slider_common_1.minValueProperty.setNative] = function (value) {
    this.ios.minimumValue = value;
  };

  Slider.prototype[slider_common_1.maxValueProperty.getDefault] = function () {
    return 100;
  };

  Slider.prototype[slider_common_1.maxValueProperty.setNative] = function (value) {
    this.ios.maximumValue = value;
  };

  Slider.prototype[slider_common_1.colorProperty.getDefault] = function () {
    return this.ios.thumbTintColor;
  };

  Slider.prototype[slider_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof slider_common_1.Color ? value.ios : value;
    this.ios.thumbTintColor = color;
  };

  Slider.prototype[slider_common_1.backgroundColorProperty.getDefault] = function () {
    return this.ios.minimumTrackTintColor;
  };

  Slider.prototype[slider_common_1.backgroundColorProperty.setNative] = function (value) {
    var color = value instanceof slider_common_1.Color ? value.ios : value;
    this.ios.minimumTrackTintColor = color;
  };

  Slider.prototype[slider_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Slider.prototype[slider_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Slider;
}(slider_common_1.SliderBase);

exports.Slider = Slider;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var Background = function () {
  function Background() {
    this.borderTopWidth = 0;
    this.borderRightWidth = 0;
    this.borderBottomWidth = 0;
    this.borderLeftWidth = 0;
    this.borderTopLeftRadius = 0;
    this.borderTopRightRadius = 0;
    this.borderBottomLeftRadius = 0;
    this.borderBottomRightRadius = 0;
  }

  Background.prototype.clone = function () {
    var clone = new Background();
    clone.color = this.color;
    clone.image = this.image;
    clone.repeat = this.repeat;
    clone.position = this.position;
    clone.size = this.size;
    clone.borderTopColor = this.borderTopColor;
    clone.borderRightColor = this.borderRightColor;
    clone.borderBottomColor = this.borderBottomColor;
    clone.borderLeftColor = this.borderLeftColor;
    clone.borderTopWidth = this.borderTopWidth;
    clone.borderRightWidth = this.borderRightWidth;
    clone.borderBottomWidth = this.borderBottomWidth;
    clone.borderLeftWidth = this.borderLeftWidth;
    clone.borderTopLeftRadius = this.borderTopLeftRadius;
    clone.borderTopRightRadius = this.borderTopRightRadius;
    clone.borderBottomRightRadius = this.borderBottomRightRadius;
    clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
    clone.clipPath = this.clipPath;
    return clone;
  };

  Background.prototype.withColor = function (value) {
    var clone = this.clone();
    clone.color = value;
    return clone;
  };

  Background.prototype.withImage = function (value) {
    var clone = this.clone();
    clone.image = value;
    return clone;
  };

  Background.prototype.withRepeat = function (value) {
    var clone = this.clone();
    clone.repeat = value;
    return clone;
  };

  Background.prototype.withPosition = function (value) {
    var clone = this.clone();
    clone.position = value;
    return clone;
  };

  Background.prototype.withSize = function (value) {
    var clone = this.clone();
    clone.size = value;
    return clone;
  };

  Background.prototype.withBorderTopColor = function (value) {
    var clone = this.clone();
    clone.borderTopColor = value;
    return clone;
  };

  Background.prototype.withBorderRightColor = function (value) {
    var clone = this.clone();
    clone.borderRightColor = value;
    return clone;
  };

  Background.prototype.withBorderBottomColor = function (value) {
    var clone = this.clone();
    clone.borderBottomColor = value;
    return clone;
  };

  Background.prototype.withBorderLeftColor = function (value) {
    var clone = this.clone();
    clone.borderLeftColor = value;
    return clone;
  };

  Background.prototype.withBorderTopWidth = function (value) {
    var clone = this.clone();
    clone.borderTopWidth = value;
    return clone;
  };

  Background.prototype.withBorderRightWidth = function (value) {
    var clone = this.clone();
    clone.borderRightWidth = value;
    return clone;
  };

  Background.prototype.withBorderBottomWidth = function (value) {
    var clone = this.clone();
    clone.borderBottomWidth = value;
    return clone;
  };

  Background.prototype.withBorderLeftWidth = function (value) {
    var clone = this.clone();
    clone.borderLeftWidth = value;
    return clone;
  };

  Background.prototype.withBorderTopLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderTopLeftRadius = value;
    return clone;
  };

  Background.prototype.withBorderTopRightRadius = function (value) {
    var clone = this.clone();
    clone.borderTopRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomRightRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomRightRadius = value;
    return clone;
  };

  Background.prototype.withBorderBottomLeftRadius = function (value) {
    var clone = this.clone();
    clone.borderBottomLeftRadius = value;
    return clone;
  };

  Background.prototype.withClipPath = function (value) {
    var clone = this.clone();
    clone.clipPath = value;
    return clone;
  };

  Background.prototype.isEmpty = function () {
    return !this.color && !this.image && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
  };

  Background.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    var imagesEqual = false;

    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      imagesEqual = linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      imagesEqual = value1.image === value2.image;
    }

    return color_1.Color.equals(value1.color, value2.color) && imagesEqual && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor) && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor) && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
  };

  Background.prototype.hasBorderColor = function () {
    return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
  };

  Background.prototype.hasBorderWidth = function () {
    return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
  };

  Background.prototype.hasBorderRadius = function () {
    return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
  };

  Background.prototype.hasUniformBorderColor = function () {
    return color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
  };

  Background.prototype.hasUniformBorderWidth = function () {
    return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
  };

  Background.prototype.hasUniformBorderRadius = function () {
    return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
  };

  Background.prototype.hasUniformBorder = function () {
    return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
  };

  Background.prototype.getUniformBorderColor = function () {
    if (this.hasUniformBorderColor()) {
      return this.borderTopColor;
    }

    return undefined;
  };

  ;

  Background.prototype.getUniformBorderWidth = function () {
    if (this.hasUniformBorderWidth()) {
      return this.borderTopWidth;
    }

    return 0;
  };

  ;

  Background.prototype.getUniformBorderRadius = function () {
    if (this.hasUniformBorderRadius()) {
      return this.borderTopLeftRadius;
    }

    return 0;
  };

  ;

  Background.prototype.toString = function () {
    return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
  };

  Background.default = new Background();
  return Background;
}();

exports.Background = Background;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/background.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var css_value_1 = __webpack_require__("../node_modules/tns-core-modules/css-value/index.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/background-common.js"));

var clearCGColor = utils_1.ios.getter(UIColor, UIColor.clearColor).CGColor;
var symbolUrl = Symbol("backgroundImageUrl");
var ios;

(function (ios) {
  function createBackgroundUIColor(view, callback, flip) {
    var background = view.style.backgroundInternal;
    var nativeView = view.nativeViewProtected;

    if (nativeView.hasNonUniformBorder) {
      unsubscribeFromScrollNotifications(view);
      clearNonUniformBorders(nativeView);
    }

    clearGradient(nativeView);

    if (background.image instanceof linear_gradient_1.LinearGradient) {
      drawGradient(nativeView, background.image);
    }

    var hasNonUniformBorderWidths = background.hasBorderWidth() && !background.hasUniformBorder();
    var hasNonUniformBorderRadiuses = background.hasBorderRadius() && !background.hasUniformBorderRadius();

    if (background.hasUniformBorderColor() && (hasNonUniformBorderWidths || hasNonUniformBorderRadiuses)) {
      drawUniformColorNonUniformBorders(nativeView, background);
      subscribeForScrollNotifications(view);
    } else if (background.hasUniformBorder()) {
      var layer = nativeView.layer;
      var borderColor = background.getUniformBorderColor();
      layer.borderColor = !borderColor ? undefined : borderColor.ios.CGColor;
      layer.borderWidth = utils_1.layout.toDeviceIndependentPixels(background.getUniformBorderWidth());
      var renderSize = view.getActualSize() || {
        width: 0,
        height: 0
      };
      var cornerRadius = utils_1.layout.toDeviceIndependentPixels(background.getUniformBorderRadius());
      layer.cornerRadius = Math.min(Math.min(renderSize.width / 2, renderSize.height / 2), cornerRadius);
    } else {
      drawNoRadiusNonUniformBorders(nativeView, background);
      subscribeForScrollNotifications(view);
    }

    if (background.clipPath) {
      drawClipPath(nativeView, background);
    }

    if (!background.image || background.image instanceof linear_gradient_1.LinearGradient) {
      var uiColor = background.color ? background.color.ios : undefined;
      callback(uiColor);
    } else {
      setUIColorFromImage(view, nativeView, callback, flip);
    }
  }

  ios.createBackgroundUIColor = createBackgroundUIColor;
})(ios = exports.ios || (exports.ios = {}));

function onScroll(args) {
  var view = args.object;
  var nativeView = view.nativeViewProtected;

  if (nativeView instanceof UIScrollView) {
    adjustLayersForScrollView(nativeView);
  }
}

function adjustLayersForScrollView(nativeView) {
  var layer = nativeView.borderLayer;

  if (layer instanceof CALayer) {
    CATransaction.begin();
    CATransaction.setValueForKey(kCFBooleanTrue, kCATransactionDisableActions);
    var offset = nativeView.contentOffset;
    var transform = {
      a: 1,
      b: 0,
      c: 0,
      d: 1,
      tx: offset.x,
      ty: offset.y
    };
    layer.setAffineTransform(transform);

    if (nativeView.layer.mask) {
      nativeView.layer.mask.setAffineTransform(transform);
    }

    CATransaction.commit();
  }
}

function unsubscribeFromScrollNotifications(view) {
  if (view.nativeViewProtected instanceof UIScrollView) {
    view.off("scroll", onScroll);
  }
}

function subscribeForScrollNotifications(view) {
  if (view.nativeViewProtected instanceof UIScrollView) {
    view.on("scroll", onScroll);
    adjustLayersForScrollView(view.nativeViewProtected);
  }
}

function clearNonUniformBorders(nativeView) {
  if (nativeView.borderLayer) {
    nativeView.borderLayer.removeFromSuperlayer();
  }

  if (nativeView.hasBorderMask) {
    nativeView.layer.mask = nativeView.borderOriginalMask;
    nativeView.hasBorderMask = false;
    nativeView.borderOriginalMask = null;
  }

  if (nativeView.topBorderLayer) {
    nativeView.topBorderLayer.removeFromSuperlayer();
  }

  if (nativeView.rightBorderLayer) {
    nativeView.rightBorderLayer.removeFromSuperlayer();
  }

  if (nativeView.bottomBorderLayer) {
    nativeView.bottomBorderLayer.removeFromSuperlayer();
  }

  if (nativeView.leftBorderLayer) {
    nativeView.leftBorderLayer.removeFromSuperlayer();
  }
}

var pattern = /url\(('|")(.*?)\1\)/;

function setUIColorFromImage(view, nativeView, callback, flip) {
  var frame = nativeView.frame;
  var boundsWidth = view.scaleX ? frame.size.width / view.scaleX : frame.size.width;
  var boundsHeight = view.scaleY ? frame.size.height / view.scaleY : frame.size.height;

  if (!boundsWidth || !boundsHeight) {
    return undefined;
  }

  var style = view.style;
  var background = style.backgroundInternal;
  var imageUri = background.image;

  if (imageUri) {
    var match = imageUri.match(pattern);

    if (match && match[2]) {
      imageUri = match[2];
    }
  }

  var bitmap;

  if (utils_1.isDataURI(imageUri)) {
    var base64Data = imageUri.split(",")[1];

    if (base64Data !== undefined) {
      var imageSource = image_source_1.fromBase64(base64Data);
      bitmap = imageSource && imageSource.ios;
    }
  } else if (utils_1.isFileOrResourcePath(imageUri)) {
    var imageSource = image_source_1.fromFileOrResource(imageUri);
    bitmap = imageSource && imageSource.ios;
  } else if (imageUri.indexOf("http") !== -1) {
    style[symbolUrl] = imageUri;
    image_source_1.fromUrl(imageUri).then(function (r) {
      if (style && style[symbolUrl] === imageUri) {
        uiColorFromImage(r.ios, view, callback, flip);
      }
    });
  }

  uiColorFromImage(bitmap, view, callback, flip);
}

function parsePosition(pos) {
  var values = css_value_1.parse(pos);

  if (values.length === 2) {
    return {
      x: values[0],
      y: values[1]
    };
  }

  if (values.length === 1 && values[0].type === "ident") {
    var val = values[0].string.toLocaleLowerCase();
    var center = {
      type: "ident",
      string: "center"
    };

    if (val === "left" || val === "right") {
      return {
        x: values[0],
        y: center
      };
    } else if (val === "top" || val === "bottom") {
      return {
        x: center,
        y: values[0]
      };
    } else if (val === "center") {
      return {
        x: center,
        y: center
      };
    }
  }

  return null;
}

;

function getDrawParams(image, background, width, height) {
  if (!image) {
    return null;
  }

  var res = {
    repeatX: true,
    repeatY: true,
    posX: 0,
    posY: 0
  };

  if (background.repeat) {
    switch (background.repeat.toLowerCase()) {
      case "no-repeat":
        res.repeatX = false;
        res.repeatY = false;
        break;

      case "repeat-x":
        res.repeatY = false;
        break;

      case "repeat-y":
        res.repeatX = false;
        break;
    }
  }

  var imageSize = image.size;
  var imageWidth = imageSize.width;
  var imageHeight = imageSize.height;
  var size = background.size;

  if (size) {
    var values = css_value_1.parse(size);

    if (values.length === 2) {
      var vx = values[0];
      var vy = values[1];

      if (vx.unit === "%" && vy.unit === "%") {
        imageWidth = width * vx.value / 100;
        imageHeight = height * vy.value / 100;
        res.sizeX = imageWidth;
        res.sizeY = imageHeight;
      } else if (vx.type === "number" && vy.type === "number" && (vx.unit === "px" && vy.unit === "px" || vx.unit === "" && vy.unit === "")) {
        imageWidth = vx.value;
        imageHeight = vy.value;
        res.sizeX = imageWidth;
        res.sizeY = imageHeight;
      }
    } else if (values.length === 1 && values[0].type === "ident") {
      var scale = 0;

      if (values[0].string === "cover") {
        scale = Math.max(width / imageWidth, height / imageHeight);
      } else if (values[0].string === "contain") {
        scale = Math.min(width / imageWidth, height / imageHeight);
      }

      if (scale > 0) {
        imageWidth *= scale;
        imageHeight *= scale;
        res.sizeX = imageWidth;
        res.sizeY = imageHeight;
      }
    }
  }

  var position = background.position;

  if (position) {
    var v = parsePosition(position);

    if (v) {
      var spaceX = width - imageWidth;
      var spaceY = height - imageHeight;

      if (v.x.unit === "%" && v.y.unit === "%") {
        res.posX = spaceX * v.x.value / 100;
        res.posY = spaceY * v.y.value / 100;
      } else if (v.x.type === "number" && v.y.type === "number" && (v.x.unit === "px" && v.y.unit === "px" || v.x.unit === "" && v.y.unit === "")) {
        res.posX = v.x.value;
        res.posY = v.y.value;
      } else if (v.x.type === "ident" && v.y.type === "ident") {
        if (v.x.string.toLowerCase() === "center") {
          res.posX = spaceX / 2;
        } else if (v.x.string.toLowerCase() === "right") {
          res.posX = spaceX;
        }

        if (v.y.string.toLowerCase() === "center") {
          res.posY = spaceY / 2;
        } else if (v.y.string.toLowerCase() === "bottom") {
          res.posY = spaceY;
        }
      }
    }
  }

  return res;
}

function uiColorFromImage(img, view, callback, flip) {
  var background = view.style.backgroundInternal;

  if (!img) {
    callback(background.color && background.color.ios);
    return;
  }

  var nativeView = view.nativeViewProtected;
  var frame = nativeView.frame;
  var boundsWidth = view.scaleX ? frame.size.width / view.scaleX : frame.size.width;
  var boundsHeight = view.scaleY ? frame.size.height / view.scaleY : frame.size.height;
  var params = getDrawParams(img, background, boundsWidth, boundsHeight);

  if (params.sizeX > 0 && params.sizeY > 0) {
    var resizeRect = CGRectMake(0, 0, params.sizeX, params.sizeY);
    UIGraphicsBeginImageContextWithOptions(resizeRect.size, false, 0.0);
    img.drawInRect(resizeRect);
    img = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
  }

  UIGraphicsBeginImageContextWithOptions(CGSizeFromString("{" + boundsWidth + "," + boundsHeight + "}"), false, 0.0);
  var context = UIGraphicsGetCurrentContext();

  if (background.color && background.color.ios) {
    CGContextSetFillColorWithColor(context, background.color.ios.CGColor);
    CGContextFillRect(context, CGRectMake(0, 0, boundsWidth, boundsHeight));
  }

  if (!params.repeatX && !params.repeatY) {
    img.drawAtPoint(CGPointMake(params.posX, params.posY));
  } else {
    var w = params.repeatX ? boundsWidth : img.size.width;
    var h = params.repeatY ? boundsHeight : img.size.height;
    CGContextSetPatternPhase(context, CGSizeMake(params.posX, params.posY));
    params.posX = params.repeatX ? 0 : params.posX;
    params.posY = params.repeatY ? 0 : params.posY;
    var patternRect = CGRectMake(params.posX, params.posY, w, h);
    img.drawAsPatternInRect(patternRect);
  }

  var bkgImage = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();

  if (flip) {
    var flippedImage = _flipImage(bkgImage);

    callback(UIColor.alloc().initWithPatternImage(flippedImage));
  } else {
    callback(UIColor.alloc().initWithPatternImage(bkgImage));
  }
}

function _flipImage(originalImage) {
  UIGraphicsBeginImageContextWithOptions(originalImage.size, false, 0.0);
  var context = UIGraphicsGetCurrentContext();
  CGContextSaveGState(context);
  CGContextTranslateCTM(context, 0.0, originalImage.size.height);
  CGContextScaleCTM(context, 1.0, -1.0);
  originalImage.drawInRect(CGRectMake(0, 0, originalImage.size.width, originalImage.size.height));
  CGContextRestoreGState(context);
  var flippedImage = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return flippedImage;
}

function cssValueToDeviceIndependentPixels(source, total) {
  source = source.trim();

  if (source.indexOf("px") !== -1) {
    return utils_1.layout.toDeviceIndependentPixels(parseFloat(source.replace("px", "")));
  } else if (source.indexOf("%") !== -1 && total > 0) {
    return parseFloat(source.replace("%", "")) / 100 * total;
  } else {
    return parseFloat(source);
  }
}

function drawUniformColorNonUniformBorders(nativeView, background) {
  var layer = nativeView.layer;
  layer.backgroundColor = undefined;
  layer.borderColor = undefined;
  layer.borderWidth = 0;
  layer.cornerRadius = 0;
  var _a = layer.bounds.size,
      width = _a.width,
      height = _a.height;
  var _b = layer.bounds.origin,
      x = _b.x,
      y = _b.y;
  var left = x;
  var top = y;
  var right = x + width;
  var bottom = y + height;
  var min = Math.min,
      max = Math.max;
  var borderTopWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderTopWidth));
  var borderRightWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderRightWidth));
  var borderBottomWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderBottomWidth));
  var borderLeftWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderLeftWidth));
  var borderVWidth = borderTopWidth + borderBottomWidth;
  var borderHWidth = borderLeftWidth + borderRightWidth;
  var cappedBorderTopWidth = borderTopWidth && borderTopWidth * min(1, height / borderVWidth);
  var cappedBorderRightWidth = borderRightWidth && borderRightWidth * min(1, width / borderHWidth);
  var cappedBorderBottomWidth = borderBottomWidth && borderBottomWidth * min(1, height / borderVWidth);
  var cappedBorderLeftWidth = borderLeftWidth && borderLeftWidth * min(1, width / borderHWidth);
  var outerTopLeftRadius = utils_1.layout.toDeviceIndependentPixels(background.borderTopLeftRadius);
  var outerTopRightRadius = utils_1.layout.toDeviceIndependentPixels(background.borderTopRightRadius);
  var outerBottomRightRadius = utils_1.layout.toDeviceIndependentPixels(background.borderBottomRightRadius);
  var outerBottomLeftRadius = utils_1.layout.toDeviceIndependentPixels(background.borderBottomLeftRadius);
  var topRadii = outerTopLeftRadius + outerTopRightRadius;
  var rightRadii = outerTopRightRadius + outerBottomRightRadius;
  var bottomRadii = outerBottomRightRadius + outerBottomLeftRadius;
  var leftRadii = outerBottomLeftRadius + outerTopLeftRadius;

  function capRadius(a, b, c) {
    return a && Math.min(a, Math.min(b, c));
  }

  var cappedOuterTopLeftRadius = capRadius(outerTopLeftRadius, outerTopLeftRadius / topRadii * width, outerTopLeftRadius / leftRadii * height);
  var cappedOuterTopRightRadius = capRadius(outerTopRightRadius, outerTopRightRadius / topRadii * width, outerTopRightRadius / rightRadii * height);
  var cappedOuterBottomRightRadius = capRadius(outerBottomRightRadius, outerBottomRightRadius / bottomRadii * width, outerBottomRightRadius / rightRadii * height);
  var cappedOuterBottomLeftRadius = capRadius(outerBottomLeftRadius, outerBottomLeftRadius / bottomRadii * width, outerBottomLeftRadius / leftRadii * height);
  var clipPath = CGPathCreateMutable();
  CGPathMoveToPoint(clipPath, null, left + cappedOuterTopLeftRadius, top);
  CGPathAddArcToPoint(clipPath, null, right, top, right, top + cappedOuterTopRightRadius, cappedOuterTopRightRadius);
  CGPathAddArcToPoint(clipPath, null, right, bottom, right - cappedOuterBottomRightRadius, bottom, cappedOuterBottomRightRadius);
  CGPathAddArcToPoint(clipPath, null, left, bottom, left, bottom - cappedOuterBottomLeftRadius, cappedOuterBottomLeftRadius);
  CGPathAddArcToPoint(clipPath, null, left, top, left + cappedOuterTopLeftRadius, top, cappedOuterTopLeftRadius);
  CGPathCloseSubpath(clipPath);
  nativeView.borderOriginalMask = layer.mask;
  var clipShapeLayer = CAShapeLayer.layer();
  clipShapeLayer.path = clipPath;
  layer.mask = clipShapeLayer;
  nativeView.hasBorderMask = true;

  if (cappedBorderLeftWidth > 0 || cappedBorderTopWidth > 0 || cappedBorderRightWidth > 0 || cappedBorderBottomWidth > 0) {
    var borderPath = CGPathCreateMutable();
    CGPathAddRect(borderPath, null, CGRectMake(left, top, width, height));

    if (cappedBorderTopWidth > 0 || cappedBorderLeftWidth > 0) {
      CGPathMoveToPoint(borderPath, null, left + cappedOuterTopLeftRadius, top + cappedBorderTopWidth);
    } else {
      CGPathMoveToPoint(borderPath, null, left, top);
    }

    if (cappedBorderTopWidth > 0 || cappedBorderRightWidth > 0) {
      var innerTopRightWRadius = max(0, cappedOuterTopRightRadius - cappedBorderRightWidth);
      var innerTopRightHRadius = max(0, cappedOuterTopRightRadius - cappedBorderTopWidth);
      var innerTopRightMaxRadius = max(innerTopRightWRadius, innerTopRightHRadius);
      var innerTopRightTransform = CGAffineTransformMake(innerTopRightMaxRadius && innerTopRightWRadius / innerTopRightMaxRadius, 0, 0, innerTopRightMaxRadius && innerTopRightHRadius / innerTopRightMaxRadius, right - cappedBorderRightWidth - innerTopRightWRadius, top + cappedBorderTopWidth + innerTopRightHRadius);
      CGPathAddArc(borderPath, innerTopRightTransform, 0, 0, innerTopRightMaxRadius, Math.PI * 3 / 2, 0, false);
    } else {
      CGPathMoveToPoint(borderPath, null, right, top);
    }

    if (cappedBorderBottomWidth > 0 || cappedBorderRightWidth > 0) {
      var innerBottomRightWRadius = max(0, cappedOuterBottomRightRadius - cappedBorderRightWidth);
      var innerBottomRightHRadius = max(0, cappedOuterBottomRightRadius - cappedBorderBottomWidth);
      var innerBottomRightMaxRadius = max(innerBottomRightWRadius, innerBottomRightHRadius);
      var innerBottomRightTransform = CGAffineTransformMake(innerBottomRightMaxRadius && innerBottomRightWRadius / innerBottomRightMaxRadius, 0, 0, innerBottomRightMaxRadius && innerBottomRightHRadius / innerBottomRightMaxRadius, right - cappedBorderRightWidth - innerBottomRightWRadius, bottom - cappedBorderBottomWidth - innerBottomRightHRadius);
      CGPathAddArc(borderPath, innerBottomRightTransform, 0, 0, innerBottomRightMaxRadius, 0, Math.PI / 2, false);
    } else {
      CGPathAddLineToPoint(borderPath, null, right, bottom);
    }

    if (cappedBorderBottomWidth > 0 || cappedBorderLeftWidth > 0) {
      var innerBottomLeftWRadius = max(0, cappedOuterBottomLeftRadius - cappedBorderLeftWidth);
      var innerBottomLeftHRadius = max(0, cappedOuterBottomLeftRadius - cappedBorderBottomWidth);
      var innerBottomLeftMaxRadius = max(innerBottomLeftWRadius, innerBottomLeftHRadius);
      var innerBottomLeftTransform = CGAffineTransformMake(innerBottomLeftMaxRadius && innerBottomLeftWRadius / innerBottomLeftMaxRadius, 0, 0, innerBottomLeftMaxRadius && innerBottomLeftHRadius / innerBottomLeftMaxRadius, left + cappedBorderLeftWidth + innerBottomLeftWRadius, bottom - cappedBorderBottomWidth - innerBottomLeftHRadius);
      CGPathAddArc(borderPath, innerBottomLeftTransform, 0, 0, innerBottomLeftMaxRadius, Math.PI / 2, Math.PI, false);
    } else {
      CGPathAddLineToPoint(borderPath, null, left, bottom);
    }

    if (cappedBorderTopWidth > 0 || cappedBorderLeftWidth > 0) {
      var innerTopLeftWRadius = max(0, cappedOuterTopLeftRadius - cappedBorderLeftWidth);
      var innerTopLeftHRadius = max(0, cappedOuterTopLeftRadius - cappedBorderTopWidth);
      var innerTopLeftMaxRadius = max(innerTopLeftWRadius, innerTopLeftHRadius);
      var innerTopLeftTransform = CGAffineTransformMake(innerTopLeftMaxRadius && innerTopLeftWRadius / innerTopLeftMaxRadius, 0, 0, innerTopLeftMaxRadius && innerTopLeftHRadius / innerTopLeftMaxRadius, left + cappedBorderLeftWidth + innerTopLeftWRadius, top + cappedBorderTopWidth + innerTopLeftHRadius);
      CGPathAddArc(borderPath, innerTopLeftTransform, 0, 0, innerTopLeftMaxRadius, Math.PI, Math.PI * 3 / 2, false);
    } else {
      CGPathAddLineToPoint(borderPath, null, left, top);
    }

    CGPathCloseSubpath(borderPath);
    var borderLayer = CAShapeLayer.layer();
    borderLayer.fillColor = background.borderTopColor && background.borderTopColor.ios.CGColor || UIColor.blackColor.CGColor;
    borderLayer.fillRule = kCAFillRuleEvenOdd;
    borderLayer.path = borderPath;
    layer.addSublayer(borderLayer);
    nativeView.borderLayer = borderLayer;
  }

  nativeView.hasNonUniformBorder = true;
}

function drawNoRadiusNonUniformBorders(nativeView, background) {
  var borderLayer = CALayer.layer();
  nativeView.layer.addSublayer(borderLayer);
  nativeView.borderLayer = borderLayer;
  borderLayer.borderColor = undefined;
  borderLayer.borderWidth = 0;
  borderLayer.cornerRadius = 0;
  var layerBounds = nativeView.layer.bounds;
  var layerOrigin = layerBounds.origin;
  var layerSize = layerBounds.size;
  var nativeViewLayerBounds = {
    left: layerOrigin.x,
    top: layerOrigin.y,
    bottom: layerSize.height,
    right: layerSize.width
  };
  var top = utils_1.layout.toDeviceIndependentPixels(background.borderTopWidth);
  var right = utils_1.layout.toDeviceIndependentPixels(background.borderRightWidth);
  var bottom = utils_1.layout.toDeviceIndependentPixels(background.borderBottomWidth);
  var left = utils_1.layout.toDeviceIndependentPixels(background.borderLeftWidth);
  var lto = {
    x: nativeViewLayerBounds.left,
    y: nativeViewLayerBounds.top
  };
  var lti = {
    x: nativeViewLayerBounds.left + left,
    y: nativeViewLayerBounds.top + top
  };
  var rto = {
    x: nativeViewLayerBounds.right,
    y: nativeViewLayerBounds.top
  };
  var rti = {
    x: nativeViewLayerBounds.right - right,
    y: nativeViewLayerBounds.top + top
  };
  var rbo = {
    x: nativeViewLayerBounds.right,
    y: nativeViewLayerBounds.bottom
  };
  var rbi = {
    x: nativeViewLayerBounds.right - right,
    y: nativeViewLayerBounds.bottom - bottom
  };
  var lbo = {
    x: nativeViewLayerBounds.left,
    y: nativeViewLayerBounds.bottom
  };
  var lbi = {
    x: nativeViewLayerBounds.left + left,
    y: nativeViewLayerBounds.bottom - bottom
  };
  var hasNonUniformBorder;
  var borderTopColor = background.borderTopColor;

  if (top > 0 && borderTopColor && borderTopColor.ios) {
    var topBorderPath = CGPathCreateMutable();
    CGPathMoveToPoint(topBorderPath, null, lto.x, lto.y);
    CGPathAddLineToPoint(topBorderPath, null, rto.x, rto.y);
    CGPathAddLineToPoint(topBorderPath, null, rti.x, rti.y);
    CGPathAddLineToPoint(topBorderPath, null, lti.x, lti.y);
    CGPathAddLineToPoint(topBorderPath, null, lto.x, lto.y);
    var topBorderLayer = CAShapeLayer.layer();
    topBorderLayer.fillColor = background.borderTopColor.ios.CGColor;
    topBorderLayer.path = topBorderPath;
    borderLayer.addSublayer(topBorderLayer);
    nativeView.topBorderLayer = topBorderLayer;
    hasNonUniformBorder = true;
  }

  var borderRightColor = background.borderRightColor;

  if (right > 0 && borderRightColor && borderRightColor.ios) {
    var rightBorderPath = CGPathCreateMutable();
    CGPathMoveToPoint(rightBorderPath, null, rto.x, rto.y);
    CGPathAddLineToPoint(rightBorderPath, null, rbo.x, rbo.y);
    CGPathAddLineToPoint(rightBorderPath, null, rbi.x, rbi.y);
    CGPathAddLineToPoint(rightBorderPath, null, rti.x, rti.y);
    CGPathAddLineToPoint(rightBorderPath, null, rto.x, rto.y);
    var rightBorderLayer = CAShapeLayer.layer();
    rightBorderLayer.fillColor = background.borderRightColor.ios.CGColor;
    rightBorderLayer.path = rightBorderPath;
    borderLayer.addSublayer(rightBorderLayer);
    nativeView.rightBorderLayer = rightBorderLayer;
    hasNonUniformBorder = true;
  }

  var borderBottomColor = background.borderBottomColor;

  if (bottom > 0 && borderBottomColor && borderBottomColor.ios) {
    var bottomBorderPath = CGPathCreateMutable();
    CGPathMoveToPoint(bottomBorderPath, null, rbo.x, rbo.y);
    CGPathAddLineToPoint(bottomBorderPath, null, lbo.x, lbo.y);
    CGPathAddLineToPoint(bottomBorderPath, null, lbi.x, lbi.y);
    CGPathAddLineToPoint(bottomBorderPath, null, rbi.x, rbi.y);
    CGPathAddLineToPoint(bottomBorderPath, null, rbo.x, rbo.y);
    var bottomBorderLayer = CAShapeLayer.layer();
    bottomBorderLayer.fillColor = background.borderBottomColor.ios.CGColor;
    bottomBorderLayer.path = bottomBorderPath;
    borderLayer.addSublayer(bottomBorderLayer);
    nativeView.bottomBorderLayer = bottomBorderLayer;
    hasNonUniformBorder = true;
  }

  var borderLeftColor = background.borderLeftColor;

  if (left > 0 && borderLeftColor && borderLeftColor.ios) {
    var leftBorderPath = CGPathCreateMutable();
    CGPathMoveToPoint(leftBorderPath, null, lbo.x, lbo.y);
    CGPathAddLineToPoint(leftBorderPath, null, lto.x, lto.y);
    CGPathAddLineToPoint(leftBorderPath, null, lti.x, lti.y);
    CGPathAddLineToPoint(leftBorderPath, null, lbi.x, lbi.y);
    CGPathAddLineToPoint(leftBorderPath, null, lbo.x, lbo.y);
    var leftBorderLayer = CAShapeLayer.layer();
    leftBorderLayer.fillColor = background.borderLeftColor.ios.CGColor;
    leftBorderLayer.path = leftBorderPath;
    borderLayer.addSublayer(leftBorderLayer);
    nativeView.leftBorderLayer = leftBorderLayer;
    hasNonUniformBorder = true;
  }

  nativeView.hasNonUniformBorder = hasNonUniformBorder;
}

function drawGradient(nativeView, gradient) {
  var gradientLayer = CAGradientLayer.layer();
  gradientLayer.frame = nativeView.bounds;
  nativeView.gradientLayer = gradientLayer;
  var iosColors = NSMutableArray.alloc().initWithCapacity(gradient.colorStops.length);
  var iosStops = NSMutableArray.alloc().initWithCapacity(gradient.colorStops.length);
  var hasStops = false;
  gradient.colorStops.forEach(function (stop) {
    iosColors.addObject(stop.color.ios.CGColor);

    if (stop.offset) {
      iosStops.addObject(stop.offset.value);
      hasStops = true;
    }
  });
  gradientLayer.colors = iosColors;

  if (hasStops) {
    gradientLayer.locations = iosStops;
  }

  var alpha = gradient.angle / (Math.PI * 2);
  var startX = Math.pow(Math.sin(Math.PI * (alpha + 0.75)), 2);
  var startY = Math.pow(Math.sin(Math.PI * (alpha + 0.5)), 2);
  var endX = Math.pow(Math.sin(Math.PI * (alpha + 0.25)), 2);
  var endY = Math.pow(Math.sin(Math.PI * alpha), 2);
  gradientLayer.startPoint = {
    x: startX,
    y: startY
  };
  gradientLayer.endPoint = {
    x: endX,
    y: endY
  };
  nativeView.layer.insertSublayerAtIndex(gradientLayer, 0);
}

function clearGradient(nativeView) {
  if (nativeView.gradientLayer) {
    nativeView.gradientLayer.removeFromSuperlayer();
  }
}

function drawClipPath(nativeView, background) {
  var layer = nativeView.layer;
  var layerBounds = layer.bounds;
  var layerOrigin = layerBounds.origin;
  var layerSize = layerBounds.size;
  var bounds = {
    left: layerOrigin.x,
    top: layerOrigin.y,
    bottom: layerSize.height,
    right: layerSize.width
  };

  if (bounds.right === 0 || bounds.bottom === 0) {
    return;
  }

  var path;
  var clipPath = background.clipPath;
  var functionName = clipPath.substring(0, clipPath.indexOf("("));
  var value = clipPath.replace(functionName + "(", "").replace(")", "");

  switch (functionName) {
    case "rect":
      path = rectPath(value, bounds);
      break;

    case "inset":
      path = insetPath(value, bounds);
      break;

    case "circle":
      path = circlePath(value, bounds);
      break;

    case "ellipse":
      path = ellipsePath(value, bounds);
      break;

    case "polygon":
      path = polygonPath(value, bounds);
      break;
  }

  if (path) {
    var shape = CAShapeLayer.layer();
    shape.path = path;
    layer.mask = shape;
    nativeView.clipsToBounds = true;
    var borderWidth = background.getUniformBorderWidth();
    var borderColor = background.getUniformBorderColor();

    if (borderWidth > 0 && borderColor instanceof color_1.Color) {
      var borderLayer = CAShapeLayer.layer();
      borderLayer.path = path;
      borderLayer.lineWidth = borderWidth * 2;
      borderLayer.strokeColor = borderColor.ios.CGColor;
      borderLayer.fillColor = clearCGColor;
      borderLayer.frame = nativeView.bounds;
      layer.borderColor = undefined;
      layer.borderWidth = 0;
      layer.addSublayer(borderLayer);
    }
  }
}

function rectPath(value, bounds) {
  var arr = value.split(/[\s]+/);
  var top = cssValueToDeviceIndependentPixels(arr[0], bounds.top);
  var right = cssValueToDeviceIndependentPixels(arr[1], bounds.right);
  var bottom = cssValueToDeviceIndependentPixels(arr[2], bounds.bottom);
  var left = cssValueToDeviceIndependentPixels(arr[3], bounds.left);
  return UIBezierPath.bezierPathWithRect(CGRectMake(left, top, right - left, bottom - top)).CGPath;
}

function insetPath(value, bounds) {
  var arr = value.split(/[\s]+/);
  var topString;
  var rightString;
  var bottomString;
  var leftString;

  if (arr.length === 1) {
    topString = rightString = bottomString = leftString = arr[0];
  } else if (arr.length === 2) {
    topString = bottomString = arr[0];
    rightString = leftString = arr[1];
  } else if (arr.length === 3) {
    topString = arr[0];
    rightString = leftString = arr[1];
    bottomString = arr[2];
  } else if (arr.length === 4) {
    topString = arr[0];
    rightString = arr[1];
    bottomString = arr[2];
    leftString = arr[3];
  }

  var top = cssValueToDeviceIndependentPixels(topString, bounds.bottom);
  var right = cssValueToDeviceIndependentPixels("100%", bounds.right) - cssValueToDeviceIndependentPixels(rightString, bounds.right);
  var bottom = cssValueToDeviceIndependentPixels("100%", bounds.bottom) - cssValueToDeviceIndependentPixels(bottomString, bounds.bottom);
  var left = cssValueToDeviceIndependentPixels(leftString, bounds.right);
  return UIBezierPath.bezierPathWithRect(CGRectMake(left, top, right - left, bottom - top)).CGPath;
}

function circlePath(value, bounds) {
  var arr = value.split(/[\s]+/);
  var radius = cssValueToDeviceIndependentPixels(arr[0], (bounds.right > bounds.bottom ? bounds.bottom : bounds.right) / 2);
  var y = cssValueToDeviceIndependentPixels(arr[2], bounds.bottom);
  var x = cssValueToDeviceIndependentPixels(arr[3], bounds.right);
  return UIBezierPath.bezierPathWithArcCenterRadiusStartAngleEndAngleClockwise(CGPointMake(x, y), radius, 0, 360, true).CGPath;
}

function ellipsePath(value, bounds) {
  var arr = value.split(/[\s]+/);
  var rX = cssValueToDeviceIndependentPixels(arr[0], bounds.right);
  var rY = cssValueToDeviceIndependentPixels(arr[1], bounds.bottom);
  var cX = cssValueToDeviceIndependentPixels(arr[3], bounds.right);
  var cY = cssValueToDeviceIndependentPixels(arr[4], bounds.bottom);
  var left = cX - rX;
  var top = cY - rY;
  var width = rX * 2;
  var height = rY * 2;
  return UIBezierPath.bezierPathWithOvalInRect(CGRectMake(left, top, width, height)).CGPath;
}

function polygonPath(value, bounds) {
  var path = CGPathCreateMutable();
  var firstPoint;
  var arr = value.split(/[,]+/);

  for (var i = 0; i < arr.length; i++) {
    var xy = arr[i].trim().split(/[\s]+/);
    var point = {
      x: cssValueToDeviceIndependentPixels(xy[0], bounds.right),
      y: cssValueToDeviceIndependentPixels(xy[1], bounds.bottom)
    };

    if (!firstPoint) {
      firstPoint = point;
      CGPathMoveToPoint(path, null, point.x, point.y);
    }

    CGPathAddLineToPoint(path, null, point.x, point.y);
  }

  CGPathAddLineToPoint(path, null, firstPoint.x, firstPoint.y);
  return path;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/converters.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var enums_1 = __webpack_require__("../node_modules/tns-core-modules/ui/enums/enums.js");

var STYLE_CURVE_MAP = Object.freeze({
  "ease": enums_1.AnimationCurve.ease,
  "linear": enums_1.AnimationCurve.linear,
  "ease-in": enums_1.AnimationCurve.easeIn,
  "ease-out": enums_1.AnimationCurve.easeOut,
  "ease-in-out": enums_1.AnimationCurve.easeInOut,
  "spring": enums_1.AnimationCurve.spring
});

function timeConverter(value) {
  var result = parseFloat(value);

  if (value.indexOf("ms") === -1) {
    result = result * 1000;
  }

  return Math.max(0.0, result);
}

exports.timeConverter = timeConverter;

function animationTimingFunctionConverter(value) {
  return value ? STYLE_CURVE_MAP[value] || parseCubicBezierCurve(value) : enums_1.AnimationCurve.ease;
}

exports.animationTimingFunctionConverter = animationTimingFunctionConverter;

function parseCubicBezierCurve(value) {
  var coordsString = /\((.*?)\)/.exec(value);
  var coords = coordsString && coordsString[1].split(",").map(stringToBezieCoords);

  if (value.startsWith("cubic-bezier") && coordsString && coords.length === 4) {
    var _a = coords.slice(),
        x1 = _a[0],
        x2 = _a[1],
        y1_1 = _a[2],
        y2 = _a[3];

    return enums_1.AnimationCurve.cubicBezier(x1, x2, y1_1, y2);
  } else {
    throw new Error("Invalid value for animation: " + value);
  }
}

function stringToBezieCoords(value) {
  var result = parseFloat(value);

  if (result < 0) {
    return 0;
  } else if (result > 1) {
    return 1;
  }

  return result;
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-animation-parser.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var keyframe_animation_1 = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");

var converters_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/converters.js");

var style_properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/style-properties.js");

var ANIMATION_PROPERTY_HANDLERS = Object.freeze({
  "animation-name": function (info, value) {
    return info.name = value;
  },
  "animation-duration": function (info, value) {
    return info.duration = converters_1.timeConverter(value);
  },
  "animation-delay": function (info, value) {
    return info.delay = converters_1.timeConverter(value);
  },
  "animation-timing-function": function (info, value) {
    return info.curve = converters_1.animationTimingFunctionConverter(value);
  },
  "animation-iteration-count": function (info, value) {
    return info.iterations = value === "infinite" ? Number.MAX_VALUE : parseFloat(value);
  },
  "animation-direction": function (info, value) {
    return info.isReverse = value === "reverse";
  },
  "animation-fill-mode": function (info, value) {
    return info.isForwards = value === "forwards";
  }
});

var CssAnimationParser = function () {
  function CssAnimationParser() {}

  CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function (declarations) {
    if (declarations === null || declarations === undefined) {
      return undefined;
    }

    var animations = new Array();
    var animationInfo = undefined;
    declarations.forEach(function (_a) {
      var property = _a.property,
          value = _a.value;

      if (property === "animation") {
        keyframeAnimationsFromCSSProperty(value, animations);
      } else {
        var propertyHandler = ANIMATION_PROPERTY_HANDLERS[property];

        if (propertyHandler) {
          if (animationInfo === undefined) {
            animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
            animations.push(animationInfo);
          }

          propertyHandler(animationInfo, value);
        }
      }
    });
    return animations.length === 0 ? undefined : animations;
  };

  CssAnimationParser.keyframesArrayFromCSS = function (keyframes) {
    var parsedKeyframes = new Array();

    for (var _i = 0, keyframes_1 = keyframes; _i < keyframes_1.length; _i++) {
      var keyframe = keyframes_1[_i];
      var declarations = parseKeyframeDeclarations(keyframe.declarations);

      for (var _a = 0, _b = keyframe.values; _a < _b.length; _a++) {
        var time_1 = _b[_a];

        if (time_1 === "from") {
          time_1 = 0;
        } else if (time_1 === "to") {
          time_1 = 1;
        } else {
          time_1 = parseFloat(time_1) / 100;

          if (time_1 < 0) {
            time_1 = 0;
          }

          if (time_1 > 100) {
            time_1 = 100;
          }
        }

        var current = parsedKeyframes[time_1];

        if (current === undefined) {
          current = {};
          current.duration = time_1;
          parsedKeyframes[time_1] = current;
        }

        for (var _c = 0, _d = keyframe.declarations; _c < _d.length; _c++) {
          var declaration = _d[_c];

          if (declaration.property === "animation-timing-function") {
            current.curve = converters_1.animationTimingFunctionConverter(declaration.value);
          }
        }

        current.declarations = declarations;
      }
    }

    var array = new Array();

    for (var parsedKeyframe in parsedKeyframes) {
      array.push(parsedKeyframes[parsedKeyframe]);
    }

    array.sort(function (a, b) {
      return a.duration - b.duration;
    });
    return array;
  };

  return CssAnimationParser;
}();

exports.CssAnimationParser = CssAnimationParser;

function keyframeAnimationsFromCSSProperty(value, animations) {
  if (typeof value === "string") {
    var values = value.split(/[,]+/);

    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
      var parsedValue = values_1[_i];
      var animationInfo = new keyframe_animation_1.KeyframeAnimationInfo();
      var arr = parsedValue.trim().split(/[ ]+/);

      if (arr.length > 0) {
        animationInfo.name = arr[0];
      }

      if (arr.length > 1) {
        animationInfo.duration = converters_1.timeConverter(arr[1]);
      }

      if (arr.length > 2) {
        animationInfo.curve = converters_1.animationTimingFunctionConverter(arr[2]);
      }

      if (arr.length > 3) {
        animationInfo.delay = converters_1.timeConverter(arr[3]);
      }

      if (arr.length > 4) {
        animationInfo.iterations = parseInt(arr[4]);
      }

      if (arr.length > 5) {
        animationInfo.isReverse = arr[4] === "reverse";
      }

      if (arr.length > 6) {
        animationInfo.isForwards = arr[5] === "forwards";
      }

      if (arr.length > 7) {
        throw new Error("Invalid value for animation: " + value);
      }

      animations.push(animationInfo);
    }
  }
}

function parseKeyframeDeclarations(unparsedKeyframeDeclarations) {
  var declarations = unparsedKeyframeDeclarations.reduce(function (declarations, _a) {
    var unparsedProperty = _a.property,
        unparsedValue = _a.value;

    var property = properties_1.CssAnimationProperty._getByCssName(unparsedProperty);

    if (typeof unparsedProperty === "string" && property && property._valueConverter) {
      declarations[property.name] = property._valueConverter(unparsedValue);
    } else if (typeof unparsedValue === "string" && unparsedProperty === "transform") {
      var transformations = style_properties_1.transformConverter(unparsedValue);
      Object.assign(declarations, transformations);
    }

    return declarations;
  }, {});
  return Object.keys(declarations).map(function (property) {
    return {
      property: property,
      value: declarations[property]
    };
  });
}

exports.parseKeyframeDeclarations = parseKeyframeDeclarations;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var utils_common_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var Match;

(function (Match) {
  Match.Dynamic = true;
  Match.Static = false;
})(Match || (Match = {}));

function getNodeDirectSibling(node) {
  if (!node.parent || !node.parent.getChildIndex || !node.parent.getChildAt) {
    return null;
  }

  var nodeIndex = node.parent.getChildIndex(node);

  if (nodeIndex === 0) {
    return null;
  }

  return node.parent.getChildAt(nodeIndex - 1);
}

function SelectorProperties(specificity, rarity, dynamic) {
  if (dynamic === void 0) {
    dynamic = false;
  }

  return function (cls) {
    cls.prototype.specificity = specificity;
    cls.prototype.rarity = rarity;
    cls.prototype.combinator = undefined;
    cls.prototype.dynamic = dynamic;
    return cls;
  };
}

var SelectorCore = function () {
  function SelectorCore() {}

  SelectorCore.prototype.lookupSort = function (sorter, base) {
    sorter.sortAsUniversal(base || this);
  };

  SelectorCore = __decorate([SelectorProperties(0, 0, Match.Static)], SelectorCore);
  return SelectorCore;
}();

exports.SelectorCore = SelectorCore;

var SimpleSelector = function (_super) {
  __extends(SimpleSelector, _super);

  function SimpleSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SimpleSelector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    } else if (this.mayMatch(node)) {
      this.trackChanges(node, map);
      return true;
    }

    return false;
  };

  SimpleSelector.prototype.mayMatch = function (node) {
    return this.match(node);
  };

  SimpleSelector.prototype.trackChanges = function (node, map) {};

  return SimpleSelector;
}(SelectorCore);

exports.SimpleSelector = SimpleSelector;

function wrap(text) {
  return text ? " " + text + " " : "";
}

var InvalidSelector = function (_super) {
  __extends(InvalidSelector, _super);

  function InvalidSelector(e) {
    var _this = _super.call(this) || this;

    _this.e = e;
    return _this;
  }

  InvalidSelector.prototype.toString = function () {
    return "<error: " + this.e + ">";
  };

  InvalidSelector.prototype.match = function (node) {
    return false;
  };

  InvalidSelector.prototype.lookupSort = function (sorter, base) {};

  InvalidSelector = __decorate([SelectorProperties(0, 4, Match.Static)], InvalidSelector);
  return InvalidSelector;
}(SimpleSelector);

exports.InvalidSelector = InvalidSelector;

var UniversalSelector = function (_super) {
  __extends(UniversalSelector, _super);

  function UniversalSelector() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UniversalSelector.prototype.toString = function () {
    return "*" + wrap(this.combinator);
  };

  UniversalSelector.prototype.match = function (node) {
    return true;
  };

  UniversalSelector = __decorate([SelectorProperties(0, 0, Match.Static)], UniversalSelector);
  return UniversalSelector;
}(SimpleSelector);

exports.UniversalSelector = UniversalSelector;

var IdSelector = function (_super) {
  __extends(IdSelector, _super);

  function IdSelector(id) {
    var _this = _super.call(this) || this;

    _this.id = id;
    return _this;
  }

  IdSelector.prototype.toString = function () {
    return "#" + this.id + wrap(this.combinator);
  };

  IdSelector.prototype.match = function (node) {
    return node.id === this.id;
  };

  IdSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortById(this.id, base || this);
  };

  IdSelector = __decorate([SelectorProperties(65536, 3, Match.Static)], IdSelector);
  return IdSelector;
}(SimpleSelector);

exports.IdSelector = IdSelector;

var TypeSelector = function (_super) {
  __extends(TypeSelector, _super);

  function TypeSelector(cssType) {
    var _this = _super.call(this) || this;

    _this.cssType = cssType;
    return _this;
  }

  TypeSelector.prototype.toString = function () {
    return "" + this.cssType + wrap(this.combinator);
  };

  TypeSelector.prototype.match = function (node) {
    return node.cssType === this.cssType;
  };

  TypeSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByType(this.cssType, base || this);
  };

  TypeSelector = __decorate([SelectorProperties(1, 1, Match.Static)], TypeSelector);
  return TypeSelector;
}(SimpleSelector);

exports.TypeSelector = TypeSelector;

var ClassSelector = function (_super) {
  __extends(ClassSelector, _super);

  function ClassSelector(cssClass) {
    var _this = _super.call(this) || this;

    _this.cssClass = cssClass;
    return _this;
  }

  ClassSelector.prototype.toString = function () {
    return "." + this.cssClass + wrap(this.combinator);
  };

  ClassSelector.prototype.match = function (node) {
    return node.cssClasses && node.cssClasses.has(this.cssClass);
  };

  ClassSelector.prototype.lookupSort = function (sorter, base) {
    sorter.sortByClass(this.cssClass, base || this);
  };

  ClassSelector = __decorate([SelectorProperties(256, 2, Match.Static)], ClassSelector);
  return ClassSelector;
}(SimpleSelector);

exports.ClassSelector = ClassSelector;

var AttributeSelector = function (_super) {
  __extends(AttributeSelector, _super);

  function AttributeSelector(attribute, test, value) {
    var _this = _super.call(this) || this;

    _this.attribute = attribute;
    _this.test = test;
    _this.value = value;

    if (!test) {
      _this.match = function (node) {
        return !types_1.isNullOrUndefined(node[attribute]);
      };

      return _this;
    }

    if (!value) {
      _this.match = function (node) {
        return false;
      };
    }

    var escapedValue = utils_common_1.escapeRegexSymbols(value);
    var regexp = null;

    switch (test) {
      case "^=":
        regexp = new RegExp("^" + escapedValue);
        break;

      case "$=":
        regexp = new RegExp(escapedValue + "$");
        break;

      case "*=":
        regexp = new RegExp(escapedValue);
        break;

      case "=":
        regexp = new RegExp("^" + escapedValue + "$");
        break;

      case "~=":
        if (/\s/.test(value)) {
          _this.match = function (node) {
            return false;
          };

          return _this;
        }

        regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
        break;

      case "|=":
        regexp = new RegExp("^" + escapedValue + "(-|$)");
        break;
    }

    if (regexp) {
      _this.match = function (node) {
        return regexp.test(node[attribute] + "");
      };

      return _this;
    } else {
      _this.match = function (node) {
        return false;
      };

      return _this;
    }
  }

  AttributeSelector.prototype.toString = function () {
    return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
  };

  AttributeSelector.prototype.match = function (node) {
    return false;
  };

  AttributeSelector.prototype.mayMatch = function (node) {
    return true;
  };

  AttributeSelector.prototype.trackChanges = function (node, map) {
    map.addAttribute(node, this.attribute);
  };

  AttributeSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], AttributeSelector);
  return AttributeSelector;
}(SimpleSelector);

exports.AttributeSelector = AttributeSelector;

var PseudoClassSelector = function (_super) {
  __extends(PseudoClassSelector, _super);

  function PseudoClassSelector(cssPseudoClass) {
    var _this = _super.call(this) || this;

    _this.cssPseudoClass = cssPseudoClass;
    return _this;
  }

  PseudoClassSelector.prototype.toString = function () {
    return ":" + this.cssPseudoClass + wrap(this.combinator);
  };

  PseudoClassSelector.prototype.match = function (node) {
    return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
  };

  PseudoClassSelector.prototype.mayMatch = function (node) {
    return true;
  };

  PseudoClassSelector.prototype.trackChanges = function (node, map) {
    map.addPseudoClass(node, this.cssPseudoClass);
  };

  PseudoClassSelector = __decorate([SelectorProperties(256, 0, Match.Dynamic)], PseudoClassSelector);
  return PseudoClassSelector;
}(SimpleSelector);

exports.PseudoClassSelector = PseudoClassSelector;

var SimpleSelectorSequence = function (_super) {
  __extends(SimpleSelectorSequence, _super);

  function SimpleSelectorSequence(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.head = _this.selectors.reduce(function (prev, curr) {
      return !prev || curr.rarity > prev.rarity ? curr : prev;
    }, null);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  SimpleSelectorSequence.prototype.toString = function () {
    return "" + this.selectors.join("") + wrap(this.combinator);
  };

  SimpleSelectorSequence.prototype.match = function (node) {
    return this.selectors.every(function (sel) {
      return sel.match(node);
    });
  };

  SimpleSelectorSequence.prototype.mayMatch = function (node) {
    return this.selectors.every(function (sel) {
      return sel.mayMatch(node);
    });
  };

  SimpleSelectorSequence.prototype.trackChanges = function (node, map) {
    this.selectors.forEach(function (sel) {
      return sel.trackChanges(node, map);
    });
  };

  SimpleSelectorSequence.prototype.lookupSort = function (sorter, base) {
    this.head.lookupSort(sorter, base || this);
  };

  return SimpleSelectorSequence;
}(SimpleSelector);

exports.SimpleSelectorSequence = SimpleSelectorSequence;

var Selector = function (_super) {
  __extends(Selector, _super);

  function Selector(selectors) {
    var _this = _super.call(this) || this;

    _this.selectors = selectors;
    var supportedCombinator = [undefined, " ", ">", "+"];
    var siblingGroup;
    var lastGroup;
    var groups = [];
    selectors.reverse().forEach(function (sel) {
      if (supportedCombinator.indexOf(sel.combinator) === -1) {
        throw new Error("Unsupported combinator \"" + sel.combinator + "\".");
      }

      if (sel.combinator === undefined || sel.combinator === " ") {
        groups.push(lastGroup = [siblingGroup = []]);
      }

      if (sel.combinator === ">") {
        lastGroup.push(siblingGroup = []);
      }

      siblingGroup.push(sel);
    });
    _this.groups = groups.map(function (g) {
      return new Selector.ChildGroup(g.map(function (sg) {
        return new Selector.SiblingGroup(sg);
      }));
    });
    _this.last = selectors[0];
    _this.specificity = selectors.reduce(function (sum, sel) {
      return sel.specificity + sum;
    }, 0);
    _this.dynamic = selectors.some(function (sel) {
      return sel.dynamic;
    });
    return _this;
  }

  Selector.prototype.toString = function () {
    return this.selectors.join("");
  };

  Selector.prototype.match = function (node) {
    return this.groups.every(function (group, i) {
      if (i === 0) {
        node = group.match(node);
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          if (node = group.match(ancestor)) {
            return true;
          }
        }

        return false;
      }
    });
  };

  Selector.prototype.lookupSort = function (sorter, base) {
    this.last.lookupSort(sorter, this);
  };

  Selector.prototype.accumulateChanges = function (node, map) {
    if (!this.dynamic) {
      return this.match(node);
    }

    var bounds = [];
    var mayMatch = this.groups.every(function (group, i) {
      if (i === 0) {
        var nextNode = group.mayMatch(node);
        bounds.push({
          left: node,
          right: node
        });
        node = nextNode;
        return !!node;
      } else {
        var ancestor = node;

        while (ancestor = ancestor.parent) {
          var nextNode = group.mayMatch(ancestor);

          if (nextNode) {
            bounds.push({
              left: ancestor,
              right: null
            });
            node = nextNode;
            return true;
          }
        }

        return false;
      }
    });

    if (!mayMatch) {
      return false;
    }

    if (!map) {
      return mayMatch;
    }

    for (var i = 0; i < this.groups.length; i++) {
      var group_1 = this.groups[i];

      if (!group_1.dynamic) {
        continue;
      }

      var bound = bounds[i];
      var node_1 = bound.left;

      do {
        if (group_1.mayMatch(node_1)) {
          group_1.trackChanges(node_1, map);
        }
      } while (node_1 !== bound.right && (node_1 = node_1.parent));
    }

    return mayMatch;
  };

  return Selector;
}(SelectorCore);

exports.Selector = Selector;

(function (Selector) {
  var ChildGroup = function () {
    function ChildGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    ChildGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.match(node);
      }) ? node : null;
    };

    ChildGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && !!sel.mayMatch(node);
      }) ? node : null;
    };

    ChildGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
      });
    };

    return ChildGroup;
  }();

  Selector.ChildGroup = ChildGroup;

  var SiblingGroup = function () {
    function SiblingGroup(selectors) {
      this.selectors = selectors;
      this.dynamic = selectors.some(function (sel) {
        return sel.dynamic;
      });
    }

    SiblingGroup.prototype.match = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.match(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.mayMatch = function (node) {
      return this.selectors.every(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.mayMatch(node);
      }) ? node : null;
    };

    SiblingGroup.prototype.trackChanges = function (node, map) {
      this.selectors.forEach(function (sel, i) {
        return (i === 0 ? node : node = getNodeDirectSibling(node)) && sel.trackChanges(node, map);
      });
    };

    return SiblingGroup;
  }();

  Selector.SiblingGroup = SiblingGroup;
})(Selector = exports.Selector || (exports.Selector = {}));

exports.Selector = Selector;

var RuleSet = function () {
  function RuleSet(selectors, declarations) {
    var _this = this;

    this.selectors = selectors;
    this.declarations = declarations;
    this.selectors.forEach(function (sel) {
      return sel.ruleset = _this;
    });
  }

  RuleSet.prototype.toString = function () {
    return this.selectors.join(", ") + " {" + this.declarations.map(function (d, i) {
      return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
    }).join("; ") + " }";
  };

  RuleSet.prototype.lookupSort = function (sorter) {
    this.selectors.forEach(function (sel) {
      return sel.lookupSort(sorter);
    });
  };

  return RuleSet;
}();

exports.RuleSet = RuleSet;

function fromAstNodes(astRules) {
  return astRules.filter(isRule).map(function (rule) {
    var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
    var selectors = rule.selectors.map(createSelector);
    var ruleset = new RuleSet(selectors, declarations);
    return ruleset;
  });
}

exports.fromAstNodes = fromAstNodes;

function createDeclaration(decl) {
  return {
    property: decl.property.toLowerCase(),
    value: decl.value
  };
}

function createSimpleSelectorFromAst(ast) {
  switch (ast.type) {
    case "*":
      return new UniversalSelector();

    case "#":
      return new IdSelector(ast.identifier);

    case "":
      return new TypeSelector(ast.identifier.replace(/-/, "").toLowerCase());

    case ".":
      return new ClassSelector(ast.identifier);

    case ":":
      return new PseudoClassSelector(ast.identifier);

    case "[]":
      return ast.test ? new AttributeSelector(ast.property, ast.test, ast.value) : new AttributeSelector(ast.property);
  }
}

function createSimpleSelectorSequenceFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty simple selector sequence."));
  } else if (ast.length === 1) {
    return createSimpleSelectorFromAst(ast[0]);
  } else {
    return new SimpleSelectorSequence(ast.map(createSimpleSelectorFromAst));
  }
}

function createSelectorFromAst(ast) {
  if (ast.length === 0) {
    return new InvalidSelector(new Error("Empty selector."));
  } else if (ast.length === 1) {
    return createSimpleSelectorSequenceFromAst(ast[0][0]);
  } else {
    var simpleSelectorSequences = [];

    for (var i = 0; i < ast.length; i++) {
      var simpleSelectorSequence = createSimpleSelectorSequenceFromAst(ast[i][0]);
      var combinator = ast[i][1];

      if (combinator) {
        simpleSelectorSequence.combinator = combinator;
      }

      simpleSelectorSequences.push(simpleSelectorSequence);
    }

    return new Selector(simpleSelectorSequences);
  }
}

function createSelector(sel) {
  try {
    var parsedSelector = parser.parseSelector(sel);

    if (!parsedSelector) {
      return new InvalidSelector(new Error("Empty selector"));
    }

    return createSelectorFromAst(parsedSelector.value);
  } catch (e) {
    return new InvalidSelector(e);
  }
}

exports.createSelector = createSelector;

function isRule(node) {
  return node.type === "rule";
}

function isDeclaration(node) {
  return node.type === "declaration";
}

var SelectorsMap = function () {
  function SelectorsMap(rulesets) {
    var _this = this;

    this.id = {};
    this.class = {};
    this.type = {};
    this.universal = [];
    this.position = 0;
    rulesets.forEach(function (rule) {
      return rule.lookupSort(_this);
    });
  }

  SelectorsMap.prototype.query = function (node) {
    var _this = this;

    var selectorClasses = [this.universal, this.id[node.id], this.type[node.cssType]];

    if (node.cssClasses) {
      node.cssClasses.forEach(function (c) {
        return selectorClasses.push(_this.class[c]);
      });
    }

    var selectors = selectorClasses.filter(function (arr) {
      return !!arr;
    }).reduce(function (cur, next) {
      return cur.concat(next);
    }, []);
    var selectorsMatch = new SelectorsMatch();
    selectorsMatch.selectors = selectors.filter(function (sel) {
      return sel.sel.accumulateChanges(node, selectorsMatch);
    }).sort(function (a, b) {
      return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
    }).map(function (docSel) {
      return docSel.sel;
    });
    return selectorsMatch;
  };

  SelectorsMap.prototype.sortById = function (id, sel) {
    this.addToMap(this.id, id, sel);
  };

  SelectorsMap.prototype.sortByClass = function (cssClass, sel) {
    this.addToMap(this.class, cssClass, sel);
  };

  SelectorsMap.prototype.sortByType = function (cssType, sel) {
    this.addToMap(this.type, cssType, sel);
  };

  SelectorsMap.prototype.sortAsUniversal = function (sel) {
    this.universal.push(this.makeDocSelector(sel));
  };

  SelectorsMap.prototype.addToMap = function (map, head, sel) {
    this.position++;
    var list = map[head];

    if (list) {
      list.push(this.makeDocSelector(sel));
    } else {
      map[head] = [this.makeDocSelector(sel)];
    }
  };

  SelectorsMap.prototype.makeDocSelector = function (sel) {
    return {
      sel: sel,
      pos: this.position++
    };
  };

  return SelectorsMap;
}();

exports.SelectorsMap = SelectorsMap;

var SelectorsMatch = function () {
  function SelectorsMatch() {
    this.changeMap = new Map();
  }

  SelectorsMatch.prototype.addAttribute = function (node, attribute) {
    var deps = this.properties(node);

    if (!deps.attributes) {
      deps.attributes = new Set();
    }

    deps.attributes.add(attribute);
  };

  SelectorsMatch.prototype.addPseudoClass = function (node, pseudoClass) {
    var deps = this.properties(node);

    if (!deps.pseudoClasses) {
      deps.pseudoClasses = new Set();
    }

    deps.pseudoClasses.add(pseudoClass);
  };

  SelectorsMatch.prototype.properties = function (node) {
    var set = this.changeMap.get(node);

    if (!set) {
      this.changeMap.set(node, set = {});
    }

    return set;
  };

  return SelectorsMatch;
}();

exports.SelectorsMatch = SelectorsMatch;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var Font = function () {
  function Font(fontFamily, fontSize, fontStyle, fontWeight) {
    this.fontFamily = fontFamily;
    this.fontSize = fontSize;
    this.fontStyle = fontStyle;
    this.fontWeight = fontWeight;
  }

  Object.defineProperty(Font.prototype, "isItalic", {
    get: function () {
      return this.fontStyle === FontStyle.ITALIC;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Font.prototype, "isBold", {
    get: function () {
      return this.fontWeight === FontWeight.SEMI_BOLD || this.fontWeight === FontWeight.BOLD || this.fontWeight === "700" || this.fontWeight === FontWeight.EXTRA_BOLD || this.fontWeight === FontWeight.BLACK;
    },
    enumerable: true,
    configurable: true
  });

  Font.equals = function (value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
  };

  Font.default = undefined;
  return Font;
}();

exports.Font = Font;
var FontStyle;

(function (FontStyle) {
  FontStyle.NORMAL = "normal";
  FontStyle.ITALIC = "italic";
  FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
  FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));

var FontWeight;

(function (FontWeight) {
  FontWeight.THIN = "100";
  FontWeight.EXTRA_LIGHT = "200";
  FontWeight.LIGHT = "300";
  FontWeight.NORMAL = "normal";
  FontWeight.MEDIUM = "500";
  FontWeight.SEMI_BOLD = "600";
  FontWeight.BOLD = "bold";
  FontWeight.EXTRA_BOLD = "800";
  FontWeight.BLACK = "900";
  FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
  FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));

function parseFontFamily(value) {
  var result = new Array();

  if (!value) {
    return result;
  }

  var split = value.split(",");

  for (var i = 0; i < split.length; i++) {
    var str = split[i].trim().replace(/['"]+/g, "");

    if (str) {
      result.push(str);
    }
  }

  return result;
}

exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;

(function (genericFontFamilies) {
  genericFontFamilies.serif = "serif";
  genericFontFamilies.sansSerif = "sans-serif";
  genericFontFamilies.monospace = "monospace";
  genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));

var styles = new Set();
[FontStyle.NORMAL, FontStyle.ITALIC].forEach(function (val, i, a) {
  return styles.add(val);
});
var weights = new Set();
[FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK].forEach(function (val, i, a) {
  return weights.add(val);
});

function parseFont(fontValue) {
  var result = {
    fontStyle: "normal",
    fontVariant: "normal",
    fontWeight: "normal"
  };
  var parts = fontValue.split(/\s+/);
  var part;

  while (part = parts.shift()) {
    if (part === "normal") {} else if (part === "small-caps") {
      result.fontVariant = part;
    } else if (styles.has(part)) {
      result.fontStyle = part;
    } else if (weights.has(part)) {
      result.fontWeight = part;
    } else if (!result.fontSize) {
      var sizes = part.split("/");
      result.fontSize = sizes[0];
      result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
    } else {
      result.fontFamily = part;

      if (parts.length) {
        result.fontFamily += " " + parts.join(" ");
      }

      break;
    }
  }

  return result;
}

exports.parseFont = parseFont;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/font.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var fs = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var utils = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/styling/font-common.js"));

var EMULATE_OBLIQUE = true;
var OBLIQUE_TRANSFORM = CGAffineTransformMake(1, 0, 0.2, 1, 0, 0);
var DEFAULT_SERIF = "Times New Roman";
var DEFAULT_MONOSPACE = "Courier New";
var SUPPORT_FONT_WEIGHTS = parseFloat(platform_1.device.osVersion) >= 10.0;

var Font = function (_super) {
  __extends(Font, _super);

  function Font(family, size, style, weight) {
    return _super.call(this, family, size, style, weight) || this;
  }

  Font.prototype.withFontFamily = function (family) {
    return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
  };

  Font.prototype.withFontStyle = function (style) {
    return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
  };

  Font.prototype.withFontWeight = function (weight) {
    return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
  };

  Font.prototype.withFontSize = function (size) {
    return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
  };

  Font.prototype.getUIFont = function (defaultFont) {
    if (!this._uiFont) {
      this._uiFont = createUIFont(this, defaultFont);
    }

    return this._uiFont;
  };

  Font.prototype.getAndroidTypeface = function () {
    return undefined;
  };

  Font.default = new Font(undefined, undefined, font_common_1.FontStyle.NORMAL, font_common_1.FontWeight.NORMAL);
  return Font;
}(font_common_1.Font);

exports.Font = Font;

function getFontFamilyRespectingGenericFonts(fontFamily) {
  if (!fontFamily) {
    return fontFamily;
  }

  switch (fontFamily.toLowerCase()) {
    case font_common_1.genericFontFamilies.serif:
      return DEFAULT_SERIF;

    case font_common_1.genericFontFamilies.monospace:
      return DEFAULT_MONOSPACE;

    default:
      return fontFamily;
  }
}

function shouldUseSystemFont(fontFamily) {
  return !fontFamily || fontFamily === font_common_1.genericFontFamilies.sansSerif || fontFamily === font_common_1.genericFontFamilies.system;
}

function getNativeFontWeight(fontWeight) {
  switch (fontWeight) {
    case font_common_1.FontWeight.THIN:
      return UIFontWeightUltraLight;

    case font_common_1.FontWeight.EXTRA_LIGHT:
      return UIFontWeightThin;

    case font_common_1.FontWeight.LIGHT:
      return UIFontWeightLight;

    case font_common_1.FontWeight.NORMAL:
    case "400":
    case undefined:
    case null:
      return UIFontWeightRegular;

    case font_common_1.FontWeight.MEDIUM:
      return UIFontWeightMedium;

    case font_common_1.FontWeight.SEMI_BOLD:
      return UIFontWeightSemibold;

    case font_common_1.FontWeight.BOLD:
    case "700":
      return UIFontWeightBold;

    case font_common_1.FontWeight.EXTRA_BOLD:
      return UIFontWeightHeavy;

    case font_common_1.FontWeight.BLACK:
      return UIFontWeightBlack;

    default:
      throw new Error("Invalid font weight: \"" + fontWeight + "\"");
  }
}

function getSystemFont(size, nativeWeight, italic, symbolicTraits) {
  var result = UIFont.systemFontOfSizeWeight(size, nativeWeight);

  if (italic) {
    var descriptor = utils.ios.getter(result, result.fontDescriptor).fontDescriptorWithSymbolicTraits(symbolicTraits);
    result = UIFont.fontWithDescriptorSize(descriptor, size);
  }

  return result;
}

function createUIFont(font, defaultFont) {
  var _a, _b;

  var result;
  var size = font.fontSize || defaultFont.pointSize;
  var nativeWeight = getNativeFontWeight(font.fontWeight);
  var fontFamilies = font_common_1.parseFontFamily(font.fontFamily);
  var symbolicTraits = 0;

  if (font.isBold) {
    symbolicTraits |= 2;
  }

  if (font.isItalic) {
    symbolicTraits |= 1;
  }

  var fontDescriptorTraits = (_a = {}, _a[UIFontSymbolicTrait] = symbolicTraits, _a);

  if (SUPPORT_FONT_WEIGHTS) {
    fontDescriptorTraits[UIFontWeightTrait] = nativeWeight;
  }

  for (var i = 0; i < fontFamilies.length; i++) {
    var fontFamily = getFontFamilyRespectingGenericFonts(fontFamilies[i]);

    if (shouldUseSystemFont(fontFamily)) {
      result = getSystemFont(size, nativeWeight, font.isItalic, symbolicTraits);
      break;
    } else {
      var fontAttributes = (_b = {}, _b[UIFontDescriptorFamilyAttribute] = fontFamily, _b[UIFontDescriptorTraitsAttribute] = fontDescriptorTraits, _b);
      var descriptor = UIFontDescriptor.fontDescriptorWithFontAttributes(fontAttributes);
      result = UIFont.fontWithDescriptorSize(descriptor, size);
      var actualItalic = utils.ios.getter(result, result.fontDescriptor).symbolicTraits & 1;

      if (font.isItalic && !actualItalic && EMULATE_OBLIQUE) {
        descriptor = descriptor.fontDescriptorWithMatrix(OBLIQUE_TRANSFORM);
        result = UIFont.fontWithDescriptorSize(descriptor, size);
      }

      if (result.familyName === fontFamily) {
        break;
      } else {
        result = null;
      }
    }
  }

  if (!result) {
    result = getSystemFont(size, nativeWeight, font.isItalic, symbolicTraits);
  }

  return result;
}

var ios;

(function (ios) {
  function registerFont(fontFile) {
    var filePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFile);

    if (!fs.File.exists(filePath)) {
      filePath = fs.path.join(fs.knownFolders.currentApp().path, fontFile);
    }

    var fontData = utils.ios.getter(NSFileManager, NSFileManager.defaultManager).contentsAtPath(filePath);

    if (!fontData) {
      throw new Error("Could not load font from: " + fontFile);
    }

    var provider = CGDataProviderCreateWithCFData(fontData);
    var font = CGFontCreateWithDataProvider(provider);

    if (!font) {
      throw new Error("Could not load font from: " + fontFile);
    }

    var error = new interop.Reference();

    if (!CTFontManagerRegisterGraphicsFont(font, error)) {
      if (trace_1.isEnabled()) {
        trace_1.write("Error occur while registering font: " + CFErrorCopyDescription(error.value), trace_1.categories.Error, trace_1.messageType.error);
      }
    }
  }

  ios.registerFont = registerFont;
})(ios = exports.ios || (exports.ios = {}));

function registerFontsInFolder(fontsFolderPath) {
  var fontsFolder = fs.Folder.fromPath(fontsFolderPath);
  fontsFolder.eachEntity(function (fileEntity) {
    if (fs.Folder.exists(fs.path.join(fontsFolderPath, fileEntity.name))) {
      return true;
    }

    if (fileEntity instanceof fs.File && (fileEntity.extension === ".ttf" || fileEntity.extension === ".otf")) {
      ios.registerFont(fileEntity.name);
    }

    return true;
  });
}

function registerCustomFonts() {
  var appDir = fs.knownFolders.currentApp().path;
  var fontsDir = fs.path.join(appDir, "fonts");

  if (fs.Folder.exists(fontsDir)) {
    registerFontsInFolder(fontsDir);
  }
}

registerCustomFonts();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/linear-gradient.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var LinearGradient = function () {
  function LinearGradient() {}

  LinearGradient.parse = function (value) {
    var result = new LinearGradient();
    result.angle = value.angle;
    result.colorStops = value.colors.map(function (color) {
      var offset = color.offset || null;
      var offsetUnit;

      if (offset && offset.unit === "%") {
        offsetUnit = {
          unit: "%",
          value: offset.value
        };
      }

      return {
        color: new color_1.Color(color.argb),
        offset: offsetUnit
      };
    });
    return result;
  };

  LinearGradient.equals = function (first, second) {
    if (!first && !second) {
      return true;
    } else if (!first || !second) {
      return false;
    }

    if (first.angle !== second.angle) {
      return false;
    }

    if (first.colorStops.length !== second.colorStops.length) {
      return false;
    }

    for (var i = 0; i < first.colorStops.length; i++) {
      var firstStop = first.colorStops[i];
      var secondStop = second.colorStops[i];

      if (firstStop.offset !== secondStop.offset) {
        return false;
      }

      if (!color_1.Color.equals(firstStop.color, secondStop.color)) {
        return false;
      }
    }

    return true;
  };

  return LinearGradient;
}();

exports.LinearGradient = LinearGradient;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var color_1 = __webpack_require__("../node_modules/tns-core-modules/color/color.js");

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var background_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/background.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var number_utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/number-utils.js");

var matrix_1 = __webpack_require__("../node_modules/tns-core-modules/matrix/matrix.js");

var parser = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var linear_gradient_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/linear-gradient.js");

function equalsCommon(a, b) {
  if (a == "auto") {
    return b == "auto";
  }

  if (typeof a === "number") {
    if (b == "auto") {
      return false;
    }

    if (typeof b === "number") {
      return a == b;
    }

    return b.unit == "dip" && a == b.value;
  }

  if (b == "auto") {
    return false;
  }

  if (typeof b === "number") {
    return a.unit == "dip" && a.value == b;
  }

  return a.value == b.value && a.unit == b.unit;
}

function convertToStringCommon(length) {
  if (length == "auto") {
    return "auto";
  }

  if (typeof length === "number") {
    return length.toString();
  }

  var val = length.value;

  if (length.unit === "%") {
    val *= 100;
  }

  return val + length.unit;
}

function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
  if (auto === void 0) {
    auto = Number.NaN;
  }

  if (parentAvailableWidth === void 0) {
    parentAvailableWidth = Number.NaN;
  }

  if (length == "auto") {
    return auto;
  }

  if (typeof length === "number") {
    return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
  }

  switch (length.unit) {
    case "px":
      return utils_1.layout.round(length.value);

    case "%":
      return utils_1.layout.round(parentAvailableWidth * length.value);

    case "dip":
    default:
      return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
  }
}

var PercentLength;

(function (PercentLength) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();
      var percentIndex = stringValue.indexOf("%");

      if (percentIndex !== -1) {
        var value = void 0;

        if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
          value = Number.NaN;
        } else {
          value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
        }

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "%",
          value: value
        };
      } else if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + fromValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  PercentLength.parse = parse;
  PercentLength.equals = equalsCommon;
  PercentLength.toDevicePixels = toDevicePixelsCommon;
  PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));

var Length;

(function (Length) {
  function parse(fromValue) {
    if (fromValue == "auto") {
      return "auto";
    }

    if (typeof fromValue === "string") {
      var stringValue = fromValue.trim();

      if (stringValue.indexOf("px") !== -1) {
        stringValue = stringValue.replace("px", "").trim();
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return {
          unit: "px",
          value: value
        };
      } else {
        var value = parseFloat(stringValue);

        if (isNaN(value) || !isFinite(value)) {
          throw new Error("Invalid value: " + stringValue);
        }

        return value;
      }
    } else {
      return fromValue;
    }
  }

  Length.parse = parse;
  Length.equals = equalsCommon;
  Length.toDevicePixels = toDevicePixelsCommon;
  Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));

exports.zeroLength = {
  value: 0,
  unit: "px"
};
exports.minWidthProperty = new properties_1.CssProperty({
  name: "minWidth",
  cssName: "min-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minWidthProperty.register(properties_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
  name: "minHeight",
  cssName: "min-height",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.minHeightProperty.register(properties_1.Style);
exports.widthProperty = new properties_1.CssProperty({
  name: "width",
  cssName: "width",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.widthProperty.register(properties_1.Style);
exports.heightProperty = new properties_1.CssProperty({
  name: "height",
  cssName: "height",
  defaultValue: "auto",
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.heightProperty.register(properties_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
  name: "margin",
  cssName: "margin",
  getter: function () {
    if (PercentLength.equals(this.marginTop, this.marginRight) && PercentLength.equals(this.marginTop, this.marginBottom) && PercentLength.equals(this.marginTop, this.marginLeft)) {
      return this.marginTop;
    }

    return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
  },
  converter: convertToMargins
});
marginProperty.register(properties_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({
  name: "marginLeft",
  cssName: "margin-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginLeftProperty.register(properties_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({
  name: "marginRight",
  cssName: "margin-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginRightProperty.register(properties_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({
  name: "marginTop",
  cssName: "margin-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginTopProperty.register(properties_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({
  name: "marginBottom",
  cssName: "margin-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueConverter: PercentLength.parse
});
exports.marginBottomProperty.register(properties_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
  name: "padding",
  cssName: "padding",
  getter: function () {
    if (Length.equals(this.paddingTop, this.paddingRight) && Length.equals(this.paddingTop, this.paddingBottom) && Length.equals(this.paddingTop, this.paddingLeft)) {
      return this.paddingTop;
    }

    return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
  },
  converter: convertToPaddings
});
paddingProperty.register(properties_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
  name: "paddingLeft",
  cssName: "padding-left",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingLeftProperty.register(properties_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
  name: "paddingRight",
  cssName: "padding-right",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingRightProperty.register(properties_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
  name: "paddingTop",
  cssName: "padding-top",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingTopProperty.register(properties_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
  name: "paddingBottom",
  cssName: "padding-bottom",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    target.view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
  },
  valueConverter: Length.parse
});
exports.paddingBottomProperty.register(properties_1.Style);
var HorizontalAlignment;

(function (HorizontalAlignment) {
  HorizontalAlignment.LEFT = "left";
  HorizontalAlignment.CENTER = "center";
  HorizontalAlignment.RIGHT = "right";
  HorizontalAlignment.STRETCH = "stretch";
  HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
  HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));

exports.horizontalAlignmentProperty = new properties_1.CssProperty({
  name: "horizontalAlignment",
  cssName: "horizontal-align",
  defaultValue: HorizontalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: HorizontalAlignment.parse
});
exports.horizontalAlignmentProperty.register(properties_1.Style);
var VerticalAlignment;

(function (VerticalAlignment) {
  VerticalAlignment.TOP = "top";
  VerticalAlignment.MIDDLE = "middle";
  VerticalAlignment.BOTTOM = "bottom";
  VerticalAlignment.STRETCH = "stretch";
  VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);

  VerticalAlignment.parse = function (value) {
    return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));

exports.verticalAlignmentProperty = new properties_1.CssProperty({
  name: "verticalAlignment",
  cssName: "vertical-align",
  defaultValue: VerticalAlignment.STRETCH,
  affectsLayout: platform_1.isIOS,
  valueConverter: VerticalAlignment.parse
});
exports.verticalAlignmentProperty.register(properties_1.Style);

function parseThickness(value) {
  if (typeof value === "string") {
    var arr = value.split(/[ ,]+/);
    var top_1;
    var right = void 0;
    var bottom = void 0;
    var left = void 0;

    if (arr.length === 1) {
      top_1 = arr[0];
      right = arr[0];
      bottom = arr[0];
      left = arr[0];
    } else if (arr.length === 2) {
      top_1 = arr[0];
      bottom = arr[0];
      right = arr[1];
      left = arr[1];
    } else if (arr.length === 3) {
      top_1 = arr[0];
      right = arr[1];
      left = arr[1];
      bottom = arr[2];
    } else if (arr.length === 4) {
      top_1 = arr[0];
      right = arr[1];
      bottom = arr[2];
      left = arr[3];
    } else {
      throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
    }

    return {
      top: top_1,
      right: right,
      bottom: bottom,
      left: left
    };
  } else {
    return value;
  }
}

function convertToMargins(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.marginTopProperty, PercentLength.parse(thickness.top)], [exports.marginRightProperty, PercentLength.parse(thickness.right)], [exports.marginBottomProperty, PercentLength.parse(thickness.bottom)], [exports.marginLeftProperty, PercentLength.parse(thickness.left)]];
  } else {
    return [[exports.marginTopProperty, value], [exports.marginRightProperty, value], [exports.marginBottomProperty, value], [exports.marginLeftProperty, value]];
  }
}

function convertToPaddings(value) {
  if (typeof value === "string" && value !== "auto") {
    var thickness = parseThickness(value);
    return [[exports.paddingTopProperty, Length.parse(thickness.top)], [exports.paddingRightProperty, Length.parse(thickness.right)], [exports.paddingBottomProperty, Length.parse(thickness.bottom)], [exports.paddingLeftProperty, Length.parse(thickness.left)]];
  } else {
    return [[exports.paddingTopProperty, value], [exports.paddingRightProperty, value], [exports.paddingBottomProperty, value], [exports.paddingLeftProperty, value]];
  }
}

exports.rotateProperty = new properties_1.CssAnimationProperty({
  name: "rotate",
  cssName: "rotate",
  defaultValue: 0,
  valueConverter: parseFloat
});
exports.rotateProperty.register(properties_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({
  name: "scaleX",
  cssName: "scaleX",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleXProperty.register(properties_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({
  name: "scaleY",
  cssName: "scaleY",
  defaultValue: 1,
  valueConverter: parseFloat
});
exports.scaleYProperty.register(properties_1.Style);

function parseDIPs(value) {
  if (value.indexOf("px") !== -1) {
    return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
  } else {
    return parseFloat(value.replace("dip", "").trim());
  }
}

exports.translateXProperty = new properties_1.CssAnimationProperty({
  name: "translateX",
  cssName: "translateX",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateXProperty.register(properties_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({
  name: "translateY",
  cssName: "translateY",
  defaultValue: 0,
  valueConverter: parseDIPs
});
exports.translateYProperty.register(properties_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
  name: "transform",
  cssName: "transform",
  getter: function () {
    var scaleX = this.scaleX;
    var scaleY = this.scaleY;
    var translateX = this.translateX;
    var translateY = this.translateY;
    var rotate = this.rotate;
    var result = "";

    if (translateX !== 0 || translateY !== 0) {
      result += "translate(" + translateX + ", " + translateY + ") ";
    }

    if (scaleX !== 1 || scaleY !== 1) {
      result += "scale(" + scaleX + ", " + scaleY + ") ";
    }

    if (rotate !== 0) {
      result += "rotate (" + rotate + ")";
    }

    return result.trim();
  },
  converter: convertToTransform
});
transformProperty.register(properties_1.Style);
var IDENTITY_TRANSFORMATION = {
  translate: {
    x: 0,
    y: 0
  },
  rotate: 0,
  scale: {
    x: 1,
    y: 1
  }
};
var TRANSFORM_SPLITTER = new RegExp(/\s*(.+?)\((.*?)\)/g);
var TRANSFORMATIONS = Object.freeze(["rotate", "translate", "translate3d", "translateX", "translateY", "scale", "scale3d", "scaleX", "scaleY"]);
var STYLE_TRANSFORMATION_MAP = Object.freeze({
  "scale": function (value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scale3d": function (value) {
    return {
      property: "scale",
      value: value
    };
  },
  "scaleX": function (_a) {
    var x = _a.x;
    return {
      property: "scale",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.scale.y
      }
    };
  },
  "scaleY": function (_a) {
    var y = _a.y;
    return {
      property: "scale",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.scale.x
      }
    };
  },
  "translate": function (value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translate3d": function (value) {
    return {
      property: "translate",
      value: value
    };
  },
  "translateX": function (_a) {
    var x = _a.x;
    return {
      property: "translate",
      value: {
        x: x,
        y: IDENTITY_TRANSFORMATION.translate.y
      }
    };
  },
  "translateY": function (_a) {
    var y = _a.y;
    return {
      property: "translate",
      value: {
        y: y,
        x: IDENTITY_TRANSFORMATION.translate.x
      }
    };
  },
  "rotate": function (value) {
    return {
      property: "rotate",
      value: value
    };
  }
});

function convertToTransform(value) {
  if (value === properties_1.unsetValue) {
    value = "none";
  }

  var _a = transformConverter(value),
      translate = _a.translate,
      rotate = _a.rotate,
      scale = _a.scale;

  return [[exports.translateXProperty, translate.x], [exports.translateYProperty, translate.y], [exports.scaleXProperty, scale.x], [exports.scaleYProperty, scale.y], [exports.rotateProperty, rotate]];
}

function transformConverter(text) {
  var transformations = parseTransformString(text);

  if (text === "none" || text === "" || !transformations.length) {
    return IDENTITY_TRANSFORMATION;
  }

  var usedTransforms = transformations.map(function (t) {
    return t.property;
  });

  if (!utils_1.hasDuplicates(usedTransforms)) {
    var fullTransformations_1 = __assign({}, IDENTITY_TRANSFORMATION);

    transformations.forEach(function (transform) {
      fullTransformations_1[transform.property] = transform.value;
    });
    return fullTransformations_1;
  }

  var affineMatrix = transformations.map(matrix_1.getTransformMatrix).reduce(matrix_1.multiplyAffine2d);
  var cssMatrix = matrix_1.matrixArrayToCssMatrix(affineMatrix);
  return matrix_1.decompose2DTransformMatrix(cssMatrix);
}

exports.transformConverter = transformConverter;

function parseTransformString(text) {
  var matches = [];
  var match;

  while ((match = TRANSFORM_SPLITTER.exec(text)) !== null) {
    var property = match[1];
    var value = convertTransformValue(property, match[2]);

    if (TRANSFORMATIONS.indexOf(property) !== -1) {
      matches.push(normalizeTransformation({
        property: property,
        value: value
      }));
    }
  }

  return matches;
}

function normalizeTransformation(_a) {
  var property = _a.property,
      value = _a.value;
  return STYLE_TRANSFORMATION_MAP[property](value);
}

function convertTransformValue(property, stringValue) {
  var _a = stringValue.split(",").map(parseFloat),
      x = _a[0],
      _b = _a[1],
      y = _b === void 0 ? x : _b;

  if (property === "rotate") {
    return stringValue.slice(-3) === "rad" ? number_utils_1.radiansToDegrees(x) : x;
  }

  return {
    x: x,
    y: y
  };
}

var backgroundProperty = new properties_1.ShorthandProperty({
  name: "background",
  cssName: "background",
  getter: function () {
    return this.backgroundColor + " " + this.backgroundImage + " " + this.backgroundRepeat + " " + this.backgroundPosition;
  },
  converter: convertToBackgrounds
});
backgroundProperty.register(properties_1.Style);
exports.backgroundInternalProperty = new properties_1.CssProperty({
  name: "backgroundInternal",
  cssName: "_backgroundInternal",
  defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(properties_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
  name: "backgroundImage",
  cssName: "background-image",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withImage(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: function (value1, value2) {
    if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
      return linear_gradient_1.LinearGradient.equals(value1, value2);
    } else {
      return value1 === value2;
    }
  },
  valueConverter: function (value) {
    if (typeof value === "string") {
      var parsed = parser.parseBackground(value);

      if (parsed) {
        var background = parsed.value;
        value = typeof background.image === "object" ? linear_gradient_1.LinearGradient.parse(background.image) : value;
      }
    }

    return value;
  }
});
exports.backgroundImageProperty.register(properties_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
  name: "backgroundColor",
  cssName: "background-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.backgroundColorProperty.register(properties_1.Style);
var BackgroundRepeat;

(function (BackgroundRepeat) {
  BackgroundRepeat.REPEAT = "repeat";
  BackgroundRepeat.REPEAT_X = "repeat-x";
  BackgroundRepeat.REPEAT_Y = "repeat-y";
  BackgroundRepeat.NO_REPEAT = "no-repeat";
  BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
  BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));

exports.backgroundRepeatProperty = new properties_1.CssProperty({
  name: "backgroundRepeat",
  cssName: "background-repeat",
  valueConverter: BackgroundRepeat.parse,
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withRepeat(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundRepeatProperty.register(properties_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
  name: "backgroundSize",
  cssName: "background-size",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withSize(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundSizeProperty.register(properties_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
  name: "backgroundPosition",
  cssName: "background-position",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withPosition(newValue);
    target.backgroundInternal = background;
  }
});
exports.backgroundPositionProperty.register(properties_1.Style);

function convertToBackgrounds(value) {
  if (typeof value === "string") {
    var backgrounds = parser.parseBackground(value).value;
    var backgroundColor = backgrounds.color ? new color_1.Color(backgrounds.color) : properties_1.unsetValue;
    var backgroundImage = void 0;

    if (typeof backgrounds.image === "object" && backgrounds.image) {
      backgroundImage = linear_gradient_1.LinearGradient.parse(backgrounds.image);
    } else {
      backgroundImage = backgrounds.image || properties_1.unsetValue;
    }

    var backgroundRepeat = backgrounds.repeat || properties_1.unsetValue;
    var backgroundPosition = backgrounds.position ? backgrounds.position.text : properties_1.unsetValue;
    return [[exports.backgroundColorProperty, backgroundColor], [exports.backgroundImageProperty, backgroundImage], [exports.backgroundRepeatProperty, backgroundRepeat], [exports.backgroundPositionProperty, backgroundPosition]];
  } else {
    return [[exports.backgroundColorProperty, properties_1.unsetValue], [exports.backgroundImageProperty, properties_1.unsetValue], [exports.backgroundRepeatProperty, properties_1.unsetValue], [exports.backgroundPositionProperty, properties_1.unsetValue]];
  }
}

function parseBorderColor(value) {
  var result = {
    top: undefined,
    right: undefined,
    bottom: undefined,
    left: undefined
  };

  if (value.indexOf("rgb") === 0) {
    result.top = result.right = result.bottom = result.left = new color_1.Color(value);
    return result;
  }

  var arr = value.split(/[ ,]+/);

  if (arr.length === 1) {
    var arr0 = new color_1.Color(arr[0]);
    result.top = arr0;
    result.right = arr0;
    result.bottom = arr0;
    result.left = arr0;
  } else if (arr.length === 2) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr0;
    result.left = arr1;
  } else if (arr.length === 3) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr1;
  } else if (arr.length === 4) {
    var arr0 = new color_1.Color(arr[0]);
    var arr1 = new color_1.Color(arr[1]);
    var arr2 = new color_1.Color(arr[2]);
    var arr3 = new color_1.Color(arr[3]);
    result.top = arr0;
    result.right = arr1;
    result.bottom = arr2;
    result.left = arr3;
  } else {
    throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
  }

  return result;
}

var borderColorProperty = new properties_1.ShorthandProperty({
  name: "borderColor",
  cssName: "border-color",
  getter: function () {
    if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
      return this.borderTopColor;
    } else {
      return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
    }
  },
  converter: function (value) {
    if (typeof value === "string") {
      var fourColors = parseBorderColor(value);
      return [[exports.borderTopColorProperty, fourColors.top], [exports.borderRightColorProperty, fourColors.right], [exports.borderBottomColorProperty, fourColors.bottom], [exports.borderLeftColorProperty, fourColors.left]];
    } else {
      return [[exports.borderTopColorProperty, value], [exports.borderRightColorProperty, value], [exports.borderBottomColorProperty, value], [exports.borderLeftColorProperty, value]];
    }
  }
});
borderColorProperty.register(properties_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
  name: "borderTopColor",
  cssName: "border-top-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderTopColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderTopColorProperty.register(properties_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
  name: "borderRightColor",
  cssName: "border-right-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderRightColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderRightColorProperty.register(properties_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
  name: "borderBottomColor",
  cssName: "border-bottom-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderBottomColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderBottomColorProperty.register(properties_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
  name: "borderLeftColor",
  cssName: "border-left-color",
  valueChanged: function (target, oldValue, newValue) {
    var background = target.backgroundInternal.withBorderLeftColor(newValue);
    target.backgroundInternal = background;
  },
  equalityComparer: color_1.Color.equals,
  valueConverter: function (value) {
    return new color_1.Color(value);
  }
});
exports.borderLeftColorProperty.register(properties_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
  name: "borderWidth",
  cssName: "border-width",
  getter: function () {
    if (Length.equals(this.borderTopWidth, this.borderRightWidth) && Length.equals(this.borderTopWidth, this.borderBottomWidth) && Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
      return this.borderTopWidth;
    } else {
      return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
    }
  },
  converter: function (value) {
    if (typeof value === "string" && value !== "auto") {
      var borderWidths = parseThickness(value);
      return [[exports.borderTopWidthProperty, borderWidths.top], [exports.borderRightWidthProperty, borderWidths.right], [exports.borderBottomWidthProperty, borderWidths.bottom], [exports.borderLeftWidthProperty, borderWidths.left]];
    } else {
      return [[exports.borderTopWidthProperty, value], [exports.borderRightWidthProperty, value], [exports.borderBottomWidthProperty, value], [exports.borderLeftWidthProperty, value]];
    }
  }
});
borderWidthProperty.register(properties_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
  name: "borderTopWidth",
  cssName: "border-top-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderTopWidth = value;
    var background = target.backgroundInternal.withBorderTopWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(properties_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
  name: "borderRightWidth",
  cssName: "border-right-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderRightWidth = value;
    var background = target.backgroundInternal.withBorderRightWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(properties_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
  name: "borderBottomWidth",
  cssName: "border-bottom-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderBottomWidth = value;
    var background = target.backgroundInternal.withBorderBottomWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(properties_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
  name: "borderLeftWidth",
  cssName: "border-left-width",
  defaultValue: exports.zeroLength,
  affectsLayout: platform_1.isIOS,
  equalityComparer: Length.equals,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
    }

    target.view.effectiveBorderLeftWidth = value;
    var background = target.backgroundInternal.withBorderLeftWidth(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(properties_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
  name: "borderRadius",
  cssName: "border-radius",
  getter: function () {
    if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) && Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
      return this.borderTopLeftRadius;
    }

    return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
  },
  converter: function (value) {
    if (typeof value === "string") {
      var borderRadius = parseThickness(value);
      return [[exports.borderTopLeftRadiusProperty, borderRadius.top], [exports.borderTopRightRadiusProperty, borderRadius.right], [exports.borderBottomRightRadiusProperty, borderRadius.bottom], [exports.borderBottomLeftRadiusProperty, borderRadius.left]];
    } else {
      return [[exports.borderTopLeftRadiusProperty, value], [exports.borderTopRightRadiusProperty, value], [exports.borderBottomRightRadiusProperty, value], [exports.borderBottomLeftRadiusProperty, value]];
    }
  }
});
borderRadiusProperty.register(properties_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderTopLeftRadius",
  cssName: "border-top-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(properties_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
  name: "borderTopRightRadius",
  cssName: "border-top-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderTopRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(properties_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomRightRadius",
  cssName: "border-bottom-right-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomRightRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(properties_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
  name: "borderBottomLeftRadius",
  cssName: "border-bottom-left-radius",
  defaultValue: 0,
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var value = Length.toDevicePixels(newValue, 0);

    if (!isNonNegativeFiniteNumber(value)) {
      throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
    }

    var background = target.backgroundInternal.withBorderBottomLeftRadius(value);
    target.backgroundInternal = background;
  },
  valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(properties_1.Style);

function isNonNegativeFiniteNumber(value) {
  return isFinite(value) && !isNaN(value) && value >= 0;
}

var supportedPaths = ["rect", "circle", "ellipse", "polygon", "inset"];

function isClipPathValid(value) {
  if (!value) {
    return true;
  }

  var functionName = value.substring(0, value.indexOf("(")).trim();
  return supportedPaths.indexOf(functionName) !== -1;
}

exports.clipPathProperty = new properties_1.CssProperty({
  name: "clipPath",
  cssName: "clip-path",
  valueChanged: function (target, oldValue, newValue) {
    if (!isClipPathValid(newValue)) {
      throw new Error("clip-path is not valid.");
    }

    var background = target.backgroundInternal.withClipPath(newValue);
    target.backgroundInternal = background;
  }
});
exports.clipPathProperty.register(properties_1.Style);

function isFloatValueConverter(value) {
  var newValue = parseFloat(value);

  if (isNaN(newValue)) {
    throw new Error("Invalid value: " + newValue);
  }

  return newValue;
}

exports.zIndexProperty = new properties_1.CssProperty({
  name: "zIndex",
  cssName: "z-index",
  valueConverter: isFloatValueConverter
});
exports.zIndexProperty.register(properties_1.Style);

function opacityConverter(value) {
  var newValue = parseFloat(value);

  if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
    return newValue;
  }

  throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}

exports.opacityProperty = new properties_1.CssAnimationProperty({
  name: "opacity",
  cssName: "opacity",
  defaultValue: 1,
  valueConverter: opacityConverter
});
exports.opacityProperty.register(properties_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({
  name: "color",
  cssName: "color",
  equalityComparer: color_1.Color.equals,
  valueConverter: function (v) {
    return new color_1.Color(v);
  }
});
exports.colorProperty.register(properties_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({
  name: "fontInternal",
  cssName: "_fontInternal",
  defaultValue: font_1.Font.default
});
exports.fontInternalProperty.register(properties_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
  name: "fontFamily",
  cssName: "font-family",
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontFamily !== newValue) {
      var newFont = currentFont.withFontFamily(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontFamilyProperty.register(properties_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
  name: "fontSize",
  cssName: "font-size",
  affectsLayout: platform_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontSize !== newValue) {
      var newFont = currentFont.withFontSize(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  },
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.fontSizeProperty.register(properties_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
  name: "fontStyle",
  cssName: "font-style",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontStyle.NORMAL,
  valueConverter: font_1.FontStyle.parse,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontStyle !== newValue) {
      var newFont = currentFont.withFontStyle(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontStyleProperty.register(properties_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
  name: "fontWeight",
  cssName: "font-weight",
  affectsLayout: platform_1.isIOS,
  defaultValue: font_1.FontWeight.NORMAL,
  valueConverter: font_1.FontWeight.parse,
  valueChanged: function (target, oldValue, newValue) {
    var currentFont = target.fontInternal;

    if (currentFont.fontWeight !== newValue) {
      var newFont = currentFont.withFontWeight(newValue);
      target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
    }
  }
});
exports.fontWeightProperty.register(properties_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
  name: "font",
  cssName: "font",
  getter: function () {
    return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
  },
  converter: function (value) {
    if (value === properties_1.unsetValue) {
      return [[exports.fontStyleProperty, properties_1.unsetValue], [exports.fontWeightProperty, properties_1.unsetValue], [exports.fontSizeProperty, properties_1.unsetValue], [exports.fontFamilyProperty, properties_1.unsetValue]];
    } else {
      var font = font_1.parseFont(value);
      var fontSize = parseFloat(font.fontSize);
      return [[exports.fontStyleProperty, font.fontStyle], [exports.fontWeightProperty, font.fontWeight], [exports.fontSizeProperty, fontSize], [exports.fontFamilyProperty, font.fontFamily]];
    }
  }
});
fontProperty.register(properties_1.Style);
var Visibility;

(function (Visibility) {
  Visibility.VISIBLE = "visible";
  Visibility.HIDDEN = "hidden";
  Visibility.COLLAPSE = "collapse";
  Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);

  Visibility.parse = function (value) {
    return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value);
  };

  var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));

exports.visibilityProperty = new properties_1.CssProperty({
  name: "visibility",
  cssName: "visibility",
  defaultValue: Visibility.VISIBLE,
  affectsLayout: platform_1.isIOS,
  valueConverter: Visibility.parse,
  valueChanged: function (target, oldValue, newValue) {
    target.view.isCollapsed = newValue === Visibility.COLLAPSE;
  }
});
exports.visibilityProperty.register(properties_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style-scope.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var properties_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/properties/properties.js");

var css_1 = __webpack_require__("../node_modules/tns-core-modules/css/index.js");

var parser_1 = __webpack_require__("../node_modules/tns-core-modules/css/parser.js");

var css_selector_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-selector/css-selector.js");

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var applicationCommon = __webpack_require__("../node_modules/tns-core-modules/application/application-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var keyframeAnimationModule;

function ensureKeyframeAnimationModule() {
  if (!keyframeAnimationModule) {
    keyframeAnimationModule = __webpack_require__("../node_modules/tns-core-modules/ui/animation/keyframe-animation.js");
  }
}

var cssAnimationParserModule;

function ensureCssAnimationParserModule() {
  if (!cssAnimationParserModule) {
    cssAnimationParserModule = __webpack_require__("../node_modules/tns-core-modules/ui/styling/css-animation-parser.js");
  }
}

var parser = "rework";

try {
  var appConfig = __webpack_require__("./package.json");

  if (appConfig && appConfig.cssParser === "nativescript") {
    parser = "nativescript";
  }
} catch (e) {}

function mergeCssSelectors() {
  applicationCssSelectors = applicationSelectors.slice();
  applicationCssSelectors.push.apply(applicationCssSelectors, applicationAdditionalSelectors);
  applicationCssSelectorVersion++;
}

exports.mergeCssSelectors = mergeCssSelectors;
var applicationCssSelectors = [];
var applicationCssSelectorVersion = 0;
var applicationSelectors = [];
var applicationAdditionalSelectors = [];
var applicationKeyframes = {};
var animationsSymbol = Symbol("animations");
var pattern = /('|")(.*?)\1/;

var CSSSource = function () {
  function CSSSource(_ast, _url, _file, _keyframes, _source) {
    this._ast = _ast;
    this._url = _url;
    this._file = _file;
    this._keyframes = _keyframes;
    this._source = _source;
    this._selectors = [];
    this.parse();
  }

  CSSSource.fromURI = function (uri, keyframes) {
    var appRelativeUri = CSSSource.pathRelativeToApp(uri);

    try {
      var cssOrAst = global.loadModule(appRelativeUri);

      if (cssOrAst) {
        if (typeof cssOrAst === "string") {
          return CSSSource.fromSource(cssOrAst, keyframes, appRelativeUri);
        } else if (typeof cssOrAst === "object" && cssOrAst.type === "stylesheet" && cssOrAst.stylesheet && cssOrAst.stylesheet.rules) {
          return CSSSource.fromAST(cssOrAst, keyframes, appRelativeUri);
        } else {
          return CSSSource.fromSource(cssOrAst.toString(), keyframes, appRelativeUri);
        }
      }
    } catch (e) {}

    return CSSSource.fromFile(appRelativeUri, keyframes);
  };

  CSSSource.pathRelativeToApp = function (uri) {
    if (!uri.startsWith("/")) {
      return uri;
    }

    var appPath = file_system_1.knownFolders.currentApp().path;

    if (!uri.startsWith(appPath)) {
      trace_1.write(uri + " does not start with " + appPath, trace_1.categories.Error, trace_1.messageType.error);
      return uri;
    }

    var relativeUri = "." + uri.substr(appPath.length);
    return relativeUri;
  };

  CSSSource.fromFile = function (url, keyframes) {
    var cssFileUrl = url.replace(/\..\w+$/, ".css");

    if (cssFileUrl !== url) {
      var cssFile = CSSSource.resolveCSSPathFromURL(cssFileUrl);

      if (cssFile) {
        return new CSSSource(undefined, url, cssFile, keyframes, undefined);
      }
    }

    var file = CSSSource.resolveCSSPathFromURL(url);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.fromFileImport = function (url, keyframes, importSource) {
    var file = CSSSource.resolveCSSPathFromURL(url, importSource);
    return new CSSSource(undefined, url, file, keyframes, undefined);
  };

  CSSSource.resolveCSSPathFromURL = function (url, importSource) {
    var app = file_system_1.knownFolders.currentApp().path;
    var file = resolveFileNameFromUrl(url, app, file_system_1.File.exists, importSource);
    return file;
  };

  CSSSource.fromSource = function (source, keyframes, url) {
    return new CSSSource(undefined, url, undefined, keyframes, source);
  };

  CSSSource.fromAST = function (ast, keyframes, url) {
    return new CSSSource(ast, url, undefined, keyframes, undefined);
  };

  Object.defineProperty(CSSSource.prototype, "selectors", {
    get: function () {
      return this._selectors;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CSSSource.prototype, "source", {
    get: function () {
      return this._source;
    },
    enumerable: true,
    configurable: true
  });

  CSSSource.prototype.load = function () {
    var file = file_system_1.File.fromPath(this._file);
    this._source = file.readTextSync();
  };

  CSSSource.prototype.parse = function () {
    try {
      if (!this._ast) {
        if (!this._source && this._file) {
          this.load();
        }

        if (this._source) {
          this.parseCSSAst();
        }
      }

      if (this._ast) {
        this.createSelectors();
      } else {
        this._selectors = [];
      }
    } catch (e) {
      trace_1.write("Css styling failed: " + e, trace_1.categories.Error, trace_1.messageType.error);
      this._selectors = [];
    }
  };

  CSSSource.prototype.parseCSSAst = function () {
    if (this._source) {
      switch (parser) {
        case "nativescript":
          var cssparser = new parser_1.CSS3Parser(this._source);
          var stylesheet = cssparser.parseAStylesheet();
          var cssNS = new parser_1.CSSNativeScript();
          this._ast = cssNS.parseStylesheet(stylesheet);
          return;

        case "rework":
          this._ast = css_1.parse(this._source, {
            source: this._file
          });
          return;
      }
    }
  };

  CSSSource.prototype.createSelectors = function () {
    if (this._ast) {
      this._selectors = this.createSelectorsFromImports().concat(this.createSelectorsFromSyntaxTree());
    }
  };

  CSSSource.prototype.createSelectorsFromImports = function () {
    var _this = this;

    var imports = this._ast["stylesheet"]["rules"].filter(function (r) {
      return r.type === "import";
    });

    var urlFromImportObject = function (importObject) {
      var importItem = importObject["import"];
      var urlMatch = importItem && importItem.match(pattern);
      return urlMatch && urlMatch[2];
    };

    var sourceFromImportObject = function (importObject) {
      return importObject["position"] && importObject["position"]["source"];
    };

    var toUrlSourcePair = function (importObject) {
      return {
        url: urlFromImportObject(importObject),
        source: sourceFromImportObject(importObject)
      };
    };

    var getCssFile = function (_a) {
      var url = _a.url,
          source = _a.source;
      return source ? CSSSource.fromFileImport(url, _this._keyframes, source) : CSSSource.fromURI(url, _this._keyframes);
    };

    var cssFiles = imports.map(toUrlSourcePair).filter(function (_a) {
      var url = _a.url;
      return !!url;
    }).map(getCssFile);
    var selectors = cssFiles.map(function (file) {
      return file && file.selectors || [];
    });
    return selectors.reduce(function (acc, val) {
      return acc.concat(val);
    }, []);
  };

  CSSSource.prototype.createSelectorsFromSyntaxTree = function () {
    var _this = this;

    var nodes = this._ast.stylesheet.rules;
    nodes.filter(isKeyframe).forEach(function (node) {
      return _this._keyframes[node.name] = node;
    });
    var rulesets = css_selector_1.fromAstNodes(nodes);

    if (rulesets && rulesets.length) {
      ensureCssAnimationParserModule();
      rulesets.forEach(function (rule) {
        rule[animationsSymbol] = cssAnimationParserModule.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
      });
    }

    return rulesets;
  };

  CSSSource.prototype.toString = function () {
    return this._file || this._url || "(in-memory)";
  };

  __decorate([profiling_1.profile], CSSSource.prototype, "load", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parse", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "parseCSSAst", null);

  __decorate([profiling_1.profile], CSSSource.prototype, "createSelectors", null);

  __decorate([profiling_1.profile], CSSSource, "resolveCSSPathFromURL", null);

  return CSSSource;
}();

function removeTaggedAdditionalCSS(tag) {
  var changed = false;

  for (var i = 0; i < applicationAdditionalSelectors.length; i++) {
    if (applicationAdditionalSelectors[i].tag === tag) {
      applicationAdditionalSelectors.splice(i, 1);
      i--;
      changed = true;
    }
  }

  if (changed) {
    mergeCssSelectors();
  }

  return changed;
}

exports.removeTaggedAdditionalCSS = removeTaggedAdditionalCSS;

function addTaggedAdditionalCSS(cssText, tag) {
  var parsed = CSSSource.fromSource(cssText, applicationKeyframes, undefined).selectors;
  var changed = false;

  if (parsed && parsed.length) {
    changed = true;

    if (tag != null) {
      for (var i = 0; i < parsed.length; i++) {
        parsed[i].tag = tag;
      }
    }

    applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
    mergeCssSelectors();
  }

  return changed;
}

exports.addTaggedAdditionalCSS = addTaggedAdditionalCSS;
var onCssChanged = profiling_1.profile("\"style-scope\".onCssChanged", function (args) {
  if (args.cssText) {
    var parsed = CSSSource.fromSource(args.cssText, applicationKeyframes, args.cssFile).selectors;

    if (parsed) {
      applicationAdditionalSelectors.push.apply(applicationAdditionalSelectors, parsed);
      mergeCssSelectors();
    }
  } else if (args.cssFile) {
    loadCss(args.cssFile);
  }
});

function onLiveSync(args) {
  loadCss(applicationCommon.getCssFileName());
}

var loadCss = profiling_1.profile("\"style-scope\".loadCss", function (cssFile) {
  if (!cssFile) {
    return undefined;
  }

  var result = CSSSource.fromURI(cssFile, applicationKeyframes).selectors;

  if (result.length > 0) {
    applicationSelectors = result;
    mergeCssSelectors();
  }
});
applicationCommon.on("cssChanged", onCssChanged);
applicationCommon.on("livesync", onLiveSync);
exports.loadAppCSS = profiling_1.profile("\"style-scope\".loadAppCSS", function (args) {
  loadCss(args.cssFile);
  applicationCommon.off("loadAppCss", exports.loadAppCSS);
});

if (applicationCommon.hasLaunched()) {
  exports.loadAppCSS({
    eventName: "loadAppCss",
    object: applicationCommon,
    cssFile: applicationCommon.getCssFileName()
  });
} else {
  applicationCommon.on("loadAppCss", exports.loadAppCSS);
}

var CssState = function () {
  function CssState(view) {
    var _this = this;

    this.view = view;

    this._onDynamicStateChangeHandler = function () {
      return _this.updateDynamicState();
    };
  }

  CssState.prototype.onChange = function () {
    if (this.view && this.view.isLoaded) {
      this.unsubscribeFromDynamicUpdates();
      this.updateMatch();
      this.subscribeForDynamicUpdates();
      this.updateDynamicState();
    } else {
      this._matchInvalid = true;
    }
  };

  CssState.prototype.isSelectorsLatestVersionApplied = function () {
    return this.view._styleScope._getSelectorsVersion() === this._appliedSelectorsVersion;
  };

  CssState.prototype.onLoaded = function () {
    if (this._matchInvalid) {
      this.updateMatch();
    }

    this.subscribeForDynamicUpdates();
    this.updateDynamicState();
  };

  CssState.prototype.onUnloaded = function () {
    this.unsubscribeFromDynamicUpdates();
  };

  CssState.prototype.updateMatch = function () {
    if (this.view._styleScope) {
      this._appliedSelectorsVersion = this.view._styleScope._getSelectorsVersion();
      this._match = this.view._styleScope.matchSelectors(this.view);
    } else {
      this._match = CssState.emptyMatch;
    }

    this._matchInvalid = false;
  };

  CssState.prototype.updateDynamicState = function () {
    var _this = this;

    var matchingSelectors = this._match.selectors.filter(function (sel) {
      return sel.dynamic ? sel.match(_this.view) : true;
    });

    this.view._batchUpdate(function () {
      _this.stopKeyframeAnimations();

      _this.setPropertyValues(matchingSelectors);

      _this.playKeyframeAnimations(matchingSelectors);
    });
  };

  CssState.prototype.playKeyframeAnimations = function (matchingSelectors) {
    var _this = this;

    var animations = [];
    matchingSelectors.forEach(function (selector) {
      var ruleAnimations = selector.ruleset[animationsSymbol];

      if (ruleAnimations) {
        ensureKeyframeAnimationModule();

        for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
          var animationInfo = ruleAnimations_1[_i];
          var animation = keyframeAnimationModule.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo);

          if (animation) {
            animations.push(animation);
          }
        }
      }
    });

    if (this._playsKeyframeAnimations = animations.length > 0) {
      animations.map(function (animation) {
        return animation.play(_this.view);
      });
      Object.freeze(animations);
      this._appliedAnimations = animations;
    }
  };

  CssState.prototype.stopKeyframeAnimations = function () {
    if (!this._playsKeyframeAnimations) {
      return;
    }

    this._appliedAnimations.filter(function (animation) {
      return animation.isPlaying;
    }).forEach(function (animation) {
      return animation.cancel();
    });

    this._appliedAnimations = CssState.emptyAnimationArray;
    this.view.style["keyframe:rotate"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleX"] = properties_1.unsetValue;
    this.view.style["keyframe:scaleY"] = properties_1.unsetValue;
    this.view.style["keyframe:translateX"] = properties_1.unsetValue;
    this.view.style["keyframe:translateY"] = properties_1.unsetValue;
    this.view.style["keyframe:backgroundColor"] = properties_1.unsetValue;
    this.view.style["keyframe:opacity"] = properties_1.unsetValue;
    this._playsKeyframeAnimations = false;
  };

  CssState.prototype.setPropertyValues = function (matchingSelectors) {
    var newPropertyValues = new this.view.style.PropertyBag();
    matchingSelectors.forEach(function (selector) {
      return selector.ruleset.declarations.forEach(function (declaration) {
        return newPropertyValues[declaration.property] = declaration.value;
      });
    });
    Object.freeze(newPropertyValues);
    var oldProperties = this._appliedPropertyValues;

    for (var key in oldProperties) {
      if (!(key in newPropertyValues)) {
        if (key in this.view.style) {
          this.view.style["css:" + key] = properties_1.unsetValue;
        } else {}
      }
    }

    for (var property in newPropertyValues) {
      if (oldProperties && property in oldProperties && oldProperties[property] === newPropertyValues[property]) {
        continue;
      }

      var value = newPropertyValues[property];

      try {
        if (property in this.view.style) {
          this.view.style["css:" + property] = value;
        } else {
          var camelCasedProperty = property.replace(/-([a-z])/g, function (g) {
            return g[1].toUpperCase();
          });
          this.view[camelCasedProperty] = value;
        }
      } catch (e) {
        trace_1.write("Failed to apply property [" + property + "] with value [" + value + "] to " + this.view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
      }
    }

    this._appliedPropertyValues = newPropertyValues;
  };

  CssState.prototype.subscribeForDynamicUpdates = function () {
    var _this = this;

    var changeMap = this._match.changeMap;
    changeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.addEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.addEventListener(":" + pseudoClass, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](+1);
          }
        });
      }
    });
    this._appliedChangeMap = changeMap;
  };

  CssState.prototype.unsubscribeFromDynamicUpdates = function () {
    var _this = this;

    this._appliedChangeMap.forEach(function (changes, view) {
      if (changes.attributes) {
        changes.attributes.forEach(function (attribute) {
          view.removeEventListener(attribute + "Change", _this._onDynamicStateChangeHandler);
        });
      }

      if (changes.pseudoClasses) {
        changes.pseudoClasses.forEach(function (pseudoClass) {
          var eventName = ":" + pseudoClass;
          view.removeEventListener(eventName, _this._onDynamicStateChangeHandler);

          if (view[eventName]) {
            view[eventName](-1);
          }
        });
      }
    });

    this._appliedChangeMap = CssState.emptyChangeMap;
  };

  CssState.prototype.toString = function () {
    return this.view + "._cssState";
  };

  CssState.emptyChangeMap = Object.freeze(new Map());
  CssState.emptyPropertyBag = Object.freeze({});
  CssState.emptyAnimationArray = Object.freeze([]);
  CssState.emptyMatch = {
    selectors: [],
    changeMap: new Map()
  };

  __decorate([profiling_1.profile], CssState.prototype, "updateMatch", null);

  __decorate([profiling_1.profile], CssState.prototype, "updateDynamicState", null);

  return CssState;
}();

exports.CssState = CssState;
CssState.prototype._appliedChangeMap = CssState.emptyChangeMap;
CssState.prototype._appliedPropertyValues = CssState.emptyPropertyBag;
CssState.prototype._appliedAnimations = CssState.emptyAnimationArray;
CssState.prototype._matchInvalid = true;

var StyleScope = function () {
  function StyleScope() {
    this._css = "";
    this._localCssSelectors = [];
    this._localCssSelectorVersion = 0;
    this._localCssSelectorsAppliedVersion = 0;
    this._applicationCssSelectorsAppliedVersion = 0;
    this._keyframes = new Map();
  }

  Object.defineProperty(StyleScope.prototype, "css", {
    get: function () {
      return this._css;
    },
    set: function (value) {
      this.setCss(value);
    },
    enumerable: true,
    configurable: true
  });

  StyleScope.prototype.addCss = function (cssString, cssFileName) {
    this.appendCss(cssString, cssFileName);
  };

  StyleScope.prototype.addCssFile = function (cssFileName) {
    this.appendCss(null, cssFileName);
  };

  StyleScope.prototype.changeCssFile = function (cssFileName) {
    if (!cssFileName) {
      return;
    }

    var cssSelectors = CSSSource.fromURI(cssFileName, this._keyframes);
    this._css = cssSelectors.source;
    this._localCssSelectors = cssSelectors.selectors;
    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.setCss = function (cssString, cssFileName) {
    this._css = cssString;
    var cssFile = CSSSource.fromSource(cssString, this._keyframes, cssFileName);
    this._localCssSelectors = cssFile.selectors;
    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.appendCss = function (cssString, cssFileName) {
    if (!cssString && !cssFileName) {
      return;
    }

    var parsedCssSelectors = cssString ? CSSSource.fromSource(cssString, this._keyframes, cssFileName) : CSSSource.fromURI(cssFileName, this._keyframes);
    this._css = this._css + parsedCssSelectors.source;

    this._localCssSelectors.push.apply(this._localCssSelectors, parsedCssSelectors.selectors);

    this._localCssSelectorVersion++;
    this.ensureSelectors();
  };

  StyleScope.prototype.getKeyframeAnimationWithName = function (animationName) {
    var cssKeyframes = this._keyframes[animationName];

    if (!cssKeyframes) {
      return;
    }

    ensureKeyframeAnimationModule();
    var animation = new keyframeAnimationModule.KeyframeAnimationInfo();
    ensureCssAnimationParserModule();
    animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframes.keyframes);
    return animation;
  };

  StyleScope.prototype.ensureSelectors = function () {
    if (!this.isApplicationCssSelectorsLatestVersionApplied() || !this.isLocalCssSelectorsLatestVersionApplied() || !this._mergedCssSelectors) {
      this._createSelectors();
    }

    return this._getSelectorsVersion();
  };

  StyleScope.prototype.isApplicationCssSelectorsLatestVersionApplied = function () {
    return this._applicationCssSelectorsAppliedVersion === applicationCssSelectorVersion;
  };

  StyleScope.prototype.isLocalCssSelectorsLatestVersionApplied = function () {
    return this._localCssSelectorsAppliedVersion === this._localCssSelectorVersion;
  };

  StyleScope.prototype._createSelectors = function () {
    var toMerge = [];
    toMerge.push(applicationCssSelectors);
    this._applicationCssSelectorsAppliedVersion = applicationCssSelectorVersion;
    toMerge.push(this._localCssSelectors);
    this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;

    for (var keyframe in applicationKeyframes) {
      this._keyframes[keyframe] = applicationKeyframes[keyframe];
    }

    if (toMerge.length > 0) {
      this._mergedCssSelectors = toMerge.filter(function (m) {
        return !!m;
      }).reduce(function (merged, next) {
        return merged.concat(next);
      }, []);

      this._applyKeyframesOnSelectors();

      this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
    }
  };

  StyleScope.prototype.matchSelectors = function (view) {
    this.ensureSelectors();
    return this._selectors.query(view);
  };

  StyleScope.prototype.query = function (node) {
    this.ensureSelectors();
    return this._selectors.query(node).selectors;
  };

  StyleScope.prototype._getSelectorsVersion = function () {
    return 100000 * this._applicationCssSelectorsAppliedVersion + this._localCssSelectorsAppliedVersion;
  };

  StyleScope.prototype._applyKeyframesOnSelectors = function () {
    for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
      var ruleset = this._mergedCssSelectors[i];
      var animations = ruleset[animationsSymbol];

      if (animations !== undefined && animations.length) {
        ensureCssAnimationParserModule();

        for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
          var animation = animations_1[_i];
          var cssKeyframe = this._keyframes[animation.name];

          if (cssKeyframe !== undefined) {
            animation.keyframes = cssAnimationParserModule.CssAnimationParser.keyframesArrayFromCSS(cssKeyframe.keyframes);
          }
        }
      }
    }
  };

  StyleScope.prototype.getAnimations = function (ruleset) {
    return ruleset[animationsSymbol];
  };

  __decorate([profiling_1.profile], StyleScope.prototype, "changeCssFile", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "setCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "appendCss", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "_createSelectors", null);

  __decorate([profiling_1.profile], StyleScope.prototype, "matchSelectors", null);

  return StyleScope;
}();

exports.StyleScope = StyleScope;

function resolveFileNameFromUrl(url, appDirectory, fileExists, importSource) {
  var fileName = typeof url === "string" ? url.trim() : "";

  if (fileName.indexOf("~/") === 0) {
    fileName = fileName.replace("~/", "");
  }

  var isAbsolutePath = fileName.indexOf("/") === 0;
  var absolutePath = isAbsolutePath ? fileName : file_system_1.path.join(appDirectory, fileName);

  if (fileExists(absolutePath)) {
    return absolutePath;
  }

  if (!isAbsolutePath) {
    if (fileName[0] === "~" && fileName[1] !== "/" && fileName[1] !== "\"") {
      fileName = fileName.substr(1);
    }

    if (importSource) {
      var importFile = resolveFilePathFromImport(importSource, fileName);

      if (fileExists(importFile)) {
        return importFile;
      }
    }

    var external_1 = file_system_1.path.join(appDirectory, "tns_modules", fileName);

    if (fileExists(external_1)) {
      return external_1;
    }
  }

  return null;
}

exports.resolveFileNameFromUrl = resolveFileNameFromUrl;

function resolveFilePathFromImport(importSource, fileName) {
  var importSourceParts = importSource.split(file_system_1.path.separator);
  var fileNameParts = fileName.split(file_system_1.path.separator).filter(function (p) {
    return !isCurrentDirectory(p);
  });
  importSourceParts.pop();
  fileNameParts.forEach(function (p) {
    return isParentDirectory(p) ? importSourceParts.pop() : importSourceParts.push(p);
  });
  return importSourceParts.join(file_system_1.path.separator);
}

exports.applyInlineStyle = profiling_1.profile(function applyInlineStyle(view, styleStr) {
  var localStyle = "local { " + styleStr + " }";
  var inlineRuleSet = CSSSource.fromSource(localStyle, new Map()).selectors;
  var style = view.style;
  inlineRuleSet[0].declarations.forEach(function (d) {
    var name = d.property;

    try {
      if (name in style) {
        style[name] = d.value;
      } else {
        view[name] = d.value;
      }
    } catch (e) {
      trace_1.write("Failed to apply property [" + d.property + "] with value [" + d.value + "] to " + view + ". " + e, trace_1.categories.Error, trace_1.messageType.error);
    }
  });
});

function isCurrentDirectory(uriPart) {
  return uriPart === ".";
}

function isParentDirectory(uriPart) {
  return uriPart === "..";
}

function isKeyframe(node) {
  return node.type === "keyframes";
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/styling/style/style.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var observable_1 = __webpack_require__("../node_modules/tns-core-modules/data/observable/observable.js");

var Style = function (_super) {
  __extends(Style, _super);

  function Style(view) {
    var _this = _super.call(this) || this;

    _this.view = view;
    return _this;
  }

  Style.prototype.toString = function () {
    return this.view + ".style";
  };

  return Style;
}(observable_1.Observable);

exports.Style = Style;

Style.prototype.PropertyBag = function () {
  function class_1() {}

  return class_1;
}();

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/switch/switch-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var SwitchBase = function (_super) {
  __extends(SwitchBase, _super);

  function SwitchBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SwitchBase = __decorate([view_1.CSSType("Switch")], SwitchBase);
  return SwitchBase;
}(view_1.View);

exports.SwitchBase = SwitchBase;
SwitchBase.prototype.recycleNativeView = "auto";
exports.checkedProperty = new view_1.Property({
  name: "checked",
  defaultValue: false,
  valueConverter: view_1.booleanConverter
});
exports.checkedProperty.register(SwitchBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/switch/switch.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var switch_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/switch/switch-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/switch/switch-common.js"));

var SwitchChangeHandlerImpl = function (_super) {
  __extends(SwitchChangeHandlerImpl, _super);

  function SwitchChangeHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  SwitchChangeHandlerImpl.initWithOwner = function (owner) {
    var handler = SwitchChangeHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  SwitchChangeHandlerImpl.prototype.valueChanged = function (sender) {
    var owner = this._owner.get();

    if (owner) {
      switch_common_1.checkedProperty.nativeValueChange(owner, sender.on);
    }
  };

  SwitchChangeHandlerImpl.ObjCExposedMethods = {
    "valueChanged": {
      returns: interop.types.void,
      params: [UISwitch]
    }
  };
  return SwitchChangeHandlerImpl;
}(NSObject);

var zeroSize = {
  width: 0,
  height: 0
};

var Switch = function (_super) {
  __extends(Switch, _super);

  function Switch() {
    var _this = _super.call(this) || this;

    _this.width = 51;
    _this.height = 31;
    return _this;
  }

  Switch.prototype.createNativeView = function () {
    return UISwitch.new();
  };

  Switch.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    var nativeView = this.nativeViewProtected;
    this._handler = SwitchChangeHandlerImpl.initWithOwner(new WeakRef(this));
    nativeView.addTargetActionForControlEvents(this._handler, "valueChanged", 4096);
  };

  Switch.prototype.disposeNativeView = function () {
    this._handler = null;

    _super.prototype.disposeNativeView.call(this);
  };

  Object.defineProperty(Switch.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  Switch.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var nativeSize = this.nativeViewProtected.sizeThatFits(zeroSize);
    this.width = nativeSize.width;
    this.height = nativeSize.height;
    var widthAndState = Switch.resolveSizeAndState(switch_common_1.layout.toDevicePixels(nativeSize.width), switch_common_1.layout.toDevicePixels(51), switch_common_1.layout.EXACTLY, 0);
    var heightAndState = Switch.resolveSizeAndState(switch_common_1.layout.toDevicePixels(nativeSize.height), switch_common_1.layout.toDevicePixels(31), switch_common_1.layout.EXACTLY, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  Switch.prototype[switch_common_1.checkedProperty.getDefault] = function () {
    return false;
  };

  Switch.prototype[switch_common_1.checkedProperty.setNative] = function (value) {
    this.nativeViewProtected.on = value;
  };

  Switch.prototype[switch_common_1.colorProperty.getDefault] = function () {
    return this.nativeViewProtected.thumbTintColor;
  };

  Switch.prototype[switch_common_1.colorProperty.setNative] = function (value) {
    this.nativeViewProtected.thumbTintColor = value instanceof switch_common_1.Color ? value.ios : value;
  };

  Switch.prototype[switch_common_1.backgroundColorProperty.getDefault] = function () {
    return this.nativeViewProtected.onTintColor;
  };

  Switch.prototype[switch_common_1.backgroundColorProperty.setNative] = function (value) {
    this.nativeViewProtected.onTintColor = value instanceof switch_common_1.Color ? value.ios : value;
  };

  Switch.prototype[switch_common_1.backgroundInternalProperty.getDefault] = function () {
    return null;
  };

  Switch.prototype[switch_common_1.backgroundInternalProperty.setNative] = function (value) {};

  return Switch;
}(switch_common_1.SwitchBase);

exports.Switch = Switch;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

exports.traceCategory = "TabView";

var TabViewItemBase = function (_super) {
  __extends(TabViewItemBase, _super);

  function TabViewItemBase() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._title = "";
    return _this;
  }

  Object.defineProperty(TabViewItemBase.prototype, "textTransform", {
    get: function () {
      return this.style.textTransform;
    },
    set: function (value) {
      this.style.textTransform = value;
    },
    enumerable: true,
    configurable: true
  });

  TabViewItemBase.prototype._addChildFromBuilder = function (name, value) {
    if (value instanceof view_1.View) {
      this.view = value;
    }
  };

  Object.defineProperty(TabViewItemBase.prototype, "title", {
    get: function () {
      return this._title;
    },
    set: function (value) {
      if (this._title !== value) {
        this._title = value;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewItemBase.prototype, "view", {
    get: function () {
      return this._view;
    },
    set: function (value) {
      if (this._view !== value) {
        if (this._view) {
          throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
        }

        this._view = value;

        this._addView(value);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewItemBase.prototype, "iconSource", {
    get: function () {
      return this._iconSource;
    },
    set: function (value) {
      if (this._iconSource !== value) {
        this._iconSource = value;

        this._update();
      }
    },
    enumerable: true,
    configurable: true
  });

  TabViewItemBase.prototype.eachChild = function (callback) {
    var view = this._view;

    if (view) {
      callback(view);
    }
  };

  TabViewItemBase.prototype.loadView = function (view) {
    var tabView = this.parent;

    if (tabView && tabView.items) {
      if (this.canBeLoaded) {
        _super.prototype.loadView.call(this, view);
      }
    }
  };

  TabViewItemBase = __decorate([view_1.CSSType("TabViewItem")], TabViewItemBase);
  return TabViewItemBase;
}(view_1.ViewBase);

exports.TabViewItemBase = TabViewItemBase;
var knownCollections;

(function (knownCollections) {
  knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));

var TabViewBase = function (_super) {
  __extends(TabViewBase, _super);

  function TabViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabViewBase_1 = TabViewBase;
  Object.defineProperty(TabViewBase.prototype, "androidSelectedTabHighlightColor", {
    get: function () {
      return this.style.androidSelectedTabHighlightColor;
    },
    set: function (value) {
      this.style.androidSelectedTabHighlightColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabTextFontSize", {
    get: function () {
      return this.style.tabTextFontSize;
    },
    set: function (value) {
      this.style.tabTextFontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabTextColor", {
    get: function () {
      return this.style.tabTextColor;
    },
    set: function (value) {
      this.style.tabTextColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "tabBackgroundColor", {
    get: function () {
      return this.style.tabBackgroundColor;
    },
    set: function (value) {
      this.style.tabBackgroundColor = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "selectedTabTextColor", {
    get: function () {
      return this.style.selectedTabTextColor;
    },
    set: function (value) {
      this.style.selectedTabTextColor = value;
    },
    enumerable: true,
    configurable: true
  });

  TabViewBase.prototype._addArrayFromBuilder = function (name, value) {
    if (name === "items") {
      this.items = value;
    }
  };

  TabViewBase.prototype._addChildFromBuilder = function (name, value) {
    if (name === "TabViewItem") {
      if (!this.items) {
        this.items = new Array();
      }

      this.items.push(value);

      this._addView(value);

      exports.selectedIndexProperty.coerce(this);
    }
  };

  Object.defineProperty(TabViewBase.prototype, "_selectedView", {
    get: function () {
      var selectedIndex = this.selectedIndex;
      return selectedIndex > -1 ? this.items[selectedIndex].view : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TabViewBase.prototype, "_childrenCount", {
    get: function () {
      var items = this.items;
      return items ? items.length : 0;
    },
    enumerable: true,
    configurable: true
  });

  TabViewBase.prototype.eachChild = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item);
      });
    }
  };

  TabViewBase.prototype.eachChildView = function (callback) {
    var items = this.items;

    if (items) {
      items.forEach(function (item, i) {
        callback(item.view);
      });
    }
  };

  TabViewBase.prototype.onItemsChanged = function (oldItems, newItems) {
    var _this = this;

    if (oldItems) {
      oldItems.forEach(function (item) {
        return _this._removeView(item);
      });
    }

    if (newItems) {
      newItems.forEach(function (item) {
        if (!item.view) {
          throw new Error("TabViewItem must have a view.");
        }

        _this._addView(item);
      });
    }
  };

  TabViewBase.prototype.onSelectedIndexChanged = function (oldIndex, newIndex) {
    this.notify({
      eventName: TabViewBase_1.selectedIndexChangedEvent,
      object: this,
      oldIndex: oldIndex,
      newIndex: newIndex
    });
  };

  var TabViewBase_1;
  TabViewBase.selectedIndexChangedEvent = "selectedIndexChanged";
  TabViewBase = TabViewBase_1 = __decorate([view_1.CSSType("TabView")], TabViewBase);
  return TabViewBase;
}(view_1.View);

exports.TabViewBase = TabViewBase;

function traceMissingIcon(icon) {
  view_1.traceWrite("Could not load tab bar icon: " + icon, view_1.traceCategories.Error, view_1.traceMessageType.error);
}

exports.traceMissingIcon = traceMissingIcon;
exports.selectedIndexProperty = new view_1.CoercibleProperty({
  name: "selectedIndex",
  defaultValue: -1,
  affectsLayout: view_1.isIOS,
  valueChanged: function (target, oldValue, newValue) {
    target.onSelectedIndexChanged(oldValue, newValue);
  },
  coerceValue: function (target, value) {
    var items = target.items;

    if (items) {
      var max = items.length - 1;

      if (value < 0) {
        value = 0;
      }

      if (value > max) {
        value = max;
      }
    } else {
      value = -1;
    }

    return value;
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.selectedIndexProperty.register(TabViewBase);
exports.itemsProperty = new view_1.Property({
  name: "items",
  valueChanged: function (target, oldValue, newValue) {
    target.onItemsChanged(oldValue, newValue);
  }
});
exports.itemsProperty.register(TabViewBase);
exports.iosIconRenderingModeProperty = new view_1.Property({
  name: "iosIconRenderingMode",
  defaultValue: "automatic"
});
exports.iosIconRenderingModeProperty.register(TabViewBase);
exports.androidOffscreenTabLimitProperty = new view_1.Property({
  name: "androidOffscreenTabLimit",
  defaultValue: 1,
  affectsLayout: view_1.isIOS,
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.androidOffscreenTabLimitProperty.register(TabViewBase);
exports.androidTabsPositionProperty = new view_1.Property({
  name: "androidTabsPosition",
  defaultValue: "top"
});
exports.androidTabsPositionProperty.register(TabViewBase);
exports.androidSwipeEnabledProperty = new view_1.Property({
  name: "androidSwipeEnabled",
  defaultValue: true,
  valueConverter: view_1.booleanConverter
});
exports.androidSwipeEnabledProperty.register(TabViewBase);
exports.tabTextFontSizeProperty = new view_1.CssProperty({
  name: "tabTextFontSize",
  cssName: "tab-text-font-size",
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.tabTextFontSizeProperty.register(view_1.Style);
exports.tabTextColorProperty = new view_1.CssProperty({
  name: "tabTextColor",
  cssName: "tab-text-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.tabTextColorProperty.register(view_1.Style);
exports.tabBackgroundColorProperty = new view_1.CssProperty({
  name: "tabBackgroundColor",
  cssName: "tab-background-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.tabBackgroundColorProperty.register(view_1.Style);
exports.selectedTabTextColorProperty = new view_1.CssProperty({
  name: "selectedTabTextColor",
  cssName: "selected-tab-text-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.selectedTabTextColorProperty.register(view_1.Style);
exports.androidSelectedTabHighlightColorProperty = new view_1.CssProperty({
  name: "androidSelectedTabHighlightColor",
  cssName: "android-selected-tab-highlight-color",
  equalityComparer: view_1.Color.equals,
  valueConverter: function (v) {
    return new view_1.Color(v);
  }
});
exports.androidSelectedTabHighlightColorProperty.register(view_1.Style);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/tab-view/tab-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var tab_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js");

var text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base.js");

var image_source_1 = __webpack_require__("../node_modules/tns-core-modules/image-source/image-source.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

var frame_1 = __webpack_require__("../node_modules/tns-core-modules/ui/frame/frame.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/tab-view/tab-view-common.js"));

var majorVersion = utils_1.ios.MajorVersion;
var isPhone = platform_1.device.deviceType === "Phone";

var UITabBarControllerImpl = function (_super) {
  __extends(UITabBarControllerImpl, _super);

  function UITabBarControllerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITabBarControllerImpl.initWithOwner = function (owner) {
    var handler = UITabBarControllerImpl.new();
    handler._owner = owner;
    return handler;
  };

  UITabBarControllerImpl.prototype.viewWillAppear = function (animated) {
    _super.prototype.viewWillAppear.call(this, animated);

    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    this.extendedLayoutIncludesOpaqueBars = true;
    view_1.ios.updateAutoAdjustScrollInsets(this, owner);

    if (!owner.parent) {
      owner.callLoaded();
    }
  };

  UITabBarControllerImpl.prototype.viewDidDisappear = function (animated) {
    _super.prototype.viewDidDisappear.call(this, animated);

    var owner = this._owner.get();

    if (owner && !owner.parent && owner.isLoaded && !this.presentedViewController) {
      owner.callUnloaded();
    }
  };

  UITabBarControllerImpl.prototype.viewWillTransitionToSizeWithTransitionCoordinator = function (size, coordinator) {
    var _this = this;

    _super.prototype.viewWillTransitionToSizeWithTransitionCoordinator.call(this, size, coordinator);

    UIViewControllerTransitionCoordinator.prototype.animateAlongsideTransitionCompletion.call(coordinator, null, function () {
      var owner = _this._owner.get();

      if (owner && owner.items) {
        owner.items.forEach(function (tabItem) {
          return tabItem._updateTitleAndIconPositions();
        });
      }
    });
  };

  __decorate([profiling_1.profile], UITabBarControllerImpl.prototype, "viewWillAppear", null);

  __decorate([profiling_1.profile], UITabBarControllerImpl.prototype, "viewDidDisappear", null);

  return UITabBarControllerImpl;
}(UITabBarController);

var UITabBarControllerDelegateImpl = function (_super) {
  __extends(UITabBarControllerDelegateImpl, _super);

  function UITabBarControllerDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITabBarControllerDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITabBarControllerDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UITabBarControllerDelegateImpl.prototype.tabBarControllerShouldSelectViewController = function (tabBarController, viewController) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView.delegate.SHOULD_select(" + tabBarController + ", " + viewController + ");", tab_view_common_1.traceCategories.Debug);
    }

    var owner = this._owner.get();

    if (owner) {
      var backToMoreWillBeVisible = false;

      owner._handleTwoNavigationBars(backToMoreWillBeVisible);
    }

    if (tabBarController.selectedViewController === viewController) {
      return false;
    }

    tabBarController._willSelectViewController = viewController;
    return true;
  };

  UITabBarControllerDelegateImpl.prototype.tabBarControllerDidSelectViewController = function (tabBarController, viewController) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView.delegate.DID_select(" + tabBarController + ", " + viewController + ");", tab_view_common_1.traceCategories.Debug);
    }

    var owner = this._owner.get();

    if (owner) {
      owner._onViewControllerShown(viewController);
    }

    tabBarController._willSelectViewController = undefined;
  };

  UITabBarControllerDelegateImpl.ObjCProtocols = [UITabBarControllerDelegate];
  return UITabBarControllerDelegateImpl;
}(NSObject);

var UINavigationControllerDelegateImpl = function (_super) {
  __extends(UINavigationControllerDelegateImpl, _super);

  function UINavigationControllerDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UINavigationControllerDelegateImpl.initWithOwner = function (owner) {
    var delegate = UINavigationControllerDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UINavigationControllerDelegateImpl.prototype.navigationControllerWillShowViewControllerAnimated = function (navigationController, viewController, animated) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView.moreNavigationController.WILL_show(" + navigationController + ", " + viewController + ", " + animated + ");", tab_view_common_1.traceCategories.Debug);
    }

    var owner = this._owner.get();

    if (owner) {
      var backToMoreWillBeVisible = owner._ios.viewControllers.containsObject(viewController);

      owner._handleTwoNavigationBars(backToMoreWillBeVisible);
    }
  };

  UINavigationControllerDelegateImpl.prototype.navigationControllerDidShowViewControllerAnimated = function (navigationController, viewController, animated) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView.moreNavigationController.DID_show(" + navigationController + ", " + viewController + ", " + animated + ");", tab_view_common_1.traceCategories.Debug);
    }

    navigationController.navigationBar.topItem.rightBarButtonItem = null;

    var owner = this._owner.get();

    if (owner) {
      owner._onViewControllerShown(viewController);
    }
  };

  UINavigationControllerDelegateImpl.ObjCProtocols = [UINavigationControllerDelegate];
  return UINavigationControllerDelegateImpl;
}(NSObject);

function updateTitleAndIconPositions(tabItem, tabBarItem, controller) {
  if (!tabItem || !tabBarItem) {
    return;
  }

  var orientation = controller.interfaceOrientation;
  var isPortrait = orientation !== 4 && orientation !== 3;
  var isIconAboveTitle = majorVersion < 11 || isPhone && isPortrait;

  if (!tabItem.iconSource) {
    if (isIconAboveTitle) {
      tabBarItem.titlePositionAdjustment = {
        horizontal: 0,
        vertical: -20
      };
    } else {
      tabBarItem.titlePositionAdjustment = {
        horizontal: 0,
        vertical: 0
      };
    }
  }

  if (!tabItem.title) {
    if (isIconAboveTitle) {
      tabBarItem.imageInsets = new UIEdgeInsets({
        top: 6,
        left: 0,
        bottom: -6,
        right: 0
      });
    } else {
      tabBarItem.imageInsets = new UIEdgeInsets({
        top: 0,
        left: 0,
        bottom: 0,
        right: 0
      });
    }
  }
}

var TabViewItem = function (_super) {
  __extends(TabViewItem, _super);

  function TabViewItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TabViewItem.prototype.setViewController = function (controller, nativeView) {
    this.__controller = controller;
    this.setNativeView(nativeView);
  };

  TabViewItem.prototype.disposeNativeView = function () {
    this.__controller = undefined;
    this.setNativeView(undefined);
  };

  TabViewItem.prototype.loadView = function (view) {
    var tabView = this.parent;

    if (tabView && tabView.items) {
      var index_1 = tabView.items.indexOf(this);

      if (index_1 === tabView.selectedIndex) {
        _super.prototype.loadView.call(this, view);
      }
    }
  };

  TabViewItem.prototype._update = function () {
    var parent = this.parent;
    var controller = this.__controller;

    if (parent && controller) {
      var icon = parent._getIcon(this.iconSource);

      var index_2 = parent.items.indexOf(this);
      var title = text_base_1.getTransformedText(this.title, this.style.textTransform);
      var tabBarItem = UITabBarItem.alloc().initWithTitleImageTag(title, icon, index_2);
      updateTitleAndIconPositions(this, tabBarItem, controller);
      var states = getTitleAttributesForStates(parent);
      applyStatesToItem(tabBarItem, states);
      controller.tabBarItem = tabBarItem;
    }
  };

  TabViewItem.prototype._updateTitleAndIconPositions = function () {
    if (!this.__controller || !this.__controller.tabBarItem) {
      return;
    }

    updateTitleAndIconPositions(this, this.__controller.tabBarItem, this.__controller);
  };

  TabViewItem.prototype[text_base_1.textTransformProperty.setNative] = function (value) {
    this._update();
  };

  return TabViewItem;
}(tab_view_common_1.TabViewItemBase);

exports.TabViewItem = TabViewItem;

var TabView = function (_super) {
  __extends(TabView, _super);

  function TabView() {
    var _this = _super.call(this) || this;

    _this._iconsCache = {};
    _this.viewController = _this._ios = UITabBarControllerImpl.initWithOwner(new WeakRef(_this));
    _this.nativeViewProtected = _this._ios.view;
    return _this;
  }

  TabView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._delegate = UITabBarControllerDelegateImpl.initWithOwner(new WeakRef(this));
    this._moreNavigationControllerDelegate = UINavigationControllerDelegateImpl.initWithOwner(new WeakRef(this));
  };

  TabView.prototype.disposeNativeView = function () {
    this._delegate = null;
    this._moreNavigationControllerDelegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  TabView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    var selectedIndex = this.selectedIndex;
    var selectedView = this.items && this.items[selectedIndex] && this.items[selectedIndex].view;

    if (selectedView instanceof frame_1.Frame) {
      selectedView._pushInFrameStackRecursive();
    }

    this._ios.delegate = this._delegate;
  };

  TabView.prototype.onUnloaded = function () {
    this._ios.delegate = null;
    this._ios.moreNavigationController.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Object.defineProperty(TabView.prototype, "ios", {
    get: function () {
      return this._ios;
    },
    enumerable: true,
    configurable: true
  });

  TabView.prototype.layoutNativeView = function (left, top, right, bottom) {};

  TabView.prototype._setNativeViewFrame = function (nativeView, frame) {};

  TabView.prototype.onSelectedIndexChanged = function (oldIndex, newIndex) {
    var items = this.items;

    if (!items) {
      return;
    }

    var oldItem = items[oldIndex];

    if (oldItem) {
      oldItem.unloadView(oldItem.view);
    }

    var newItem = items[newIndex];

    if (newItem && this.isLoaded) {
      var selectedView = items[newIndex].view;

      if (selectedView instanceof frame_1.Frame) {
        selectedView._pushInFrameStackRecursive();
      }

      newItem.loadView(newItem.view);
    }

    _super.prototype.onSelectedIndexChanged.call(this, oldIndex, newIndex);
  };

  TabView.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
    var width = tab_view_common_1.layout.getMeasureSpecSize(widthMeasureSpec);
    var widthMode = tab_view_common_1.layout.getMeasureSpecMode(widthMeasureSpec);
    var height = tab_view_common_1.layout.getMeasureSpecSize(heightMeasureSpec);
    var heightMode = tab_view_common_1.layout.getMeasureSpecMode(heightMeasureSpec);
    var widthAndState = tab_view_common_1.View.resolveSizeAndState(width, width, widthMode, 0);
    var heightAndState = tab_view_common_1.View.resolveSizeAndState(height, height, heightMode, 0);
    this.setMeasuredDimension(widthAndState, heightAndState);
  };

  TabView.prototype._onViewControllerShown = function (viewController) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView._onViewControllerShown(" + viewController + ");", tab_view_common_1.traceCategories.Debug);
    }

    if (this._ios.viewControllers && this._ios.viewControllers.containsObject(viewController)) {
      this.selectedIndex = this._ios.viewControllers.indexOfObject(viewController);
    } else {
      if (tab_view_common_1.traceEnabled()) {
        tab_view_common_1.traceWrite("TabView._onViewControllerShown: viewController is not one of our viewControllers", tab_view_common_1.traceCategories.Debug);
      }
    }
  };

  TabView.prototype._handleTwoNavigationBars = function (backToMoreWillBeVisible) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView._handleTwoNavigationBars(backToMoreWillBeVisible: " + backToMoreWillBeVisible + ")", tab_view_common_1.traceCategories.Debug);
    }

    var page = this.page || this._selectedView.page || this._selectedView.currentPage;

    if (!page || !page.frame) {
      return;
    }

    var actionBarVisible = page.frame._getNavBarVisible(page);

    if (backToMoreWillBeVisible && actionBarVisible) {
      page.frame.ios._disableNavBarAnimation = true;
      page.actionBarHidden = true;
      page.frame.ios._disableNavBarAnimation = false;
      this._actionBarHiddenByTabView = true;

      if (tab_view_common_1.traceEnabled()) {
        tab_view_common_1.traceWrite("TabView hid action bar", tab_view_common_1.traceCategories.Debug);
      }

      return;
    }

    if (!backToMoreWillBeVisible && this._actionBarHiddenByTabView) {
      page.frame.ios._disableNavBarAnimation = true;
      page.actionBarHidden = false;
      page.frame.ios._disableNavBarAnimation = false;
      this._actionBarHiddenByTabView = undefined;

      if (tab_view_common_1.traceEnabled()) {
        tab_view_common_1.traceWrite("TabView restored action bar", tab_view_common_1.traceCategories.Debug);
      }

      return;
    }
  };

  TabView.prototype.getViewController = function (item) {
    var newController = item.view ? item.view.viewController : null;

    if (newController) {
      item.setViewController(newController, newController.view);
      return newController;
    }

    if (item.view.ios instanceof UIViewController) {
      newController = item.view.ios;
      item.setViewController(newController, newController.view);
    } else if (item.view.ios && item.view.ios.controller instanceof UIViewController) {
      newController = item.view.ios.controller;
      item.setViewController(newController, newController.view);
    } else {
      newController = view_1.ios.UILayoutViewController.initWithOwner(new WeakRef(item.view));
      newController.view.addSubview(item.view.nativeViewProtected);
      item.view.viewController = newController;
      item.setViewController(newController, item.view.nativeViewProtected);
    }

    return newController;
  };

  TabView.prototype.setViewControllers = function (items) {
    var _this = this;

    var length = items ? items.length : 0;

    if (length === 0) {
      this._ios.viewControllers = null;
      return;
    }

    var controllers = NSMutableArray.alloc().initWithCapacity(length);
    var states = getTitleAttributesForStates(this);
    items.forEach(function (item, i) {
      var controller = _this.getViewController(item);

      var icon = _this._getIcon(item.iconSource);

      var tabBarItem = UITabBarItem.alloc().initWithTitleImageTag(item.title || "", icon, i);
      updateTitleAndIconPositions(item, tabBarItem, controller);
      applyStatesToItem(tabBarItem, states);
      controller.tabBarItem = tabBarItem;
      controllers.addObject(controller);
      item.canBeLoaded = true;
    });
    this._ios.viewControllers = controllers;
    this._ios.customizableViewControllers = null;
    this._ios.moreNavigationController.delegate = this._moreNavigationControllerDelegate;
  };

  TabView.prototype._getIconRenderingMode = function () {
    switch (this.iosIconRenderingMode) {
      case "alwaysOriginal":
        return 1;

      case "alwaysTemplate":
        return 2;

      case "automatic":
      default:
        return 0;
    }
  };

  TabView.prototype._getIcon = function (iconSource) {
    if (!iconSource) {
      return null;
    }

    var image = this._iconsCache[iconSource];

    if (!image) {
      var is = image_source_1.fromFileOrResource(iconSource);

      if (is && is.ios) {
        var originalRenderedImage = is.ios.imageWithRenderingMode(this._getIconRenderingMode());
        this._iconsCache[iconSource] = originalRenderedImage;
        image = originalRenderedImage;
      } else {
        tab_view_common_1.traceMissingIcon(iconSource);
      }
    }

    return image;
  };

  TabView.prototype._updateIOSTabBarColorsAndFonts = function () {
    if (!this.items) {
      return;
    }

    var tabBar = this.ios.tabBar;
    var states = getTitleAttributesForStates(this);

    for (var i = 0; i < tabBar.items.count; i++) {
      applyStatesToItem(tabBar.items[i], states);
    }
  };

  TabView.prototype[tab_view_common_1.selectedIndexProperty.setNative] = function (value) {
    if (tab_view_common_1.traceEnabled()) {
      tab_view_common_1.traceWrite("TabView._onSelectedIndexPropertyChangedSetNativeValue(" + value + ")", tab_view_common_1.traceCategories.Debug);
    }

    if (value > -1) {
      this._ios._willSelectViewController = this._ios.viewControllers[value];
      this._ios.selectedIndex = value;
    }
  };

  TabView.prototype[tab_view_common_1.itemsProperty.getDefault] = function () {
    return null;
  };

  TabView.prototype[tab_view_common_1.itemsProperty.setNative] = function (value) {
    this.setViewControllers(value);
    tab_view_common_1.selectedIndexProperty.coerce(this);
  };

  TabView.prototype[tab_view_common_1.tabTextFontSizeProperty.getDefault] = function () {
    return null;
  };

  TabView.prototype[tab_view_common_1.tabTextFontSizeProperty.setNative] = function (value) {
    this._updateIOSTabBarColorsAndFonts();
  };

  TabView.prototype[tab_view_common_1.tabTextColorProperty.getDefault] = function () {
    return null;
  };

  TabView.prototype[tab_view_common_1.tabTextColorProperty.setNative] = function (value) {
    this._updateIOSTabBarColorsAndFonts();
  };

  TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.getDefault] = function () {
    return this._ios.tabBar.barTintColor;
  };

  TabView.prototype[tab_view_common_1.tabBackgroundColorProperty.setNative] = function (value) {
    this._ios.tabBar.barTintColor = value instanceof tab_view_common_1.Color ? value.ios : value;
  };

  TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.getDefault] = function () {
    return this._ios.tabBar.tintColor;
  };

  TabView.prototype[tab_view_common_1.selectedTabTextColorProperty.setNative] = function (value) {
    this._ios.tabBar.tintColor = value instanceof tab_view_common_1.Color ? value.ios : value;

    this._updateIOSTabBarColorsAndFonts();
  };

  TabView.prototype[tab_view_common_1.fontInternalProperty.getDefault] = function () {
    return null;
  };

  TabView.prototype[tab_view_common_1.fontInternalProperty.setNative] = function (value) {
    this._updateIOSTabBarColorsAndFonts();
  };

  TabView.prototype[tab_view_common_1.iosIconRenderingModeProperty.getDefault] = function () {
    return "automatic";
  };

  TabView.prototype[tab_view_common_1.iosIconRenderingModeProperty.setNative] = function (value) {
    this._iconsCache = {};
    var items = this.items;

    if (items && items.length) {
      for (var i = 0, length_1 = items.length; i < length_1; i++) {
        var item = items[i];

        if (item.iconSource) {
          item._update();
        }
      }
    }
  };

  __decorate([profiling_1.profile], TabView.prototype, "onLoaded", null);

  return TabView;
}(tab_view_common_1.TabViewBase);

exports.TabView = TabView;

function getTitleAttributesForStates(tabView) {
  var _a, _b;

  var result = {};
  var defaultTabItemFontSize = 10;
  var tabItemFontSize = tabView.style.tabTextFontSize || defaultTabItemFontSize;
  var font = tabView.style.fontInternal.getUIFont(UIFont.systemFontOfSize(tabItemFontSize));
  var tabItemTextColor = tabView.style.tabTextColor;
  var textColor = tabItemTextColor instanceof tab_view_common_1.Color ? tabItemTextColor.ios : null;
  result.normalState = (_a = {}, _a[NSFontAttributeName] = font, _a);

  if (textColor) {
    result.normalState[UITextAttributeTextColor] = textColor;
  }

  var tabSelectedItemTextColor = tabView.style.selectedTabTextColor;
  var selectedTextColor = tabItemTextColor instanceof tab_view_common_1.Color ? tabSelectedItemTextColor.ios : null;
  result.selectedState = (_b = {}, _b[NSFontAttributeName] = font, _b);

  if (selectedTextColor) {
    result.selectedState[UITextAttributeTextColor] = selectedTextColor;
  }

  return result;
}

function applyStatesToItem(item, states) {
  item.setTitleTextAttributesForState(states.normalState, 0);
  item.setTitleTextAttributesForState(states.selectedState, 4);
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var formatted_string_1 = __webpack_require__("../node_modules/tns-core-modules/text/formatted-string.js");

exports.FormattedString = formatted_string_1.FormattedString;
exports.Span = formatted_string_1.Span;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";

var TextBaseCommon = function (_super) {
  __extends(TextBaseCommon, _super);

  function TextBaseCommon() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(TextBaseCommon.prototype, "nativeTextViewProtected", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontFamily", {
    get: function () {
      return this.style.fontFamily;
    },
    set: function (value) {
      this.style.fontFamily = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontSize", {
    get: function () {
      return this.style.fontSize;
    },
    set: function (value) {
      this.style.fontSize = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontStyle", {
    get: function () {
      return this.style.fontStyle;
    },
    set: function (value) {
      this.style.fontStyle = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "fontWeight", {
    get: function () {
      return this.style.fontWeight;
    },
    set: function (value) {
      this.style.fontWeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "letterSpacing", {
    get: function () {
      return this.style.letterSpacing;
    },
    set: function (value) {
      this.style.letterSpacing = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "lineHeight", {
    get: function () {
      return this.style.lineHeight;
    },
    set: function (value) {
      this.style.lineHeight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textAlignment", {
    get: function () {
      return this.style.textAlignment;
    },
    set: function (value) {
      this.style.textAlignment = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textDecoration", {
    get: function () {
      return this.style.textDecoration;
    },
    set: function (value) {
      this.style.textDecoration = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "textTransform", {
    get: function () {
      return this.style.textTransform;
    },
    set: function (value) {
      this.style.textTransform = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "whiteSpace", {
    get: function () {
      return this.style.whiteSpace;
    },
    set: function (value) {
      this.style.whiteSpace = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "padding", {
    get: function () {
      return this.style.padding;
    },
    set: function (value) {
      this.style.padding = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingTop", {
    get: function () {
      return this.style.paddingTop;
    },
    set: function (value) {
      this.style.paddingTop = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingRight", {
    get: function () {
      return this.style.paddingRight;
    },
    set: function (value) {
      this.style.paddingRight = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingBottom", {
    get: function () {
      return this.style.paddingBottom;
    },
    set: function (value) {
      this.style.paddingBottom = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TextBaseCommon.prototype, "paddingLeft", {
    get: function () {
      return this.style.paddingLeft;
    },
    set: function (value) {
      this.style.paddingLeft = value;
    },
    enumerable: true,
    configurable: true
  });

  TextBaseCommon.prototype._onFormattedTextContentsChanged = function (data) {
    if (this.nativeViewProtected) {
      this[exports.formattedTextProperty.setNative](data.value);
    }
  };

  TextBaseCommon.prototype._addChildFromBuilder = function (name, value) {
    if (name === CHILD_SPAN) {
      if (!this.formattedText) {
        var formattedText = new formatted_string_1.FormattedString();
        formattedText.spans.push(value);
        this.formattedText = formattedText;
      } else {
        this.formattedText.spans.push(value);
      }
    } else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
      this.formattedText = value;
    }
  };

  TextBaseCommon.prototype._requestLayoutOnTextChanged = function () {
    this.requestLayout();
  };

  TextBaseCommon.prototype.eachChild = function (callback) {
    var text = this.formattedText;

    if (text) {
      callback(text);
    }
  };

  TextBaseCommon.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }
  };

  return TextBaseCommon;
}(view_1.View);

exports.TextBaseCommon = TextBaseCommon;
TextBaseCommon.prototype._isSingleLine = false;

function isBold(fontWeight) {
  return fontWeight === "bold" || fontWeight === "700" || fontWeight === "800" || fontWeight === "900";
}

exports.isBold = isBold;
exports.textProperty = new view_1.Property({
  name: "text",
  defaultValue: "",
  affectsLayout: view_1.isAndroid
});
exports.textProperty.register(TextBaseCommon);
exports.formattedTextProperty = new view_1.Property({
  name: "formattedText",
  affectsLayout: true,
  valueChanged: onFormattedTextPropertyChanged
});
exports.formattedTextProperty.register(TextBaseCommon);

function onFormattedTextPropertyChanged(textBase, oldValue, newValue) {
  if (oldValue) {
    oldValue.off(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);

    textBase._removeView(oldValue);
  }

  if (newValue) {
    var oldParent = newValue.parent;

    if (oldParent) {
      oldParent._removeView(newValue);
    }

    textBase._addView(newValue);

    newValue.on(view_1.Observable.propertyChangeEvent, textBase._onFormattedTextContentsChanged, textBase);
  }
}

var textAlignmentConverter = view_1.makeParser(view_1.makeValidator("initial", "left", "center", "right"));
exports.textAlignmentProperty = new view_1.InheritedCssProperty({
  name: "textAlignment",
  cssName: "text-align",
  defaultValue: "initial",
  valueConverter: textAlignmentConverter
});
exports.textAlignmentProperty.register(view_1.Style);
var textTransformConverter = view_1.makeParser(view_1.makeValidator("initial", "none", "capitalize", "uppercase", "lowercase"));
exports.textTransformProperty = new view_1.CssProperty({
  name: "textTransform",
  cssName: "text-transform",
  defaultValue: "initial",
  valueConverter: textTransformConverter
});
exports.textTransformProperty.register(view_1.Style);
var whiteSpaceConverter = view_1.makeParser(view_1.makeValidator("initial", "normal", "nowrap"));
exports.whiteSpaceProperty = new view_1.CssProperty({
  name: "whiteSpace",
  cssName: "white-space",
  defaultValue: "initial",
  affectsLayout: view_1.isIOS,
  valueConverter: whiteSpaceConverter
});
exports.whiteSpaceProperty.register(view_1.Style);
var textDecorationConverter = view_1.makeParser(view_1.makeValidator("none", "underline", "line-through", "underline line-through"));
exports.textDecorationProperty = new view_1.CssProperty({
  name: "textDecoration",
  cssName: "text-decoration",
  defaultValue: "none",
  valueConverter: textDecorationConverter
});
exports.textDecorationProperty.register(view_1.Style);
exports.letterSpacingProperty = new view_1.CssProperty({
  name: "letterSpacing",
  cssName: "letter-spacing",
  defaultValue: 0,
  affectsLayout: view_1.isIOS,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.letterSpacingProperty.register(view_1.Style);
exports.lineHeightProperty = new view_1.CssProperty({
  name: "lineHeight",
  cssName: "line-height",
  affectsLayout: view_1.isIOS,
  valueConverter: function (v) {
    return parseFloat(v);
  }
});
exports.lineHeightProperty.register(view_1.Style);
exports.resetSymbol = Symbol("textPropertyDefault");

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-base/text-base.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var font_1 = __webpack_require__("../node_modules/tns-core-modules/ui/styling/font.js");

var text_base_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js");

var types_1 = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-base/text-base-common.js"));

var TextBase = function (_super) {
  __extends(TextBase, _super);

  function TextBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextBase.prototype[text_base_common_1.textProperty.getDefault] = function () {
    return text_base_common_1.resetSymbol;
  };

  TextBase.prototype[text_base_common_1.textProperty.setNative] = function (value) {
    var reset = value === text_base_common_1.resetSymbol;

    if (!reset && this.formattedText) {
      return;
    }

    this._setNativeText(reset);

    this._requestLayoutOnTextChanged();
  };

  TextBase.prototype[text_base_common_1.formattedTextProperty.setNative] = function (value) {
    this._setNativeText();

    text_base_common_1.textProperty.nativeValueChange(this, !value ? "" : value.toString());

    this._requestLayoutOnTextChanged();
  };

  TextBase.prototype[text_base_common_1.colorProperty.getDefault] = function () {
    var nativeView = this.nativeTextViewProtected;

    if (nativeView instanceof UIButton) {
      return nativeView.titleColorForState(0);
    } else {
      return nativeView.textColor;
    }
  };

  TextBase.prototype[text_base_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof text_base_common_1.Color ? value.ios : value;
    var nativeView = this.nativeTextViewProtected;

    if (nativeView instanceof UIButton) {
      nativeView.setTitleColorForState(color, 0);
      nativeView.titleLabel.textColor = color;
    } else {
      nativeView.textColor = color;
    }
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.getDefault] = function () {
    var nativeView = this.nativeTextViewProtected;
    nativeView = nativeView instanceof UIButton ? nativeView.titleLabel : nativeView;
    return nativeView.font;
  };

  TextBase.prototype[text_base_common_1.fontInternalProperty.setNative] = function (value) {
    if (!(value instanceof font_1.Font) || !this.formattedText) {
      var nativeView = this.nativeTextViewProtected;
      nativeView = nativeView instanceof UIButton ? nativeView.titleLabel : nativeView;
      var font = value instanceof font_1.Font ? value.getUIFont(nativeView.font) : value;
      nativeView.font = font;
    }
  };

  TextBase.prototype[text_base_common_1.textAlignmentProperty.setNative] = function (value) {
    var nativeView = this.nativeTextViewProtected;

    switch (value) {
      case "initial":
      case "left":
        nativeView.textAlignment = 0;
        break;

      case "center":
        nativeView.textAlignment = 1;
        break;

      case "right":
        nativeView.textAlignment = 2;
        break;
    }
  };

  TextBase.prototype[text_base_common_1.textDecorationProperty.setNative] = function (value) {
    this._setNativeText();
  };

  TextBase.prototype[text_base_common_1.textTransformProperty.setNative] = function (value) {
    this._setNativeText();
  };

  TextBase.prototype[text_base_common_1.letterSpacingProperty.setNative] = function (value) {
    this._setNativeText();
  };

  TextBase.prototype[text_base_common_1.lineHeightProperty.setNative] = function (value) {
    this._setNativeText();
  };

  TextBase.prototype._setNativeText = function (reset) {
    if (reset === void 0) {
      reset = false;
    }

    if (reset) {
      var nativeView = this.nativeTextViewProtected;

      if (nativeView instanceof UIButton) {
        nativeView.setAttributedTitleForState(null, 0);
        nativeView.setTitleForState(null, 0);
      } else {
        nativeView.attributedText = null;
        nativeView.text = null;
      }

      return;
    }

    if (this.formattedText) {
      this.setFormattedTextDecorationAndTransform();
    } else {
      this.setTextDecorationAndTransform();
    }
  };

  TextBase.prototype.setFormattedTextDecorationAndTransform = function () {
    var attrText = this.createNSMutableAttributedString(this.formattedText);

    if (this.letterSpacing !== 0) {
      attrText.addAttributeValueRange(NSKernAttributeName, this.letterSpacing * this.nativeTextViewProtected.font.pointSize, {
        location: 0,
        length: attrText.length
      });
    }

    if (this.style.lineHeight) {
      var paragraphStyle = NSMutableParagraphStyle.alloc().init();
      paragraphStyle.lineSpacing = this.lineHeight;
      paragraphStyle.alignment = this.nativeTextViewProtected.textAlignment;

      if (this.nativeTextViewProtected instanceof UILabel) {
        paragraphStyle.lineBreakMode = this.nativeTextViewProtected.lineBreakMode;
      }

      attrText.addAttributeValueRange(NSParagraphStyleAttributeName, paragraphStyle, {
        location: 0,
        length: attrText.length
      });
    } else if (this.nativeTextViewProtected instanceof UITextView) {
      var paragraphStyle = NSMutableParagraphStyle.alloc().init();
      paragraphStyle.alignment = this.nativeTextViewProtected.textAlignment;
      attrText.addAttributeValueRange(NSParagraphStyleAttributeName, paragraphStyle, {
        location: 0,
        length: attrText.length
      });
    }

    if (this.nativeTextViewProtected instanceof UIButton) {
      this.nativeTextViewProtected.setAttributedTitleForState(attrText, 0);
    } else {
      this.nativeTextViewProtected.attributedText = attrText;
    }
  };

  TextBase.prototype.setTextDecorationAndTransform = function () {
    var style = this.style;
    var dict = new Map();

    switch (style.textDecoration) {
      case "none":
        break;

      case "underline":
        dict.set(NSUnderlineStyleAttributeName, 1);
        break;

      case "line-through":
        dict.set(NSStrikethroughStyleAttributeName, 1);
        break;

      case "underline line-through":
        dict.set(NSUnderlineStyleAttributeName, 1);
        dict.set(NSStrikethroughStyleAttributeName, 1);
        break;

      default:
        throw new Error("Invalid text decoration value: " + style.textDecoration + ". Valid values are: 'none', 'underline', 'line-through', 'underline line-through'.");
    }

    if (style.letterSpacing !== 0) {
      dict.set(NSKernAttributeName, style.letterSpacing * this.nativeTextViewProtected.font.pointSize);
    }

    var isTextView = this.nativeTextViewProtected instanceof UITextView;

    if (style.lineHeight) {
      var paragraphStyle = NSMutableParagraphStyle.alloc().init();
      paragraphStyle.lineSpacing = style.lineHeight;
      paragraphStyle.alignment = this.nativeTextViewProtected.textAlignment;

      if (this.nativeTextViewProtected instanceof UILabel) {
        paragraphStyle.lineBreakMode = this.nativeTextViewProtected.lineBreakMode;
      }

      dict.set(NSParagraphStyleAttributeName, paragraphStyle);
    } else if (isTextView) {
      var paragraphStyle = NSMutableParagraphStyle.alloc().init();
      paragraphStyle.alignment = this.nativeTextViewProtected.textAlignment;
      dict.set(NSParagraphStyleAttributeName, paragraphStyle);
    }

    if (style.color && (dict.size > 0 || isTextView)) {
      dict.set(NSForegroundColorAttributeName, style.color.ios);
    }

    var text = this.text;
    var string = text === undefined || text === null ? "" : text.toString();
    var source = getTransformedText(string, this.textTransform);

    if (dict.size > 0 || isTextView) {
      if (isTextView) {
        dict.set(NSFontAttributeName, this.nativeTextViewProtected.font);
      }

      var result = NSMutableAttributedString.alloc().initWithString(source);
      result.setAttributesRange(dict, {
        location: 0,
        length: source.length
      });

      if (this.nativeTextViewProtected instanceof UIButton) {
        this.nativeTextViewProtected.setAttributedTitleForState(result, 0);
      } else {
        this.nativeTextViewProtected.attributedText = result;
      }
    } else {
      if (this.nativeTextViewProtected instanceof UIButton) {
        this.nativeTextViewProtected.setAttributedTitleForState(null, 0);
        this.nativeTextViewProtected.setTitleForState(source, 0);
      } else {
        this.nativeTextViewProtected.attributedText = undefined;
        this.nativeTextViewProtected.text = source;
      }
    }
  };

  TextBase.prototype.createNSMutableAttributedString = function (formattedString) {
    var mas = NSMutableAttributedString.alloc().init();

    if (formattedString) {
      for (var i = 0, spanStart = 0, length_1 = formattedString.spans.length; i < length_1; i++) {
        var span = formattedString.spans.getItem(i);
        var text = span.text;
        var textTransform = formattedString.parent.textTransform;
        var spanText = text === null || text === undefined ? "" : text.toString();

        if (textTransform !== "none" && textTransform !== "initial") {
          spanText = getTransformedText(spanText, textTransform);
        }

        var nsAttributedString = this.createMutableStringForSpan(span, spanText);
        mas.insertAttributedStringAtIndex(nsAttributedString, spanStart);
        spanStart += spanText.length;
      }
    }

    return mas;
  };

  TextBase.prototype.createMutableStringForSpan = function (span, text) {
    var viewFont = this.nativeTextViewProtected.font;
    var attrDict = {};
    var style = span.style;
    var bold = text_base_common_1.isBold(style.fontWeight);
    var italic = style.fontStyle === "italic";
    var fontFamily = span.fontFamily;
    var fontSize = span.fontSize;

    if (bold || italic || fontFamily || fontSize) {
      var font = new font_1.Font(style.fontFamily, style.fontSize, style.fontStyle, style.fontWeight);
      var iosFont = font.getUIFont(viewFont);
      attrDict[NSFontAttributeName] = iosFont;
    }

    var color = span.color;

    if (color) {
      attrDict[NSForegroundColorAttributeName] = color.ios;
    }

    var backgroundColor = style.backgroundColor || span.parent.backgroundColor || span.parent.parent.backgroundColor;

    if (backgroundColor) {
      attrDict[NSBackgroundColorAttributeName] = backgroundColor.ios;
    }

    var valueSource;

    if (text_base_common_1.textDecorationProperty.isSet(style)) {
      valueSource = style;
    } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.style)) {
      valueSource = span.parent.style;
    } else if (text_base_common_1.textDecorationProperty.isSet(span.parent.parent.style)) {
      valueSource = span.parent.parent.style;
    }

    if (valueSource) {
      var textDecorations = valueSource.textDecoration;
      var underline_1 = textDecorations.indexOf("underline") !== -1;

      if (underline_1) {
        attrDict[NSUnderlineStyleAttributeName] = underline_1;
      }

      var strikethrough = textDecorations.indexOf("line-through") !== -1;

      if (strikethrough) {
        attrDict[NSStrikethroughStyleAttributeName] = strikethrough;
      }
    }

    return NSMutableAttributedString.alloc().initWithStringAttributes(text, attrDict);
  };

  return TextBase;
}(text_base_common_1.TextBaseCommon);

exports.TextBase = TextBase;

function getTransformedText(text, textTransform) {
  if (!text || !types_1.isString(text)) {
    return "";
  }

  switch (textTransform) {
    case "uppercase":
      return NSStringFromNSAttributedString(text).uppercaseString;

    case "lowercase":
      return NSStringFromNSAttributedString(text).lowercaseString;

    case "capitalize":
      return NSStringFromNSAttributedString(text).capitalizedString;

    default:
      return text;
  }
}

exports.getTransformedText = getTransformedText;

function NSStringFromNSAttributedString(source) {
  return NSString.stringWithString(source instanceof NSAttributedString && source.string || source);
}

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"));

var TextFieldBase = function (_super) {
  __extends(TextFieldBase, _super);

  function TextFieldBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextFieldBase.returnPressEvent = "returnPress";
  TextFieldBase = __decorate([editable_text_base_1.CSSType("TextField")], TextFieldBase);
  return TextFieldBase;
}(editable_text_base_1.EditableTextBase);

exports.TextFieldBase = TextFieldBase;
TextFieldBase.prototype.recycleNativeView = "auto";
exports.secureProperty = new editable_text_base_1.Property({
  name: "secure",
  defaultValue: false,
  valueConverter: editable_text_base_1.booleanConverter
});
exports.secureProperty.register(TextFieldBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-field/text-field.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var text_field_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/text-field/text-field-common.js"));

var zeroLength = {
  value: 0,
  unit: "px"
};

var UITextFieldDelegateImpl = function (_super) {
  __extends(UITextFieldDelegateImpl, _super);

  function UITextFieldDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITextFieldDelegateImpl.initWithOwner = function (owner) {
    var delegate = UITextFieldDelegateImpl.new();
    delegate._owner = owner;
    return delegate;
  };

  UITextFieldDelegateImpl.prototype.textFieldShouldBeginEditing = function (textField) {
    this.firstEdit = true;

    var owner = this._owner.get();

    if (owner) {
      return owner.editable;
    }

    return true;
  };

  UITextFieldDelegateImpl.prototype.textFieldDidBeginEditing = function (textField) {
    var owner = this._owner.get();

    if (owner) {
      owner.notify({
        eventName: TextField.focusEvent,
        object: owner
      });
    }
  };

  UITextFieldDelegateImpl.prototype.textFieldDidEndEditing = function (textField) {
    var owner = this._owner.get();

    if (owner) {
      if (owner.updateTextTrigger === "focusLost") {
        text_field_common_1.textProperty.nativeValueChange(owner, textField.text);
      }

      owner.dismissSoftInput();
    }
  };

  UITextFieldDelegateImpl.prototype.textFieldShouldClear = function (textField) {
    this.firstEdit = false;

    var owner = this._owner.get();

    if (owner) {
      text_field_common_1.textProperty.nativeValueChange(owner, "");
    }

    return true;
  };

  UITextFieldDelegateImpl.prototype.textFieldShouldReturn = function (textField) {
    var owner = this._owner.get();

    if (owner) {
      owner.dismissSoftInput();
      owner.notify({
        eventName: TextField.returnPressEvent,
        object: owner
      });
    }

    return true;
  };

  UITextFieldDelegateImpl.prototype.textFieldShouldChangeCharactersInRangeReplacementString = function (textField, range, replacementString) {
    var owner = this._owner.get();

    if (owner) {
      var delta = replacementString.length - range.length;

      if (delta > 0) {
        if (textField.text.length + delta > owner.maxLength) {
          return false;
        }
      }

      if (owner.updateTextTrigger === "textChanged") {
        if (textField.secureTextEntry && this.firstEdit) {
          text_field_common_1.textProperty.nativeValueChange(owner, replacementString);
        } else {
          if (range.location <= textField.text.length) {
            var newText = NSString.stringWithString(textField.text).stringByReplacingCharactersInRangeWithString(range, replacementString);
            text_field_common_1.textProperty.nativeValueChange(owner, newText);
          }
        }
      }

      if (owner.formattedText) {
        text_field_common_1._updateCharactersInRangeReplacementString(owner.formattedText, range.location, range.length, replacementString);
      }
    }

    this.firstEdit = false;
    return true;
  };

  UITextFieldDelegateImpl.ObjCProtocols = [UITextFieldDelegate];
  return UITextFieldDelegateImpl;
}(NSObject);

var UITextFieldImpl = function (_super) {
  __extends(UITextFieldImpl, _super);

  function UITextFieldImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITextFieldImpl.initWithOwner = function (owner) {
    var handler = UITextFieldImpl.new();
    handler._owner = owner;
    return handler;
  };

  UITextFieldImpl.prototype._getTextRectForBounds = function (bounds) {
    var owner = this._owner ? this._owner.get() : null;

    if (!owner) {
      return bounds;
    }

    var size = bounds.size;
    var x = text_field_common_1.layout.toDeviceIndependentPixels(owner.effectiveBorderLeftWidth + owner.effectivePaddingLeft);
    var y = text_field_common_1.layout.toDeviceIndependentPixels(owner.effectiveBorderTopWidth + owner.effectivePaddingTop);
    var width = text_field_common_1.layout.toDeviceIndependentPixels(text_field_common_1.layout.toDevicePixels(size.width) - (owner.effectiveBorderLeftWidth + owner.effectivePaddingLeft + owner.effectivePaddingRight + owner.effectiveBorderRightWidth));
    var height = text_field_common_1.layout.toDeviceIndependentPixels(text_field_common_1.layout.toDevicePixels(size.height) - (owner.effectiveBorderTopWidth + owner.effectivePaddingTop + owner.effectivePaddingBottom + owner.effectiveBorderBottomWidth));
    return CGRectMake(x, y, width, height);
  };

  UITextFieldImpl.prototype.textRectForBounds = function (bounds) {
    return this._getTextRectForBounds(bounds);
  };

  UITextFieldImpl.prototype.editingRectForBounds = function (bounds) {
    return this._getTextRectForBounds(bounds);
  };

  return UITextFieldImpl;
}(UITextField);

var TextField = function (_super) {
  __extends(TextField, _super);

  function TextField() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextField.prototype.createNativeView = function () {
    return UITextFieldImpl.initWithOwner(new WeakRef(this));
  };

  TextField.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._delegate = UITextFieldDelegateImpl.initWithOwner(new WeakRef(this));
  };

  TextField.prototype.disposeNativeView = function () {
    this._delegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  TextField.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.ios.delegate = this._delegate;
  };

  TextField.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Object.defineProperty(TextField.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  TextField.prototype[text_field_common_1.hintProperty.getDefault] = function () {
    return this.nativeTextViewProtected.placeholder;
  };

  TextField.prototype[text_field_common_1.hintProperty.setNative] = function (value) {
    this._updateAttributedPlaceholder();
  };

  TextField.prototype[text_field_common_1.secureProperty.getDefault] = function () {
    return this.nativeTextViewProtected.secureTextEntry;
  };

  TextField.prototype[text_field_common_1.secureProperty.setNative] = function (value) {
    this.nativeTextViewProtected.secureTextEntry = value;
  };

  TextField.prototype[text_field_common_1.colorProperty.getDefault] = function () {
    return {
      textColor: this.nativeTextViewProtected.textColor,
      tintColor: this.nativeTextViewProtected.tintColor
    };
  };

  TextField.prototype[text_field_common_1.colorProperty.setNative] = function (value) {
    if (value instanceof text_field_common_1.Color) {
      var color = value instanceof text_field_common_1.Color ? value.ios : value;
      this.nativeTextViewProtected.textColor = color;
      this.nativeTextViewProtected.tintColor = color;
    } else {
      this.nativeTextViewProtected.textColor = value.textColor;
      this.nativeTextViewProtected.tintColor = value.tintColor;
    }
  };

  TextField.prototype[text_field_common_1.placeholderColorProperty.getDefault] = function () {
    return null;
  };

  TextField.prototype[text_field_common_1.placeholderColorProperty.setNative] = function (value) {
    this._updateAttributedPlaceholder();
  };

  TextField.prototype._updateAttributedPlaceholder = function () {
    var stringValue = this.hint;

    if (stringValue === null || stringValue === void 0) {
      stringValue = "";
    } else {
      stringValue = stringValue + "";
    }

    if (stringValue === "") {
      stringValue = " ";
    }

    var attributes = {};

    if (this.style.placeholderColor) {
      attributes[NSForegroundColorAttributeName] = this.style.placeholderColor.ios;
    }

    var attributedPlaceholder = NSAttributedString.alloc().initWithStringAttributes(stringValue, attributes);
    this.nativeTextViewProtected.attributedPlaceholder = attributedPlaceholder;
  };

  TextField.prototype[text_field_common_1.paddingTopProperty.getDefault] = function () {
    return zeroLength;
  };

  TextField.prototype[text_field_common_1.paddingTopProperty.setNative] = function (value) {};

  TextField.prototype[text_field_common_1.paddingRightProperty.getDefault] = function () {
    return zeroLength;
  };

  TextField.prototype[text_field_common_1.paddingRightProperty.setNative] = function (value) {};

  TextField.prototype[text_field_common_1.paddingBottomProperty.getDefault] = function () {
    return zeroLength;
  };

  TextField.prototype[text_field_common_1.paddingBottomProperty.setNative] = function (value) {};

  TextField.prototype[text_field_common_1.paddingLeftProperty.getDefault] = function () {
    return zeroLength;
  };

  TextField.prototype[text_field_common_1.paddingLeftProperty.setNative] = function (value) {};

  __decorate([profiling_1.profile], TextField.prototype, "onLoaded", null);

  return TextField;
}(text_field_common_1.TextFieldBase);

exports.TextField = TextField;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/text-view/text-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var editable_text_base_1 = __webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/editable-text-base/editable-text-base.js"));

var UITextViewDelegateImpl = function (_super) {
  __extends(UITextViewDelegateImpl, _super);

  function UITextViewDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITextViewDelegateImpl.initWithOwner = function (owner) {
    var impl = UITextViewDelegateImpl.new();
    impl._owner = owner;
    return impl;
  };

  UITextViewDelegateImpl.prototype.textViewShouldBeginEditing = function (textView) {
    var owner = this._owner.get();

    if (owner) {
      owner.showText();
    }

    return true;
  };

  UITextViewDelegateImpl.prototype.textViewDidBeginEditing = function (textView) {
    var owner = this._owner.get();

    if (owner) {
      owner._isEditing = true;
      owner.notify({
        eventName: TextView.focusEvent,
        object: owner
      });
    }
  };

  UITextViewDelegateImpl.prototype.textViewDidEndEditing = function (textView) {
    var owner = this._owner.get();

    if (owner) {
      if (owner.updateTextTrigger === "focusLost") {
        editable_text_base_1.textProperty.nativeValueChange(owner, textView.text);
      }

      owner._isEditing = false;
      owner.dismissSoftInput();

      owner._refreshHintState(owner.hint, textView.text);
    }
  };

  UITextViewDelegateImpl.prototype.textViewDidChange = function (textView) {
    var owner = this._owner.get();

    if (owner) {
      if (owner.updateTextTrigger === "textChanged") {
        editable_text_base_1.textProperty.nativeValueChange(owner, textView.text);
      }

      owner.requestLayout();
    }
  };

  UITextViewDelegateImpl.prototype.textViewShouldChangeTextInRangeReplacementText = function (textView, range, replacementString) {
    var owner = this._owner.get();

    if (owner) {
      var delta = replacementString.length - range.length;

      if (delta > 0) {
        if (textView.text.length + delta > owner.maxLength) {
          return false;
        }
      }

      if (owner.formattedText) {
        editable_text_base_1._updateCharactersInRangeReplacementString(owner.formattedText, range.location, range.length, replacementString);
      }
    }

    return true;
  };

  UITextViewDelegateImpl.prototype.scrollViewDidScroll = function (sv) {
    var owner = this._owner.get();

    if (owner) {
      var contentOffset = owner.nativeViewProtected.contentOffset;
      owner.notify({
        object: owner,
        eventName: "scroll",
        scrollX: contentOffset.x,
        scrollY: contentOffset.y
      });
    }
  };

  UITextViewDelegateImpl.ObjCProtocols = [UITextViewDelegate];
  return UITextViewDelegateImpl;
}(NSObject);

var NoScrollAnimationUITextView = function (_super) {
  __extends(NoScrollAnimationUITextView, _super);

  function NoScrollAnimationUITextView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  NoScrollAnimationUITextView.prototype.setContentOffsetAnimated = function (contentOffset, animated) {
    _super.prototype.setContentOffsetAnimated.call(this, contentOffset, false);
  };

  return NoScrollAnimationUITextView;
}(UITextView);

var TextView = function (_super) {
  __extends(TextView, _super);

  function TextView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TextView.prototype.createNativeView = function () {
    var textView = NoScrollAnimationUITextView.new();

    if (!textView.font) {
      textView.font = UIFont.systemFontOfSize(12);
    }

    return textView;
  };

  TextView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._delegate = UITextViewDelegateImpl.initWithOwner(new WeakRef(this));
  };

  TextView.prototype.disposeNativeView = function () {
    this._delegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  TextView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.ios.delegate = this._delegate;
  };

  TextView.prototype.onUnloaded = function () {
    this.ios.delegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Object.defineProperty(TextView.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  TextView.prototype._refreshHintState = function (hint, text) {
    if (this.formattedText) {
      return;
    }

    if (text !== null && text !== undefined && text !== "") {
      this.showText();
    } else if (!this._isEditing && hint !== null && hint !== undefined && hint !== "") {
      this.showHint(hint);
    } else {
      this._isShowingHint = false;
      this.nativeTextViewProtected.text = "";
    }
  };

  TextView.prototype._refreshColor = function () {
    if (this._isShowingHint) {
      var placeholderColor = this.style.placeholderColor;
      var color = this.style.color;

      if (placeholderColor) {
        this.nativeTextViewProtected.textColor = placeholderColor.ios;
      } else if (color) {
        this.nativeTextViewProtected.textColor = color.ios.colorWithAlphaComponent(0.22);
      } else {
        this.nativeTextViewProtected.textColor = UIColor.blackColor.colorWithAlphaComponent(0.22);
      }
    } else {
      var color = this.style.color;

      if (color) {
        this.nativeTextViewProtected.textColor = color.ios;
        this.nativeTextViewProtected.tintColor = color.ios;
      } else {
        this.nativeTextViewProtected.textColor = null;
        this.nativeTextViewProtected.tintColor = null;
      }
    }
  };

  TextView.prototype.showHint = function (hint) {
    var nativeView = this.nativeTextViewProtected;
    this._isShowingHint = true;

    this._refreshColor();

    var hintAsString = hint === null || hint === undefined ? "" : hint.toString();
    nativeView.text = hintAsString;
  };

  TextView.prototype.showText = function () {
    this._isShowingHint = false;

    this._refreshColor();

    this._setNativeText();

    this.requestLayout();
  };

  TextView.prototype[editable_text_base_1.textProperty.getDefault] = function () {
    return "";
  };

  TextView.prototype[editable_text_base_1.textProperty.setNative] = function (value) {
    this._refreshHintState(this.hint, value);
  };

  TextView.prototype[editable_text_base_1.hintProperty.getDefault] = function () {
    return "";
  };

  TextView.prototype[editable_text_base_1.hintProperty.setNative] = function (value) {
    this._refreshHintState(value, this.text);
  };

  TextView.prototype[editable_text_base_1.editableProperty.getDefault] = function () {
    return this.nativeTextViewProtected.editable;
  };

  TextView.prototype[editable_text_base_1.editableProperty.setNative] = function (value) {
    this.nativeTextViewProtected.editable = value;
  };

  TextView.prototype[editable_text_base_1.colorProperty.setNative] = function (color) {
    this._refreshColor();
  };

  TextView.prototype[editable_text_base_1.placeholderColorProperty.setNative] = function (value) {
    this._refreshColor();
  };

  TextView.prototype[editable_text_base_1.borderTopWidthProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.top,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.borderTopWidthProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var top = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingTop + this.effectiveBorderTopWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: top,
      left: inset.left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  TextView.prototype[editable_text_base_1.borderRightWidthProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.right,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.borderRightWidthProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var right = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingRight + this.effectiveBorderRightWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: inset.left,
      bottom: inset.bottom,
      right: right
    };
  };

  TextView.prototype[editable_text_base_1.borderBottomWidthProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.bottom,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.borderBottomWidthProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var bottom = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingBottom + this.effectiveBorderBottomWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: inset.left,
      bottom: bottom,
      right: inset.right
    };
  };

  TextView.prototype[editable_text_base_1.borderLeftWidthProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.left,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.borderLeftWidthProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var left = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingLeft + this.effectiveBorderLeftWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  TextView.prototype[editable_text_base_1.paddingTopProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.top,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.paddingTopProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var top = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingTop + this.effectiveBorderTopWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: top,
      left: inset.left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  TextView.prototype[editable_text_base_1.paddingRightProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.right,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.paddingRightProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var right = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingRight + this.effectiveBorderRightWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: inset.left,
      bottom: inset.bottom,
      right: right
    };
  };

  TextView.prototype[editable_text_base_1.paddingBottomProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.bottom,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.paddingBottomProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var bottom = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingBottom + this.effectiveBorderBottomWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: inset.left,
      bottom: bottom,
      right: inset.right
    };
  };

  TextView.prototype[editable_text_base_1.paddingLeftProperty.getDefault] = function () {
    return {
      value: this.nativeTextViewProtected.textContainerInset.left,
      unit: "px"
    };
  };

  TextView.prototype[editable_text_base_1.paddingLeftProperty.setNative] = function (value) {
    var inset = this.nativeTextViewProtected.textContainerInset;
    var left = editable_text_base_1.layout.toDeviceIndependentPixels(this.effectivePaddingLeft + this.effectiveBorderLeftWidth);
    this.nativeTextViewProtected.textContainerInset = {
      top: inset.top,
      left: left,
      bottom: inset.bottom,
      right: inset.right
    };
  };

  __decorate([profiling_1.profile], TextView.prototype, "onLoaded", null);

  TextView = __decorate([editable_text_base_1.CSSType("TextView")], TextView);
  return TextView;
}(editable_text_base_1.EditableTextBase);

exports.TextView = TextView;
TextView.prototype.recycleNativeView = "auto";

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

var dateComparer = function (x, y) {
  return x <= y && x >= y;
};

function getValidTime(picker, hour, minute) {
  if (picker.minuteInterval > 1) {
    var minuteFloor = minute - minute % picker.minuteInterval;
    minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);

    if (minute === 60) {
      hour++;
      minute = 0;
    }
  }

  var time = {
    hour: hour,
    minute: minute
  };

  if (!isLessThanMaxTime(picker, hour, minute)) {
    time = {
      hour: picker.maxHour,
      minute: picker.maxMinute
    };
  }

  if (!isGreaterThanMinTime(picker, hour, minute)) {
    time = {
      hour: picker.minHour,
      minute: picker.minMinute
    };
  }

  return time;
}

exports.getValidTime = getValidTime;

function isValidTime(picker) {
  return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}

function isHourValid(value) {
  return typeof value === "number" && value >= 0 && value <= 23;
}

function isMinuteValid(value) {
  return typeof value === "number" && value >= 0 && value <= 59;
}

function isMinuteIntervalValid(value) {
  return typeof value === "number" && value >= 1 && value <= 30 && 60 % value === 0;
}

function getMinutes(hour) {
  return hour * 60;
}

function isDefined(value) {
  return value !== undefined;
}

exports.isDefined = isDefined;

function isGreaterThanMinTime(picker, hour, minute) {
  if (picker.minHour === undefined || picker.minMinute === undefined) {
    return true;
  }

  return getMinutes(hour !== undefined ? hour : picker.hour) + (minute !== undefined ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}

function isLessThanMaxTime(picker, hour, minute) {
  if (!isDefined(picker.maxHour) || !isDefined(picker.maxMinute)) {
    return true;
  }

  return getMinutes(isDefined(hour) ? hour : picker.hour) + (isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}

function toString(value) {
  if (value instanceof Date) {
    return value + "";
  }

  return value < 10 ? "0" + value : "" + value;
}

function getMinMaxTimeErrorMessage(picker) {
  return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}

function getErrorMessage(picker, propertyName, newValue) {
  return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}

var TimePickerBase = function (_super) {
  __extends(TimePickerBase, _super);

  function TimePickerBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  TimePickerBase = __decorate([view_1.CSSType("TimePicker")], TimePickerBase);
  return TimePickerBase;
}(view_1.View);

exports.TimePickerBase = TimePickerBase;
TimePickerBase.prototype.recycleNativeView = "auto";
exports.minHourProperty = new view_1.Property({
  name: "minHour",
  defaultValue: 0,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minHour", newValue));
    }
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.minHourProperty.register(TimePickerBase);
exports.maxHourProperty = new view_1.Property({
  name: "maxHour",
  defaultValue: 23,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "maxHour", newValue));
    }
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.maxHourProperty.register(TimePickerBase);
exports.minMinuteProperty = new view_1.Property({
  name: "minMinute",
  defaultValue: 0,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minMinute", newValue));
    }
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.minMinuteProperty.register(TimePickerBase);
exports.maxMinuteProperty = new view_1.Property({
  name: "maxMinute",
  defaultValue: 59,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "maxMinute", newValue));
    }
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.maxMinuteProperty.register(TimePickerBase);
exports.minuteIntervalProperty = new view_1.Property({
  name: "minuteInterval",
  defaultValue: 1,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isMinuteIntervalValid(newValue)) {
      throw new Error(getErrorMessage(picker, "minuteInterval", newValue));
    }
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.minuteIntervalProperty.register(TimePickerBase);
exports.minuteProperty = new view_1.Property({
  name: "minute",
  defaultValue: 0,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isMinuteValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "minute", newValue));
    }

    picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.minuteProperty.register(TimePickerBase);
exports.hourProperty = new view_1.Property({
  name: "hour",
  defaultValue: 0,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isHourValid(newValue) || !isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "Hour", newValue));
    }

    picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
  },
  valueConverter: function (v) {
    return parseInt(v);
  }
});
exports.hourProperty.register(TimePickerBase);
exports.timeProperty = new view_1.Property({
  name: "time",
  defaultValue: new Date(),
  equalityComparer: dateComparer,
  valueChanged: function (picker, oldValue, newValue) {
    if (!isValidTime(picker)) {
      throw new Error(getErrorMessage(picker, "time", newValue));
    }

    picker.hour = newValue.getHours();
    picker.minute = newValue.getMinutes();
  }
});
exports.timeProperty.register(TimePickerBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/time-picker/time-picker.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var time_picker_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js");

var utils_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils.js");

var getter = utils_1.ios.getter;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/time-picker/time-picker-common.js"));

function getDate(hour, minute) {
  var components = NSDateComponents.alloc().init();
  components.hour = hour;
  components.minute = minute;
  return getter(NSCalendar, NSCalendar.currentCalendar).dateFromComponents(components);
}

function getComponents(date) {
  return getter(NSCalendar, NSCalendar.currentCalendar).componentsFromDate(32 | 64, date);
}

var TimePicker = function (_super) {
  __extends(TimePicker, _super);

  function TimePicker() {
    var _this = _super.call(this) || this;

    var components = getComponents(NSDate.date());
    _this.hour = components.hour;
    _this.minute = components.minute;
    return _this;
  }

  TimePicker.prototype.createNativeView = function () {
    var picker = UIDatePicker.new();
    picker.datePickerMode = 0;
    return picker;
  };

  TimePicker.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._changeHandler = UITimePickerChangeHandlerImpl.initWithOwner(new WeakRef(this));
    this.nativeViewProtected.addTargetActionForControlEvents(this._changeHandler, "valueChanged", 4096);
  };

  TimePicker.prototype.disposeNativeView = function () {
    this._changeHandler = null;

    _super.prototype.initNativeView.call(this);
  };

  Object.defineProperty(TimePicker.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  TimePicker.prototype[time_picker_common_1.timeProperty.getDefault] = function () {
    return this.nativeViewProtected.date;
  };

  TimePicker.prototype[time_picker_common_1.timeProperty.setNative] = function (value) {
    this.nativeViewProtected.date = getDate(this.hour, this.minute);
  };

  TimePicker.prototype[time_picker_common_1.minuteProperty.getDefault] = function () {
    return this.nativeViewProtected.date.getMinutes();
  };

  TimePicker.prototype[time_picker_common_1.minuteProperty.setNative] = function (value) {
    this.nativeViewProtected.date = getDate(this.hour, value);
  };

  TimePicker.prototype[time_picker_common_1.hourProperty.getDefault] = function () {
    return this.nativeViewProtected.date.getHours();
  };

  TimePicker.prototype[time_picker_common_1.hourProperty.setNative] = function (value) {
    this.nativeViewProtected.date = getDate(value, this.minute);
  };

  TimePicker.prototype[time_picker_common_1.minHourProperty.getDefault] = function () {
    return this.nativeViewProtected.minimumDate ? this.nativeViewProtected.minimumDate.getHours() : 0;
  };

  TimePicker.prototype[time_picker_common_1.minHourProperty.setNative] = function (value) {
    this.nativeViewProtected.minimumDate = getDate(value, this.minute);
  };

  TimePicker.prototype[time_picker_common_1.maxHourProperty.getDefault] = function () {
    return this.nativeViewProtected.maximumDate ? this.nativeViewProtected.maximumDate.getHours() : 24;
  };

  TimePicker.prototype[time_picker_common_1.maxHourProperty.setNative] = function (value) {
    this.nativeViewProtected.maximumDate = getDate(value, this.minute);
  };

  TimePicker.prototype[time_picker_common_1.minMinuteProperty.getDefault] = function () {
    return this.nativeViewProtected.minimumDate ? this.nativeViewProtected.minimumDate.getMinutes() : 0;
  };

  TimePicker.prototype[time_picker_common_1.minMinuteProperty.setNative] = function (value) {
    this.nativeViewProtected.minimumDate = getDate(this.hour, value);
  };

  TimePicker.prototype[time_picker_common_1.maxMinuteProperty.getDefault] = function () {
    return this.nativeViewProtected.maximumDate ? this.nativeViewProtected.maximumDate.getMinutes() : 60;
  };

  TimePicker.prototype[time_picker_common_1.maxMinuteProperty.setNative] = function (value) {
    this.nativeViewProtected.maximumDate = getDate(this.hour, value);
  };

  TimePicker.prototype[time_picker_common_1.minuteIntervalProperty.getDefault] = function () {
    return this.nativeViewProtected.minuteInterval;
  };

  TimePicker.prototype[time_picker_common_1.minuteIntervalProperty.setNative] = function (value) {
    this.nativeViewProtected.minuteInterval = value;
  };

  TimePicker.prototype[time_picker_common_1.colorProperty.getDefault] = function () {
    return this.nativeViewProtected.valueForKey("textColor");
  };

  TimePicker.prototype[time_picker_common_1.colorProperty.setNative] = function (value) {
    var color = value instanceof time_picker_common_1.Color ? value.ios : value;
    this.nativeViewProtected.setValueForKey(color, "textColor");
  };

  return TimePicker;
}(time_picker_common_1.TimePickerBase);

exports.TimePicker = TimePicker;

var UITimePickerChangeHandlerImpl = function (_super) {
  __extends(UITimePickerChangeHandlerImpl, _super);

  function UITimePickerChangeHandlerImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UITimePickerChangeHandlerImpl.initWithOwner = function (owner) {
    var handler = UITimePickerChangeHandlerImpl.new();
    handler._owner = owner;
    return handler;
  };

  UITimePickerChangeHandlerImpl.prototype.valueChanged = function (sender) {
    var owner = this._owner.get();

    if (!owner) {
      return;
    }

    var components = getComponents(sender.date);
    var timeChanged = false;

    if (components.hour !== owner.hour) {
      time_picker_common_1.hourProperty.nativeValueChange(owner, components.hour);
      timeChanged = true;
    }

    if (components.minute !== owner.minute) {
      time_picker_common_1.minuteProperty.nativeValueChange(owner, components.minute);
      timeChanged = true;
    }

    if (timeChanged) {
      time_picker_common_1.timeProperty.nativeValueChange(owner, new Date(0, 0, 0, components.hour, components.minute));
    }
  };

  UITimePickerChangeHandlerImpl.ObjCExposedMethods = {
    "valueChanged": {
      returns: interop.types.void,
      params: [UIDatePicker]
    }
  };
  return UITimePickerChangeHandlerImpl;
}(NSObject);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/fade-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var FadeTransition = function (_super) {
  __extends(FadeTransition, _super);

  function FadeTransition() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FadeTransition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {
    var originalToViewAlpha = toView.alpha;
    var originalFromViewAlpha = fromView.alpha;
    toView.alpha = 0.0;
    fromView.alpha = 1.0;

    switch (operation) {
      case 1:
        containerView.insertSubviewAboveSubview(toView, fromView);
        break;

      case 2:
        containerView.insertSubviewBelowSubview(toView, fromView);
        break;
    }

    var duration = this.getDuration();
    var curve = this.getCurve();
    UIView.animateWithDurationAnimationsCompletion(duration, function () {
      UIView.setAnimationCurve(curve);
      toView.alpha = 1.0;
      fromView.alpha = 0.0;
    }, function (finished) {
      toView.alpha = originalToViewAlpha;
      fromView.alpha = originalFromViewAlpha;
      completion(finished);
    });
  };

  return FadeTransition;
}(transition_1.Transition);

exports.FadeTransition = FadeTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/slide-transition.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var transition_1 = __webpack_require__("../node_modules/tns-core-modules/ui/transition/transition.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

var screenWidth = platform_1.screen.mainScreen.widthDIPs;
var screenHeight = platform_1.screen.mainScreen.heightDIPs;
var leftEdge = CGAffineTransformMakeTranslation(-screenWidth, 0);
var rightEdge = CGAffineTransformMakeTranslation(screenWidth, 0);
var topEdge = CGAffineTransformMakeTranslation(0, -screenHeight);
var bottomEdge = CGAffineTransformMakeTranslation(0, screenHeight);

var SlideTransition = function (_super) {
  __extends(SlideTransition, _super);

  function SlideTransition(direction, duration, curve) {
    var _this = _super.call(this, duration, curve) || this;

    _this._direction = direction;
    return _this;
  }

  SlideTransition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {
    var originalToViewTransform = toView.transform;
    var originalFromViewTransform = fromView.transform;
    var fromViewEndTransform;
    var toViewBeginTransform;
    var push = operation === 1;

    switch (this._direction) {
      case "left":
        toViewBeginTransform = push ? rightEdge : leftEdge;
        fromViewEndTransform = push ? leftEdge : rightEdge;
        break;

      case "right":
        toViewBeginTransform = push ? leftEdge : rightEdge;
        fromViewEndTransform = push ? rightEdge : leftEdge;
        break;

      case "top":
        toViewBeginTransform = push ? bottomEdge : topEdge;
        fromViewEndTransform = push ? topEdge : bottomEdge;
        break;

      case "bottom":
        toViewBeginTransform = push ? topEdge : bottomEdge;
        fromViewEndTransform = push ? bottomEdge : topEdge;
        break;
    }

    toView.transform = toViewBeginTransform;
    fromView.transform = CGAffineTransformIdentity;

    switch (operation) {
      case 1:
        containerView.insertSubviewAboveSubview(toView, fromView);
        break;

      case 2:
        containerView.insertSubviewBelowSubview(toView, fromView);
        break;
    }

    var duration = this.getDuration();
    var curve = this.getCurve();
    UIView.animateWithDurationAnimationsCompletion(duration, function () {
      UIView.setAnimationCurve(curve);
      toView.transform = CGAffineTransformIdentity;
      fromView.transform = fromViewEndTransform;
    }, function (finished) {
      toView.transform = originalToViewTransform;
      fromView.transform = originalFromViewTransform;
      completion(finished);
    });
  };

  return SlideTransition;
}(transition_1.Transition);

exports.SlideTransition = SlideTransition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/transition/transition.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var transitionId = 0;

var Transition = function () {
  function Transition(duration, curve) {
    if (curve === void 0) {
      curve = 0;
    }

    this._duration = duration ? duration / 1000 : 0.35;
    this._curve = curve;
    this._id = transitionId++;
  }

  Transition.prototype.getDuration = function () {
    return this._duration;
  };

  Transition.prototype.getCurve = function () {
    return this._curve;
  };

  Transition.prototype.animateIOSTransition = function (containerView, fromView, toView, operation, completion) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.createAndroidAnimator = function (transitionType) {
    throw new Error("Abstract method call");
  };

  Transition.prototype.toString = function () {
    return "Transition@" + this._id;
  };

  return Transition;
}();

exports.Transition = Transition;

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/web-view/web-view-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var view_1 = __webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js");

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

exports.File = file_system_1.File;
exports.knownFolders = file_system_1.knownFolders;
exports.path = file_system_1.path;

__export(__webpack_require__("../node_modules/tns-core-modules/ui/core/view/view.js"));

exports.srcProperty = new view_1.Property({
  name: "src"
});

var WebViewBase = function (_super) {
  __extends(WebViewBase, _super);

  function WebViewBase() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WebViewBase_1 = WebViewBase;

  WebViewBase.prototype._onLoadFinished = function (url, error) {
    var args = {
      eventName: WebViewBase_1.loadFinishedEvent,
      object: this,
      url: url,
      navigationType: undefined,
      error: error
    };
    this.notify(args);
  };

  WebViewBase.prototype._onLoadStarted = function (url, navigationType) {
    var args = {
      eventName: WebViewBase_1.loadStartedEvent,
      object: this,
      url: url,
      navigationType: navigationType,
      error: undefined
    };
    this.notify(args);
  };

  Object.defineProperty(WebViewBase.prototype, "canGoBack", {
    get: function () {
      throw new Error("This member is abstract.");
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(WebViewBase.prototype, "canGoForward", {
    get: function () {
      throw new Error("This member is abstract.");
    },
    enumerable: true,
    configurable: true
  });

  WebViewBase.prototype[exports.srcProperty.getDefault] = function () {
    return "";
  };

  WebViewBase.prototype[exports.srcProperty.setNative] = function (src) {
    this.stopLoading();

    if (src.indexOf("~/") === 0) {
      src = "file:///" + file_system_1.knownFolders.currentApp().path + "/" + src.substr(2);
    } else if (src.indexOf("/") === 0) {
      src = "file://" + src;
    }

    if (src.toLowerCase().indexOf("file:///") === 0) {
      src = encodeURI(src);
    }

    if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0 || src.toLowerCase().indexOf("file:///") === 0) {
      this._loadUrl(src);
    } else {
      this._loadData(src);
    }
  };

  Object.defineProperty(WebViewBase.prototype, "url", {
    get: function () {
      throw new Error("Property url of WebView is deprecated. Use src instead");
    },
    set: function (value) {
      throw new Error("Property url of WebView is deprecated. Use src instead");
    },
    enumerable: true,
    configurable: true
  });
  var WebViewBase_1;
  WebViewBase.loadStartedEvent = "loadStarted";
  WebViewBase.loadFinishedEvent = "loadFinished";
  WebViewBase = WebViewBase_1 = __decorate([view_1.CSSType("WebView")], WebViewBase);
  return WebViewBase;
}(view_1.ContainerView);

exports.WebViewBase = WebViewBase;
exports.srcProperty.register(WebViewBase);

/***/ }),

/***/ "../node_modules/tns-core-modules/ui/web-view/web-view.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var web_view_common_1 = __webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view-common.js");

var profiling_1 = __webpack_require__("../node_modules/tns-core-modules/profiling/profiling.js");

__export(__webpack_require__("../node_modules/tns-core-modules/ui/web-view/web-view-common.js"));

var WKNavigationDelegateImpl = function (_super) {
  __extends(WKNavigationDelegateImpl, _super);

  function WKNavigationDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WKNavigationDelegateImpl.initWithOwner = function (owner) {
    var handler = WKNavigationDelegateImpl.new();
    handler._owner = owner;
    return handler;
  };

  WKNavigationDelegateImpl.prototype.webViewDecidePolicyForNavigationActionDecisionHandler = function (webView, navigationAction, decisionHandler) {
    var owner = this._owner.get();

    if (owner && navigationAction.request.URL) {
      var navType = "other";

      switch (navigationAction.navigationType) {
        case 0:
          navType = "linkClicked";
          break;

        case 1:
          navType = "formSubmitted";
          break;

        case 2:
          navType = "backForward";
          break;

        case 3:
          navType = "reload";
          break;

        case 4:
          navType = "formResubmitted";
          break;
      }

      decisionHandler(1);

      if (web_view_common_1.traceEnabled()) {
        web_view_common_1.traceWrite("WKNavigationDelegateClass.webViewDecidePolicyForNavigationActionDecisionHandler(" + navigationAction.request.URL.absoluteString + ", " + navigationAction.navigationType + ")", web_view_common_1.traceCategories.Debug);
      }

      owner._onLoadStarted(navigationAction.request.URL.absoluteString, navType);
    }
  };

  WKNavigationDelegateImpl.prototype.webViewDidStartProvisionalNavigation = function (webView, navigation) {
    if (web_view_common_1.traceEnabled()) {
      web_view_common_1.traceWrite("WKNavigationDelegateClass.webViewDidStartProvisionalNavigation(" + webView.URL + ")", web_view_common_1.traceCategories.Debug);
    }
  };

  ;

  WKNavigationDelegateImpl.prototype.webViewDidFinishNavigation = function (webView, navigation) {
    if (web_view_common_1.traceEnabled()) {
      web_view_common_1.traceWrite("WKNavigationDelegateClass.webViewDidFinishNavigation(" + webView.URL + ")", web_view_common_1.traceCategories.Debug);
    }

    var owner = this._owner.get();

    if (owner) {
      var src = owner.src;

      if (webView.URL) {
        src = webView.URL.absoluteString;
      }

      owner._onLoadFinished(src);
    }
  };

  WKNavigationDelegateImpl.prototype.webViewDidFailNavigationWithError = function (webView, navigation, error) {
    var owner = this._owner.get();

    if (owner) {
      var src = owner.src;

      if (webView.URL) {
        src = webView.URL.absoluteString;
      }

      if (web_view_common_1.traceEnabled()) {
        web_view_common_1.traceWrite("WKNavigationDelegateClass.webViewDidFailNavigationWithError(" + error.localizedDescription + ")", web_view_common_1.traceCategories.Debug);
      }

      owner._onLoadFinished(src, error.localizedDescription);
    }
  };

  WKNavigationDelegateImpl.prototype.webViewDidFailProvisionalNavigationWithError = function (webView, navigation, error) {
    var owner = this._owner.get();

    if (owner) {
      var src = owner.src;

      if (webView.URL) {
        src = webView.URL.absoluteString;
      }

      if (web_view_common_1.traceEnabled()) {
        web_view_common_1.traceWrite("WKNavigationDelegateClass.webViewDidFailProvisionalNavigationWithError(" + error.localizedDescription + ")", web_view_common_1.traceCategories.Debug);
      }

      owner._onLoadFinished(src, error.localizedDescription);
    }
  };

  WKNavigationDelegateImpl.ObjCProtocols = [WKNavigationDelegate];
  return WKNavigationDelegateImpl;
}(NSObject);

var WebView = function (_super) {
  __extends(WebView, _super);

  function WebView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  WebView.prototype.createNativeView = function () {
    var jScript = "var meta = document.createElement('meta'); meta.setAttribute('name', 'viewport'); meta.setAttribute('content', 'initial-scale=1.0'); document.getElementsByTagName('head')[0].appendChild(meta);";
    var wkUScript = WKUserScript.alloc().initWithSourceInjectionTimeForMainFrameOnly(jScript, 1, true);
    var wkUController = WKUserContentController.new();
    wkUController.addUserScript(wkUScript);
    var configuration = WKWebViewConfiguration.new();
    configuration.userContentController = wkUController;
    configuration.preferences.setValueForKey(true, "allowFileAccessFromFileURLs");
    return new WKWebView({
      frame: CGRectZero,
      configuration: configuration
    });
  };

  WebView.prototype.initNativeView = function () {
    _super.prototype.initNativeView.call(this);

    this._delegate = WKNavigationDelegateImpl.initWithOwner(new WeakRef(this));
  };

  WebView.prototype.disposeNativeView = function () {
    this._delegate = null;

    _super.prototype.disposeNativeView.call(this);
  };

  WebView.prototype.onLoaded = function () {
    _super.prototype.onLoaded.call(this);

    this.ios.navigationDelegate = this._delegate;
  };

  WebView.prototype.onUnloaded = function () {
    this.ios.navigationDelegate = null;

    _super.prototype.onUnloaded.call(this);
  };

  Object.defineProperty(WebView.prototype, "ios", {
    get: function () {
      return this.nativeViewProtected;
    },
    enumerable: true,
    configurable: true
  });

  WebView.prototype.stopLoading = function () {
    this.ios.stopLoading();
  };

  WebView.prototype._loadUrl = function (src) {
    if (src.startsWith("file:///")) {
      var cachePath = src.substring(0, src.lastIndexOf("/"));
      this.ios.loadFileURLAllowingReadAccessToURL(NSURL.URLWithString(src), NSURL.URLWithString(cachePath));
    } else {
      this.ios.loadRequest(NSURLRequest.requestWithURL(NSURL.URLWithString(src)));
    }
  };

  WebView.prototype._loadData = function (content) {
    this.ios.loadHTMLStringBaseURL(content, NSURL.alloc().initWithString("file:///" + web_view_common_1.knownFolders.currentApp().path + "/"));
  };

  Object.defineProperty(WebView.prototype, "canGoBack", {
    get: function () {
      return this.ios.canGoBack;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(WebView.prototype, "canGoForward", {
    get: function () {
      return this.ios.canGoForward;
    },
    enumerable: true,
    configurable: true
  });

  WebView.prototype.goBack = function () {
    this.ios.goBack();
  };

  WebView.prototype.goForward = function () {
    this.ios.goForward();
  };

  WebView.prototype.reload = function () {
    this.ios.reload();
  };

  __decorate([profiling_1.profile], WebView.prototype, "onLoaded", null);

  return WebView;
}(web_view_common_1.WebViewBase);

exports.WebView = WebView;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/debug.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var file_system_1 = __webpack_require__("../node_modules/tns-core-modules/file-system/file-system.js");

var platform_1 = __webpack_require__("../node_modules/tns-core-modules/platform/platform.js");

exports.debug = true;
var applicationRootPath;

function ensureAppRootPath() {
  if (!applicationRootPath) {
    applicationRootPath = file_system_1.knownFolders.currentApp().path;
    applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
  }
}

var Source = function () {
  function Source(uri, line, column) {
    ensureAppRootPath();

    if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
      this._uri = "file://" + uri.substr(applicationRootPath.length);
    } else {
      this._uri = uri;
    }

    this._line = line;
    this._column = column;
  }

  Object.defineProperty(Source.prototype, "uri", {
    get: function () {
      return this._uri;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "line", {
    get: function () {
      return this._line;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Source.prototype, "column", {
    get: function () {
      return this._column;
    },
    enumerable: true,
    configurable: true
  });

  Source.prototype.toString = function () {
    return this._uri + ":" + this._line + ":" + this._column;
  };

  Source.get = function (object) {
    return object[Source._source];
  };

  Source.set = function (object, src) {
    object[Source._source] = src;
  };

  Source._source = Symbol("source");
  return Source;
}();

exports.Source = Source;

var ScopeError = function (_super) {
  __extends(ScopeError, _super);

  function ScopeError(inner, message) {
    var _this = this;

    var formattedMessage;

    if (message && inner.message) {
      formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
    } else {
      formattedMessage = message || inner.message || undefined;
    }

    _this = _super.call(this, formattedMessage) || this;
    _this.stack = platform_1.isAndroid ? "Error: " + _this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1) : inner.stack;
    _this.message = formattedMessage;
    return _this;
  }

  return ScopeError;
}(Error);

exports.ScopeError = ScopeError;

var SourceError = function (_super) {
  __extends(SourceError, _super);

  function SourceError(child, source, message) {
    return _super.call(this, child, message ? message + " @" + source + "" : source + "") || this;
  }

  return SourceError;
}(ScopeError);

exports.SourceError = SourceError;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/number-utils.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var epsilon = 1E-05;

function areClose(value1, value2) {
  return Math.abs(value1 - value2) < epsilon;
}

exports.areClose = areClose;

function greaterThanOrClose(value1, value2) {
  return value1 > value2 || areClose(value1, value2);
}

exports.greaterThanOrClose = greaterThanOrClose;

function greaterThan(value1, value2) {
  return value1 > value2 && !areClose(value1, value2);
}

exports.greaterThan = greaterThan;

function lessThan(value1, value2) {
  return value1 < value2 && !areClose(value1, value2);
}

exports.lessThan = lessThan;

function isZero(value) {
  return Math.abs(value) < epsilon;
}

exports.isZero = isZero;

function greaterThanZero(value) {
  return value > 0;
}

exports.greaterThanZero = greaterThanZero;

function notNegative(value) {
  return value >= 0;
}

exports.notNegative = notNegative;

exports.radiansToDegrees = function (a) {
  return a * (180 / Math.PI);
};

exports.degreesToRadians = function (a) {
  return a * (Math.PI / 180);
};

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/types.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

function isString(value) {
  return typeof value === "string" || value instanceof String;
}

exports.isString = isString;

function isNumber(value) {
  return typeof value === "number" || value instanceof Number;
}

exports.isNumber = isNumber;

function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}

exports.isBoolean = isBoolean;

function isFunction(value) {
  if (!value) {
    return false;
  }

  return typeof value === "function";
}

exports.isFunction = isFunction;

function isObject(value) {
  if (!value) {
    return false;
  }

  return typeof value === "object";
}

exports.isObject = isObject;

function isUndefined(value) {
  return value === undefined;
}

exports.isUndefined = isUndefined;

function isDefined(value) {
  return typeof value !== "undefined";
}

exports.isDefined = isDefined;

function isNullOrUndefined(value) {
  return value === undefined || value === null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function verifyCallback(value) {
  if (value && !isFunction(value)) {
    throw new TypeError("Callback must be a valid function.");
  }
}

exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;

function getClass(object) {
  return getClassInfo(object).name;
}

exports.getClass = getClass;

function getClassInfo(object) {
  var constructor = object.constructor;
  var result = classInfosMap.get(constructor);

  if (!result) {
    result = new ClassInfo(constructor);
    classInfosMap.set(constructor, result);
  }

  return result;
}

exports.getClassInfo = getClassInfo;

function getBaseClasses(object) {
  var result = [];
  var info = getClassInfo(object);

  while (info) {
    result.push(info.name);
    info = info.baseClassInfo;
  }

  return result;
}

exports.getBaseClasses = getBaseClasses;

var ClassInfo = function () {
  function ClassInfo(typeCosntructor) {
    this._typeCosntructor = typeCosntructor;
  }

  Object.defineProperty(ClassInfo.prototype, "name", {
    get: function () {
      if (!this._name) {
        var results = funcNameRegex.exec(this._typeCosntructor.toString());
        this._name = results && results.length > 1 ? results[1] : "";
      }

      return this._name;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
    get: function () {
      if (isUndefined(this._baseClassInfo)) {
        this._baseClassInfo = ClassInfo._getBase(this);

        if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
          this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
        }
      }

      return this._baseClassInfo;
    },
    enumerable: true,
    configurable: true
  });

  ClassInfo._getBase = function (info) {
    var result = null;
    var constructorProto = info._typeCosntructor.prototype;

    if (constructorProto.__proto__) {
      result = getClassInfo(constructorProto.__proto__);
    }

    return result;
  };

  return ClassInfo;
}();

exports.ClassInfo = ClassInfo;

function toUIString(obj) {
  return isNullOrUndefined(obj) ? "" : obj + "";
}

exports.toUIString = toUIString;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";

function escapeRegexSymbols(source) {
  var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
  return source.replace(escapeRegex, "\\$&");
}

exports.escapeRegexSymbols = escapeRegexSymbols;

function convertString(value) {
  var result;

  if (!types.isString(value)) {
    result = value;
  } else if (value.trim() === "") {
    result = value;
  } else {
    var valueAsNumber = +value;

    if (!isNaN(valueAsNumber)) {
      result = valueAsNumber;
    } else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
      result = value.toLowerCase() === "true" ? true : false;
    } else {
      result = value;
    }
  }

  return result;
}

exports.convertString = convertString;
var layout;

(function (layout) {
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;
  layout.UNSPECIFIED = 0 << MODE_SHIFT;
  layout.EXACTLY = 1 << MODE_SHIFT;
  layout.AT_MOST = 2 << MODE_SHIFT;
  layout.MEASURED_HEIGHT_STATE_SHIFT = 0x00000010;
  layout.MEASURED_STATE_TOO_SMALL = 0x01000000;
  layout.MEASURED_STATE_MASK = 0xff000000;
  layout.MEASURED_SIZE_MASK = 0x00ffffff;

  function getMode(mode) {
    switch (mode) {
      case layout.EXACTLY:
        return "Exact";

      case layout.AT_MOST:
        return "AtMost";

      default:
        return "Unspecified";
    }
  }

  layout.getMode = getMode;

  function getMeasureSpecMode(spec) {
    return spec & MODE_MASK;
  }

  layout.getMeasureSpecMode = getMeasureSpecMode;

  function getMeasureSpecSize(spec) {
    return spec & ~MODE_MASK;
  }

  layout.getMeasureSpecSize = getMeasureSpecSize;

  function measureSpecToString(measureSpec) {
    var mode = getMeasureSpecMode(measureSpec);
    var size = getMeasureSpecSize(measureSpec);
    var text = "MeasureSpec: ";

    if (mode === layout.UNSPECIFIED) {
      text += "UNSPECIFIED ";
    } else if (mode === layout.EXACTLY) {
      text += "EXACTLY ";
    } else if (mode === layout.AT_MOST) {
      text += "AT_MOST ";
    }

    text += size;
    return text;
  }

  layout.measureSpecToString = measureSpecToString;

  function round(value) {
    var res = Math.floor(value + 0.5);

    if (res !== 0) {
      return res;
    } else if (value === 0) {
      return 0;
    } else if (value > 0) {
      return 1;
    }

    return -1;
  }

  layout.round = round;
})(layout = exports.layout || (exports.layout = {}));

function isFileOrResourcePath(path) {
  if (!types.isString(path)) {
    return false;
  }

  return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}

exports.isFileOrResourcePath = isFileOrResourcePath;

function isDataURI(uri) {
  if (!types.isString(uri)) {
    return false;
  }

  var firstSegment = uri.trim().split(",")[0];
  return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}

exports.isDataURI = isDataURI;

function mergeSort(arr, compareFunc) {
  if (arr.length < 2) {
    return arr;
  }

  var middle = arr.length / 2;
  var left = arr.slice(0, middle);
  var right = arr.slice(middle, arr.length);
  return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}

exports.mergeSort = mergeSort;

function merge(left, right, compareFunc) {
  var result = [];

  while (left.length && right.length) {
    if (compareFunc(left[0], right[0]) <= 0) {
      result.push(left.shift());
    } else {
      result.push(right.shift());
    }
  }

  while (left.length) {
    result.push(left.shift());
  }

  while (right.length) {
    result.push(right.shift());
  }

  return result;
}

exports.merge = merge;

function hasDuplicates(arr) {
  return arr.length !== eliminateDuplicates(arr).length;
}

exports.hasDuplicates = hasDuplicates;

function eliminateDuplicates(arr) {
  return Array.from(new Set(arr));
}

exports.eliminateDuplicates = eliminateDuplicates;

/***/ }),

/***/ "../node_modules/tns-core-modules/utils/utils.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

var trace_1 = __webpack_require__("../node_modules/tns-core-modules/trace/trace.js");

var utils_common_1 = __webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js");

__export(__webpack_require__("../node_modules/tns-core-modules/utils/utils-common.js"));

var mainScreenScale;

function isOrientationLandscape(orientation) {
  return orientation === 3 || orientation === 4;
}

var layout;

(function (layout) {
  var MODE_SHIFT = 30;
  var MODE_MASK = 0x3 << MODE_SHIFT;

  function makeMeasureSpec(size, mode) {
    return Math.round(Math.max(0, size)) & ~MODE_MASK | mode & MODE_MASK;
  }

  layout.makeMeasureSpec = makeMeasureSpec;

  function getDisplayDensity() {
    return mainScreenScale;
  }

  layout.getDisplayDensity = getDisplayDensity;

  function toDevicePixels(value) {
    return value * mainScreenScale;
  }

  layout.toDevicePixels = toDevicePixels;

  function toDeviceIndependentPixels(value) {
    return value / mainScreenScale;
  }

  layout.toDeviceIndependentPixels = toDeviceIndependentPixels;

  function measureNativeView(nativeView, width, widthMode, height, heightMode) {
    var view = nativeView;
    var nativeSize = view.sizeThatFits({
      width: widthMode === 0 ? Number.POSITIVE_INFINITY : toDeviceIndependentPixels(width),
      height: heightMode === 0 ? Number.POSITIVE_INFINITY : toDeviceIndependentPixels(height)
    });
    nativeSize.width = utils_common_1.layout.round(toDevicePixels(nativeSize.width));
    nativeSize.height = utils_common_1.layout.round(toDevicePixels(nativeSize.height));
    return nativeSize;
  }

  layout.measureNativeView = measureNativeView;
})(layout = exports.layout || (exports.layout = {}));

var ios;

(function (ios) {
  function getter(_this, property) {
    if (typeof property === "function") {
      return property.call(_this);
    } else {
      return property;
    }
  }

  ios.getter = getter;
  var collections;

  (function (collections) {
    function jsArrayToNSArray(str) {
      return NSArray.arrayWithArray(str);
    }

    collections.jsArrayToNSArray = jsArrayToNSArray;

    function nsArrayToJSArray(a) {
      var arr = [];

      if (a !== undefined) {
        var count = a.count;

        for (var i = 0; i < count; i++) {
          arr.push(a.objectAtIndex(i));
        }
      }

      return arr;
    }

    collections.nsArrayToJSArray = nsArrayToJSArray;
  })(collections = ios.collections || (ios.collections = {}));

  function isLandscape() {
    var device = getter(UIDevice, UIDevice.currentDevice);
    var statusBarOrientation = getter(UIApplication, UIApplication.sharedApplication).statusBarOrientation;
    var isStatusBarOrientationLandscape = isOrientationLandscape(statusBarOrientation);
    return isOrientationLandscape(device.orientation) || isStatusBarOrientationLandscape;
  }

  ios.isLandscape = isLandscape;
  ios.MajorVersion = NSString.stringWithString(getter(UIDevice, UIDevice.currentDevice).systemVersion).intValue;

  function openFile(filePath) {
    try {
      var appPath = getCurrentAppPath();
      var path = filePath.replace("~", appPath);
      var controller = UIDocumentInteractionController.interactionControllerWithURL(NSURL.fileURLWithPath(path));
      controller.delegate = new UIDocumentInteractionControllerDelegateImpl();
      return controller.presentPreviewAnimated(true);
    } catch (e) {
      trace_1.write("Error in openFile", trace_1.categories.Error, trace_1.messageType.error);
    }

    return false;
  }

  ios.openFile = openFile;

  function getCurrentAppPath() {
    var currentDir = __dirname;
    var tnsModulesIndex = currentDir.indexOf("/tns_modules");
    var appPath = currentDir;

    if (tnsModulesIndex !== -1) {
      appPath = currentDir.substring(0, tnsModulesIndex);
    }

    return appPath;
  }

  ios.getCurrentAppPath = getCurrentAppPath;

  function joinPaths() {
    var paths = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      paths[_i] = arguments[_i];
    }

    if (!paths || paths.length === 0) {
      return "";
    }

    return NSString.stringWithString(NSString.pathWithComponents(paths)).stringByStandardizingPath;
  }

  ios.joinPaths = joinPaths;

  function getVisibleViewController(rootViewController) {
    if (rootViewController.presentedViewController) {
      return getVisibleViewController(rootViewController.presentedViewController);
    }

    if (rootViewController.isKindOfClass(UINavigationController.class())) {
      return getVisibleViewController(rootViewController.visibleViewController);
    }

    if (rootViewController.isKindOfClass(UITabBarController.class())) {
      return getVisibleViewController(rootViewController);
    }

    return rootViewController;
  }

  ios.getVisibleViewController = getVisibleViewController;
})(ios = exports.ios || (exports.ios = {}));

function GC() {
  __collect();
}

exports.GC = GC;

function releaseNativeObject(object) {
  __releaseNativeCounterpart(object);
}

exports.releaseNativeObject = releaseNativeObject;

function openUrl(location) {
  try {
    var url = NSURL.URLWithString(location.trim());

    if (ios.getter(UIApplication, UIApplication.sharedApplication).canOpenURL(url)) {
      return ios.getter(UIApplication, UIApplication.sharedApplication).openURL(url);
    }
  } catch (e) {
    trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
  }

  return false;
}

exports.openUrl = openUrl;

var UIDocumentInteractionControllerDelegateImpl = function (_super) {
  __extends(UIDocumentInteractionControllerDelegateImpl, _super);

  function UIDocumentInteractionControllerDelegateImpl() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  UIDocumentInteractionControllerDelegateImpl.prototype.getViewController = function () {
    var app = ios.getter(UIApplication, UIApplication.sharedApplication);
    return app.keyWindow.rootViewController;
  };

  UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerViewControllerForPreview = function (controller) {
    return this.getViewController();
  };

  UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerViewForPreview = function (controller) {
    return this.getViewController().view;
  };

  UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerRectForPreview = function (controller) {
    return this.getViewController().view.frame;
  };

  UIDocumentInteractionControllerDelegateImpl.ObjCProtocols = [UIDocumentInteractionControllerDelegate];
  return UIDocumentInteractionControllerDelegateImpl;
}(NSObject);

mainScreenScale = ios.getter(UIScreen, UIScreen.mainScreen).scale;

/***/ }),

/***/ "../node_modules/tns-core-modules/xhr/xhr.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var http = __webpack_require__("../node_modules/tns-core-modules/http/http.js");

var types = __webpack_require__("../node_modules/tns-core-modules/utils/types.js");

var XMLHttpRequestResponseType;

(function (XMLHttpRequestResponseType) {
  XMLHttpRequestResponseType.empty = "";
  XMLHttpRequestResponseType.text = "text";
  XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));

var XMLHttpRequest = function () {
  function XMLHttpRequest() {
    this.UNSENT = 0;
    this.OPENED = 1;
    this.HEADERS_RECEIVED = 2;
    this.LOADING = 3;
    this.DONE = 4;
    this._responseType = "";
    this.textTypes = ["text/plain", "application/xml", "application/rss+xml", "text/html", "text/xml"];
    this._listeners = new Map();
    this._readyState = this.UNSENT;
  }

  XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
    if (types.isString(method) && types.isString(url)) {
      this._options = {
        url: url,
        method: method
      };
      this._options.headers = {};

      if (types.isString(user)) {
        this._options.headers["user"] = user;
      }

      if (types.isString(password)) {
        this._options.headers["password"] = password;
      }

      this._setReadyState(this.OPENED);
    }
  };

  XMLHttpRequest.prototype.abort = function () {
    this._errorFlag = true;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
      this._readyState = this.UNSENT;
    } else {
      this._setReadyState(this.DONE);
    }
  };

  XMLHttpRequest.prototype.send = function (data) {
    var _this = this;

    this._errorFlag = false;
    this._response = null;
    this._responseTextReader = null;
    this._headers = null;
    this._status = null;

    if (types.isDefined(this._options)) {
      if (types.isString(data) && this._options.method !== "GET") {
        this._options.content = data;
      } else if (data instanceof FormData) {
        this._options.content = data.toString();
      }

      http.request(this._options).then(function (r) {
        if (!_this._errorFlag) {
          _this._loadResponse(r);
        }
      }).catch(function (e) {
        _this._errorFlag = true;

        _this._setReadyState(_this.DONE, e);
      });
    }
  };

  XMLHttpRequest.prototype._loadResponse = function (r) {
    this._status = r.statusCode;
    this._response = r.content.raw + "";
    this._headers = r.headers;

    this._setReadyState(this.HEADERS_RECEIVED);

    this._setReadyState(this.LOADING);

    this._setResponseType();

    this._responseTextReader = function () {
      return r.content.toString();
    };

    this._addToStringOnResponse();

    if (this.responseType === XMLHttpRequestResponseType.json) {
      this._response = JSON.parse(this.responseText);
    } else if (this.responseType === XMLHttpRequestResponseType.text) {
      this._response = this.responseText;
    }

    this._setReadyState(this.DONE);
  };

  XMLHttpRequest.prototype._addToStringOnResponse = function () {
    var _this = this;

    if (types.isObject(this.response)) {
      Object.defineProperty(this._response, "toString", {
        configurable: true,
        enumerable: false,
        writable: true,
        value: function () {
          return _this.responseText;
        }
      });
    }
  };

  XMLHttpRequest.prototype.isTextContentType = function (contentType) {
    var result = false;

    for (var i = 0; i < this.textTypes.length; i++) {
      if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
        result = true;
        break;
      }
    }

    return result;
  };

  XMLHttpRequest.prototype._setResponseType = function () {
    var header = this.getResponseHeader("Content-Type");
    var contentType = header && header.toLowerCase();

    if (contentType) {
      if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
        this.responseType = XMLHttpRequestResponseType.json;
      } else if (this.isTextContentType(contentType)) {
        this.responseType = XMLHttpRequestResponseType.text;
      }
    } else {
      this.responseType = XMLHttpRequestResponseType.text;
    }
  };

  XMLHttpRequest.prototype.addEventListener = function (eventName, handler) {
    if (eventName !== "load" && eventName !== "error" && eventName !== "progress") {
      throw new Error("Event not supported: " + eventName);
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.push(handler);

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.removeEventListener = function (eventName, toDetach) {
    var handlers = this._listeners.get(eventName) || [];
    handlers = handlers.filter(function (handler) {
      return handler !== toDetach;
    });

    this._listeners.set(eventName, handlers);
  };

  XMLHttpRequest.prototype.emitEvent = function (eventName) {
    var args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }

    var handlers = this._listeners.get(eventName) || [];
    handlers.forEach(function (handler) {
      handler.apply(void 0, args);
    });
  };

  XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
    if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
      this._options.headers[header] = value;
    }
  };

  XMLHttpRequest.prototype.getAllResponseHeaders = function () {
    if (this._readyState < 2 || this._errorFlag) {
      return "";
    }

    var result = "";

    for (var i in this._headers) {
      result += i + ": " + this._headers[i] + "\r\n";
    }

    return result.substr(0, result.length - 2);
  };

  XMLHttpRequest.prototype.getResponseHeader = function (header) {
    if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
      header = header.toLowerCase();

      for (var i in this._headers) {
        if (i.toLowerCase() === header) {
          return this._headers[i];
        }
      }
    }

    return null;
  };

  XMLHttpRequest.prototype.overrideMimeType = function (mime) {};

  Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
    get: function () {
      return this._readyState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
    get: function () {
      return this._responseType;
    },
    set: function (value) {
      if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
        this._responseType = value;
      } else {
        throw new Error("Response type of '" + value + "' not supported.");
      }
    },
    enumerable: true,
    configurable: true
  });

  XMLHttpRequest.prototype._setReadyState = function (value, error) {
    if (this._readyState !== value) {
      this._readyState = value;

      if (types.isFunction(this.onreadystatechange)) {
        this.onreadystatechange();
      }
    }

    if (this._readyState === this.DONE) {
      if (this._errorFlag) {
        if (types.isFunction(this.onerror)) {
          this.onerror(error);
        }

        this.emitEvent("error", error);
      } else {
        if (types.isFunction(this.onload)) {
          this.onload();
        }

        this.emitEvent("load");
      }
    }
  };

  Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
    get: function () {
      if (types.isFunction(this._responseTextReader)) {
        return this._responseTextReader();
      }

      return "";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "response", {
    get: function () {
      return this._response;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "status", {
    get: function () {
      return this._status;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
    get: function () {
      if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
        return "";
      }

      return statuses[this._status];
    },
    enumerable: true,
    configurable: true
  });
  return XMLHttpRequest;
}();

exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
  100: "Continue",
  101: "Switching Protocols",
  200: "OK",
  201: "Created",
  202: "Accepted",
  203: "Non - Authoritative Information",
  204: "No Content",
  205: "Reset Content",
  206: "Partial Content",
  300: "Multiple Choices",
  301: "Moved Permanently",
  302: "Found",
  303: "See Other",
  304: "Not Modified",
  305: "Use Proxy",
  307: "Temporary Redirect",
  400: "Bad Request",
  401: "Unauthorized",
  402: "Payment Required",
  403: "Forbidden",
  404: "Not Found",
  405: "Method Not Allowed",
  406: "Not Acceptable",
  407: "Proxy Authentication Required",
  408: "Request Timeout",
  409: "Conflict",
  410: "Gone",
  411: "Length Required",
  412: "Precondition Failed",
  413: "Request Entity Too Large",
  414: "Request - URI Too Long",
  415: "Unsupported Media Type",
  416: "Requested Range Not Satisfiable",
  417: "Expectation Failed",
  500: "Internal Server Error",
  501: "Not Implemented",
  502: "Bad Gateway",
  503: "Service Unavailable",
  504: "Gateway Timeout",
  505: "HTTP Version Not Supported"
};

var FormData = function () {
  function FormData() {
    this._data = new Map();
  }

  FormData.prototype.append = function (name, value) {
    this._data.set(name, value);
  };

  FormData.prototype.toString = function () {
    var arr = new Array();

    this._data.forEach(function (value, name, map) {
      arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
    });

    return arr.join("&");
  };

  return FormData;
}();

exports.FormData = FormData;

/***/ }),

/***/ "../node_modules/tns-core-modules/xml/xml.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var easysax = __webpack_require__("../node_modules/tns-core-modules/js-libs/easysax/easysax.js");

var ParserEventType = function () {
  function ParserEventType() {}

  ParserEventType.StartElement = "StartElement";
  ParserEventType.EndElement = "EndElement";
  ParserEventType.Text = "Text";
  ParserEventType.CDATA = "CDATA";
  ParserEventType.Comment = "Comment";
  return ParserEventType;
}();

exports.ParserEventType = ParserEventType;

var ParserEvent = function () {
  function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
    this._eventType = eventType;
    this._position = position;
    this._prefix = prefix;
    this._namespace = namespace;
    this._elementName = elementName;
    this._attributes = attributes;
    this._data = data;
  }

  ParserEvent.prototype.toString = function () {
    return JSON.stringify({
      eventType: this.eventType,
      position: this.position,
      prefix: this.prefix,
      namespace: this.namespace,
      elementName: this.elementName,
      attributes: this.attributes,
      data: this.data
    });
  };

  Object.defineProperty(ParserEvent.prototype, "eventType", {
    get: function () {
      return this._eventType;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "position", {
    get: function () {
      return this._position;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "prefix", {
    get: function () {
      return this._prefix;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "namespace", {
    get: function () {
      return this._namespace;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "elementName", {
    get: function () {
      return this._elementName;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "attributes", {
    get: function () {
      return this._attributes;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ParserEvent.prototype, "data", {
    get: function () {
      return this._data;
    },
    enumerable: true,
    configurable: true
  });
  return ParserEvent;
}();

exports.ParserEvent = ParserEvent;

var _ampCodes;

var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/ig;

function _generateAmpMap() {
  var objCodes = {
    Tab: 9,
    NewLine: 10,
    excl: 33,
    quot: 34,
    QUOT: 34,
    num: 35,
    dollar: 36,
    percent: 37,
    amp: 38,
    AMP: 38,
    apos: 39,
    lpar: 40,
    rpar: 41,
    ast: 42,
    midast: 42,
    plus: 43,
    comma: 44,
    period: 46,
    sol: 47,
    colon: 58,
    semi: 59,
    lt: 60,
    LT: 60,
    equals: 61,
    gt: 62,
    GT: 62,
    quest: 63,
    commat: 64,
    lsqb: 91,
    lbrack: 91,
    bsol: 92,
    rsqb: 92,
    rbrack: 92,
    Hat: 94,
    lowbar: 95,
    grave: 96,
    DiacriticalGrave: 96,
    lcub: 123,
    lbrace: 123,
    verbar: 124,
    vert: 124,
    VerticalLine: 124,
    rcub: 125,
    rbrace: 125,
    nbsp: 160,
    iexcl: 161,
    cent: 162,
    pound: 163,
    curren: 164,
    yen: 165,
    brvbar: 166,
    brkbar: 166,
    sect: 167,
    uml: 168,
    copy: 169,
    ordf: 170,
    laquo: 171,
    not: 172,
    shy: 173,
    reg: 174,
    macr: 175,
    hibar: 175,
    deg: 176,
    plusmn: 177,
    sup2: 178,
    sup3: 179,
    acute: 180,
    micro: 181,
    para: 182,
    middot: 183,
    cedil: 184,
    sup1: 185,
    ordm: 186,
    raquo: 187,
    frac14: 188,
    frac12: 189,
    frac34: 190,
    iquest: 191,
    Agrave: 192,
    Aacute: 193,
    Acirc: 194,
    Atilde: 195,
    Auml: 196,
    Aring: 197,
    AElig: 198,
    Ccedil: 199,
    Egrave: 200,
    Eacute: 201,
    Ecirc: 202,
    Euml: 203,
    Igrave: 204,
    Iacute: 205,
    Icirc: 206,
    Iuml: 207,
    ETH: 208,
    Dstrok: 208,
    Ntilde: 209,
    Ograve: 210,
    Oacute: 211,
    Ocirc: 212,
    Otilde: 213,
    Ouml: 214,
    times: 215,
    Oslash: 216,
    Ugrave: 217,
    Uacute: 218,
    Ucirc: 219,
    Uuml: 220,
    Yacute: 221,
    THORN: 222,
    szlig: 223,
    agrave: 224,
    aacute: 225,
    acirc: 226,
    atilde: 227,
    auml: 228,
    aring: 229,
    aelig: 230,
    ccedil: 231,
    egrave: 232,
    eacute: 233,
    ecirc: 234,
    euml: 235,
    igrave: 236,
    iacute: 237,
    icirc: 238,
    iuml: 239,
    eth: 240,
    ntilde: 241,
    ograve: 242,
    oacute: 243,
    ocirc: 244,
    otilde: 245,
    ouml: 246,
    divide: 247,
    oslash: 248,
    ugrave: 249,
    uacute: 250,
    ucirc: 251,
    uuml: 252,
    yacute: 253,
    thorn: 254,
    yuml: 255,
    fnof: 402,
    imped: 437,
    gacute: 501,
    jmath: 567,
    circ: 710,
    caron: 711,
    Hacek: 711,
    breve: 728,
    Breve: 728,
    dot: 729,
    DiacriticalDot: 729,
    ring: 730,
    ogon: 731,
    tilde: 732,
    DiacriticalTilde: 732,
    dblac: 733,
    DiacriticalDoubleAcute: 733,
    DownBreve: 785,
    UnderBar: 818,
    Alpha: 913,
    Beta: 914,
    Gamma: 915,
    Delta: 916,
    Epsilon: 917,
    Zeta: 918,
    Eta: 919,
    Theta: 920,
    Iota: 921,
    Kappa: 922,
    Lambda: 923,
    Mu: 924,
    Nu: 925,
    Xi: 926,
    Omicron: 927,
    Pi: 928,
    Rho: 929,
    Sigma: 931,
    Tau: 932,
    Upsilon: 933,
    Phi: 934,
    Chi: 935,
    Psi: 936,
    Omega: 937,
    alpha: 945,
    beta: 946,
    gamma: 947,
    delta: 948,
    epsilon: 949,
    epsiv: 949,
    varepsilon: 949,
    zeta: 950,
    eta: 951,
    theta: 952,
    iota: 953,
    kappa: 954,
    lambda: 955,
    mu: 956,
    nu: 957,
    xi: 958,
    omicron: 959,
    pi: 960,
    rho: 961,
    sigmaf: 962,
    sigmav: 962,
    varsigma: 962,
    sigma: 963,
    tau: 964,
    upsilon: 965,
    phi: 966,
    chi: 967,
    psi: 968,
    omega: 969,
    thetav: 977,
    vartheta: 977,
    thetasym: 977,
    Upsi: 978,
    upsih: 978,
    straightphi: 981,
    piv: 982,
    varpi: 982,
    Gammad: 988,
    gammad: 989,
    digamma: 989,
    kappav: 1008,
    varkappa: 1008,
    rhov: 1009,
    varrho: 1009,
    epsi: 1013,
    straightepsilon: 1013,
    bepsi: 1014,
    backepsilon: 1014,
    euro: 8364,
    trade: 8482,
    TRADE: 8482,
    forall: 8704,
    part: 8706,
    larr: 8592,
    rarr: 8593,
    hyphen: 8208,
    dash: 8208,
    ndash: 8211,
    mdash: 8212,
    horbar: 8213,
    Vert: 8214,
    Verbar: 8214,
    lsquo: 8216,
    OpenCurlyQuote: 8216,
    rsquo: 8217,
    rsquor: 8217,
    CloseCurlyQuote: 8217,
    lsquor: 8218,
    sbquo: 8218,
    ldquo: 8220,
    OpenCurlyDoubleQuote: 8220,
    rdquo: 8221,
    rdquor: 8221,
    CloseCurlyDoubleQuote: 8221,
    ldquor: 8222,
    bdquo: 8222,
    dagger: 8224,
    Dagger: 8225,
    ddagger: 8225,
    bull: 8226,
    bullet: 8226,
    nldr: 8229,
    hellip: 8230,
    mldr: 8230,
    hybull: 8259,
    tdot: 8411,
    TripleDot: 8411,
    DotDot: 8412,
    star: 9734,
    phone: 9742,
    spades: 9824,
    clubs: 9827,
    hearts: 9829,
    diams: 9830,
    female: 9792,
    male: 9794,
    check: 10003,
    checkmark: 10003,
    cross: 10007,
    VerticalSeparator: 10072,
    EmptySmallSquare: 9723,
    FilledSmallSquare: 9724,
    starf: 9733,
    bigstar: 9733,
    square: 9633,
    squ: 9633,
    Square: 9633
  };
  var ampCodes = new Map();

  for (var key in objCodes) {
    if (objCodes.hasOwnProperty(key)) {
      ampCodes.set(key, objCodes[key]);
    }
  }

  return ampCodes;
}

if (global.__snapshot) {
  _ampCodes = _generateAmpMap();
}

function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
  if (wordValue) {
    if (!_ampCodes) {
      _ampCodes = _generateAmpMap();
    }

    var res = _ampCodes.get(wordValue);

    if (res) {
      return String.fromCharCode(res);
    }

    return found;
  }

  if (decimalValue) {
    return String.fromCharCode(parseInt(decimalValue, 10));
  }

  return String.fromCharCode(parseInt(hexValue, 16));
}

;

var XmlParser = function () {
  function XmlParser(onEvent, onError, processNamespaces) {
    this._processNamespaces = processNamespaces;
    this._parser = new easysax.EasySAXParser();
    var that = this;

    this._parser.on("startNode", function (elem, attr, uq, tagend, str, pos) {
      var attributes = attr();

      if (attributes === true) {
        attributes = undefined;
      }

      if (attributes) {
        var key;

        for (key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
          }
        }
      }

      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var stackEntry = XmlParser._getNamespacesStackEntry(attributes);

        that._namespaceStack.push(stackEntry);

        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
    });

    this._parser.on("textNode", function (text, uq, pos) {
      var data = uq(XmlParser._dereferenceEntities(text));
      onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("endNode", function (elem, uq, tagstart, str, pos) {
      var prefix = undefined;
      var namespace = undefined;
      var name = elem;

      if (that._processNamespaces) {
        var resolved = that._resolveNamespace(name);

        prefix = resolved.prefix;
        namespace = resolved.namespace;
        name = resolved.name;
      }

      onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));

      if (that._processNamespaces) {
        that._namespaceStack.pop();
      }
    });

    this._parser.on("cdata", function (data, res, pos) {
      onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
    });

    this._parser.on("comment", function (text, uq, pos) {
      onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
    });

    if (onError) {
      this._parser.on("error", function (msg, pos) {
        onError(new Error(msg), pos());
      });
    }
  }

  Object.defineProperty(XmlParser.prototype, "angularSyntax", {
    get: function () {
      return this._parser.angularSyntax;
    },
    set: function (value) {
      this._parser.angularSyntax = value;
    },
    enumerable: true,
    configurable: true
  });

  XmlParser.prototype.parse = function (xmlString) {
    if (this._processNamespaces) {
      this._namespaceStack = [];
    }

    this._parser.parse(xmlString);
  };

  XmlParser._getNamespacesStackEntry = function (attributes) {
    var stackEntry = {};

    if (!attributes) {
      return stackEntry;
    }

    for (var key in attributes) {
      if (!attributes.hasOwnProperty(key)) {
        continue;
      }

      var attributeName = key;

      if (attributeName.indexOf("xmlns") !== 0) {
        continue;
      }

      var namespacePrefix = "";

      if (attributeName.indexOf(":") !== -1) {
        namespacePrefix = attributeName.split(":")[1];
      }

      stackEntry[namespacePrefix] = attributes[key];
    }

    return stackEntry;
  };

  XmlParser.prototype._resolveNamespace = function (fullName) {
    var result = {
      prefix: undefined,
      namespace: undefined,
      name: undefined
    };
    result.prefix = "";

    if (fullName.indexOf(":") !== -1) {
      var split = fullName.split(":");
      result.prefix = split[0];
      result.name = split[1];
    } else {
      result.name = fullName;
    }

    var i;
    var stackEntry;

    for (i = this._namespaceStack.length - 1; i >= 0; i--) {
      stackEntry = this._namespaceStack[i];

      for (var key in stackEntry) {
        if (!stackEntry.hasOwnProperty(key)) {
          continue;
        }

        if (result.prefix === key) {
          result.namespace = stackEntry[key];
          return result;
        }
      }
    }

    return result;
  };

  XmlParser._dereferenceEntities = function (s) {
    s = String(s);

    if (s.length > 3 && s.indexOf("&") !== -1) {
      s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
    }

    return s;
  };

  return XmlParser;
}();

exports.XmlParser = XmlParser;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/tslib/tslib.es6.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

/***/ }),

/***/ "../node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ })

}]);